ZXZVM v1.17    Z-machine for the Spectrum +3 and PCW    John Elliott, 15-05-2016
(ResiDOS/ZX Spectrum Next ports & misc bug fixes by Garry Lancaster 2006,2019,2021)
(Further bug fixes and optimisations by Shawn Sijnstra 2021)
===================================================================================

        I had played a few Infocom games in the late 1980s (running
        under CP/M on a ghastly Amstrad)

                         -- Graham Nelson, in XYZZYnews 1

  ZXZVM is an Infocom interpreter. Essentially, it allows you to play
adventure games in the Infocom format; these include those games produced
by Infocom themselves, and games produced with Graham Nelson's compiler
Inform.
  Versions 3, 4, 5 and 8 of the format are supported. Nearly all known games
(except the four "Graphical" games) are available in one of these formats.

  Sections in this documentation will be marked:
     [SP]    Applies only to Spectrum +3/+3e, or Spectrum with ResiDOS.
     [NX]    Applies only to ZX Spectrum Next.
     [PCW10] Applies only to PCW8000/9000/10 series computers.
     [PCW16] Applies only to PCW16 computers.
     (unmarked sections apply to all computers).

  If you manage to find a bug in ZXZVM, please let me know, giving me enough
information (possibly in the form of a savefile) to reproduce it.


[NX] Loading ZXZVM
==================
  ZXZVM is supplied as part of the default SD card distribution for the
  ZX Spectrum Next, and is located in the games/Z-Machine/zxzvm directory.
  The source is provided in src/asm/zxzvm.

  It can be run either by:
      * Selecting the NXZXZVM.BAS program in the Browser. This will run ZXZVM
        and allow you to select story files to play.
  or:
      * Selecting a .z3 .z4 .z5 .z7 or .z8 story file in the Browser will
        automatically load ZXZVM and start the story.

  The BASIC program may be modified to change default colours, screen size,
  printer etc, and a font generation program is provided to aid in replacing
  the default fonts. Full details are in the zxzvm-next.doc file.


[SP] Loading ZXZVM
==================

  ZXZVM is supplied as a .TAP file or .TZX file containing an
  installation program. Use zxzvm.tap (or zxzvm.tzx) for the +3/+3e,
  and resizvm.tap (or resizvm.tzx) for Spectrums with ResiDOS.

  Either:

+ Run the .TAP/.TZX file in an emulator with +3/+3e or ResiDOS support

  Or:

+ Use a utility such as playtzx to write the .TAP/.TZX file to a cassette
  tape for loading into a real Spectrum

  Or:

+ Copy the zxzvm.tap file onto a +3 disc
+ Use the TAPROM utilities to extract the files onto a disc or tape

The installation program is self-explanatory; if you wish you can modify
the BASIC program to choose default colours, font and printer etc before
installation. After installation, the program is loaded using:

+ LOAD "zxzvm.bas"      (+3/+3e)
+ LOAD %"resizvm.bas"   (ResiDOS)

If you have a +3e with ResiDOS, you can install both versions to the same
drive and use the appropriate one, depending upon which mode your Spectrum
is in.

You can choose between a 64-character-per-line display and a normal
32-character-per-line display. You may also replace the file zxzvm32.fnt
with your preferred Spectrum font for the 32cpl mode (or use the built-in
one). Note that some games do not display well in 32cpl mode, so if you
have problems, try running in 64cpl mode to see if that helps.

The colour scheme may be changed during play by pressing cursor up (CAPS+7)
to change the paper, and cursor down (CAPS+6) to change the ink.

If you turn on transcripting (usually with the command SCRIPT), the
transcript will be sent to #3, which is normally the printer. You can set
this stream up in the BASIC program. +3e users could even open the stream
to a file to obtain a transcript on disk.

Under ResiDOS, the program will attempt to load as much of the story
as possible into free RAM banks in your hard disk interface. At least 4
free RAM banks (64K) are required. If you wish, you can change the BASIC
program to set a limit on the number of RAM banks that will be used, but
this may slow down the operation of the program when playing large games.

Do not remove the game disc while playing.


[PCW10] Loading ZXZVM
=====================

  Place the files "pcwzvm.com" and "zxzvm.bin" somewhere on the search path
(as set by SETDEF.COM) or on the current disc drive.
  DO NOT USE THE RAMDISC (drive M:) when starting ZXZVM, because the first
thing ZXZVM does is delete all the files on it (without asking!) and load
the game into it.

  To start it, type: PCWZVM <storyname>

  Do not remove the game disc while playing.


[PCW16] Loading ZXZVM
=====================

  ZXZVM is supplied as two files: ANNEIO.PRG and ZXZVM.BIN. These have to be
put on a PCW16-format floppy as "Z-machine" and "Z-machine support"
respectively, with the story file (or files) to play. The file "pcw16.doc"
explains how to do this.
  Once a suitable disc has been made, select "Run external program" from the
PCW16's "Tasks" menu. Click on "Disc", and select "Z-machine". You will then
be asked which game to play.
  Do not remove the game disc while playing.


Features (both positive and negative)
=====================================

  ZXZVM attempts to emulate a full v3/v4/v5/v8 Z-machine, except:

* [SP] No bold text.
* [PCW10] Bold text requires CRTPLUS.FID to be loaded.
* No UNDO command (a memory constraint).
* No sounds other than a beep.
* No Unicode support.
* [PCW16] No support for the graphics font (no. 3)

  It does support:
* [SP][NX][PCW16] Timed input to within 1/10 second
* [PCW10] Timed input to within 1 second
* [SP][NX][PCW10] The graphics font (no. 3)
* Accented characters for output. Accented characters cannot be entered.

  The interpreter number is currently 7 [SP][PCW10] / 2 [PCW16]. That
is, ZXZVM is pretending to be a Commodore 128 on the Spectrum and PCW10,
and an Apple IIe on the PCW16. The difference on the PCW16 is to make sure
that Beyond Zork does not try to use the (non-existent) graphics font.
  The version is 'I'.

  The save-file format is not compatible with Quetzal and does not compress
the saved data.

  ZXZVM was written to version 1.0 of the Z-Machine Standards Document. It
does not claim compliance with it, because it does not implement Unicode
support.


Changes in v1.17
================
* Fixed scan_table opcode to cope with zero-length tables (Shawn Sijnstra).
* Various VM optimisations (Shawn Sijnstra).


Changes in v1.16a
=================
* [NX] Replaced accented fonts with improved versions from Hugo Labrande.


Bugfixes in v1.16
=================
* Fixed @get_cursor opcode to write row first then column.


Bugfixes in v1.15d
==================
* [NX] Ensure border colour is correctly restored after screensaver exits.


Enhancements in v1.15c
======================
* [NX] Now runs at 28MHz rather than 14MHz.


Bug fixes in v1.15b
===================
* [NX] Swapped INV/TRUE VID key actions to match the help text.


Bug fixes in v1.15a
===================
* [NX] Ensure tilemap transparency index is set to the correct (default) value.


Bug fixes and enhancements in v1.15
===================================

* [NX] Added new ZX Spectrum Next version, using the tilemap screen mode to
  provide a clear 80x32 display. The entire story file is loaded into
  memory to optimise performance.

Generic bugfixes:

* Treat property length of 0 as 64 (fixed crash & failures in CZECH.z5).
* Ensure @scan_table fails for byte search if value>=100h
  (fixed 1 tables test in praxix.z5)
* Ensure ZSCII 0 has no effect on any output stream
  (fixed 3 streamtrip tests in praxix.z5)
* Return 0 for @get_prop_len 0 (fixed 1 specfixes test in praxix.z5)
* Fix indirect variable references of SP to not push/pop the stack
  (fixed 16 indirect tests in praxix.z5)
* Fixed arithmetic shift instructions (fixed 34 shift tests in praxix.z5)
* Fixed logical right shift instructions (fixed 21 shift tests in praxix.z5)
* Fixed shifts to be no-ops for shifts of 0 (fixed 14 shift tests in praxix.z5)
* Ensure input is reprinted unbuffered when resuming input (fixes multi-line
  timed input resumes)
* Added new ZXIRES call as hint to I/O modules that input is about to be
  resumed within a timed input (VM v0.5)

[SP] Spectrum +3/ResiDOS version bugfixes:

* Trap BASIC errors to prevent crashes when i/o errors occur during
  transcript output
* Fixed mid-input character insertion corrupting characters at end of input
* Fixed multi-line inputs (previously displayed incorrectly & caused crashes)
* Fixed random memory corruption when an empty input line is read (this was
  seen as corruption to the output of option 3 in etude.z5)
* Fixed a number of issues seen with timed inputs (as tested in test 11 of
  etude.z5), in particular:
    + If an interrupt made no on-screen changes, the input would not be
      resumed at the same place, but be reprinted at the start of a new line
    + If the input being resumed spanned more than 1 screen line, the input
      position was incorrect and crashes could occur
    + The cursor position was not preserved when resuming a timed input,
      making editing very frustrating
    + MORE was not activated if nothing was typed and a screenful of output
      had been produced

* [SP][NX] Both the ZX Spectrum Next version and +3 version now pass all tests
  in the following Z-Machine test suites:
    etude.z5
    gntests.z5
    praxix.z5
    CZECH.z5


Bug fixes and enhancements in v1.14
===================================
* [SP] Fixed incorrect translation of DELETE key
* [SP] Fixed PRINAT routine to correctly limit x to visible screen
* [NX] Partial implementation of new tilemap-based I/O module for
       ZX Spectrum Next (demoed at PLAY Expo Manchester 2019)


Bug fixes and enhancements in v1.13
===================================
* [SP] Replaced model detection check to allow for custom ROMs
* [SP] Avoid using DOS_INIT at exit, which messes with drives & paths
* [SP] Fixed bug which left story file open on exit
* [SP] Added modified BASIC loader for ZX Spectrum Next


Bug fixes and enhancements in v1.12
===================================

* [SP] Two 256-byte instruction and data caches have been added, rather
 than relying on +3DOS to access any byte outside the first 64k of the story
 file. This gives a modest performance improvement.

* The @call_vn opcode with a zero argument would behave like @call_vs and
 attempt to return a value. This would cause the instruction stream to lose
 synchronisation, leading to invalid opcode errors.


The Wish List (in approximate order of priority)
================================================

* Support for the "multiple discs" header bit; this would allow bigger games
to be squeezed into an unexpanded +3 or PCW8256.
* Support for setting the Tandy bit and interpreter number.
  (In fact, you can set the interpreter number already in the Spectrum
   version; the command is  POKE 28675,n  .  But this is not possible
   in the PCW versions).
* Support for v1 and v2 games.
* Unicode support.
* Support for v6 and v7 games.

Acknowledgements
================

  Thanks to: Graham Nelson and those who deduced the Z-machine specification.
             John Holder and the authors of Jzip; several routines in ZXZVM
             are hand-compiled from the Jzip source code.
             Erik Kunze and the authors of XZX, the Spectrum emulator under
             which ZXZVM was developed.
             Cliff Lawson and Richard Wildey, for PCW16 programming info.
             Those on the Z-machine mailing list, for general advice.
             Jacob Nevins, Garry Lancaster, Zeljko Juric and Matthew Logue,
             for bringing bugs to my notice.

