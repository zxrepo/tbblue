
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26, 0
    8008:	e310001f 	tst	r0, #31, 0
    800c:	e3c0001f 	bic	r0, r0, #31, 0
    8010:	e38000d3 	orr	r0, r0, #211, 0	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12, 0
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0, 0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e59fd020 	ldr	sp, [pc, #32]	; 8064 <_start+0x64>
    8040:	f1020012 	cps	#18
    8044:	e59fd01c 	ldr	sp, [pc, #28]	; 8068 <_start+0x68>
    8048:	f1020017 	cps	#23
    804c:	e59fd018 	ldr	sp, [pc, #24]	; 806c <_start+0x6c>
    8050:	f102001b 	cps	#27
    8054:	e59fd010 	ldr	sp, [pc, #16]	; 806c <_start+0x6c>
    8058:	f102001f 	cps	#31
    805c:	e59fd00c 	ldr	sp, [pc, #12]	; 8070 <_start+0x70>
    8060:	ea001ade 	b	ebe0 <sysinit>
    8064:	01030000 	.word	0x01030000
    8068:	01028000 	.word	0x01028000
    806c:	01020000 	.word	0x01020000
    8070:	01018000 	.word	0x01018000

Disassembly of section .text:

00008078 <main>:
    8078:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    807c:	e24dddba 	sub	sp, sp, #11904	; 0x2e80
    8080:	e24dd01c 	sub	sp, sp, #28, 0
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb0001a2 	bl	8718 <CKernel::CKernel()>
    808c:	e1a0000d 	mov	r0, sp
    8090:	eb0001fd 	bl	888c <CKernel::Initialize()>
    8094:	e3500000 	cmp	r0, #0, 0
    8098:	e1a0000d 	mov	r0, sp
    809c:	0a000004 	beq	80b4 <main+0x3c>
    80a0:	eb000240 	bl	89a8 <CKernel::Run()>
    80a4:	e3500002 	cmp	r0, #2, 0
    80a8:	0a000000 	beq	80b0 <main+0x38>
    80ac:	eb001ab3 	bl	eb80 <halt>
    80b0:	eb001ab5 	bl	eb8c <reboot>
    80b4:	eb0001cf 	bl	87f8 <CKernel::~CKernel()>
    80b8:	e3a00001 	mov	r0, #1, 0
    80bc:	e28dddba 	add	sp, sp, #11904	; 0x2e80
    80c0:	e28dd01c 	add	sp, sp, #28, 0
    80c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000080c8 <Nextccel::Nextccel()>:
    80c8:	e3a03001 	mov	r3, #1, 0
    80cc:	e92d4010 	push	{r4, lr}
    80d0:	e1a04000 	mov	r4, r0
    80d4:	e4c03014 	strb	r3, [r0], #20
    80d8:	eb002f13 	bl	13d2c <CFATFileSystem::CFATFileSystem()>
    80dc:	e2840e77 	add	r0, r4, #1904	; 0x770
    80e0:	e3a020ff 	mov	r2, #255, 0	; 0xff
    80e4:	e3a01000 	mov	r1, #0, 0
    80e8:	e280000c 	add	r0, r0, #12, 0
    80ec:	eb001e46 	bl	fa0c <memset>
    80f0:	e3a03000 	mov	r3, #0, 0
    80f4:	e59f200c 	ldr	r2, [pc, #12]	; 8108 <Nextccel::Nextccel()+0x40>
    80f8:	e1a00004 	mov	r0, r4
    80fc:	e5c4387b 	strb	r3, [r4, #2171]	; 0x87b
    8100:	e5823000 	str	r3, [r2]
    8104:	e8bd8010 	pop	{r4, pc}
    8108:	0001cc34 	.word	0x0001cc34

0000810c <Nextccel::~Nextccel()>:
    810c:	e3a03000 	mov	r3, #0, 0
    8110:	e92d4010 	push	{r4, lr}
    8114:	e1a04000 	mov	r4, r0
    8118:	e59f2014 	ldr	r2, [pc, #20]	; 8134 <Nextccel::~Nextccel()+0x28>
    811c:	e5c0387b 	strb	r3, [r0, #2171]	; 0x87b
    8120:	e2800014 	add	r0, r0, #20, 0
    8124:	e5823000 	str	r3, [r2]
    8128:	eb002f17 	bl	13d8c <CFATFileSystem::~CFATFileSystem()>
    812c:	e1a00004 	mov	r0, r4
    8130:	e8bd8010 	pop	{r4, pc}
    8134:	0001cc34 	.word	0x0001cc34

00008138 <Nextccel::Initialize(CSerialDevice*, CEMMCDevice*, CDeviceNameService*, CLogger*)>:
    8138:	e92d4010 	push	{r4, lr}
    813c:	e59dc008 	ldr	ip, [sp, #8]
    8140:	e59fe028 	ldr	lr, [pc, #40]	; 8170 <Nextccel::Initialize(CSerialDevice*, CEMMCDevice*, CDeviceNameService*, CLogger*)+0x38>
    8144:	e5801004 	str	r1, [r0, #4]
    8148:	e5802010 	str	r2, [r0, #16]
    814c:	e5803008 	str	r3, [r0, #8]
    8150:	e580c00c 	str	ip, [r0, #12]
    8154:	e3a02004 	mov	r2, #4, 0
    8158:	e1a0000c 	mov	r0, ip
    815c:	e59e1000 	ldr	r1, [lr]
    8160:	e59f300c 	ldr	r3, [pc, #12]	; 8174 <Nextccel::Initialize(CSerialDevice*, CEMMCDevice*, CDeviceNameService*, CLogger*)+0x3c>
    8164:	eb0008cf 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8168:	e3a00001 	mov	r0, #1, 0
    816c:	e8bd8010 	pop	{r4, pc}
    8170:	0001c8cc 	.word	0x0001c8cc
    8174:	00019670 	.word	0x00019670

00008178 <Nextccel::reconfig()>:
    8178:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    817c:	e59f61bc 	ldr	r6, [pc, #444]	; 8340 <Nextccel::reconfig()+0x1c8>
    8180:	e1a08000 	mov	r8, r0
    8184:	e1a01006 	mov	r1, r6
    8188:	e3a02001 	mov	r2, #1, 0
    818c:	e5900008 	ldr	r0, [r0, #8]
    8190:	e24ddf82 	sub	sp, sp, #520	; 0x208
    8194:	eb00031c 	bl	8e0c <CDeviceNameService::GetDevice(char const*, bool)>
    8198:	e2504000 	subs	r4, r0, #0, 0
    819c:	0a00005f 	beq	8320 <Nextccel::reconfig()+0x1a8>
    81a0:	e2885014 	add	r5, r8, #20, 0
    81a4:	e1a01004 	mov	r1, r4
    81a8:	e1a00005 	mov	r0, r5
    81ac:	eb002f02 	bl	13dbc <CFATFileSystem::Mount(CDevice*)>
    81b0:	e2502000 	subs	r2, r0, #0, 0
    81b4:	0a00003e 	beq	82b4 <Nextccel::reconfig()+0x13c>
    81b8:	e59f4184 	ldr	r4, [pc, #388]	; 8344 <Nextccel::reconfig()+0x1cc>
    81bc:	e1a00005 	mov	r0, r5
    81c0:	e1a01004 	mov	r1, r4
    81c4:	eb002f21 	bl	13e50 <CFATFileSystem::FileOpen(char const*)>
    81c8:	e2506000 	subs	r6, r0, #0, 0
    81cc:	0a000030 	beq	8294 <Nextccel::reconfig()+0x11c>
    81d0:	e1a00005 	mov	r0, r5
    81d4:	e59f116c 	ldr	r1, [pc, #364]	; 8348 <Nextccel::reconfig()+0x1d0>
    81d8:	eb00316a 	bl	14788 <CFATFileSystem::FileCreate(char const*)>
    81dc:	e2507000 	subs	r7, r0, #0, 0
    81e0:	1a000009 	bne	820c <Nextccel::reconfig()+0x94>
    81e4:	ea000022 	b	8274 <Nextccel::reconfig()+0xfc>
    81e8:	e3740001 	cmn	r4, #1, 0
    81ec:	0a000019 	beq	8258 <Nextccel::reconfig()+0xe0>
    81f0:	e1a03004 	mov	r3, r4
    81f4:	e1a01007 	mov	r1, r7
    81f8:	e1a00005 	mov	r0, r5
    81fc:	e28d2008 	add	r2, sp, #8, 0
    8200:	eb00307a 	bl	143f0 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)>
    8204:	e1500004 	cmp	r0, r4
    8208:	1a00003d 	bne	8304 <Nextccel::reconfig()+0x18c>
    820c:	e3a03c02 	mov	r3, #512	; 0x200
    8210:	e1a01006 	mov	r1, r6
    8214:	e1a00005 	mov	r0, r5
    8218:	e28d2008 	add	r2, sp, #8, 0
    821c:	eb002fd6 	bl	1417c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)>
    8220:	e2504000 	subs	r4, r0, #0, 0
    8224:	1affffef 	bne	81e8 <Nextccel::reconfig()+0x70>
    8228:	e1a01007 	mov	r1, r7
    822c:	e1a00005 	mov	r0, r5
    8230:	eb002f59 	bl	13f9c <CFATFileSystem::FileClose(unsigned int)>
    8234:	e2502000 	subs	r2, r0, #0, 0
    8238:	0a00002b 	beq	82ec <Nextccel::reconfig()+0x174>
    823c:	e1a01006 	mov	r1, r6
    8240:	e1a00005 	mov	r0, r5
    8244:	eb002f54 	bl	13f9c <CFATFileSystem::FileClose(unsigned int)>
    8248:	e2502000 	subs	r2, r0, #0, 0
    824c:	0a00001f 	beq	82d0 <Nextccel::reconfig()+0x158>
    8250:	e28ddf82 	add	sp, sp, #520	; 0x208
    8254:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8258:	e59f20ec 	ldr	r2, [pc, #236]	; 834c <Nextccel::reconfig()+0x1d4>
    825c:	e59f30ec 	ldr	r3, [pc, #236]	; 8350 <Nextccel::reconfig()+0x1d8>
    8260:	e5921000 	ldr	r1, [r2]
    8264:	e598000c 	ldr	r0, [r8, #12]
    8268:	e3a02001 	mov	r2, #1, 0
    826c:	eb00088d 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8270:	eaffffec 	b	8228 <Nextccel::reconfig()+0xb0>
    8274:	e59f30d0 	ldr	r3, [pc, #208]	; 834c <Nextccel::reconfig()+0x1d4>
    8278:	e58d4000 	str	r4, [sp]
    827c:	e5931000 	ldr	r1, [r3]
    8280:	e1a02007 	mov	r2, r7
    8284:	e59f30c8 	ldr	r3, [pc, #200]	; 8354 <Nextccel::reconfig()+0x1dc>
    8288:	e598000c 	ldr	r0, [r8, #12]
    828c:	eb000885 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8290:	eaffffdd 	b	820c <Nextccel::reconfig()+0x94>
    8294:	e59f30b0 	ldr	r3, [pc, #176]	; 834c <Nextccel::reconfig()+0x1d4>
    8298:	e58d4000 	str	r4, [sp]
    829c:	e5931000 	ldr	r1, [r3]
    82a0:	e1a02006 	mov	r2, r6
    82a4:	e59f30ac 	ldr	r3, [pc, #172]	; 8358 <Nextccel::reconfig()+0x1e0>
    82a8:	e598000c 	ldr	r0, [r8, #12]
    82ac:	eb00087d 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82b0:	eaffffc6 	b	81d0 <Nextccel::reconfig()+0x58>
    82b4:	e59f3090 	ldr	r3, [pc, #144]	; 834c <Nextccel::reconfig()+0x1d4>
    82b8:	e58d6000 	str	r6, [sp]
    82bc:	e5931000 	ldr	r1, [r3]
    82c0:	e598000c 	ldr	r0, [r8, #12]
    82c4:	e59f3090 	ldr	r3, [pc, #144]	; 835c <Nextccel::reconfig()+0x1e4>
    82c8:	eb000876 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82cc:	eaffffb9 	b	81b8 <Nextccel::reconfig()+0x40>
    82d0:	e59f3074 	ldr	r3, [pc, #116]	; 834c <Nextccel::reconfig()+0x1d4>
    82d4:	e598000c 	ldr	r0, [r8, #12]
    82d8:	e5931000 	ldr	r1, [r3]
    82dc:	e59f307c 	ldr	r3, [pc, #124]	; 8360 <Nextccel::reconfig()+0x1e8>
    82e0:	eb000870 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82e4:	e28ddf82 	add	sp, sp, #520	; 0x208
    82e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    82ec:	e59f3058 	ldr	r3, [pc, #88]	; 834c <Nextccel::reconfig()+0x1d4>
    82f0:	e598000c 	ldr	r0, [r8, #12]
    82f4:	e5931000 	ldr	r1, [r3]
    82f8:	e59f3064 	ldr	r3, [pc, #100]	; 8364 <Nextccel::reconfig()+0x1ec>
    82fc:	eb000869 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8300:	eaffffcd 	b	823c <Nextccel::reconfig()+0xc4>
    8304:	e59f2040 	ldr	r2, [pc, #64]	; 834c <Nextccel::reconfig()+0x1d4>
    8308:	e59f3058 	ldr	r3, [pc, #88]	; 8368 <Nextccel::reconfig()+0x1f0>
    830c:	e5921000 	ldr	r1, [r2]
    8310:	e598000c 	ldr	r0, [r8, #12]
    8314:	e3a02001 	mov	r2, #1, 0
    8318:	eb000862 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    831c:	eaffffc1 	b	8228 <Nextccel::reconfig()+0xb0>
    8320:	e59f3024 	ldr	r3, [pc, #36]	; 834c <Nextccel::reconfig()+0x1d4>
    8324:	e58d6000 	str	r6, [sp]
    8328:	e5931000 	ldr	r1, [r3]
    832c:	e1a02004 	mov	r2, r4
    8330:	e59f3034 	ldr	r3, [pc, #52]	; 836c <Nextccel::reconfig()+0x1f4>
    8334:	e598000c 	ldr	r0, [r8, #12]
    8338:	eb00085a 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    833c:	eaffff97 	b	81a0 <Nextccel::reconfig()+0x28>
    8340:	00019694 	.word	0x00019694
    8344:	000196d0 	.word	0x000196d0
    8348:	00019704 	.word	0x00019704
    834c:	0001c8cc 	.word	0x0001c8cc
    8350:	00019738 	.word	0x00019738
    8354:	00019710 	.word	0x00019710
    8358:	000196dc 	.word	0x000196dc
    835c:	000196b4 	.word	0x000196b4
    8360:	00019768 	.word	0x00019768
    8364:	00019750 	.word	0x00019750
    8368:	00019744 	.word	0x00019744
    836c:	0001969c 	.word	0x0001969c

00008370 <Nextccel::Run()>:
    8370:	e92d4070 	push	{r4, r5, r6, lr}
    8374:	e59f3058 	ldr	r3, [pc, #88]	; 83d4 <Nextccel::Run()+0x64>
    8378:	e5905004 	ldr	r5, [r0, #4]
    837c:	e5931004 	ldr	r1, [r3, #4]
    8380:	e5953000 	ldr	r3, [r5]
    8384:	e24dd008 	sub	sp, sp, #8, 0
    8388:	e1a04000 	mov	r4, r0
    838c:	e1a00001 	mov	r0, r1
    8390:	e593600c 	ldr	r6, [r3, #12]
    8394:	e58d1004 	str	r1, [sp, #4]
    8398:	eb00414f 	bl	188dc <strlen(char const*)>
    839c:	e59d1004 	ldr	r1, [sp, #4]
    83a0:	e1a02000 	mov	r2, r0
    83a4:	e1a00005 	mov	r0, r5
    83a8:	e12fff36 	blx	r6
    83ac:	e5940004 	ldr	r0, [r4, #4]
    83b0:	e3a02002 	mov	r2, #2, 0
    83b4:	e5903000 	ldr	r3, [r0]
    83b8:	e59f1018 	ldr	r1, [pc, #24]	; 83d8 <Nextccel::Run()+0x68>
    83bc:	e593300c 	ldr	r3, [r3, #12]
    83c0:	e12fff33 	blx	r3
    83c4:	e1a00004 	mov	r0, r4
    83c8:	e28dd008 	add	sp, sp, #8, 0
    83cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    83d0:	ea0000c2 	b	86e0 <Nextccel::Prompt()>
    83d4:	0001c8cc 	.word	0x0001c8cc
    83d8:	00019780 	.word	0x00019780

000083dc <Nextccel::Exec()>:
    83dc:	e92d4030 	push	{r4, r5, lr}
    83e0:	e5d0387b 	ldrb	r3, [r0, #2171]	; 0x87b
    83e4:	e1a04000 	mov	r4, r0
    83e8:	e3530007 	cmp	r3, #7, 0
    83ec:	e24dd00c 	sub	sp, sp, #12, 0
    83f0:	0a000036 	beq	84d0 <Nextccel::Exec()+0xf4>
    83f4:	e5940004 	ldr	r0, [r4, #4]
    83f8:	e3a02001 	mov	r2, #1, 0
    83fc:	e5903000 	ldr	r3, [r0]
    8400:	e59f1204 	ldr	r1, [pc, #516]	; 860c <Nextccel::Exec()+0x230>
    8404:	e593300c 	ldr	r3, [r3, #12]
    8408:	e12fff33 	blx	r3
    840c:	e5d4387b 	ldrb	r3, [r4, #2171]	; 0x87b
    8410:	e5940004 	ldr	r0, [r4, #4]
    8414:	e2833030 	add	r3, r3, #48, 0	; 0x30
    8418:	e5cd3007 	strb	r3, [sp, #7]
    841c:	e5903000 	ldr	r3, [r0]
    8420:	e3a02001 	mov	r2, #1, 0
    8424:	e593300c 	ldr	r3, [r3, #12]
    8428:	e28d1007 	add	r1, sp, #7, 0
    842c:	e12fff33 	blx	r3
    8430:	e5940004 	ldr	r0, [r4, #4]
    8434:	e59f11d4 	ldr	r1, [pc, #468]	; 8610 <Nextccel::Exec()+0x234>
    8438:	e5903000 	ldr	r3, [r0]
    843c:	e3a02002 	mov	r2, #2, 0
    8440:	e593300c 	ldr	r3, [r3, #12]
    8444:	e12fff33 	blx	r3
    8448:	e3a01000 	mov	r1, #0, 0
    844c:	e5d4377c 	ldrb	r3, [r4, #1916]	; 0x77c
    8450:	e5c4187b 	strb	r1, [r4, #2171]	; 0x87b
    8454:	e1530001 	cmp	r3, r1
    8458:	0a000010 	beq	84a0 <Nextccel::Exec()+0xc4>
    845c:	e1a03001 	mov	r3, r1
    8460:	e5940004 	ldr	r0, [r4, #4]
    8464:	e2811e77 	add	r1, r1, #1904	; 0x770
    8468:	e5902000 	ldr	r2, [r0]
    846c:	e2833001 	add	r3, r3, #1, 0
    8470:	e281100c 	add	r1, r1, #12, 0
    8474:	e592500c 	ldr	r5, [r2, #12]
    8478:	e0841001 	add	r1, r4, r1
    847c:	e3a02001 	mov	r2, #1, 0
    8480:	e5c4387b 	strb	r3, [r4, #2171]	; 0x87b
    8484:	e12fff35 	blx	r5
    8488:	e5d4387b 	ldrb	r3, [r4, #2171]	; 0x87b
    848c:	e0842003 	add	r2, r4, r3
    8490:	e5d2277c 	ldrb	r2, [r2, #1916]	; 0x77c
    8494:	e1a01003 	mov	r1, r3
    8498:	e3520000 	cmp	r2, #0, 0
    849c:	1affffef 	bne	8460 <Nextccel::Exec()+0x84>
    84a0:	e5940004 	ldr	r0, [r4, #4]
    84a4:	e3a0200b 	mov	r2, #11, 0
    84a8:	e5903000 	ldr	r3, [r0]
    84ac:	e59f1160 	ldr	r1, [pc, #352]	; 8614 <Nextccel::Exec()+0x238>
    84b0:	e593300c 	ldr	r3, [r3, #12]
    84b4:	e12fff33 	blx	r3
    84b8:	e1a00004 	mov	r0, r4
    84bc:	eb000087 	bl	86e0 <Nextccel::Prompt()>
    84c0:	e3a03000 	mov	r3, #0, 0
    84c4:	e5c4387b 	strb	r3, [r4, #2171]	; 0x87b
    84c8:	e28dd00c 	add	sp, sp, #12, 0
    84cc:	e8bd8030 	pop	{r4, r5, pc}
    84d0:	e5d0077c 	ldrb	r0, [r0, #1916]	; 0x77c
    84d4:	eb0040fc 	bl	188cc <toupper(unsigned char)>
    84d8:	e3500052 	cmp	r0, #82, 0	; 0x52
    84dc:	0a000035 	beq	85b8 <Nextccel::Exec()+0x1dc>
    84e0:	e5d4077c 	ldrb	r0, [r4, #1916]	; 0x77c
    84e4:	eb0040f8 	bl	188cc <toupper(unsigned char)>
    84e8:	e3500044 	cmp	r0, #68, 0	; 0x44
    84ec:	0a00001c 	beq	8564 <Nextccel::Exec()+0x188>
    84f0:	e5d4077c 	ldrb	r0, [r4, #1916]	; 0x77c
    84f4:	eb0040f4 	bl	188cc <toupper(unsigned char)>
    84f8:	e350004e 	cmp	r0, #78, 0	; 0x4e
    84fc:	1affffbc 	bne	83f4 <Nextccel::Exec()+0x18>
    8500:	e5d4077d 	ldrb	r0, [r4, #1917]	; 0x77d
    8504:	eb0040f0 	bl	188cc <toupper(unsigned char)>
    8508:	e3500045 	cmp	r0, #69, 0	; 0x45
    850c:	1affffb8 	bne	83f4 <Nextccel::Exec()+0x18>
    8510:	e5d4077e 	ldrb	r0, [r4, #1918]	; 0x77e
    8514:	eb0040ec 	bl	188cc <toupper(unsigned char)>
    8518:	e3500058 	cmp	r0, #88, 0	; 0x58
    851c:	1affffb4 	bne	83f4 <Nextccel::Exec()+0x18>
    8520:	e5d4077f 	ldrb	r0, [r4, #1919]	; 0x77f
    8524:	eb0040e8 	bl	188cc <toupper(unsigned char)>
    8528:	e3500054 	cmp	r0, #84, 0	; 0x54
    852c:	1affffb0 	bne	83f4 <Nextccel::Exec()+0x18>
    8530:	e5d40780 	ldrb	r0, [r4, #1920]	; 0x780
    8534:	eb0040e4 	bl	188cc <toupper(unsigned char)>
    8538:	e3500050 	cmp	r0, #80, 0	; 0x50
    853c:	1affffac 	bne	83f4 <Nextccel::Exec()+0x18>
    8540:	e5d40781 	ldrb	r0, [r4, #1921]	; 0x781
    8544:	eb0040e0 	bl	188cc <toupper(unsigned char)>
    8548:	e3500049 	cmp	r0, #73, 0	; 0x49
    854c:	1affffa8 	bne	83f4 <Nextccel::Exec()+0x18>
    8550:	e1a00004 	mov	r0, r4
    8554:	ebffff07 	bl	8178 <Nextccel::reconfig()>
    8558:	e3a03000 	mov	r3, #0, 0
    855c:	e5c43000 	strb	r3, [r4]
    8560:	eaffffd8 	b	84c8 <Nextccel::Exec()+0xec>
    8564:	e5d4077d 	ldrb	r0, [r4, #1917]	; 0x77d
    8568:	eb0040d7 	bl	188cc <toupper(unsigned char)>
    856c:	e3500049 	cmp	r0, #73, 0	; 0x49
    8570:	1affffde 	bne	84f0 <Nextccel::Exec()+0x114>
    8574:	e5d4077e 	ldrb	r0, [r4, #1918]	; 0x77e
    8578:	eb0040d3 	bl	188cc <toupper(unsigned char)>
    857c:	e3500045 	cmp	r0, #69, 0	; 0x45
    8580:	1affffda 	bne	84f0 <Nextccel::Exec()+0x114>
    8584:	e5d4077f 	ldrb	r0, [r4, #1919]	; 0x77f
    8588:	eb0040cf 	bl	188cc <toupper(unsigned char)>
    858c:	e3500054 	cmp	r0, #84, 0	; 0x54
    8590:	1affffd6 	bne	84f0 <Nextccel::Exec()+0x114>
    8594:	e5d40780 	ldrb	r0, [r4, #1920]	; 0x780
    8598:	eb0040cb 	bl	188cc <toupper(unsigned char)>
    859c:	e3500050 	cmp	r0, #80, 0	; 0x50
    85a0:	1affffd2 	bne	84f0 <Nextccel::Exec()+0x114>
    85a4:	e5d40781 	ldrb	r0, [r4, #1921]	; 0x781
    85a8:	eb0040c7 	bl	188cc <toupper(unsigned char)>
    85ac:	e3500049 	cmp	r0, #73, 0	; 0x49
    85b0:	1affffce 	bne	84f0 <Nextccel::Exec()+0x114>
    85b4:	eaffffe5 	b	8550 <Nextccel::Exec()+0x174>
    85b8:	e5d4077d 	ldrb	r0, [r4, #1917]	; 0x77d
    85bc:	eb0040c2 	bl	188cc <toupper(unsigned char)>
    85c0:	e3500045 	cmp	r0, #69, 0	; 0x45
    85c4:	1affffc5 	bne	84e0 <Nextccel::Exec()+0x104>
    85c8:	e5d4077e 	ldrb	r0, [r4, #1918]	; 0x77e
    85cc:	eb0040be 	bl	188cc <toupper(unsigned char)>
    85d0:	e3500042 	cmp	r0, #66, 0	; 0x42
    85d4:	1affffc1 	bne	84e0 <Nextccel::Exec()+0x104>
    85d8:	e5d4077f 	ldrb	r0, [r4, #1919]	; 0x77f
    85dc:	eb0040ba 	bl	188cc <toupper(unsigned char)>
    85e0:	e350004f 	cmp	r0, #79, 0	; 0x4f
    85e4:	1affffbd 	bne	84e0 <Nextccel::Exec()+0x104>
    85e8:	e5d40780 	ldrb	r0, [r4, #1920]	; 0x780
    85ec:	eb0040b6 	bl	188cc <toupper(unsigned char)>
    85f0:	e350004f 	cmp	r0, #79, 0	; 0x4f
    85f4:	1affffb9 	bne	84e0 <Nextccel::Exec()+0x104>
    85f8:	e5d40781 	ldrb	r0, [r4, #1921]	; 0x781
    85fc:	eb0040b2 	bl	188cc <toupper(unsigned char)>
    8600:	e3500054 	cmp	r0, #84, 0	; 0x54
    8604:	1affffb5 	bne	84e0 <Nextccel::Exec()+0x104>
    8608:	eaffffd2 	b	8558 <Nextccel::Exec()+0x17c>
    860c:	00019784 	.word	0x00019784
    8610:	00019788 	.word	0x00019788
    8614:	0001978c 	.word	0x0001978c

00008618 <Nextccel::Process()>:
    8618:	e92d4010 	push	{r4, lr}
    861c:	e1a04000 	mov	r4, r0
    8620:	e5900004 	ldr	r0, [r0, #4]
    8624:	e24dd008 	sub	sp, sp, #8, 0
    8628:	e5903000 	ldr	r3, [r0]
    862c:	e3a02001 	mov	r2, #1, 0
    8630:	e5933008 	ldr	r3, [r3, #8]
    8634:	e28d1004 	add	r1, sp, #4, 0
    8638:	e12fff33 	blx	r3
    863c:	e3500000 	cmp	r0, #0, 0
    8640:	da000013 	ble	8694 <Nextccel::Process()+0x7c>
    8644:	e5d4387b 	ldrb	r3, [r4, #2171]	; 0x87b
    8648:	e35300ff 	cmp	r3, #255, 0	; 0xff
    864c:	0a000012 	beq	869c <Nextccel::Process()+0x84>
    8650:	e5dd3004 	ldrb	r3, [sp, #4]
    8654:	e353000d 	cmp	r3, #13, 0
    8658:	0a00000f 	beq	869c <Nextccel::Process()+0x84>
    865c:	e353001f 	cmp	r3, #31, 0
    8660:	9a00000b 	bls	8694 <Nextccel::Process()+0x7c>
    8664:	e5940004 	ldr	r0, [r4, #4]
    8668:	e3a02001 	mov	r2, #1, 0
    866c:	e5903000 	ldr	r3, [r0]
    8670:	e28d1004 	add	r1, sp, #4, 0
    8674:	e593300c 	ldr	r3, [r3, #12]
    8678:	e12fff33 	blx	r3
    867c:	e5d4387b 	ldrb	r3, [r4, #2171]	; 0x87b
    8680:	e5dd2004 	ldrb	r2, [sp, #4]
    8684:	e2831001 	add	r1, r3, #1, 0
    8688:	e0843003 	add	r3, r4, r3
    868c:	e5c4187b 	strb	r1, [r4, #2171]	; 0x87b
    8690:	e5c3277c 	strb	r2, [r3, #1916]	; 0x77c
    8694:	e28dd008 	add	sp, sp, #8, 0
    8698:	e8bd8010 	pop	{r4, pc}
    869c:	e5940004 	ldr	r0, [r4, #4]
    86a0:	e3a02001 	mov	r2, #1, 0
    86a4:	e5903000 	ldr	r3, [r0]
    86a8:	e59f102c 	ldr	r1, [pc, #44]	; 86dc <Nextccel::Process()+0xc4>
    86ac:	e593300c 	ldr	r3, [r3, #12]
    86b0:	e12fff33 	blx	r3
    86b4:	e3a02000 	mov	r2, #0, 0
    86b8:	e5d4387b 	ldrb	r3, [r4, #2171]	; 0x87b
    86bc:	e1a00004 	mov	r0, r4
    86c0:	e2831001 	add	r1, r3, #1, 0
    86c4:	e0843003 	add	r3, r4, r3
    86c8:	e5c4187b 	strb	r1, [r4, #2171]	; 0x87b
    86cc:	e5c3277c 	strb	r2, [r3, #1916]	; 0x77c
    86d0:	ebffff41 	bl	83dc <Nextccel::Exec()>
    86d4:	e28dd008 	add	sp, sp, #8, 0
    86d8:	e8bd8010 	pop	{r4, pc}
    86dc:	00019798 	.word	0x00019798

000086e0 <Nextccel::Prompt()>:
    86e0:	e92d4070 	push	{r4, r5, r6, lr}
    86e4:	e5904004 	ldr	r4, [r0, #4]
    86e8:	e59f1024 	ldr	r1, [pc, #36]	; 8714 <Nextccel::Prompt()+0x34>
    86ec:	e5943000 	ldr	r3, [r4]
    86f0:	e1a00001 	mov	r0, r1
    86f4:	e593500c 	ldr	r5, [r3, #12]
    86f8:	eb004077 	bl	188dc <strlen(char const*)>
    86fc:	e1a03005 	mov	r3, r5
    8700:	e1a02000 	mov	r2, r0
    8704:	e59f1008 	ldr	r1, [pc, #8]	; 8714 <Nextccel::Prompt()+0x34>
    8708:	e1a00004 	mov	r0, r4
    870c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8710:	e12fff13 	bx	r3
    8714:	0001979c 	.word	0x0001979c

00008718 <CKernel::CKernel()>:
    8718:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    871c:	e1a04000 	mov	r4, r0
    8720:	e28070dc 	add	r7, r0, #220, 0	; 0xdc
    8724:	e3a01001 	mov	r1, #1, 0
    8728:	eb002244 	bl	11040 <CMemorySystem::CMemorySystem(bool)>
    872c:	e28480e8 	add	r8, r4, #232, 0	; 0xe8
    8730:	e3a01000 	mov	r1, #0, 0
    8734:	e1a00007 	mov	r0, r7
    8738:	eb0000bf 	bl	8a3c <CActLED::CActLED(bool)>
    873c:	e2845d25 	add	r5, r4, #2368	; 0x940
    8740:	e1a00008 	mov	r0, r8
    8744:	eb0005fb 	bl	9f38 <CKernelOptions::CKernelOptions()>
    8748:	e2850004 	add	r0, r5, #4, 0
    874c:	eb000116 	bl	8bac <CDeviceNameService::CDeviceNameService()>
    8750:	e3a03000 	mov	r3, #0, 0
    8754:	e3a02e1e 	mov	r2, #480	; 0x1e0
    8758:	e3a01d0a 	mov	r1, #640	; 0x280
    875c:	e285000c 	add	r0, r5, #12, 0
    8760:	eb000b1f 	bl	b3e4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8764:	e3a03000 	mov	r3, #0, 0
    8768:	e2849d6a 	add	r9, r4, #6784	; 0x1a80
    876c:	e2896038 	add	r6, r9, #56, 0	; 0x38
    8770:	e1a02003 	mov	r2, r3
    8774:	e1a01006 	mov	r1, r6
    8778:	e2840e9d 	add	r0, r4, #2512	; 0x9d0
    877c:	eb000fa8 	bl	c624 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8780:	e2845d73 	add	r5, r4, #7360	; 0x1cc0
    8784:	e2890034 	add	r0, r9, #52, 0	; 0x34
    8788:	eb002131 	bl	10c54 <CExceptionHandler::CExceptionHandler()>
    878c:	e2855038 	add	r5, r5, #56, 0	; 0x38
    8790:	e1a00006 	mov	r0, r6
    8794:	eb002376 	bl	11574 <CInterruptSystem::CInterruptSystem()>
    8798:	e1a01006 	mov	r1, r6
    879c:	e1a00005 	mov	r0, r5
    87a0:	eb001950 	bl	ece8 <CTimer::CTimer(CInterruptSystem*)>
    87a4:	e1a00008 	mov	r0, r8
    87a8:	eb0005ad 	bl	9e64 <CKernelOptions::GetLogLevel() const>
    87ac:	e1a01000 	mov	r1, r0
    87b0:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    87b4:	e1a02005 	mov	r2, r5
    87b8:	e2800034 	add	r0, r0, #52, 0	; 0x34
    87bc:	eb0006f1 	bl	a388 <CLogger::CLogger(unsigned int, CTimer*)>
    87c0:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    87c4:	e1a03007 	mov	r3, r7
    87c8:	e1a02005 	mov	r2, r5
    87cc:	e1a01006 	mov	r1, r6
    87d0:	e2800030 	add	r0, r0, #48, 0	; 0x30
    87d4:	eb0039cf 	bl	16f18 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)>
    87d8:	e2840d7a 	add	r0, r4, #7808	; 0x1e80
    87dc:	e2800030 	add	r0, r0, #48, 0	; 0x30
    87e0:	eb002d51 	bl	13d2c <CFATFileSystem::CFATFileSystem()>
    87e4:	e2840c26 	add	r0, r4, #9728	; 0x2600
    87e8:	e2800018 	add	r0, r0, #24, 0
    87ec:	ebfffe35 	bl	80c8 <Nextccel::Nextccel()>
    87f0:	e1a00004 	mov	r0, r4
    87f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000087f8 <CKernel::~CKernel()>:
    87f8:	e92d4070 	push	{r4, r5, r6, lr}
    87fc:	e1a04000 	mov	r4, r0
    8800:	e2800c26 	add	r0, r0, #9728	; 0x2600
    8804:	e2800018 	add	r0, r0, #24, 0
    8808:	ebfffe3f 	bl	810c <Nextccel::~Nextccel()>
    880c:	e2840d7a 	add	r0, r4, #7808	; 0x1e80
    8810:	e2800030 	add	r0, r0, #48, 0	; 0x30
    8814:	eb002d5c 	bl	13d8c <CFATFileSystem::~CFATFileSystem()>
    8818:	e2840c1e 	add	r0, r4, #7680	; 0x1e00
    881c:	e2800030 	add	r0, r0, #48, 0	; 0x30
    8820:	eb0039e2 	bl	16fb0 <CEMMCDevice::~CEMMCDevice()>
    8824:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    8828:	e2800034 	add	r0, r0, #52, 0	; 0x34
    882c:	eb0006eb 	bl	a3e0 <CLogger::~CLogger()>
    8830:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    8834:	e2845d6a 	add	r5, r4, #6784	; 0x1a80
    8838:	e2800038 	add	r0, r0, #56, 0	; 0x38
    883c:	eb00194a 	bl	ed6c <CTimer::~CTimer()>
    8840:	e2850038 	add	r0, r5, #56, 0	; 0x38
    8844:	eb002355 	bl	115a0 <CInterruptSystem::~CInterruptSystem()>
    8848:	e2850034 	add	r0, r5, #52, 0	; 0x34
    884c:	eb002125 	bl	10ce8 <CExceptionHandler::~CExceptionHandler()>
    8850:	e2845d25 	add	r5, r4, #2368	; 0x940
    8854:	e2840e9d 	add	r0, r4, #2512	; 0x9d0
    8858:	eb000fe7 	bl	c7fc <CSerialDevice::~CSerialDevice()>
    885c:	e285000c 	add	r0, r5, #12, 0
    8860:	eb000b01 	bl	b46c <CScreenDevice::~CScreenDevice()>
    8864:	e2850004 	add	r0, r5, #4, 0
    8868:	eb0000e0 	bl	8bf0 <CDeviceNameService::~CDeviceNameService()>
    886c:	e28400e8 	add	r0, r4, #232, 0	; 0xe8
    8870:	eb00056f 	bl	9e34 <CKernelOptions::~CKernelOptions()>
    8874:	e28400dc 	add	r0, r4, #220, 0	; 0xdc
    8878:	eb000095 	bl	8ad4 <CActLED::~CActLED()>
    887c:	e1a00004 	mov	r0, r4
    8880:	eb00223e 	bl	11180 <CMemorySystem::~CMemorySystem()>
    8884:	e1a00004 	mov	r0, r4
    8888:	e8bd8070 	pop	{r4, r5, r6, pc}

0000888c <CKernel::Initialize()>:
    888c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8890:	e2806d25 	add	r6, r0, #2368	; 0x940
    8894:	e286700c 	add	r7, r6, #12, 0
    8898:	e1a04000 	mov	r4, r0
    889c:	e24dd008 	sub	sp, sp, #8, 0
    88a0:	e1a00007 	mov	r0, r7
    88a4:	eb000b18 	bl	b50c <CScreenDevice::Initialize()>
    88a8:	e2505000 	subs	r5, r0, #0, 0
    88ac:	1a000009 	bne	88d8 <CKernel::Initialize()+0x4c>
    88b0:	e59f30e4 	ldr	r3, [pc, #228]	; 899c <CKernel::Initialize()+0x110>
    88b4:	e2840c1d 	add	r0, r4, #7424	; 0x1d00
    88b8:	e5931000 	ldr	r1, [r3]
    88bc:	e3a02004 	mov	r2, #4, 0
    88c0:	e59f30d8 	ldr	r3, [pc, #216]	; 89a0 <CKernel::Initialize()+0x114>
    88c4:	e2800034 	add	r0, r0, #52, 0	; 0x34
    88c8:	eb0006f6 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    88cc:	e1a00005 	mov	r0, r5
    88d0:	e28dd008 	add	sp, sp, #8, 0
    88d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    88d8:	e2845c1d 	add	r5, r4, #7424	; 0x1d00
    88dc:	e2855034 	add	r5, r5, #52, 0	; 0x34
    88e0:	e1a01007 	mov	r1, r7
    88e4:	e1a00005 	mov	r0, r5
    88e8:	eb0006db 	bl	a45c <CLogger::Initialize(CDevice*)>
    88ec:	e1a07000 	mov	r7, r0
    88f0:	e59f30a4 	ldr	r3, [pc, #164]	; 899c <CKernel::Initialize()+0x110>
    88f4:	e1a00005 	mov	r0, r5
    88f8:	e5931000 	ldr	r1, [r3]
    88fc:	e3a02004 	mov	r2, #4, 0
    8900:	e59f3098 	ldr	r3, [pc, #152]	; 89a0 <CKernel::Initialize()+0x114>
    8904:	eb0006e7 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8908:	e3570000 	cmp	r7, #0, 0
    890c:	0a000020 	beq	8994 <CKernel::Initialize()+0x108>
    8910:	e2840d6a 	add	r0, r4, #6784	; 0x1a80
    8914:	e2800038 	add	r0, r0, #56, 0	; 0x38
    8918:	eb00232f 	bl	115dc <CInterruptSystem::Initialize()>
    891c:	e3500000 	cmp	r0, #0, 0
    8920:	0a00001b 	beq	8994 <CKernel::Initialize()+0x108>
    8924:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    8928:	e2800038 	add	r0, r0, #56, 0	; 0x38
    892c:	eb001bb9 	bl	f818 <CTimer::Initialize()>
    8930:	e3500000 	cmp	r0, #0, 0
    8934:	0a000016 	beq	8994 <CKernel::Initialize()+0x108>
    8938:	e2848e9d 	add	r8, r4, #2512	; 0x9d0
    893c:	e1a00008 	mov	r0, r8
    8940:	e59f105c 	ldr	r1, [pc, #92]	; 89a4 <CKernel::Initialize()+0x118>
    8944:	eb001007 	bl	c968 <CSerialDevice::Initialize(unsigned int)>
    8948:	e3500000 	cmp	r0, #0, 0
    894c:	0a000010 	beq	8994 <CKernel::Initialize()+0x108>
    8950:	e2847c1e 	add	r7, r4, #7680	; 0x1e00
    8954:	e2877030 	add	r7, r7, #48, 0	; 0x30
    8958:	e1a00007 	mov	r0, r7
    895c:	eb0039b7 	bl	17040 <CEMMCDevice::Initialize()>
    8960:	e3500000 	cmp	r0, #0, 0
    8964:	0a00000a 	beq	8994 <CKernel::Initialize()+0x108>
    8968:	e2840c26 	add	r0, r4, #9728	; 0x2600
    896c:	e58d5000 	str	r5, [sp]
    8970:	e1a02007 	mov	r2, r7
    8974:	e1a01008 	mov	r1, r8
    8978:	e2863004 	add	r3, r6, #4, 0
    897c:	e2800018 	add	r0, r0, #24, 0
    8980:	ebfffdec 	bl	8138 <Nextccel::Initialize(CSerialDevice*, CEMMCDevice*, CDeviceNameService*, CLogger*)>
    8984:	e1a05000 	mov	r5, r0
    8988:	e1a00005 	mov	r0, r5
    898c:	e28dd008 	add	sp, sp, #8, 0
    8990:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8994:	e3a05000 	mov	r5, #0, 0
    8998:	eaffffcb 	b	88cc <CKernel::Initialize()+0x40>
    899c:	0001c8cc 	.word	0x0001c8cc
    89a0:	000197a4 	.word	0x000197a4
    89a4:	0001c200 	.word	0x0001c200

000089a8 <CKernel::Run()>:
    89a8:	e92d4070 	push	{r4, r5, r6, lr}
    89ac:	e1a06000 	mov	r6, r0
    89b0:	e2804c26 	add	r4, r0, #9728	; 0x2600
    89b4:	e2844018 	add	r4, r4, #24, 0
    89b8:	e1a00004 	mov	r0, r4
    89bc:	e2865a02 	add	r5, r6, #8192	; 0x2000
    89c0:	ebfffe6a 	bl	8370 <Nextccel::Run()>
    89c4:	e5d53618 	ldrb	r3, [r5, #1560]	; 0x618
    89c8:	e3530000 	cmp	r3, #0, 0
    89cc:	0a000004 	beq	89e4 <CKernel::Run()+0x3c>
    89d0:	e1a00004 	mov	r0, r4
    89d4:	ebffff0f 	bl	8618 <Nextccel::Process()>
    89d8:	e5d53618 	ldrb	r3, [r5, #1560]	; 0x618
    89dc:	e3530000 	cmp	r3, #0, 0
    89e0:	1afffffa 	bne	89d0 <CKernel::Run()+0x28>
    89e4:	e59f3048 	ldr	r3, [pc, #72]	; 8a34 <CKernel::Run()+0x8c>
    89e8:	e2860c1d 	add	r0, r6, #7424	; 0x1d00
    89ec:	e5931000 	ldr	r1, [r3]
    89f0:	e3a02004 	mov	r2, #4, 0
    89f4:	e59f303c 	ldr	r3, [pc, #60]	; 8a38 <CKernel::Run()+0x90>
    89f8:	e2800034 	add	r0, r0, #52, 0	; 0x34
    89fc:	eb0006a9 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8a00:	e59f0030 	ldr	r0, [pc, #48]	; 8a38 <CKernel::Run()+0x90>
    8a04:	eb003fb4 	bl	188dc <strlen(char const*)>
    8a08:	e59f1028 	ldr	r1, [pc, #40]	; 8a38 <CKernel::Run()+0x90>
    8a0c:	e1a02000 	mov	r2, r0
    8a10:	e2860e9d 	add	r0, r6, #2512	; 0x9d0
    8a14:	eb001066 	bl	cbb4 <CSerialDevice::Write(void const*, unsigned int)>
    8a18:	e28600dc 	add	r0, r6, #220, 0	; 0xdc
    8a1c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8a20:	e3a020c8 	mov	r2, #200, 0	; 0xc8
    8a24:	e3a01002 	mov	r1, #2, 0
    8a28:	eb000048 	bl	8b50 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8a2c:	e3a00002 	mov	r0, #2, 0
    8a30:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a34:	0001c8cc 	.word	0x0001c8cc
    8a38:	000197b4 	.word	0x000197b4

00008a3c <CActLED::CActLED(bool)>:
    8a3c:	e3a03000 	mov	r3, #0, 0
    8a40:	e59f2088 	ldr	r2, [pc, #136]	; 8ad0 <CActLED::CActLED(bool)+0x94>
    8a44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a48:	e5803000 	str	r3, [r0]
    8a4c:	e5803004 	str	r3, [r0, #4]
    8a50:	e1a06001 	mov	r6, r1
    8a54:	e5820000 	str	r0, [r2]
    8a58:	e1a05000 	mov	r5, r0
    8a5c:	eb000a54 	bl	b3b4 <CMachineInfo::Get()>
    8a60:	eb000981 	bl	b06c <CMachineInfo::GetActLEDInfo() const>
    8a64:	e2107080 	ands	r7, r0, #128, 0	; 0x80
    8a68:	e1a04000 	mov	r4, r0
    8a6c:	0a00000e 	beq	8aac <CActLED::CActLED(bool)+0x70>
    8a70:	e3a00014 	mov	r0, #20, 0
    8a74:	eb001f39 	bl	10760 <operator new(unsigned int)>
    8a78:	e1a07000 	mov	r7, r0
    8a7c:	e1a02006 	mov	r2, r6
    8a80:	e204103f 	and	r1, r4, #63, 0	; 0x3f
    8a84:	eb001e40 	bl	1038c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    8a88:	e5857004 	str	r7, [r5, #4]
    8a8c:	e1a04324 	lsr	r4, r4, #6
    8a90:	e2244001 	eor	r4, r4, #1, 0
    8a94:	e2044001 	and	r4, r4, #1, 0
    8a98:	e1a00005 	mov	r0, r5
    8a9c:	e5c54008 	strb	r4, [r5, #8]
    8aa0:	eb00001c 	bl	8b18 <CActLED::Off()>
    8aa4:	e1a00005 	mov	r0, r5
    8aa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8aac:	e3a00028 	mov	r0, #40, 0	; 0x28
    8ab0:	eb001f2a 	bl	10760 <operator new(unsigned int)>
    8ab4:	e1a06000 	mov	r6, r0
    8ab8:	e1a03007 	mov	r3, r7
    8abc:	e3a02001 	mov	r2, #1, 0
    8ac0:	e204103f 	and	r1, r4, #63, 0	; 0x3f
    8ac4:	eb0001b9 	bl	91b0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8ac8:	e5856000 	str	r6, [r5]
    8acc:	eaffffee 	b	8a8c <CActLED::CActLED(bool)+0x50>
    8ad0:	0001cc38 	.word	0x0001cc38

00008ad4 <CActLED::~CActLED()>:
    8ad4:	e3a02000 	mov	r2, #0, 0
    8ad8:	e59f3004 	ldr	r3, [pc, #4]	; 8ae4 <CActLED::~CActLED()+0x10>
    8adc:	e5832000 	str	r2, [r3]
    8ae0:	e12fff1e 	bx	lr
    8ae4:	0001cc38 	.word	0x0001cc38

00008ae8 <CActLED::On()>:
    8ae8:	e5903000 	ldr	r3, [r0]
    8aec:	e3530000 	cmp	r3, #0, 0
    8af0:	0a000002 	beq	8b00 <CActLED::On()+0x18>
    8af4:	e5d01008 	ldrb	r1, [r0, #8]
    8af8:	e1a00003 	mov	r0, r3
    8afc:	ea000253 	b	9450 <CGPIOPin::Write(unsigned int)>
    8b00:	e5903004 	ldr	r3, [r0, #4]
    8b04:	e3530000 	cmp	r3, #0, 0
    8b08:	012fff1e 	bxeq	lr
    8b0c:	e5d01008 	ldrb	r1, [r0, #8]
    8b10:	e1a00003 	mov	r0, r3
    8b14:	ea001e79 	b	10500 <CVirtualGPIOPin::Write(unsigned int)>

00008b18 <CActLED::Off()>:
    8b18:	e5903000 	ldr	r3, [r0]
    8b1c:	e3530000 	cmp	r3, #0, 0
    8b20:	0a000003 	beq	8b34 <CActLED::Off()+0x1c>
    8b24:	e5d01008 	ldrb	r1, [r0, #8]
    8b28:	e1a00003 	mov	r0, r3
    8b2c:	e2211001 	eor	r1, r1, #1, 0
    8b30:	ea000246 	b	9450 <CGPIOPin::Write(unsigned int)>
    8b34:	e5903004 	ldr	r3, [r0, #4]
    8b38:	e3530000 	cmp	r3, #0, 0
    8b3c:	012fff1e 	bxeq	lr
    8b40:	e5d01008 	ldrb	r1, [r0, #8]
    8b44:	e1a00003 	mov	r0, r3
    8b48:	e2211001 	eor	r1, r1, #1, 0
    8b4c:	ea001e6b 	b	10500 <CVirtualGPIOPin::Write(unsigned int)>

00008b50 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8b50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8b54:	e2516000 	subs	r6, r1, #0, 0
    8b58:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8b5c:	e1a05000 	mov	r5, r0
    8b60:	e1a07002 	mov	r7, r2
    8b64:	e1a08003 	mov	r8, r3
    8b68:	e3a04001 	mov	r4, #1, 0
    8b6c:	e1a00005 	mov	r0, r5
    8b70:	ebffffdc 	bl	8ae8 <CActLED::On()>
    8b74:	e1a00007 	mov	r0, r7
    8b78:	eb001b62 	bl	f908 <CTimer::SimpleMsDelay(unsigned int)>
    8b7c:	e1a00005 	mov	r0, r5
    8b80:	ebffffe4 	bl	8b18 <CActLED::Off()>
    8b84:	e2844001 	add	r4, r4, #1, 0
    8b88:	e1a00008 	mov	r0, r8
    8b8c:	eb001b5d 	bl	f908 <CTimer::SimpleMsDelay(unsigned int)>
    8b90:	e1560004 	cmp	r6, r4
    8b94:	2afffff4 	bcs	8b6c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    8b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008b9c <CActLED::Get()>:
    8b9c:	e59f3004 	ldr	r3, [pc, #4]	; 8ba8 <CActLED::Get()+0xc>
    8ba0:	e5930000 	ldr	r0, [r3]
    8ba4:	e12fff1e 	bx	lr
    8ba8:	0001cc38 	.word	0x0001cc38

00008bac <CDeviceNameService::CDeviceNameService()>:
    8bac:	e3a02000 	mov	r2, #0, 0
    8bb0:	e59f102c 	ldr	r1, [pc, #44]	; 8be4 <CDeviceNameService::CDeviceNameService()+0x38>
    8bb4:	e5802000 	str	r2, [r0]
    8bb8:	e591c000 	ldr	ip, [r1]
    8bbc:	e5802004 	str	r2, [r0, #4]
    8bc0:	e15c0002 	cmp	ip, r2
    8bc4:	1a000001 	bne	8bd0 <CDeviceNameService::CDeviceNameService()+0x24>
    8bc8:	e5810000 	str	r0, [r1]
    8bcc:	e12fff1e 	bx	lr
    8bd0:	e3a0201f 	mov	r2, #31, 0
    8bd4:	e92d4010 	push	{r4, lr}
    8bd8:	e59f1008 	ldr	r1, [pc, #8]	; 8be8 <CDeviceNameService::CDeviceNameService()+0x3c>
    8bdc:	e59f0008 	ldr	r0, [pc, #8]	; 8bec <CDeviceNameService::CDeviceNameService()+0x40>
    8be0:	eb0023c8 	bl	11b08 <assertion_failed>
    8be4:	0001cc3c 	.word	0x0001cc3c
    8be8:	000197c8 	.word	0x000197c8
    8bec:	000197e0 	.word	0x000197e0

00008bf0 <CDeviceNameService::~CDeviceNameService()>:
    8bf0:	e92d4070 	push	{r4, r5, r6, lr}
    8bf4:	e5904000 	ldr	r4, [r0]
    8bf8:	e1a05000 	mov	r5, r0
    8bfc:	e3540000 	cmp	r4, #0, 0
    8c00:	0a00000a 	beq	8c30 <CDeviceNameService::~CDeviceNameService()+0x40>
    8c04:	e5940004 	ldr	r0, [r4, #4]
    8c08:	e5944000 	ldr	r4, [r4]
    8c0c:	e3500000 	cmp	r0, #0, 0
    8c10:	0a000000 	beq	8c18 <CDeviceNameService::~CDeviceNameService()+0x28>
    8c14:	eb001ede 	bl	10794 <operator delete[](void*)>
    8c18:	e3a01010 	mov	r1, #16, 0
    8c1c:	e5950000 	ldr	r0, [r5]
    8c20:	eb001edc 	bl	10798 <operator delete(void*, unsigned int)>
    8c24:	e3540000 	cmp	r4, #0, 0
    8c28:	e5854000 	str	r4, [r5]
    8c2c:	1afffff4 	bne	8c04 <CDeviceNameService::~CDeviceNameService()+0x14>
    8c30:	e3a02000 	mov	r2, #0, 0
    8c34:	e59f3008 	ldr	r3, [pc, #8]	; 8c44 <CDeviceNameService::~CDeviceNameService()+0x54>
    8c38:	e1a00005 	mov	r0, r5
    8c3c:	e5832000 	str	r2, [r3]
    8c40:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c44:	0001cc3c 	.word	0x0001cc3c

00008c48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    8c48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c4c:	e1a05000 	mov	r5, r0
    8c50:	e5900004 	ldr	r0, [r0, #4]
    8c54:	e1a06001 	mov	r6, r1
    8c58:	e3500000 	cmp	r0, #0, 0
    8c5c:	e1a07002 	mov	r7, r2
    8c60:	e1a08003 	mov	r8, r3
    8c64:	1a000017 	bne	8cc8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    8c68:	e3a00010 	mov	r0, #16, 0
    8c6c:	eb001ebb 	bl	10760 <operator new(unsigned int)>
    8c70:	e3560000 	cmp	r6, #0, 0
    8c74:	e1a04000 	mov	r4, r0
    8c78:	0a000014 	beq	8cd0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    8c7c:	e1a00006 	mov	r0, r6
    8c80:	eb001baf 	bl	fb44 <strlen>
    8c84:	e2800001 	add	r0, r0, #1, 0
    8c88:	eb001eba 	bl	10778 <operator new[](unsigned int)>
    8c8c:	e1a01006 	mov	r1, r6
    8c90:	e5840004 	str	r0, [r4, #4]
    8c94:	eb001c4e 	bl	fdd4 <strcpy>
    8c98:	e3570000 	cmp	r7, #0, 0
    8c9c:	0a00000f 	beq	8ce0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
    8ca0:	e5952004 	ldr	r2, [r5, #4]
    8ca4:	e5953000 	ldr	r3, [r5]
    8ca8:	e3520000 	cmp	r2, #0, 0
    8cac:	e5847008 	str	r7, [r4, #8]
    8cb0:	e5c4800c 	strb	r8, [r4, #12]
    8cb4:	e5843000 	str	r3, [r4]
    8cb8:	e5854000 	str	r4, [r5]
    8cbc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8cc0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8cc4:	ea0021fd 	b	114c0 <LeaveCritical>
    8cc8:	eb0021d2 	bl	11418 <EnterCritical>
    8ccc:	eaffffe5 	b	8c68 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    8cd0:	e3a0203b 	mov	r2, #59, 0	; 0x3b
    8cd4:	e59f1014 	ldr	r1, [pc, #20]	; 8cf0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
    8cd8:	e59f0014 	ldr	r0, [pc, #20]	; 8cf4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
    8cdc:	eb002389 	bl	11b08 <assertion_failed>
    8ce0:	e3a02040 	mov	r2, #64, 0	; 0x40
    8ce4:	e59f1004 	ldr	r1, [pc, #4]	; 8cf0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
    8ce8:	e59f0008 	ldr	r0, [pc, #8]	; 8cf8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    8cec:	eb002385 	bl	11b08 <assertion_failed>
    8cf0:	000197c8 	.word	0x000197c8
    8cf4:	000197ec 	.word	0x000197ec
    8cf8:	000197f8 	.word	0x000197f8

00008cfc <CDeviceNameService::RemoveDevice(char const*, bool)>:
    8cfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8d00:	e2515000 	subs	r5, r1, #0, 0
    8d04:	0a000037 	beq	8de8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    8d08:	e1a08000 	mov	r8, r0
    8d0c:	e5900004 	ldr	r0, [r0, #4]
    8d10:	e1a07002 	mov	r7, r2
    8d14:	e3500000 	cmp	r0, #0, 0
    8d18:	1a000017 	bne	8d7c <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
    8d1c:	e5984000 	ldr	r4, [r8]
    8d20:	e3540000 	cmp	r4, #0, 0
    8d24:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8d28:	e3a06000 	mov	r6, #0, 0
    8d2c:	ea00000b 	b	8d60 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    8d30:	e1a00005 	mov	r0, r5
    8d34:	eb001b8c 	bl	fb6c <strcmp>
    8d38:	e3500000 	cmp	r0, #0, 0
    8d3c:	1a000002 	bne	8d4c <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    8d40:	e5d4300c 	ldrb	r3, [r4, #12]
    8d44:	e1530007 	cmp	r3, r7
    8d48:	0a000014 	beq	8da0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    8d4c:	e5943000 	ldr	r3, [r4]
    8d50:	e1a06004 	mov	r6, r4
    8d54:	e3530000 	cmp	r3, #0, 0
    8d58:	0a00000b 	beq	8d8c <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
    8d5c:	e1a04003 	mov	r4, r3
    8d60:	e5941004 	ldr	r1, [r4, #4]
    8d64:	e3510000 	cmp	r1, #0, 0
    8d68:	1afffff0 	bne	8d30 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    8d6c:	e3a0205e 	mov	r2, #94, 0	; 0x5e
    8d70:	e59f1088 	ldr	r1, [pc, #136]	; 8e00 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
    8d74:	e59f0088 	ldr	r0, [pc, #136]	; 8e04 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    8d78:	eb002362 	bl	11b08 <assertion_failed>
    8d7c:	eb0021a5 	bl	11418 <EnterCritical>
    8d80:	e5984000 	ldr	r4, [r8]
    8d84:	e3540000 	cmp	r4, #0, 0
    8d88:	1affffe6 	bne	8d28 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    8d8c:	e5983004 	ldr	r3, [r8, #4]
    8d90:	e3530000 	cmp	r3, #0, 0
    8d94:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8d98:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8d9c:	ea0021c7 	b	114c0 <LeaveCritical>
    8da0:	e3560000 	cmp	r6, #0, 0
    8da4:	0a00000c 	beq	8ddc <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
    8da8:	e5943000 	ldr	r3, [r4]
    8dac:	e5863000 	str	r3, [r6]
    8db0:	e5983004 	ldr	r3, [r8, #4]
    8db4:	e3530000 	cmp	r3, #0, 0
    8db8:	1a00000e 	bne	8df8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
    8dbc:	e5940004 	ldr	r0, [r4, #4]
    8dc0:	e3500000 	cmp	r0, #0, 0
    8dc4:	0a000000 	beq	8dcc <CDeviceNameService::RemoveDevice(char const*, bool)+0xd0>
    8dc8:	eb001e71 	bl	10794 <operator delete[](void*)>
    8dcc:	e1a00004 	mov	r0, r4
    8dd0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8dd4:	e3a01010 	mov	r1, #16, 0
    8dd8:	ea001e6e 	b	10798 <operator delete(void*, unsigned int)>
    8ddc:	e5943000 	ldr	r3, [r4]
    8de0:	e5883000 	str	r3, [r8]
    8de4:	eafffff1 	b	8db0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
    8de8:	e3a02056 	mov	r2, #86, 0	; 0x56
    8dec:	e59f100c 	ldr	r1, [pc, #12]	; 8e00 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
    8df0:	e59f0010 	ldr	r0, [pc, #16]	; 8e08 <CDeviceNameService::RemoveDevice(char const*, bool)+0x10c>
    8df4:	eb002343 	bl	11b08 <assertion_failed>
    8df8:	eb0021b0 	bl	114c0 <LeaveCritical>
    8dfc:	eaffffee 	b	8dbc <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    8e00:	000197c8 	.word	0x000197c8
    8e04:	00019808 	.word	0x00019808
    8e08:	000197ec 	.word	0x000197ec

00008e0c <CDeviceNameService::GetDevice(char const*, bool)>:
    8e0c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8e10:	e2515000 	subs	r5, r1, #0, 0
    8e14:	e24dd00c 	sub	sp, sp, #12, 0
    8e18:	0a000024 	beq	8eb0 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    8e1c:	e1a07000 	mov	r7, r0
    8e20:	e5900004 	ldr	r0, [r0, #4]
    8e24:	e1a06002 	mov	r6, r2
    8e28:	e3500000 	cmp	r0, #0, 0
    8e2c:	1a000014 	bne	8e84 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
    8e30:	e5974000 	ldr	r4, [r7]
    8e34:	e3540000 	cmp	r4, #0, 0
    8e38:	1a00000a 	bne	8e68 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    8e3c:	ea000018 	b	8ea4 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    8e40:	e1a00005 	mov	r0, r5
    8e44:	eb001b48 	bl	fb6c <strcmp>
    8e48:	e3500000 	cmp	r0, #0, 0
    8e4c:	1a000002 	bne	8e5c <CDeviceNameService::GetDevice(char const*, bool)+0x50>
    8e50:	e5d4300c 	ldrb	r3, [r4, #12]
    8e54:	e1530006 	cmp	r3, r6
    8e58:	0a000018 	beq	8ec0 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    8e5c:	e5944000 	ldr	r4, [r4]
    8e60:	e3540000 	cmp	r4, #0, 0
    8e64:	0a00000a 	beq	8e94 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    8e68:	e5941004 	ldr	r1, [r4, #4]
    8e6c:	e3510000 	cmp	r1, #0, 0
    8e70:	1afffff2 	bne	8e40 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
    8e74:	e3a02092 	mov	r2, #146, 0	; 0x92
    8e78:	e59f1078 	ldr	r1, [pc, #120]	; 8ef8 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    8e7c:	e59f0078 	ldr	r0, [pc, #120]	; 8efc <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
    8e80:	eb002320 	bl	11b08 <assertion_failed>
    8e84:	eb002163 	bl	11418 <EnterCritical>
    8e88:	e5974000 	ldr	r4, [r7]
    8e8c:	e3540000 	cmp	r4, #0, 0
    8e90:	1afffff4 	bne	8e68 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    8e94:	e5973004 	ldr	r3, [r7, #4]
    8e98:	e3530000 	cmp	r3, #0, 0
    8e9c:	0a000000 	beq	8ea4 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    8ea0:	eb002186 	bl	114c0 <LeaveCritical>
    8ea4:	e3a00000 	mov	r0, #0, 0
    8ea8:	e28dd00c 	add	sp, sp, #12, 0
    8eac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8eb0:	e3a0208b 	mov	r2, #139, 0	; 0x8b
    8eb4:	e59f103c 	ldr	r1, [pc, #60]	; 8ef8 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    8eb8:	e59f0040 	ldr	r0, [pc, #64]	; 8f00 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
    8ebc:	eb002311 	bl	11b08 <assertion_failed>
    8ec0:	e5973004 	ldr	r3, [r7, #4]
    8ec4:	e5940008 	ldr	r0, [r4, #8]
    8ec8:	e3530000 	cmp	r3, #0, 0
    8ecc:	1a000005 	bne	8ee8 <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
    8ed0:	e3500000 	cmp	r0, #0, 0
    8ed4:	1afffff3 	bne	8ea8 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    8ed8:	e3a0209a 	mov	r2, #154, 0	; 0x9a
    8edc:	e59f1014 	ldr	r1, [pc, #20]	; 8ef8 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    8ee0:	e59f001c 	ldr	r0, [pc, #28]	; 8f04 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    8ee4:	eb002307 	bl	11b08 <assertion_failed>
    8ee8:	e58d0004 	str	r0, [sp, #4]
    8eec:	eb002173 	bl	114c0 <LeaveCritical>
    8ef0:	e59d0004 	ldr	r0, [sp, #4]
    8ef4:	eafffff5 	b	8ed0 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    8ef8:	000197c8 	.word	0x000197c8
    8efc:	00019808 	.word	0x00019808
    8f00:	000197ec 	.word	0x000197ec
    8f04:	0001981c 	.word	0x0001981c

00008f08 <CDeviceNameService::Get()>:
    8f08:	e59f301c 	ldr	r3, [pc, #28]	; 8f2c <CDeviceNameService::Get()+0x24>
    8f0c:	e5930000 	ldr	r0, [r3]
    8f10:	e3500000 	cmp	r0, #0, 0
    8f14:	112fff1e 	bxne	lr
    8f18:	e3a020cc 	mov	r2, #204, 0	; 0xcc
    8f1c:	e92d4010 	push	{r4, lr}
    8f20:	e59f1008 	ldr	r1, [pc, #8]	; 8f30 <CDeviceNameService::Get()+0x28>
    8f24:	e59f0008 	ldr	r0, [pc, #8]	; 8f34 <CDeviceNameService::Get()+0x2c>
    8f28:	eb0022f6 	bl	11b08 <assertion_failed>
    8f2c:	0001cc3c 	.word	0x0001cc3c
    8f30:	000197c8 	.word	0x000197c8
    8f34:	0001982c 	.word	0x0001982c

00008f38 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    8f38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8f3c:	e1a06001 	mov	r6, r1
    8f40:	e24dd01c 	sub	sp, sp, #28, 0
    8f44:	e1a04000 	mov	r4, r0
    8f48:	e28d0008 	add	r0, sp, #8, 0
    8f4c:	e1a05003 	mov	r5, r3
    8f50:	e5dd7030 	ldrb	r7, [sp, #48]	; 0x30
    8f54:	e58d2004 	str	r2, [sp, #4]
    8f58:	eb0011af 	bl	d61c <CString::CString()>
    8f5c:	e1a02006 	mov	r2, r6
    8f60:	e59d3004 	ldr	r3, [sp, #4]
    8f64:	e59f1030 	ldr	r1, [pc, #48]	; 8f9c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    8f68:	e28d0008 	add	r0, sp, #8, 0
    8f6c:	eb0016f0 	bl	eb34 <CString::Format(char const*, ...)>
    8f70:	e28d0008 	add	r0, sp, #8, 0
    8f74:	eb0011c0 	bl	d67c <CString::operator char const*() const>
    8f78:	e1a03007 	mov	r3, r7
    8f7c:	e1a01000 	mov	r1, r0
    8f80:	e1a02005 	mov	r2, r5
    8f84:	e1a00004 	mov	r0, r4
    8f88:	ebffff2e 	bl	8c48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8f8c:	e28d0008 	add	r0, sp, #8, 0
    8f90:	eb00116e 	bl	d550 <CString::~CString()>
    8f94:	e28dd01c 	add	sp, sp, #28, 0
    8f98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8f9c:	00019838 	.word	0x00019838

00008fa0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8fa0:	e92d4070 	push	{r4, r5, r6, lr}
    8fa4:	e1a06001 	mov	r6, r1
    8fa8:	e24dd018 	sub	sp, sp, #24, 0
    8fac:	e1a04000 	mov	r4, r0
    8fb0:	e28d0008 	add	r0, sp, #8, 0
    8fb4:	e1a05003 	mov	r5, r3
    8fb8:	e58d2004 	str	r2, [sp, #4]
    8fbc:	eb001196 	bl	d61c <CString::CString()>
    8fc0:	e59d3004 	ldr	r3, [sp, #4]
    8fc4:	e1a02006 	mov	r2, r6
    8fc8:	e59f102c 	ldr	r1, [pc, #44]	; 8ffc <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    8fcc:	e28d0008 	add	r0, sp, #8, 0
    8fd0:	eb0016d7 	bl	eb34 <CString::Format(char const*, ...)>
    8fd4:	e28d0008 	add	r0, sp, #8, 0
    8fd8:	eb0011a7 	bl	d67c <CString::operator char const*() const>
    8fdc:	e1a02005 	mov	r2, r5
    8fe0:	e1a01000 	mov	r1, r0
    8fe4:	e1a00004 	mov	r0, r4
    8fe8:	ebffff43 	bl	8cfc <CDeviceNameService::RemoveDevice(char const*, bool)>
    8fec:	e28d0008 	add	r0, sp, #8, 0
    8ff0:	eb001156 	bl	d550 <CString::~CString()>
    8ff4:	e28dd018 	add	sp, sp, #24, 0
    8ff8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ffc:	00019838 	.word	0x00019838

00009000 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    9000:	e92d4070 	push	{r4, r5, r6, lr}
    9004:	e1a06001 	mov	r6, r1
    9008:	e24dd018 	sub	sp, sp, #24, 0
    900c:	e1a04000 	mov	r4, r0
    9010:	e28d0008 	add	r0, sp, #8, 0
    9014:	e1a05003 	mov	r5, r3
    9018:	e58d2004 	str	r2, [sp, #4]
    901c:	eb00117e 	bl	d61c <CString::CString()>
    9020:	e59d3004 	ldr	r3, [sp, #4]
    9024:	e1a02006 	mov	r2, r6
    9028:	e59f1034 	ldr	r1, [pc, #52]	; 9064 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    902c:	e28d0008 	add	r0, sp, #8, 0
    9030:	eb0016bf 	bl	eb34 <CString::Format(char const*, ...)>
    9034:	e28d0008 	add	r0, sp, #8, 0
    9038:	eb00118f 	bl	d67c <CString::operator char const*() const>
    903c:	e1a02005 	mov	r2, r5
    9040:	e1a01000 	mov	r1, r0
    9044:	e1a00004 	mov	r0, r4
    9048:	ebffff6f 	bl	8e0c <CDeviceNameService::GetDevice(char const*, bool)>
    904c:	e1a04000 	mov	r4, r0
    9050:	e28d0008 	add	r0, sp, #8, 0
    9054:	eb00113d 	bl	d550 <CString::~CString()>
    9058:	e1a00004 	mov	r0, r4
    905c:	e28dd018 	add	sp, sp, #24, 0
    9060:	e8bd8070 	pop	{r4, r5, r6, pc}
    9064:	00019838 	.word	0x00019838

00009068 <CDeviceNameService::ListDevices(CDevice*)>:
    9068:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    906c:	e2516000 	subs	r6, r1, #0, 0
    9070:	e24dd024 	sub	sp, sp, #36, 0	; 0x24
    9074:	0a000035 	beq	9150 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
    9078:	e5904000 	ldr	r4, [r0]
    907c:	e3540000 	cmp	r4, #0, 0
    9080:	0a000030 	beq	9148 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
    9084:	e3a05000 	mov	r5, #0, 0
    9088:	e59f70d0 	ldr	r7, [pc, #208]	; 9160 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
    908c:	ea00001c 	b	9104 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
    9090:	e5d4200c 	ldrb	r2, [r4, #12]
    9094:	e2855001 	add	r5, r5, #1, 0
    9098:	e3520000 	cmp	r2, #0, 0
    909c:	13a02062 	movne	r2, #98, 0	; 0x62
    90a0:	03a02063 	moveq	r2, #99, 0	; 0x63
    90a4:	e2158003 	ands	r8, r5, #3, 0
    90a8:	03a0100a 	moveq	r1, #10, 0
    90ac:	13a01020 	movne	r1, #32, 0
    90b0:	e28d0010 	add	r0, sp, #16, 0
    90b4:	e58d1000 	str	r1, [sp]
    90b8:	e1a01007 	mov	r1, r7
    90bc:	eb00169c 	bl	eb34 <CString::Format(char const*, ...)>
    90c0:	e5963000 	ldr	r3, [r6]
    90c4:	e28d0010 	add	r0, sp, #16, 0
    90c8:	e593900c 	ldr	r9, [r3, #12]
    90cc:	eb00116a 	bl	d67c <CString::operator char const*() const>
    90d0:	e1a01000 	mov	r1, r0
    90d4:	e28d0010 	add	r0, sp, #16, 0
    90d8:	e58d100c 	str	r1, [sp, #12]
    90dc:	eb001198 	bl	d744 <CString::GetLength() const>
    90e0:	e59d100c 	ldr	r1, [sp, #12]
    90e4:	e1a02000 	mov	r2, r0
    90e8:	e1a00006 	mov	r0, r6
    90ec:	e12fff39 	blx	r9
    90f0:	e5944000 	ldr	r4, [r4]
    90f4:	e28d0010 	add	r0, sp, #16, 0
    90f8:	eb001114 	bl	d550 <CString::~CString()>
    90fc:	e3540000 	cmp	r4, #0, 0
    9100:	0a000008 	beq	9128 <CDeviceNameService::ListDevices(CDevice*)+0xc0>
    9104:	e28d0010 	add	r0, sp, #16, 0
    9108:	eb001143 	bl	d61c <CString::CString()>
    910c:	e5943004 	ldr	r3, [r4, #4]
    9110:	e3530000 	cmp	r3, #0, 0
    9114:	1affffdd 	bne	9090 <CDeviceNameService::ListDevices(CDevice*)+0x28>
    9118:	e3a020b9 	mov	r2, #185, 0	; 0xb9
    911c:	e59f1040 	ldr	r1, [pc, #64]	; 9164 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
    9120:	e59f0040 	ldr	r0, [pc, #64]	; 9168 <CDeviceNameService::ListDevices(CDevice*)+0x100>
    9124:	eb002277 	bl	11b08 <assertion_failed>
    9128:	e3580000 	cmp	r8, #0, 0
    912c:	0a000005 	beq	9148 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
    9130:	e5963000 	ldr	r3, [r6]
    9134:	e1a00006 	mov	r0, r6
    9138:	e3a02001 	mov	r2, #1, 0
    913c:	e593300c 	ldr	r3, [r3, #12]
    9140:	e59f1024 	ldr	r1, [pc, #36]	; 916c <CDeviceNameService::ListDevices(CDevice*)+0x104>
    9144:	e12fff33 	blx	r3
    9148:	e28dd024 	add	sp, sp, #36, 0	; 0x24
    914c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9150:	e3a020b0 	mov	r2, #176, 0	; 0xb0
    9154:	e59f1008 	ldr	r1, [pc, #8]	; 9164 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
    9158:	e59f0010 	ldr	r0, [pc, #16]	; 9170 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    915c:	eb002269 	bl	11b08 <assertion_failed>
    9160:	00019850 	.word	0x00019850
    9164:	000197c8 	.word	0x000197c8
    9168:	00019808 	.word	0x00019808
    916c:	00019798 	.word	0x00019798
    9170:	00019840 	.word	0x00019840

00009174 <CGPIOPin::CGPIOPin()>:
    9174:	e3a01000 	mov	r1, #0, 0
    9178:	e3a02006 	mov	r2, #6, 0
    917c:	e92d4010 	push	{r4, lr}
    9180:	e3a0c00a 	mov	ip, #10, 0
    9184:	e3a04036 	mov	r4, #54, 0	; 0x36
    9188:	e59fe01c 	ldr	lr, [pc, #28]	; 91ac <CGPIOPin::CGPIOPin()+0x38>
    918c:	e5804004 	str	r4, [r0, #4]
    9190:	e580e000 	str	lr, [r0]
    9194:	e5c0c010 	strb	ip, [r0, #16]
    9198:	e5801018 	str	r1, [r0, #24]
    919c:	e580101c 	str	r1, [r0, #28]
    91a0:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    91a4:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    91a8:	e8bd8010 	pop	{r4, pc}
    91ac:	00019864 	.word	0x00019864

000091b0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    91b0:	e92d4070 	push	{r4, r5, r6, lr}
    91b4:	e3a0c000 	mov	ip, #0, 0
    91b8:	e3a0e00a 	mov	lr, #10, 0
    91bc:	e1a05002 	mov	r5, r2
    91c0:	e3a06036 	mov	r6, #54, 0	; 0x36
    91c4:	e3a02006 	mov	r2, #6, 0
    91c8:	e1a04000 	mov	r4, r0
    91cc:	e5803018 	str	r3, [r0, #24]
    91d0:	e59f302c 	ldr	r3, [pc, #44]	; 9204 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    91d4:	e5c0e010 	strb	lr, [r0, #16]
    91d8:	e8800048 	stm	r0, {r3, r6}
    91dc:	e580c01c 	str	ip, [r0, #28]
    91e0:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    91e4:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    91e8:	eb00000d 	bl	9224 <CGPIOPin::AssignPin(unsigned int)>
    91ec:	e1a00004 	mov	r0, r4
    91f0:	e1a01005 	mov	r1, r5
    91f4:	e3a02001 	mov	r2, #1, 0
    91f8:	eb00002a 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    91fc:	e1a00004 	mov	r0, r4
    9200:	e8bd8070 	pop	{r4, r5, r6, pc}
    9204:	00019864 	.word	0x00019864

00009208 <CGPIOPin::~CGPIOPin()>:
    9208:	e12fff1e 	bx	lr

0000920c <CGPIOPin::~CGPIOPin()>:
    920c:	e92d4010 	push	{r4, lr}
    9210:	e1a04000 	mov	r4, r0
    9214:	e3a01028 	mov	r1, #40, 0	; 0x28
    9218:	eb001d5e 	bl	10798 <operator delete(void*, unsigned int)>
    921c:	e1a00004 	mov	r0, r4
    9220:	e8bd8010 	pop	{r4, pc}

00009224 <CGPIOPin::AssignPin(unsigned int)>:
    9224:	e5903004 	ldr	r3, [r0, #4]
    9228:	e92d4070 	push	{r4, r5, r6, lr}
    922c:	e3530036 	cmp	r3, #54, 0	; 0x36
    9230:	1a000017 	bne	9294 <CGPIOPin::AssignPin(unsigned int)+0x70>
    9234:	e3510035 	cmp	r1, #53, 0	; 0x35
    9238:	e1a05000 	mov	r5, r0
    923c:	e1a04001 	mov	r4, r1
    9240:	e5801004 	str	r1, [r0, #4]
    9244:	8a000007 	bhi	9268 <CGPIOPin::AssignPin(unsigned int)+0x44>
    9248:	e3a03001 	mov	r3, #1, 0
    924c:	e204201f 	and	r2, r4, #31, 0
    9250:	e1a042a4 	lsr	r4, r4, #5
    9254:	e1a03213 	lsl	r3, r3, r2
    9258:	e1a04104 	lsl	r4, r4, #2
    925c:	e585300c 	str	r3, [r5, #12]
    9260:	e5854008 	str	r4, [r5, #8]
    9264:	e8bd8070 	pop	{r4, r5, r6, pc}
    9268:	eb000851 	bl	b3b4 <CMachineInfo::Get()>
    926c:	e6ef1074 	uxtb	r1, r4
    9270:	eb0007b4 	bl	b148 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9274:	e3500035 	cmp	r0, #53, 0	; 0x35
    9278:	e1a04000 	mov	r4, r0
    927c:	e5850004 	str	r0, [r5, #4]
    9280:	9afffff0 	bls	9248 <CGPIOPin::AssignPin(unsigned int)+0x24>
    9284:	e59f1018 	ldr	r1, [pc, #24]	; 92a4 <CGPIOPin::AssignPin(unsigned int)+0x80>
    9288:	e3a02047 	mov	r2, #71, 0	; 0x47
    928c:	e2810020 	add	r0, r1, #32, 0
    9290:	eb00221c 	bl	11b08 <assertion_failed>
    9294:	e59f1008 	ldr	r1, [pc, #8]	; 92a4 <CGPIOPin::AssignPin(unsigned int)+0x80>
    9298:	e3a02040 	mov	r2, #64, 0	; 0x40
    929c:	e281000c 	add	r0, r1, #12, 0
    92a0:	eb002218 	bl	11b08 <assertion_failed>
    92a4:	0001986c 	.word	0x0001986c

000092a8 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    92a8:	e3510009 	cmp	r1, #9, 0
    92ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    92b0:	8a000058 	bhi	9418 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
    92b4:	e1a06002 	mov	r6, r2
    92b8:	e1a04000 	mov	r4, r0
    92bc:	e3a02000 	mov	r2, #0, 0
    92c0:	e5c01010 	strb	r1, [r0, #16]
    92c4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    92c8:	e5d03010 	ldrb	r3, [r0, #16]
    92cc:	e2431004 	sub	r1, r3, #4, 0
    92d0:	e6efc071 	uxtb	ip, r1
    92d4:	e35c0005 	cmp	ip, #5, 0
    92d8:	9a000030 	bls	93a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
    92dc:	e3530001 	cmp	r3, #1, 0
    92e0:	13a03000 	movne	r3, #0, 0
    92e4:	02063001 	andeq	r3, r6, #1, 0
    92e8:	e3530000 	cmp	r3, #0, 0
    92ec:	1a00004d 	bne	9428 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
    92f0:	e5943004 	ldr	r3, [r4, #4]
    92f4:	e3530035 	cmp	r3, #53, 0	; 0x35
    92f8:	8a00004d 	bhi	9434 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
    92fc:	e59f5140 	ldr	r5, [pc, #320]	; 9444 <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
    9300:	e59f7140 	ldr	r7, [pc, #320]	; 9448 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>
    9304:	e0852395 	umull	r2, r5, r5, r3
    9308:	e5970000 	ldr	r0, [r7]
    930c:	e1a051a5 	lsr	r5, r5, #3
    9310:	e2852302 	add	r2, r5, #134217728	; 0x8000000
    9314:	e0855105 	add	r5, r5, r5, lsl #2
    9318:	e2822702 	add	r2, r2, #524288	; 0x80000
    931c:	e0435085 	sub	r5, r3, r5, lsl #1
    9320:	e3500000 	cmp	r0, #0, 0
    9324:	e1a08102 	lsl	r8, r2, #2
    9328:	e0855085 	add	r5, r5, r5, lsl #1
    932c:	1a000026 	bne	93cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
    9330:	e5d42010 	ldrb	r2, [r4, #16]
    9334:	e3a01007 	mov	r1, #7, 0
    9338:	e2422001 	sub	r2, r2, #1, 0
    933c:	e16f2f12 	clz	r2, r2
    9340:	e5983000 	ldr	r3, [r8]
    9344:	e1a022a2 	lsr	r2, r2, #5
    9348:	e1c33511 	bic	r3, r3, r1, lsl r5
    934c:	e1835512 	orr	r5, r3, r2, lsl r5
    9350:	e5885000 	str	r5, [r8]
    9354:	e5973000 	ldr	r3, [r7]
    9358:	e3530000 	cmp	r3, #0, 0
    935c:	1a000016 	bne	93bc <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
    9360:	e3560000 	cmp	r6, #0, 0
    9364:	0a00000a 	beq	9394 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9368:	e5d43010 	ldrb	r3, [r4, #16]
    936c:	e3530003 	cmp	r3, #3, 0
    9370:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9374:	ea000006 	b	9394 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9378:	000093f4 	.word	0x000093f4
    937c:	000093e4 	.word	0x000093e4
    9380:	000093d4 	.word	0x000093d4
    9384:	00009388 	.word	0x00009388
    9388:	e1a00004 	mov	r0, r4
    938c:	e3a01001 	mov	r1, #1, 0
    9390:	eb0001e1 	bl	9b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9394:	e3a03000 	mov	r3, #0, 0
    9398:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    939c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    93a0:	e1560002 	cmp	r6, r2
    93a4:	1a000016 	bne	9404 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    93a8:	e1a00004 	mov	r0, r4
    93ac:	eb000202 	bl	9bbc <CGPIOPin::SetAlternateFunction(unsigned int)>
    93b0:	e3a03000 	mov	r3, #0, 0
    93b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    93b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    93bc:	eb00203f 	bl	114c0 <LeaveCritical>
    93c0:	e3560000 	cmp	r6, #0, 0
    93c4:	0afffff2 	beq	9394 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    93c8:	eaffffe6 	b	9368 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
    93cc:	eb002011 	bl	11418 <EnterCritical>
    93d0:	eaffffd6 	b	9330 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
    93d4:	e1a00004 	mov	r0, r4
    93d8:	e3a01002 	mov	r1, #2, 0
    93dc:	eb0001ce 	bl	9b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>
    93e0:	eaffffeb 	b	9394 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    93e4:	e1a00004 	mov	r0, r4
    93e8:	e3a01000 	mov	r1, #0, 0
    93ec:	eb000017 	bl	9450 <CGPIOPin::Write(unsigned int)>
    93f0:	eaffffe7 	b	9394 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    93f4:	e1a00004 	mov	r0, r4
    93f8:	e3a01000 	mov	r1, #0, 0
    93fc:	eb0001c6 	bl	9b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9400:	eaffffe3 	b	9394 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9404:	e1a01002 	mov	r1, r2
    9408:	eb0001c3 	bl	9b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>
    940c:	e5d43010 	ldrb	r3, [r4, #16]
    9410:	e2431004 	sub	r1, r3, #4, 0
    9414:	eaffffe3 	b	93a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
    9418:	e59f102c 	ldr	r1, [pc, #44]	; 944c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    941c:	e3a0204f 	mov	r2, #79, 0	; 0x4f
    9420:	e2810034 	add	r0, r1, #52, 0	; 0x34
    9424:	eb0021b7 	bl	11b08 <assertion_failed>
    9428:	e1a01002 	mov	r1, r2
    942c:	eb0001ba 	bl	9b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9430:	eaffffae 	b	92f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
    9434:	e59f1010 	ldr	r1, [pc, #16]	; 944c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    9438:	e3a02068 	mov	r2, #104, 0	; 0x68
    943c:	e2810020 	add	r0, r1, #32, 0
    9440:	eb0021b0 	bl	11b08 <assertion_failed>
    9444:	cccccccd 	.word	0xcccccccd
    9448:	0001cc40 	.word	0x0001cc40
    944c:	0001986c 	.word	0x0001986c

00009450 <CGPIOPin::Write(unsigned int)>:
    9450:	e5903004 	ldr	r3, [r0, #4]
    9454:	e92d4010 	push	{r4, lr}
    9458:	e3530035 	cmp	r3, #53, 0	; 0x35
    945c:	8a000011 	bhi	94a8 <CGPIOPin::Write(unsigned int)+0x58>
    9460:	e5d03010 	ldrb	r3, [r0, #16]
    9464:	e3530003 	cmp	r3, #3, 0
    9468:	8a000012 	bhi	94b8 <CGPIOPin::Write(unsigned int)+0x68>
    946c:	e3a02000 	mov	r2, #0, 0
    9470:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    9474:	e3510001 	cmp	r1, #1, 0
    9478:	8a000012 	bhi	94c8 <CGPIOPin::Write(unsigned int)+0x78>
    947c:	e59f3054 	ldr	r3, [pc, #84]	; 94d8 <CGPIOPin::Write(unsigned int)+0x88>
    9480:	e59fc054 	ldr	ip, [pc, #84]	; 94dc <CGPIOPin::Write(unsigned int)+0x8c>
    9484:	e3510000 	cmp	r1, #0, 0
    9488:	e5801014 	str	r1, [r0, #20]
    948c:	11a01003 	movne	r1, r3
    9490:	01a0100c 	moveq	r1, ip
    9494:	e5903008 	ldr	r3, [r0, #8]
    9498:	e590c00c 	ldr	ip, [r0, #12]
    949c:	e781c003 	str	ip, [r1, r3]
    94a0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
    94a4:	e8bd8010 	pop	{r4, pc}
    94a8:	e59f1030 	ldr	r1, [pc, #48]	; 94e0 <CGPIOPin::Write(unsigned int)+0x90>
    94ac:	e3a02091 	mov	r2, #145, 0	; 0x91
    94b0:	e2810020 	add	r0, r1, #32, 0
    94b4:	eb002193 	bl	11b08 <assertion_failed>
    94b8:	e59f1020 	ldr	r1, [pc, #32]	; 94e0 <CGPIOPin::Write(unsigned int)+0x90>
    94bc:	e3a02094 	mov	r2, #148, 0	; 0x94
    94c0:	e281004c 	add	r0, r1, #76, 0	; 0x4c
    94c4:	eb00218f 	bl	11b08 <assertion_failed>
    94c8:	e59f1010 	ldr	r1, [pc, #16]	; 94e0 <CGPIOPin::Write(unsigned int)+0x90>
    94cc:	e3a02098 	mov	r2, #152, 0	; 0x98
    94d0:	e2810070 	add	r0, r1, #112, 0	; 0x70
    94d4:	eb00218b 	bl	11b08 <assertion_failed>
    94d8:	2020001c 	.word	0x2020001c
    94dc:	20200028 	.word	0x20200028
    94e0:	0001986c 	.word	0x0001986c

000094e4 <CGPIOPin::Read() const>:
    94e4:	e5903004 	ldr	r3, [r0, #4]
    94e8:	e92d4010 	push	{r4, lr}
    94ec:	e3530035 	cmp	r3, #53, 0	; 0x35
    94f0:	8a00000f 	bhi	9534 <CGPIOPin::Read() const+0x50>
    94f4:	e5d03010 	ldrb	r3, [r0, #16]
    94f8:	e2432002 	sub	r2, r3, #2, 0
    94fc:	e3530000 	cmp	r3, #0, 0
    9500:	13520001 	cmpne	r2, #1, 0
    9504:	8a00000e 	bhi	9544 <CGPIOPin::Read() const+0x60>
    9508:	e3a03000 	mov	r3, #0, 0
    950c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9510:	e59f103c 	ldr	r1, [pc, #60]	; 9554 <CGPIOPin::Read() const+0x70>
    9514:	e590c008 	ldr	ip, [r0, #8]
    9518:	e590200c 	ldr	r2, [r0, #12]
    951c:	e79c1001 	ldr	r1, [ip, r1]
    9520:	e1110002 	tst	r1, r2
    9524:	13a00001 	movne	r0, #1, 0
    9528:	01a00003 	moveq	r0, r3
    952c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9530:	e8bd8010 	pop	{r4, pc}
    9534:	e59f101c 	ldr	r1, [pc, #28]	; 9558 <CGPIOPin::Read() const+0x74>
    9538:	e3a020a4 	mov	r2, #164, 0	; 0xa4
    953c:	e2810020 	add	r0, r1, #32, 0
    9540:	eb002170 	bl	11b08 <assertion_failed>
    9544:	e59f100c 	ldr	r1, [pc, #12]	; 9558 <CGPIOPin::Read() const+0x74>
    9548:	e3a020a6 	mov	r2, #166, 0	; 0xa6
    954c:	e2810090 	add	r0, r1, #144, 0	; 0x90
    9550:	eb00216c 	bl	11b08 <assertion_failed>
    9554:	20200034 	.word	0x20200034
    9558:	0001986c 	.word	0x0001986c

0000955c <CGPIOPin::Invert()>:
    955c:	e5d02010 	ldrb	r2, [r0, #16]
    9560:	e3520001 	cmp	r2, #1, 0
    9564:	1a000002 	bne	9574 <CGPIOPin::Invert()+0x18>
    9568:	e5901014 	ldr	r1, [r0, #20]
    956c:	e2211001 	eor	r1, r1, #1, 0
    9570:	eaffffb6 	b	9450 <CGPIOPin::Write(unsigned int)>
    9574:	e59f100c 	ldr	r1, [pc, #12]	; 9588 <CGPIOPin::Invert()+0x2c>
    9578:	e3a020b5 	mov	r2, #181, 0	; 0xb5
    957c:	e92d4010 	push	{r4, lr}
    9580:	e28100ec 	add	r0, r1, #236, 0	; 0xec
    9584:	eb00215f 	bl	11b08 <assertion_failed>
    9588:	0001986c 	.word	0x0001986c

0000958c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    958c:	e5d0c010 	ldrb	ip, [r0, #16]
    9590:	e92d4010 	push	{r4, lr}
    9594:	e24ce002 	sub	lr, ip, #2, 0
    9598:	e35c0000 	cmp	ip, #0, 0
    959c:	135e0001 	cmpne	lr, #1, 0
    95a0:	8a000028 	bhi	9648 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    95a4:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
    95a8:	e35c0006 	cmp	ip, #6, 0
    95ac:	1a000011 	bne	95f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    95b0:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
    95b4:	e35c0006 	cmp	ip, #6, 0
    95b8:	1a000012 	bne	9608 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    95bc:	e3510000 	cmp	r1, #0, 0
    95c0:	0a000014 	beq	9618 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    95c4:	e590c01c 	ldr	ip, [r0, #28]
    95c8:	e35c0000 	cmp	ip, #0, 0
    95cc:	1a000015 	bne	9628 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    95d0:	e590c018 	ldr	ip, [r0, #24]
    95d4:	e580101c 	str	r1, [r0, #28]
    95d8:	e35c0000 	cmp	ip, #0, 0
    95dc:	e5802020 	str	r2, [r0, #32]
    95e0:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    95e4:	0a000013 	beq	9638 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    95e8:	e8bd4010 	pop	{r4, lr}
    95ec:	e1a01000 	mov	r1, r0
    95f0:	e1a0000c 	mov	r0, ip
    95f4:	ea00275b 	b	13368 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    95f8:	e59f1058 	ldr	r1, [pc, #88]	; 9658 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    95fc:	e3a020c0 	mov	r2, #192, 0	; 0xc0
    9600:	e2810f42 	add	r0, r1, #264	; 0x108
    9604:	eb00213f 	bl	11b08 <assertion_failed>
    9608:	e59f1048 	ldr	r1, [pc, #72]	; 9658 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    960c:	e3a020c1 	mov	r2, #193, 0	; 0xc1
    9610:	e2810f4b 	add	r0, r1, #300	; 0x12c
    9614:	eb00213b 	bl	11b08 <assertion_failed>
    9618:	e59f1038 	ldr	r1, [pc, #56]	; 9658 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    961c:	e3a020c3 	mov	r2, #195, 0	; 0xc3
    9620:	e2810f55 	add	r0, r1, #340	; 0x154
    9624:	eb002137 	bl	11b08 <assertion_failed>
    9628:	e59f1028 	ldr	r1, [pc, #40]	; 9658 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    962c:	e3a020c4 	mov	r2, #196, 0	; 0xc4
    9630:	e2810f59 	add	r0, r1, #356	; 0x164
    9634:	eb002133 	bl	11b08 <assertion_failed>
    9638:	e59f1018 	ldr	r1, [pc, #24]	; 9658 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    963c:	e3a020cb 	mov	r2, #203, 0	; 0xcb
    9640:	e2810f5d 	add	r0, r1, #372	; 0x174
    9644:	eb00212f 	bl	11b08 <assertion_failed>
    9648:	e59f1008 	ldr	r1, [pc, #8]	; 9658 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    964c:	e3a020bc 	mov	r2, #188, 0	; 0xbc
    9650:	e2810090 	add	r0, r1, #144, 0	; 0x90
    9654:	eb00212b 	bl	11b08 <assertion_failed>
    9658:	0001986c 	.word	0x0001986c

0000965c <CGPIOPin::DisconnectInterrupt()>:
    965c:	e5d03010 	ldrb	r3, [r0, #16]
    9660:	e92d4010 	push	{r4, lr}
    9664:	e2432002 	sub	r2, r3, #2, 0
    9668:	e3530000 	cmp	r3, #0, 0
    966c:	13520001 	cmpne	r2, #1, 0
    9670:	8a000020 	bhi	96f8 <CGPIOPin::DisconnectInterrupt()+0x9c>
    9674:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9678:	e1a01000 	mov	r1, r0
    967c:	e3530006 	cmp	r3, #6, 0
    9680:	1a00000c 	bne	96b8 <CGPIOPin::DisconnectInterrupt()+0x5c>
    9684:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9688:	e3530006 	cmp	r3, #6, 0
    968c:	1a00000d 	bne	96c8 <CGPIOPin::DisconnectInterrupt()+0x6c>
    9690:	e590301c 	ldr	r3, [r0, #28]
    9694:	e3530000 	cmp	r3, #0, 0
    9698:	0a00000e 	beq	96d8 <CGPIOPin::DisconnectInterrupt()+0x7c>
    969c:	e3a03000 	mov	r3, #0, 0
    96a0:	e5900018 	ldr	r0, [r0, #24]
    96a4:	e581301c 	str	r3, [r1, #28]
    96a8:	e1500003 	cmp	r0, r3
    96ac:	0a00000d 	beq	96e8 <CGPIOPin::DisconnectInterrupt()+0x8c>
    96b0:	e8bd4010 	pop	{r4, lr}
    96b4:	ea00274f 	b	133f8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    96b8:	e59f1048 	ldr	r1, [pc, #72]	; 9708 <CGPIOPin::DisconnectInterrupt()+0xac>
    96bc:	e3a020d5 	mov	r2, #213, 0	; 0xd5
    96c0:	e2810f42 	add	r0, r1, #264	; 0x108
    96c4:	eb00210f 	bl	11b08 <assertion_failed>
    96c8:	e59f1038 	ldr	r1, [pc, #56]	; 9708 <CGPIOPin::DisconnectInterrupt()+0xac>
    96cc:	e3a020d6 	mov	r2, #214, 0	; 0xd6
    96d0:	e2810f4b 	add	r0, r1, #300	; 0x12c
    96d4:	eb00210b 	bl	11b08 <assertion_failed>
    96d8:	e59f1028 	ldr	r1, [pc, #40]	; 9708 <CGPIOPin::DisconnectInterrupt()+0xac>
    96dc:	e3a020d8 	mov	r2, #216, 0	; 0xd8
    96e0:	e2810f61 	add	r0, r1, #388	; 0x184
    96e4:	eb002107 	bl	11b08 <assertion_failed>
    96e8:	e59f1018 	ldr	r1, [pc, #24]	; 9708 <CGPIOPin::DisconnectInterrupt()+0xac>
    96ec:	e3a020db 	mov	r2, #219, 0	; 0xdb
    96f0:	e2810f5d 	add	r0, r1, #372	; 0x174
    96f4:	eb002103 	bl	11b08 <assertion_failed>
    96f8:	e59f1008 	ldr	r1, [pc, #8]	; 9708 <CGPIOPin::DisconnectInterrupt()+0xac>
    96fc:	e3a020d1 	mov	r2, #209, 0	; 0xd1
    9700:	e2810090 	add	r0, r1, #144, 0	; 0x90
    9704:	eb0020ff 	bl	11b08 <assertion_failed>
    9708:	0001986c 	.word	0x0001986c

0000970c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    970c:	e5d03010 	ldrb	r3, [r0, #16]
    9710:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9714:	e2432002 	sub	r2, r3, #2, 0
    9718:	e3530000 	cmp	r3, #0, 0
    971c:	13520001 	cmpne	r2, #1, 0
    9720:	8a000030 	bhi	97e8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    9724:	e590301c 	ldr	r3, [r0, #28]
    9728:	e1a04000 	mov	r4, r0
    972c:	e3530000 	cmp	r3, #0, 0
    9730:	0a00001c 	beq	97a8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    9734:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9738:	e3530006 	cmp	r3, #6, 0
    973c:	1a00001d 	bne	97b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
    9740:	e3510005 	cmp	r1, #5, 0
    9744:	8a00001f 	bhi	97c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
    9748:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    974c:	e1530001 	cmp	r3, r1
    9750:	0a000020 	beq	97d8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    9754:	e59f709c 	ldr	r7, [pc, #156]	; 97f8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    9758:	e5903008 	ldr	r3, [r0, #8]
    975c:	e5970000 	ldr	r0, [r7]
    9760:	e59f6094 	ldr	r6, [pc, #148]	; 97fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    9764:	e0815081 	add	r5, r1, r1, lsl #1
    9768:	e3500000 	cmp	r0, #0, 0
    976c:	e5c41025 	strb	r1, [r4, #37]	; 0x25
    9770:	e1a05105 	lsl	r5, r5, #2
    9774:	e0836006 	add	r6, r3, r6
    9778:	1a000008 	bne	97a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    977c:	e594200c 	ldr	r2, [r4, #12]
    9780:	e7963005 	ldr	r3, [r6, r5]
    9784:	e1833002 	orr	r3, r3, r2
    9788:	e7863005 	str	r3, [r6, r5]
    978c:	e5973000 	ldr	r3, [r7]
    9790:	e3530000 	cmp	r3, #0, 0
    9794:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9798:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    979c:	ea001f47 	b	114c0 <LeaveCritical>
    97a0:	eb001f1c 	bl	11418 <EnterCritical>
    97a4:	eafffff4 	b	977c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
    97a8:	e59f1050 	ldr	r1, [pc, #80]	; 9800 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    97ac:	e3a020e4 	mov	r2, #228, 0	; 0xe4
    97b0:	e2810f61 	add	r0, r1, #388	; 0x184
    97b4:	eb0020d3 	bl	11b08 <assertion_failed>
    97b8:	e59f1040 	ldr	r1, [pc, #64]	; 9800 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    97bc:	e3a020e6 	mov	r2, #230, 0	; 0xe6
    97c0:	e2810f42 	add	r0, r1, #264	; 0x108
    97c4:	eb0020cf 	bl	11b08 <assertion_failed>
    97c8:	e59f1030 	ldr	r1, [pc, #48]	; 9800 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    97cc:	e3a020e7 	mov	r2, #231, 0	; 0xe7
    97d0:	e2810f65 	add	r0, r1, #404	; 0x194
    97d4:	eb0020cb 	bl	11b08 <assertion_failed>
    97d8:	e59f1020 	ldr	r1, [pc, #32]	; 9800 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    97dc:	e3a020e8 	mov	r2, #232, 0	; 0xe8
    97e0:	e2810f6e 	add	r0, r1, #440	; 0x1b8
    97e4:	eb0020c7 	bl	11b08 <assertion_failed>
    97e8:	e59f1010 	ldr	r1, [pc, #16]	; 9800 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    97ec:	e3a020e1 	mov	r2, #225, 0	; 0xe1
    97f0:	e2810090 	add	r0, r1, #144, 0	; 0x90
    97f4:	eb0020c3 	bl	11b08 <assertion_failed>
    97f8:	0001cc40 	.word	0x0001cc40
    97fc:	2020004c 	.word	0x2020004c
    9800:	0001986c 	.word	0x0001986c

00009804 <CGPIOPin::DisableInterrupt()>:
    9804:	e5d03010 	ldrb	r3, [r0, #16]
    9808:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    980c:	e2432002 	sub	r2, r3, #2, 0
    9810:	e3530000 	cmp	r3, #0, 0
    9814:	13520001 	cmpne	r2, #1, 0
    9818:	8a00001e 	bhi	9898 <CGPIOPin::DisableInterrupt()+0x94>
    981c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9820:	e1a05000 	mov	r5, r0
    9824:	e3530005 	cmp	r3, #5, 0
    9828:	8a000016 	bhi	9888 <CGPIOPin::DisableInterrupt()+0x84>
    982c:	e59f7074 	ldr	r7, [pc, #116]	; 98a8 <CGPIOPin::DisableInterrupt()+0xa4>
    9830:	e5902008 	ldr	r2, [r0, #8]
    9834:	e5970000 	ldr	r0, [r7]
    9838:	e59f606c 	ldr	r6, [pc, #108]	; 98ac <CGPIOPin::DisableInterrupt()+0xa8>
    983c:	e0833083 	add	r3, r3, r3, lsl #1
    9840:	e3500000 	cmp	r0, #0, 0
    9844:	e1a04103 	lsl	r4, r3, #2
    9848:	e0826006 	add	r6, r2, r6
    984c:	1a000009 	bne	9878 <CGPIOPin::DisableInterrupt()+0x74>
    9850:	e7963004 	ldr	r3, [r6, r4]
    9854:	e595200c 	ldr	r2, [r5, #12]
    9858:	e1c33002 	bic	r3, r3, r2
    985c:	e7863004 	str	r3, [r6, r4]
    9860:	e5973000 	ldr	r3, [r7]
    9864:	e3530000 	cmp	r3, #0, 0
    9868:	1a000004 	bne	9880 <CGPIOPin::DisableInterrupt()+0x7c>
    986c:	e3a03006 	mov	r3, #6, 0
    9870:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    9874:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9878:	eb001ee6 	bl	11418 <EnterCritical>
    987c:	eafffff3 	b	9850 <CGPIOPin::DisableInterrupt()+0x4c>
    9880:	eb001f0e 	bl	114c0 <LeaveCritical>
    9884:	eafffff8 	b	986c <CGPIOPin::DisableInterrupt()+0x68>
    9888:	e59f1020 	ldr	r1, [pc, #32]	; 98b0 <CGPIOPin::DisableInterrupt()+0xac>
    988c:	e3a020fb 	mov	r2, #251, 0	; 0xfb
    9890:	e2810f75 	add	r0, r1, #468	; 0x1d4
    9894:	eb00209b 	bl	11b08 <assertion_failed>
    9898:	e59f1010 	ldr	r1, [pc, #16]	; 98b0 <CGPIOPin::DisableInterrupt()+0xac>
    989c:	e3a020f7 	mov	r2, #247, 0	; 0xf7
    98a0:	e2810090 	add	r0, r1, #144, 0	; 0x90
    98a4:	eb002097 	bl	11b08 <assertion_failed>
    98a8:	0001cc40 	.word	0x0001cc40
    98ac:	2020004c 	.word	0x2020004c
    98b0:	0001986c 	.word	0x0001986c

000098b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    98b4:	e5d03010 	ldrb	r3, [r0, #16]
    98b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98bc:	e2432002 	sub	r2, r3, #2, 0
    98c0:	e3530000 	cmp	r3, #0, 0
    98c4:	13520001 	cmpne	r2, #1, 0
    98c8:	8a000030 	bhi	9990 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    98cc:	e590301c 	ldr	r3, [r0, #28]
    98d0:	e1a04000 	mov	r4, r0
    98d4:	e3530000 	cmp	r3, #0, 0
    98d8:	0a00001c 	beq	9950 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    98dc:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    98e0:	e3530006 	cmp	r3, #6, 0
    98e4:	1a00001d 	bne	9960 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
    98e8:	e3510005 	cmp	r1, #5, 0
    98ec:	8a00001f 	bhi	9970 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
    98f0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    98f4:	e1530001 	cmp	r3, r1
    98f8:	0a000020 	beq	9980 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    98fc:	e59f709c 	ldr	r7, [pc, #156]	; 99a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    9900:	e5903008 	ldr	r3, [r0, #8]
    9904:	e5970000 	ldr	r0, [r7]
    9908:	e59f6094 	ldr	r6, [pc, #148]	; 99a4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    990c:	e0815081 	add	r5, r1, r1, lsl #1
    9910:	e3500000 	cmp	r0, #0, 0
    9914:	e5c41026 	strb	r1, [r4, #38]	; 0x26
    9918:	e1a05105 	lsl	r5, r5, #2
    991c:	e0836006 	add	r6, r3, r6
    9920:	1a000008 	bne	9948 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    9924:	e594200c 	ldr	r2, [r4, #12]
    9928:	e7963005 	ldr	r3, [r6, r5]
    992c:	e1833002 	orr	r3, r3, r2
    9930:	e7863005 	str	r3, [r6, r5]
    9934:	e5973000 	ldr	r3, [r7]
    9938:	e3530000 	cmp	r3, #0, 0
    993c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9940:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9944:	ea001edd 	b	114c0 <LeaveCritical>
    9948:	eb001eb2 	bl	11418 <EnterCritical>
    994c:	eafffff4 	b	9924 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
    9950:	e59f1050 	ldr	r1, [pc, #80]	; 99a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9954:	e59f2050 	ldr	r2, [pc, #80]	; 99ac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
    9958:	e2810f61 	add	r0, r1, #388	; 0x184
    995c:	eb002069 	bl	11b08 <assertion_failed>
    9960:	e59f1040 	ldr	r1, [pc, #64]	; 99a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9964:	e59f2044 	ldr	r2, [pc, #68]	; 99b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
    9968:	e2810f4b 	add	r0, r1, #300	; 0x12c
    996c:	eb002065 	bl	11b08 <assertion_failed>
    9970:	e59f1030 	ldr	r1, [pc, #48]	; 99a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9974:	e3a02e11 	mov	r2, #272	; 0x110
    9978:	e2810f65 	add	r0, r1, #404	; 0x194
    997c:	eb002061 	bl	11b08 <assertion_failed>
    9980:	e59f1020 	ldr	r1, [pc, #32]	; 99a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9984:	e59f2028 	ldr	r2, [pc, #40]	; 99b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
    9988:	e2810f7e 	add	r0, r1, #504	; 0x1f8
    998c:	eb00205d 	bl	11b08 <assertion_failed>
    9990:	e59f1010 	ldr	r1, [pc, #16]	; 99a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    9994:	e59f201c 	ldr	r2, [pc, #28]	; 99b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
    9998:	e2810090 	add	r0, r1, #144, 0	; 0x90
    999c:	eb002059 	bl	11b08 <assertion_failed>
    99a0:	0001cc40 	.word	0x0001cc40
    99a4:	2020004c 	.word	0x2020004c
    99a8:	0001986c 	.word	0x0001986c
    99ac:	0000010d 	.word	0x0000010d
    99b0:	0000010f 	.word	0x0000010f
    99b4:	00000111 	.word	0x00000111
    99b8:	0000010a 	.word	0x0000010a

000099bc <CGPIOPin::DisableInterrupt2()>:
    99bc:	e5d03010 	ldrb	r3, [r0, #16]
    99c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    99c4:	e2432002 	sub	r2, r3, #2, 0
    99c8:	e3530000 	cmp	r3, #0, 0
    99cc:	13520001 	cmpne	r2, #1, 0
    99d0:	8a00001e 	bhi	9a50 <CGPIOPin::DisableInterrupt2()+0x94>
    99d4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    99d8:	e1a05000 	mov	r5, r0
    99dc:	e3530005 	cmp	r3, #5, 0
    99e0:	8a000016 	bhi	9a40 <CGPIOPin::DisableInterrupt2()+0x84>
    99e4:	e59f7074 	ldr	r7, [pc, #116]	; 9a60 <CGPIOPin::DisableInterrupt2()+0xa4>
    99e8:	e5902008 	ldr	r2, [r0, #8]
    99ec:	e5970000 	ldr	r0, [r7]
    99f0:	e59f606c 	ldr	r6, [pc, #108]	; 9a64 <CGPIOPin::DisableInterrupt2()+0xa8>
    99f4:	e0833083 	add	r3, r3, r3, lsl #1
    99f8:	e3500000 	cmp	r0, #0, 0
    99fc:	e1a04103 	lsl	r4, r3, #2
    9a00:	e0826006 	add	r6, r2, r6
    9a04:	1a000009 	bne	9a30 <CGPIOPin::DisableInterrupt2()+0x74>
    9a08:	e7963004 	ldr	r3, [r6, r4]
    9a0c:	e595200c 	ldr	r2, [r5, #12]
    9a10:	e1c33002 	bic	r3, r3, r2
    9a14:	e7863004 	str	r3, [r6, r4]
    9a18:	e5973000 	ldr	r3, [r7]
    9a1c:	e3530000 	cmp	r3, #0, 0
    9a20:	1a000004 	bne	9a38 <CGPIOPin::DisableInterrupt2()+0x7c>
    9a24:	e3a03006 	mov	r3, #6, 0
    9a28:	e5c53026 	strb	r3, [r5, #38]	; 0x26
    9a2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a30:	eb001e78 	bl	11418 <EnterCritical>
    9a34:	eafffff3 	b	9a08 <CGPIOPin::DisableInterrupt2()+0x4c>
    9a38:	eb001ea0 	bl	114c0 <LeaveCritical>
    9a3c:	eafffff8 	b	9a24 <CGPIOPin::DisableInterrupt2()+0x68>
    9a40:	e59f1020 	ldr	r1, [pc, #32]	; 9a68 <CGPIOPin::DisableInterrupt2()+0xac>
    9a44:	e3a02f49 	mov	r2, #292	; 0x124
    9a48:	e2810f85 	add	r0, r1, #532	; 0x214
    9a4c:	eb00202d 	bl	11b08 <assertion_failed>
    9a50:	e59f1010 	ldr	r1, [pc, #16]	; 9a68 <CGPIOPin::DisableInterrupt2()+0xac>
    9a54:	e3a02e12 	mov	r2, #288	; 0x120
    9a58:	e2810090 	add	r0, r1, #144, 0	; 0x90
    9a5c:	eb002029 	bl	11b08 <assertion_failed>
    9a60:	0001cc40 	.word	0x0001cc40
    9a64:	2020004c 	.word	0x2020004c
    9a68:	0001986c 	.word	0x0001986c

00009a6c <CGPIOPin::AcknowledgeInterrupt()>:
    9a6c:	e590301c 	ldr	r3, [r0, #28]
    9a70:	e92d4010 	push	{r4, lr}
    9a74:	e3530000 	cmp	r3, #0, 0
    9a78:	0a000009 	beq	9aa4 <CGPIOPin::AcknowledgeInterrupt()+0x38>
    9a7c:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
    9a80:	e3530000 	cmp	r3, #0, 0
    9a84:	1a00000a 	bne	9ab4 <CGPIOPin::AcknowledgeInterrupt()+0x48>
    9a88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9a8c:	e59f2030 	ldr	r2, [pc, #48]	; 9ac4 <CGPIOPin::AcknowledgeInterrupt()+0x58>
    9a90:	e590c00c 	ldr	ip, [r0, #12]
    9a94:	e5901008 	ldr	r1, [r0, #8]
    9a98:	e781c002 	str	ip, [r1, r2]
    9a9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9aa0:	e8bd8010 	pop	{r4, pc}
    9aa4:	e59f101c 	ldr	r1, [pc, #28]	; 9ac8 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
    9aa8:	e59f201c 	ldr	r2, [pc, #28]	; 9acc <CGPIOPin::AcknowledgeInterrupt()+0x60>
    9aac:	e2810f61 	add	r0, r1, #388	; 0x184
    9ab0:	eb002014 	bl	11b08 <assertion_failed>
    9ab4:	e59f100c 	ldr	r1, [pc, #12]	; 9ac8 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
    9ab8:	e3a02f4d 	mov	r2, #308	; 0x134
    9abc:	e2810f8e 	add	r0, r1, #568	; 0x238
    9ac0:	eb002010 	bl	11b08 <assertion_failed>
    9ac4:	20200040 	.word	0x20200040
    9ac8:	0001986c 	.word	0x0001986c
    9acc:	00000133 	.word	0x00000133

00009ad0 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    9ad0:	e3a03000 	mov	r3, #0, 0
    9ad4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9ad8:	e1d13000 	bics	r3, r1, r0
    9adc:	159f2018 	ldrne	r2, [pc, #24]	; 9afc <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
    9ae0:	15823028 	strne	r3, [r2, #40]	; 0x28
    9ae4:	e0100001 	ands	r0, r0, r1
    9ae8:	159f300c 	ldrne	r3, [pc, #12]	; 9afc <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
    9aec:	1583001c 	strne	r0, [r3, #28]
    9af0:	e3a03000 	mov	r3, #0, 0
    9af4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9af8:	e12fff1e 	bx	lr
    9afc:	20200000 	.word	0x20200000

00009b00 <CGPIOPin::ReadAll()>:
    9b00:	e3a03000 	mov	r3, #0, 0
    9b04:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9b08:	e59f2008 	ldr	r2, [pc, #8]	; 9b18 <CGPIOPin::ReadAll()+0x18>
    9b0c:	e5920034 	ldr	r0, [r2, #52]	; 0x34
    9b10:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9b14:	e12fff1e 	bx	lr
    9b18:	20200000 	.word	0x20200000

00009b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    9b1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b20:	e59f7080 	ldr	r7, [pc, #128]	; 9ba8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
    9b24:	e1a04000 	mov	r4, r0
    9b28:	e5970000 	ldr	r0, [r7]
    9b2c:	e1a05001 	mov	r5, r1
    9b30:	e3500000 	cmp	r0, #0, 0
    9b34:	1a000015 	bne	9b90 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
    9b38:	e3a06000 	mov	r6, #0, 0
    9b3c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    9b40:	e3550002 	cmp	r5, #2, 0
    9b44:	e5949008 	ldr	r9, [r4, #8]
    9b48:	e59f805c 	ldr	r8, [pc, #92]	; 9bac <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
    9b4c:	8a000011 	bhi	9b98 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
    9b50:	e59fa058 	ldr	sl, [pc, #88]	; 9bb0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
    9b54:	e3a00005 	mov	r0, #5, 0
    9b58:	e58a5094 	str	r5, [sl, #148]	; 0x94
    9b5c:	eb001770 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
    9b60:	e594300c 	ldr	r3, [r4, #12]
    9b64:	e3a00005 	mov	r0, #5, 0
    9b68:	e7893008 	str	r3, [r9, r8]
    9b6c:	eb00176c 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
    9b70:	e58a6094 	str	r6, [sl, #148]	; 0x94
    9b74:	e7896008 	str	r6, [r9, r8]
    9b78:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    9b7c:	e5973000 	ldr	r3, [r7]
    9b80:	e3530000 	cmp	r3, #0, 0
    9b84:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9b88:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b8c:	ea001e4b 	b	114c0 <LeaveCritical>
    9b90:	eb001e20 	bl	11418 <EnterCritical>
    9b94:	eaffffe7 	b	9b38 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
    9b98:	e59f1014 	ldr	r1, [pc, #20]	; 9bb4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
    9b9c:	e59f2014 	ldr	r2, [pc, #20]	; 9bb8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
    9ba0:	e2810f91 	add	r0, r1, #580	; 0x244
    9ba4:	eb001fd7 	bl	11b08 <assertion_failed>
    9ba8:	0001cc40 	.word	0x0001cc40
    9bac:	20200098 	.word	0x20200098
    9bb0:	20200000 	.word	0x20200000
    9bb4:	0001986c 	.word	0x0001986c
    9bb8:	00000165 	.word	0x00000165

00009bbc <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9bbc:	e5903004 	ldr	r3, [r0, #4]
    9bc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9bc4:	e3530035 	cmp	r3, #53, 0	; 0x35
    9bc8:	8a00001e 	bhi	9c48 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    9bcc:	e59f2094 	ldr	r2, [pc, #148]	; 9c68 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
    9bd0:	e1a06001 	mov	r6, r1
    9bd4:	e3510005 	cmp	r1, #5, 0
    9bd8:	e0821392 	umull	r1, r2, r2, r3
    9bdc:	e1a021a2 	lsr	r2, r2, #3
    9be0:	e2820302 	add	r0, r2, #134217728	; 0x8000000
    9be4:	e0822102 	add	r2, r2, r2, lsl #2
    9be8:	e2800702 	add	r0, r0, #524288	; 0x80000
    9bec:	e0433082 	sub	r3, r3, r2, lsl #1
    9bf0:	e1a05100 	lsl	r5, r0, #2
    9bf4:	e0834083 	add	r4, r3, r3, lsl #1
    9bf8:	8a000016 	bhi	9c58 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
    9bfc:	e59f7068 	ldr	r7, [pc, #104]	; 9c6c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    9c00:	e5970000 	ldr	r0, [r7]
    9c04:	e3500000 	cmp	r0, #0, 0
    9c08:	1a00000c 	bne	9c40 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    9c0c:	e3a00007 	mov	r0, #7, 0
    9c10:	e59f1058 	ldr	r1, [pc, #88]	; 9c70 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
    9c14:	e5953000 	ldr	r3, [r5]
    9c18:	e0816106 	add	r6, r1, r6, lsl #2
    9c1c:	e5962260 	ldr	r2, [r6, #608]	; 0x260
    9c20:	e1c33410 	bic	r3, r3, r0, lsl r4
    9c24:	e1833412 	orr	r3, r3, r2, lsl r4
    9c28:	e5853000 	str	r3, [r5]
    9c2c:	e5973000 	ldr	r3, [r7]
    9c30:	e3530000 	cmp	r3, #0, 0
    9c34:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9c38:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9c3c:	ea001e1f 	b	114c0 <LeaveCritical>
    9c40:	eb001df4 	bl	11418 <EnterCritical>
    9c44:	eafffff0 	b	9c0c <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    9c48:	e59f1024 	ldr	r1, [pc, #36]	; 9c74 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    9c4c:	e59f2024 	ldr	r2, [pc, #36]	; 9c78 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    9c50:	e2810020 	add	r0, r1, #32, 0
    9c54:	eb001fab 	bl	11b08 <assertion_failed>
    9c58:	e59f1014 	ldr	r1, [pc, #20]	; 9c74 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    9c5c:	e59f2018 	ldr	r2, [pc, #24]	; 9c7c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    9c60:	e2810f9a 	add	r0, r1, #616	; 0x268
    9c64:	eb001fa7 	bl	11b08 <assertion_failed>
    9c68:	cccccccd 	.word	0xcccccccd
    9c6c:	0001cc40 	.word	0x0001cc40
    9c70:	0001985c 	.word	0x0001985c
    9c74:	0001986c 	.word	0x0001986c
    9c78:	00000181 	.word	0x00000181
    9c7c:	00000185 	.word	0x00000185

00009c80 <CGPIOPin::InterruptHandler()>:
    9c80:	e5d03010 	ldrb	r3, [r0, #16]
    9c84:	e92d4010 	push	{r4, lr}
    9c88:	e2432002 	sub	r2, r3, #2, 0
    9c8c:	e3530000 	cmp	r3, #0, 0
    9c90:	13520001 	cmpne	r2, #1, 0
    9c94:	8a000013 	bhi	9ce8 <CGPIOPin::InterruptHandler()+0x68>
    9c98:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9c9c:	e3530005 	cmp	r3, #5, 0
    9ca0:	8a000005 	bhi	9cbc <CGPIOPin::InterruptHandler()+0x3c>
    9ca4:	e590301c 	ldr	r3, [r0, #28]
    9ca8:	e3530000 	cmp	r3, #0, 0
    9cac:	0a000009 	beq	9cd8 <CGPIOPin::InterruptHandler()+0x58>
    9cb0:	e8bd4010 	pop	{r4, lr}
    9cb4:	e5900020 	ldr	r0, [r0, #32]
    9cb8:	e12fff13 	bx	r3
    9cbc:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9cc0:	e3530005 	cmp	r3, #5, 0
    9cc4:	9afffff6 	bls	9ca4 <CGPIOPin::InterruptHandler()+0x24>
    9cc8:	e59f1028 	ldr	r1, [pc, #40]	; 9cf8 <CGPIOPin::InterruptHandler()+0x78>
    9ccc:	e59f2028 	ldr	r2, [pc, #40]	; 9cfc <CGPIOPin::InterruptHandler()+0x7c>
    9cd0:	e2810f9e 	add	r0, r1, #632	; 0x278
    9cd4:	eb001f8b 	bl	11b08 <assertion_failed>
    9cd8:	e59f1018 	ldr	r1, [pc, #24]	; 9cf8 <CGPIOPin::InterruptHandler()+0x78>
    9cdc:	e3a02f66 	mov	r2, #408	; 0x198
    9ce0:	e2810f61 	add	r0, r1, #388	; 0x184
    9ce4:	eb001f87 	bl	11b08 <assertion_failed>
    9ce8:	e59f1008 	ldr	r1, [pc, #8]	; 9cf8 <CGPIOPin::InterruptHandler()+0x78>
    9cec:	e59f200c 	ldr	r2, [pc, #12]	; 9d00 <CGPIOPin::InterruptHandler()+0x80>
    9cf0:	e2810090 	add	r0, r1, #144, 0	; 0x90
    9cf4:	eb001f83 	bl	11b08 <assertion_failed>
    9cf8:	0001986c 	.word	0x0001986c
    9cfc:	00000195 	.word	0x00000195
    9d00:	00000192 	.word	0x00000192

00009d04 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9d04:	e3500035 	cmp	r0, #53, 0	; 0x35
    9d08:	e92d4070 	push	{r4, r5, r6, lr}
    9d0c:	8a000018 	bhi	9d74 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    9d10:	e3a02001 	mov	r2, #1, 0
    9d14:	e59f6068 	ldr	r6, [pc, #104]	; 9d84 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
    9d18:	e59f4068 	ldr	r4, [pc, #104]	; 9d88 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    9d1c:	e5963000 	ldr	r3, [r6]
    9d20:	e08442a0 	add	r4, r4, r0, lsr #5
    9d24:	e200501f 	and	r5, r0, #31, 0
    9d28:	e3530000 	cmp	r3, #0, 0
    9d2c:	e1a04104 	lsl	r4, r4, #2
    9d30:	e1a05512 	lsl	r5, r2, r5
    9d34:	1a00000b 	bne	9d68 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
    9d38:	e1e02005 	mvn	r2, r5
    9d3c:	e59f1048 	ldr	r1, [pc, #72]	; 9d8c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9d40:	e5943000 	ldr	r3, [r4]
    9d44:	e0033002 	and	r3, r3, r2
    9d48:	e484300c 	str	r3, [r4], #12
    9d4c:	e1540001 	cmp	r4, r1
    9d50:	9afffffa 	bls	9d40 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    9d54:	e5963000 	ldr	r3, [r6]
    9d58:	e3530000 	cmp	r3, #0, 0
    9d5c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9d60:	e8bd4070 	pop	{r4, r5, r6, lr}
    9d64:	ea001dd5 	b	114c0 <LeaveCritical>
    9d68:	e1a00003 	mov	r0, r3
    9d6c:	eb001da9 	bl	11418 <EnterCritical>
    9d70:	eafffff0 	b	9d38 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
    9d74:	e59f1014 	ldr	r1, [pc, #20]	; 9d90 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    9d78:	e59f2014 	ldr	r2, [pc, #20]	; 9d94 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
    9d7c:	e2810fb1 	add	r0, r1, #708	; 0x2c4
    9d80:	eb001f60 	bl	11b08 <assertion_failed>
    9d84:	0001cc40 	.word	0x0001cc40
    9d88:	08080013 	.word	0x08080013
    9d8c:	2020008b 	.word	0x2020008b
    9d90:	0001986c 	.word	0x0001986c
    9d94:	0000019e 	.word	0x0000019e

00009d98 <__static_initialization_and_destruction_0(int, int)>:
    9d98:	e59f3014 	ldr	r3, [pc, #20]	; 9db4 <__static_initialization_and_destruction_0(int, int)+0x1c>
    9d9c:	e1510003 	cmp	r1, r3
    9da0:	03500001 	cmpeq	r0, #1, 0
    9da4:	03a02001 	moveq	r2, #1, 0
    9da8:	059f3008 	ldreq	r3, [pc, #8]	; 9db8 <__static_initialization_and_destruction_0(int, int)+0x20>
    9dac:	05832000 	streq	r2, [r3]
    9db0:	e12fff1e 	bx	lr
    9db4:	0000ffff 	.word	0x0000ffff
    9db8:	0001cc40 	.word	0x0001cc40

00009dbc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    9dbc:	e3a02001 	mov	r2, #1, 0
    9dc0:	e59f3004 	ldr	r3, [pc, #4]	; 9dcc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    9dc4:	e5832000 	str	r2, [r3]
    9dc8:	e12fff1e 	bx	lr
    9dcc:	0001cc40 	.word	0x0001cc40

00009dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    9dd0:	e3a01000 	mov	r1, #0, 0
    9dd4:	ea00000a 	b	9e04 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    9dd8:	e3520009 	cmp	r2, #9, 0
    9ddc:	8a000011 	bhi	9e28 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    9de0:	e3730001 	cmn	r3, #1, 0
    9de4:	13a02000 	movne	r2, #0, 0
    9de8:	03a02001 	moveq	r2, #1, 0
    9dec:	e1510003 	cmp	r1, r3
    9df0:	91a01002 	movls	r1, r2
    9df4:	83821001 	orrhi	r1, r2, #1, 0
    9df8:	e3510000 	cmp	r1, #0, 0
    9dfc:	1a000009 	bne	9e28 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    9e00:	e1a01003 	mov	r1, r3
    9e04:	e0d0c0d1 	ldrsb	ip, [r0], #1
    9e08:	e0813101 	add	r3, r1, r1, lsl #2
    9e0c:	e24c2030 	sub	r2, ip, #48, 0	; 0x30
    9e10:	e35c0000 	cmp	ip, #0, 0
    9e14:	e0823083 	add	r3, r2, r3, lsl #1
    9e18:	e6ef2072 	uxtb	r2, r2
    9e1c:	1affffed 	bne	9dd8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    9e20:	e1a00001 	mov	r0, r1
    9e24:	e12fff1e 	bx	lr
    9e28:	e3e01000 	mvn	r1, #0, 0
    9e2c:	e1a00001 	mov	r0, r1
    9e30:	e12fff1e 	bx	lr

00009e34 <CKernelOptions::~CKernelOptions()>:
    9e34:	e3a02000 	mov	r2, #0, 0
    9e38:	e59f3004 	ldr	r3, [pc, #4]	; 9e44 <CKernelOptions::~CKernelOptions()+0x10>
    9e3c:	e5832000 	str	r2, [r3]
    9e40:	e12fff1e 	bx	lr
    9e44:	0001cc44 	.word	0x0001cc44

00009e48 <CKernelOptions::GetWidth() const>:
    9e48:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    9e4c:	e12fff1e 	bx	lr

00009e50 <CKernelOptions::GetHeight() const>:
    9e50:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    9e54:	e12fff1e 	bx	lr

00009e58 <CKernelOptions::GetLogDevice() const>:
    9e58:	e2800e81 	add	r0, r0, #2064	; 0x810
    9e5c:	e2800008 	add	r0, r0, #8, 0
    9e60:	e12fff1e 	bx	lr

00009e64 <CKernelOptions::GetLogLevel() const>:
    9e64:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    9e68:	e12fff1e 	bx	lr

00009e6c <CKernelOptions::GetKeyMap() const>:
    9e6c:	e2800e83 	add	r0, r0, #2096	; 0x830
    9e70:	e12fff1e 	bx	lr

00009e74 <CKernelOptions::GetUSBPowerDelay() const>:
    9e74:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    9e78:	e12fff1e 	bx	lr

00009e7c <CKernelOptions::GetUSBFullSpeed() const>:
    9e7c:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    9e80:	e12fff1e 	bx	lr

00009e84 <CKernelOptions::GetSoundDevice() const>:
    9e84:	e2800e83 	add	r0, r0, #2096	; 0x830
    9e88:	e2800009 	add	r0, r0, #9, 0
    9e8c:	e12fff1e 	bx	lr

00009e90 <CKernelOptions::GetSoundOption() const>:
    9e90:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
    9e94:	e12fff1e 	bx	lr

00009e98 <CKernelOptions::GetCPUSpeed() const>:
    9e98:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
    9e9c:	e12fff1e 	bx	lr

00009ea0 <CKernelOptions::GetSoCMaxTemp() const>:
    9ea0:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
    9ea4:	e12fff1e 	bx	lr

00009ea8 <CKernelOptions::Get()>:
    9ea8:	e59f3004 	ldr	r3, [pc, #4]	; 9eb4 <CKernelOptions::Get()+0xc>
    9eac:	e5930000 	ldr	r0, [r3]
    9eb0:	e12fff1e 	bx	lr
    9eb4:	0001cc44 	.word	0x0001cc44

00009eb8 <CKernelOptions::GetToken()>:
    9eb8:	e1a01000 	mov	r1, r0
    9ebc:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
    9ec0:	e1d030d0 	ldrsb	r3, [r0]
    9ec4:	e3530000 	cmp	r3, #0, 0
    9ec8:	1a000005 	bne	9ee4 <CKernelOptions::GetToken()+0x2c>
    9ecc:	ea000017 	b	9f30 <CKernelOptions::GetToken()+0x78>
    9ed0:	e2800001 	add	r0, r0, #1, 0
    9ed4:	e581080c 	str	r0, [r1, #2060]	; 0x80c
    9ed8:	e1d030d0 	ldrsb	r3, [r0]
    9edc:	e3530000 	cmp	r3, #0, 0
    9ee0:	0a000012 	beq	9f30 <CKernelOptions::GetToken()+0x78>
    9ee4:	e3530020 	cmp	r3, #32, 0
    9ee8:	0afffff8 	beq	9ed0 <CKernelOptions::GetToken()+0x18>
    9eec:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
    9ef0:	e1d320d0 	ldrsb	r2, [r3]
    9ef4:	e3520000 	cmp	r2, #0, 0
    9ef8:	1a000005 	bne	9f14 <CKernelOptions::GetToken()+0x5c>
    9efc:	e12fff1e 	bx	lr
    9f00:	e2833001 	add	r3, r3, #1, 0
    9f04:	e581380c 	str	r3, [r1, #2060]	; 0x80c
    9f08:	e1d320d0 	ldrsb	r2, [r3]
    9f0c:	e3520000 	cmp	r2, #0, 0
    9f10:	012fff1e 	bxeq	lr
    9f14:	e3520020 	cmp	r2, #32, 0
    9f18:	1afffff8 	bne	9f00 <CKernelOptions::GetToken()+0x48>
    9f1c:	e3a02000 	mov	r2, #0, 0
    9f20:	e283c001 	add	ip, r3, #1, 0
    9f24:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
    9f28:	e5c32000 	strb	r2, [r3]
    9f2c:	e12fff1e 	bx	lr
    9f30:	e3a00000 	mov	r0, #0, 0
    9f34:	e12fff1e 	bx	lr

00009f38 <CKernelOptions::CKernelOptions()>:
    9f38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f3c:	e3a02004 	mov	r2, #4, 0
    9f40:	e1a05000 	mov	r5, r0
    9f44:	e3a04000 	mov	r4, #0, 0
    9f48:	e3a0303c 	mov	r3, #60, 0	; 0x3c
    9f4c:	e2807e81 	add	r7, r0, #2064	; 0x810
    9f50:	e2877008 	add	r7, r7, #8, 0
    9f54:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9f58:	e5803858 	str	r3, [r0, #2136]	; 0x858
    9f5c:	e24dd014 	sub	sp, sp, #20, 0
    9f60:	e59f1378 	ldr	r1, [pc, #888]	; a2e0 <CKernelOptions::CKernelOptions()+0x3a8>
    9f64:	e1a00007 	mov	r0, r7
    9f68:	e5854810 	str	r4, [r5, #2064]	; 0x810
    9f6c:	e5854814 	str	r4, [r5, #2068]	; 0x814
    9f70:	e5854834 	str	r4, [r5, #2100]	; 0x834
    9f74:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    9f78:	e5854850 	str	r4, [r5, #2128]	; 0x850
    9f7c:	e5c54854 	strb	r4, [r5, #2132]	; 0x854
    9f80:	e2859e83 	add	r9, r5, #2096	; 0x830
    9f84:	eb001792 	bl	fdd4 <strcpy>
    9f88:	e59f1354 	ldr	r1, [pc, #852]	; a2e4 <CKernelOptions::CKernelOptions()+0x3ac>
    9f8c:	e1a00009 	mov	r0, r9
    9f90:	eb00178f 	bl	fdd4 <strcpy>
    9f94:	e59f334c 	ldr	r3, [pc, #844]	; a2e8 <CKernelOptions::CKernelOptions()+0x3b0>
    9f98:	e1a01004 	mov	r1, r4
    9f9c:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
    9fa0:	e28d0008 	add	r0, sp, #8, 0
    9fa4:	e5835000 	str	r5, [r3]
    9fa8:	eb002033 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9fac:	e1a02005 	mov	r2, r5
    9fb0:	e59f3334 	ldr	r3, [pc, #820]	; a2ec <CKernelOptions::CKernelOptions()+0x3b4>
    9fb4:	e59f1334 	ldr	r1, [pc, #820]	; a2f0 <CKernelOptions::CKernelOptions()+0x3b8>
    9fb8:	e58d4000 	str	r4, [sp]
    9fbc:	e28d0008 	add	r0, sp, #8, 0
    9fc0:	eb002039 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9fc4:	e1500004 	cmp	r0, r4
    9fc8:	0a00002b 	beq	a07c <CKernelOptions::CKernelOptions()+0x144>
    9fcc:	e5953008 	ldr	r3, [r5, #8]
    9fd0:	e3530b02 	cmp	r3, #2048	; 0x800
    9fd4:	2a000028 	bcs	a07c <CKernelOptions::CKernelOptions()+0x144>
    9fd8:	e0853003 	add	r3, r5, r3
    9fdc:	e285200c 	add	r2, r5, #12, 0
    9fe0:	e59f830c 	ldr	r8, [pc, #780]	; a2f4 <CKernelOptions::CKernelOptions()+0x3bc>
    9fe4:	e59fa30c 	ldr	sl, [pc, #780]	; a2f8 <CKernelOptions::CKernelOptions()+0x3c0>
    9fe8:	e5c3400c 	strb	r4, [r3, #12]
    9fec:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    9ff0:	e1a00005 	mov	r0, r5
    9ff4:	ebffffaf 	bl	9eb8 <CKernelOptions::GetToken()>
    9ff8:	e2506000 	subs	r6, r0, #0, 0
    9ffc:	0a00001e 	beq	a07c <CKernelOptions::CKernelOptions()+0x144>
    a000:	e1d630d0 	ldrsb	r3, [r6]
    a004:	e3530000 	cmp	r3, #0, 0
    a008:	0a00002e 	beq	a0c8 <CKernelOptions::CKernelOptions()+0x190>
    a00c:	e1a04006 	mov	r4, r6
    a010:	ea000002 	b	a020 <CKernelOptions::CKernelOptions()+0xe8>
    a014:	e1f430d1 	ldrsb	r3, [r4, #1]!
    a018:	e3530000 	cmp	r3, #0, 0
    a01c:	0a000029 	beq	a0c8 <CKernelOptions::CKernelOptions()+0x190>
    a020:	e353003d 	cmp	r3, #61, 0	; 0x3d
    a024:	1afffffa 	bne	a014 <CKernelOptions::CKernelOptions()+0xdc>
    a028:	e3a03000 	mov	r3, #0, 0
    a02c:	e1a0b004 	mov	fp, r4
    a030:	e1a01008 	mov	r1, r8
    a034:	e1a00006 	mov	r0, r6
    a038:	e4cb3001 	strb	r3, [fp], #1
    a03c:	eb0016ca 	bl	fb6c <strcmp>
    a040:	e3500000 	cmp	r0, #0, 0
    a044:	1a000011 	bne	a090 <CKernelOptions::CKernelOptions()+0x158>
    a048:	e1d430d1 	ldrsb	r3, [r4, #1]
    a04c:	e3530000 	cmp	r3, #0, 0
    a050:	0affffe6 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a054:	e1a0000b 	mov	r0, fp
    a058:	ebffff5c 	bl	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a05c:	e59f3298 	ldr	r3, [pc, #664]	; a2fc <CKernelOptions::CKernelOptions()+0x3c4>
    a060:	e2402d0a 	sub	r2, r0, #640	; 0x280
    a064:	e1520003 	cmp	r2, r3
    a068:	95850810 	strls	r0, [r5, #2064]	; 0x810
    a06c:	e1a00005 	mov	r0, r5
    a070:	ebffff90 	bl	9eb8 <CKernelOptions::GetToken()>
    a074:	e2506000 	subs	r6, r0, #0, 0
    a078:	1affffe0 	bne	a000 <CKernelOptions::CKernelOptions()+0xc8>
    a07c:	e28d0008 	add	r0, sp, #8, 0
    a080:	eb002004 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
    a084:	e1a00005 	mov	r0, r5
    a088:	e28dd014 	add	sp, sp, #20, 0
    a08c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a090:	e1a0100a 	mov	r1, sl
    a094:	e1a00006 	mov	r0, r6
    a098:	eb0016b3 	bl	fb6c <strcmp>
    a09c:	e3500000 	cmp	r0, #0, 0
    a0a0:	1a000013 	bne	a0f4 <CKernelOptions::CKernelOptions()+0x1bc>
    a0a4:	e1d430d1 	ldrsb	r3, [r4, #1]
    a0a8:	e3530000 	cmp	r3, #0, 0
    a0ac:	0affffcf 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a0b0:	e1a0000b 	mov	r0, fp
    a0b4:	ebffff45 	bl	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a0b8:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    a0bc:	e3530f96 	cmp	r3, #600	; 0x258
    a0c0:	95850814 	strls	r0, [r5, #2068]	; 0x814
    a0c4:	eaffffc9 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a0c8:	e1a01008 	mov	r1, r8
    a0cc:	e1a00006 	mov	r0, r6
    a0d0:	eb0016a5 	bl	fb6c <strcmp>
    a0d4:	e3500000 	cmp	r0, #0, 0
    a0d8:	0affffc4 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a0dc:	e1a0100a 	mov	r1, sl
    a0e0:	e1a00006 	mov	r0, r6
    a0e4:	eb0016a0 	bl	fb6c <strcmp>
    a0e8:	e3500000 	cmp	r0, #0, 0
    a0ec:	13a0b000 	movne	fp, #0, 0
    a0f0:	0affffbe 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a0f4:	e1a00006 	mov	r0, r6
    a0f8:	e59f1200 	ldr	r1, [pc, #512]	; a300 <CKernelOptions::CKernelOptions()+0x3c8>
    a0fc:	eb00169a 	bl	fb6c <strcmp>
    a100:	e2504000 	subs	r4, r0, #0, 0
    a104:	0a00000e 	beq	a144 <CKernelOptions::CKernelOptions()+0x20c>
    a108:	e1a00006 	mov	r0, r6
    a10c:	e59f11f0 	ldr	r1, [pc, #496]	; a304 <CKernelOptions::CKernelOptions()+0x3cc>
    a110:	eb001695 	bl	fb6c <strcmp>
    a114:	e3500000 	cmp	r0, #0, 0
    a118:	1a00000f 	bne	a15c <CKernelOptions::CKernelOptions()+0x224>
    a11c:	e35b0000 	cmp	fp, #0, 0
    a120:	0affffb2 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a124:	e1db30d0 	ldrsb	r3, [fp]
    a128:	e3530000 	cmp	r3, #0, 0
    a12c:	0affffaf 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a130:	e1a0000b 	mov	r0, fp
    a134:	ebffff25 	bl	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a138:	e3500004 	cmp	r0, #4, 0
    a13c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    a140:	eaffffaa 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a144:	e1a0100b 	mov	r1, fp
    a148:	e3a02013 	mov	r2, #19, 0
    a14c:	e1a00007 	mov	r0, r7
    a150:	eb00172a 	bl	fe00 <strncpy>
    a154:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    a158:	eaffffa4 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a15c:	e1a00006 	mov	r0, r6
    a160:	e59f11a0 	ldr	r1, [pc, #416]	; a308 <CKernelOptions::CKernelOptions()+0x3d0>
    a164:	eb001680 	bl	fb6c <strcmp>
    a168:	e2504000 	subs	r4, r0, #0, 0
    a16c:	0a000010 	beq	a1b4 <CKernelOptions::CKernelOptions()+0x27c>
    a170:	e1a00006 	mov	r0, r6
    a174:	e59f1190 	ldr	r1, [pc, #400]	; a30c <CKernelOptions::CKernelOptions()+0x3d4>
    a178:	eb00167b 	bl	fb6c <strcmp>
    a17c:	e3500000 	cmp	r0, #0, 0
    a180:	1a000011 	bne	a1cc <CKernelOptions::CKernelOptions()+0x294>
    a184:	e35b0000 	cmp	fp, #0, 0
    a188:	0affff98 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a18c:	e1db30d0 	ldrsb	r3, [fp]
    a190:	e3530000 	cmp	r3, #0, 0
    a194:	0affff95 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a198:	e1a0000b 	mov	r0, fp
    a19c:	ebffff0b 	bl	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a1a0:	e59f3168 	ldr	r3, [pc, #360]	; a310 <CKernelOptions::CKernelOptions()+0x3d8>
    a1a4:	e24020c8 	sub	r2, r0, #200, 0	; 0xc8
    a1a8:	e1520003 	cmp	r2, r3
    a1ac:	95850834 	strls	r0, [r5, #2100]	; 0x834
    a1b0:	eaffff8e 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a1b4:	e1a0100b 	mov	r1, fp
    a1b8:	e3a02002 	mov	r2, #2, 0
    a1bc:	e1a00009 	mov	r0, r9
    a1c0:	eb00170e 	bl	fe00 <strncpy>
    a1c4:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    a1c8:	eaffff88 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a1cc:	e1a00006 	mov	r0, r6
    a1d0:	e59f113c 	ldr	r1, [pc, #316]	; a314 <CKernelOptions::CKernelOptions()+0x3dc>
    a1d4:	eb001664 	bl	fb6c <strcmp>
    a1d8:	e3500000 	cmp	r0, #0, 0
    a1dc:	1a000006 	bne	a1fc <CKernelOptions::CKernelOptions()+0x2c4>
    a1e0:	e1a0000b 	mov	r0, fp
    a1e4:	e59f112c 	ldr	r1, [pc, #300]	; a318 <CKernelOptions::CKernelOptions()+0x3e0>
    a1e8:	eb00165f 	bl	fb6c <strcmp>
    a1ec:	e3500000 	cmp	r0, #0, 0
    a1f0:	03a03001 	moveq	r3, #1, 0
    a1f4:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    a1f8:	eaffff7c 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a1fc:	e1a00006 	mov	r0, r6
    a200:	e59f1114 	ldr	r1, [pc, #276]	; a31c <CKernelOptions::CKernelOptions()+0x3e4>
    a204:	eb001658 	bl	fb6c <strcmp>
    a208:	e2504000 	subs	r4, r0, #0, 0
    a20c:	1a000005 	bne	a228 <CKernelOptions::CKernelOptions()+0x2f0>
    a210:	e1a0100b 	mov	r1, fp
    a214:	e3a02013 	mov	r2, #19, 0
    a218:	e2890009 	add	r0, r9, #9, 0
    a21c:	eb0016f7 	bl	fe00 <strncpy>
    a220:	e5c5484c 	strb	r4, [r5, #2124]	; 0x84c
    a224:	eaffff71 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a228:	e1a00006 	mov	r0, r6
    a22c:	e59f10ec 	ldr	r1, [pc, #236]	; a320 <CKernelOptions::CKernelOptions()+0x3e8>
    a230:	eb00164d 	bl	fb6c <strcmp>
    a234:	e3500000 	cmp	r0, #0, 0
    a238:	1a000009 	bne	a264 <CKernelOptions::CKernelOptions()+0x32c>
    a23c:	e35b0000 	cmp	fp, #0, 0
    a240:	0affff6a 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a244:	e1db30d0 	ldrsb	r3, [fp]
    a248:	e3530000 	cmp	r3, #0, 0
    a24c:	0affff67 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a250:	e1a0000b 	mov	r0, fp
    a254:	ebfffedd 	bl	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a258:	e3500002 	cmp	r0, #2, 0
    a25c:	95850850 	strls	r0, [r5, #2128]	; 0x850
    a260:	eaffff62 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a264:	e1a00006 	mov	r0, r6
    a268:	e59f10b4 	ldr	r1, [pc, #180]	; a324 <CKernelOptions::CKernelOptions()+0x3ec>
    a26c:	eb00163e 	bl	fb6c <strcmp>
    a270:	e3500000 	cmp	r0, #0, 0
    a274:	1a000006 	bne	a294 <CKernelOptions::CKernelOptions()+0x35c>
    a278:	e1a0000b 	mov	r0, fp
    a27c:	e59f10a4 	ldr	r1, [pc, #164]	; a328 <CKernelOptions::CKernelOptions()+0x3f0>
    a280:	eb001639 	bl	fb6c <strcmp>
    a284:	e3500000 	cmp	r0, #0, 0
    a288:	03a03001 	moveq	r3, #1, 0
    a28c:	05c53854 	strbeq	r3, [r5, #2132]	; 0x854
    a290:	eaffff56 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a294:	e1a00006 	mov	r0, r6
    a298:	e59f108c 	ldr	r1, [pc, #140]	; a32c <CKernelOptions::CKernelOptions()+0x3f4>
    a29c:	eb001632 	bl	fb6c <strcmp>
    a2a0:	e16f3f1b 	clz	r3, fp
    a2a4:	e3500000 	cmp	r0, #0, 0
    a2a8:	e1a032a3 	lsr	r3, r3, #5
    a2ac:	01a00003 	moveq	r0, r3
    a2b0:	13a00001 	movne	r0, #1, 0
    a2b4:	e3500000 	cmp	r0, #0, 0
    a2b8:	1affff4c 	bne	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a2bc:	e1db30d0 	ldrsb	r3, [fp]
    a2c0:	e3530000 	cmp	r3, #0, 0
    a2c4:	0affff49 	beq	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a2c8:	e1a0000b 	mov	r0, fp
    a2cc:	ebfffebf 	bl	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a2d0:	e2403028 	sub	r3, r0, #40, 0	; 0x28
    a2d4:	e3530026 	cmp	r3, #38, 0	; 0x26
    a2d8:	95850858 	strls	r0, [r5, #2136]	; 0x858
    a2dc:	eaffff43 	b	9ff0 <CKernelOptions::CKernelOptions()+0xb8>
    a2e0:	00019b44 	.word	0x00019b44
    a2e4:	00019b4c 	.word	0x00019b4c
    a2e8:	0001cc44 	.word	0x0001cc44
    a2ec:	0000080c 	.word	0x0000080c
    a2f0:	00050001 	.word	0x00050001
    a2f4:	00019bcc 	.word	0x00019bcc
    a2f8:	00019bc4 	.word	0x00019bc4
    a2fc:	0000053c 	.word	0x0000053c
    a300:	00019b50 	.word	0x00019b50
    a304:	00019b58 	.word	0x00019b58
    a308:	00019b64 	.word	0x00019b64
    a30c:	00019b6c 	.word	0x00019b6c
    a310:	00001e78 	.word	0x00001e78
    a314:	00019b7c 	.word	0x00019b7c
    a318:	00019b88 	.word	0x00019b88
    a31c:	00019b90 	.word	0x00019b90
    a320:	00019b9c 	.word	0x00019b9c
    a324:	00019ba8 	.word	0x00019ba8
    a328:	00019bb0 	.word	0x00019bb0
    a32c:	00019bb8 	.word	0x00019bb8

0000a330 <CKernelOptions::GetOptionValue(char*)>:
    a330:	e1d030d0 	ldrsb	r3, [r0]
    a334:	e3530000 	cmp	r3, #0, 0
    a338:	1a000003 	bne	a34c <CKernelOptions::GetOptionValue(char*)+0x1c>
    a33c:	ea000007 	b	a360 <CKernelOptions::GetOptionValue(char*)+0x30>
    a340:	e1f030d1 	ldrsb	r3, [r0, #1]!
    a344:	e3530000 	cmp	r3, #0, 0
    a348:	0a000004 	beq	a360 <CKernelOptions::GetOptionValue(char*)+0x30>
    a34c:	e353003d 	cmp	r3, #61, 0	; 0x3d
    a350:	1afffffa 	bne	a340 <CKernelOptions::GetOptionValue(char*)+0x10>
    a354:	e3a03000 	mov	r3, #0, 0
    a358:	e4c03001 	strb	r3, [r0], #1
    a35c:	e12fff1e 	bx	lr
    a360:	e1a00003 	mov	r0, r3
    a364:	e12fff1e 	bx	lr

0000a368 <CKernelOptions::GetDecimal(char*)>:
    a368:	e2503000 	subs	r3, r0, #0, 0
    a36c:	0a000003 	beq	a380 <CKernelOptions::GetDecimal(char*)+0x18>
    a370:	e1d330d0 	ldrsb	r3, [r3]
    a374:	e3530000 	cmp	r3, #0, 0
    a378:	0a000000 	beq	a380 <CKernelOptions::GetDecimal(char*)+0x18>
    a37c:	eafffe93 	b	9dd0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a380:	e3e00000 	mvn	r0, #0, 0
    a384:	e12fff1e 	bx	lr

0000a388 <CLogger::CLogger(unsigned int, CTimer*)>:
    a388:	e92d4010 	push	{r4, lr}
    a38c:	e3a03000 	mov	r3, #0, 0
    a390:	e1a04000 	mov	r4, r0
    a394:	e3a00001 	mov	r0, #1, 0
    a398:	e884000e 	stm	r4, {r1, r2, r3}
    a39c:	e584300c 	str	r3, [r4, #12]
    a3a0:	e5843010 	str	r3, [r4, #16]
    a3a4:	e5843014 	str	r3, [r4, #20]
    a3a8:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    a3ac:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    a3b0:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    a3b4:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    a3b8:	e5840018 	str	r0, [r4, #24]
    a3bc:	e58400ec 	str	r0, [r4, #236]	; 0xec
    a3c0:	e3a00901 	mov	r0, #16384	; 0x4000
    a3c4:	eb0018eb 	bl	10778 <operator new[](unsigned int)>
    a3c8:	e59f300c 	ldr	r3, [pc, #12]	; a3dc <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    a3cc:	e584000c 	str	r0, [r4, #12]
    a3d0:	e5834000 	str	r4, [r3]
    a3d4:	e1a00004 	mov	r0, r4
    a3d8:	e8bd8010 	pop	{r4, pc}
    a3dc:	0001cc48 	.word	0x0001cc48

0000a3e0 <CLogger::~CLogger()>:
    a3e0:	e92d4070 	push	{r4, r5, r6, lr}
    a3e4:	e3a02000 	mov	r2, #0, 0
    a3e8:	e1a04000 	mov	r4, r0
    a3ec:	e59f0064 	ldr	r0, [pc, #100]	; a458 <CLogger::~CLogger()+0x78>
    a3f0:	e1a05002 	mov	r5, r2
    a3f4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a3f8:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
    a3fc:	e5802000 	str	r2, [r0]
    a400:	ea00000b 	b	a434 <CLogger::~CLogger()+0x54>
    a404:	e592001c 	ldr	r0, [r2, #28]
    a408:	e3500000 	cmp	r0, #0, 0
    a40c:	0a000003 	beq	a420 <CLogger::~CLogger()+0x40>
    a410:	e3a01f42 	mov	r1, #264	; 0x108
    a414:	eb0018df 	bl	10798 <operator delete(void*, unsigned int)>
    a418:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a41c:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
    a420:	e2833001 	add	r3, r3, #1, 0
    a424:	e3530032 	cmp	r3, #50, 0	; 0x32
    a428:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    a42c:	03a03000 	moveq	r3, #0, 0
    a430:	058450e8 	streq	r5, [r4, #232]	; 0xe8
    a434:	e1530001 	cmp	r3, r1
    a438:	e0842103 	add	r2, r4, r3, lsl #2
    a43c:	1afffff0 	bne	a404 <CLogger::~CLogger()+0x24>
    a440:	e594000c 	ldr	r0, [r4, #12]
    a444:	e3500000 	cmp	r0, #0, 0
    a448:	0a000000 	beq	a450 <CLogger::~CLogger()+0x70>
    a44c:	eb0018d0 	bl	10794 <operator delete[](void*)>
    a450:	e1a00004 	mov	r0, r4
    a454:	e8bd8070 	pop	{r4, r5, r6, pc}
    a458:	0001cc48 	.word	0x0001cc48

0000a45c <CLogger::Initialize(CDevice*)>:
    a45c:	e92d4010 	push	{r4, lr}
    a460:	e5801008 	str	r1, [r0, #8]
    a464:	e24dd008 	sub	sp, sp, #8, 0
    a468:	e1a04000 	mov	r4, r0
    a46c:	eb0003d0 	bl	b3b4 <CMachineInfo::Get()>
    a470:	eb0002e7 	bl	b014 <CMachineInfo::GetMachineName() const>
    a474:	e1a02000 	mov	r2, r0
    a478:	e59f301c 	ldr	r3, [pc, #28]	; a49c <CLogger::Initialize(CDevice*)+0x40>
    a47c:	e1a00004 	mov	r0, r4
    a480:	e58d2000 	str	r2, [sp]
    a484:	e2831018 	add	r1, r3, #24, 0
    a488:	e3a02003 	mov	r2, #3, 0
    a48c:	eb000005 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a490:	e3a00001 	mov	r0, #1, 0
    a494:	e28dd008 	add	sp, sp, #8, 0
    a498:	e8bd8010 	pop	{r4, pc}
    a49c:	00019bd4 	.word	0x00019bd4

0000a4a0 <CLogger::SetNewTarget(CDevice*)>:
    a4a0:	e5801008 	str	r1, [r0, #8]
    a4a4:	e12fff1e 	bx	lr

0000a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    a4a8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    a4ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a4b0:	e24dd010 	sub	sp, sp, #16, 0
    a4b4:	e28dc018 	add	ip, sp, #24, 0
    a4b8:	e59d3014 	ldr	r3, [sp, #20]
    a4bc:	e58dc000 	str	ip, [sp]
    a4c0:	e58dc00c 	str	ip, [sp, #12]
    a4c4:	eb000003 	bl	a4d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    a4c8:	e28dd010 	add	sp, sp, #16, 0
    a4cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a4d0:	e28dd004 	add	sp, sp, #4, 0
    a4d4:	e12fff1e 	bx	lr

0000a4d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    a4d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a4dc:	e1a07003 	mov	r7, r3
    a4e0:	e24dd024 	sub	sp, sp, #36, 0	; 0x24
    a4e4:	e1a04000 	mov	r4, r0
    a4e8:	e1a0000d 	mov	r0, sp
    a4ec:	e1a05002 	mov	r5, r2
    a4f0:	e1a06001 	mov	r6, r1
    a4f4:	eb000c48 	bl	d61c <CString::CString()>
    a4f8:	e1a01007 	mov	r1, r7
    a4fc:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    a500:	e1a0000d 	mov	r0, sp
    a504:	eb000e65 	bl	dea0 <CString::FormatV(char const*, std::__va_list)>
    a508:	e1a0000d 	mov	r0, sp
    a50c:	eb000c5a 	bl	d67c <CString::operator char const*() const>
    a510:	e1a02005 	mov	r2, r5
    a514:	e1a03000 	mov	r3, r0
    a518:	e1a01006 	mov	r1, r6
    a51c:	e1a00004 	mov	r0, r4
    a520:	eb000108 	bl	a948 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    a524:	e5943000 	ldr	r3, [r4]
    a528:	e1550003 	cmp	r5, r3
    a52c:	8a000029 	bhi	a5d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    a530:	e28d0010 	add	r0, sp, #16, 0
    a534:	eb000c38 	bl	d61c <CString::CString()>
    a538:	e3550000 	cmp	r5, #0, 0
    a53c:	0a000029 	beq	a5e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
    a540:	e5940004 	ldr	r0, [r4, #4]
    a544:	e3500000 	cmp	r0, #0, 0
    a548:	0a00000d 	beq	a584 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a54c:	eb0012e7 	bl	f0f0 <CTimer::GetTimeString()>
    a550:	e2505000 	subs	r5, r0, #0, 0
    a554:	0a00000a 	beq	a584 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a558:	eb000c47 	bl	d67c <CString::operator char const*() const>
    a55c:	e1a01000 	mov	r1, r0
    a560:	e28d0010 	add	r0, sp, #16, 0
    a564:	eb000c7a 	bl	d754 <CString::Append(char const*)>
    a568:	e28d0010 	add	r0, sp, #16, 0
    a56c:	e59f1138 	ldr	r1, [pc, #312]	; a6ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
    a570:	eb000c77 	bl	d754 <CString::Append(char const*)>
    a574:	e5953000 	ldr	r3, [r5]
    a578:	e1a00005 	mov	r0, r5
    a57c:	e5933004 	ldr	r3, [r3, #4]
    a580:	e12fff33 	blx	r3
    a584:	e1a01006 	mov	r1, r6
    a588:	e28d0010 	add	r0, sp, #16, 0
    a58c:	eb000c70 	bl	d754 <CString::Append(char const*)>
    a590:	e59f1118 	ldr	r1, [pc, #280]	; a6b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a594:	e28d0010 	add	r0, sp, #16, 0
    a598:	eb000c6d 	bl	d754 <CString::Append(char const*)>
    a59c:	e1a0000d 	mov	r0, sp
    a5a0:	eb000c35 	bl	d67c <CString::operator char const*() const>
    a5a4:	e1a01000 	mov	r1, r0
    a5a8:	e28d0010 	add	r0, sp, #16, 0
    a5ac:	eb000c68 	bl	d754 <CString::Append(char const*)>
    a5b0:	e59f10fc 	ldr	r1, [pc, #252]	; a6b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a5b4:	e28d0010 	add	r0, sp, #16, 0
    a5b8:	eb000c65 	bl	d754 <CString::Append(char const*)>
    a5bc:	e28d0010 	add	r0, sp, #16, 0
    a5c0:	eb000c2d 	bl	d67c <CString::operator char const*() const>
    a5c4:	e1a01000 	mov	r1, r0
    a5c8:	e1a00004 	mov	r0, r4
    a5cc:	eb000077 	bl	a7b0 <CLogger::Write(char const*)>
    a5d0:	e28d0010 	add	r0, sp, #16, 0
    a5d4:	eb000bdd 	bl	d550 <CString::~CString()>
    a5d8:	e1a0000d 	mov	r0, sp
    a5dc:	eb000bdb 	bl	d550 <CString::~CString()>
    a5e0:	e28dd024 	add	sp, sp, #36, 0	; 0x24
    a5e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a5e8:	e59f10c8 	ldr	r1, [pc, #200]	; a6b8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    a5ec:	e28d0010 	add	r0, sp, #16, 0
    a5f0:	eb000c27 	bl	d694 <CString::operator=(char const*)>
    a5f4:	e5940004 	ldr	r0, [r4, #4]
    a5f8:	e3500000 	cmp	r0, #0, 0
    a5fc:	0a00000d 	beq	a638 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    a600:	eb0012ba 	bl	f0f0 <CTimer::GetTimeString()>
    a604:	e2505000 	subs	r5, r0, #0, 0
    a608:	0a00000a 	beq	a638 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    a60c:	eb000c1a 	bl	d67c <CString::operator char const*() const>
    a610:	e1a01000 	mov	r1, r0
    a614:	e28d0010 	add	r0, sp, #16, 0
    a618:	eb000c4d 	bl	d754 <CString::Append(char const*)>
    a61c:	e28d0010 	add	r0, sp, #16, 0
    a620:	e59f1084 	ldr	r1, [pc, #132]	; a6ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
    a624:	eb000c4a 	bl	d754 <CString::Append(char const*)>
    a628:	e5953000 	ldr	r3, [r5]
    a62c:	e1a00005 	mov	r0, r5
    a630:	e5933004 	ldr	r3, [r3, #4]
    a634:	e12fff33 	blx	r3
    a638:	e1a01006 	mov	r1, r6
    a63c:	e28d0010 	add	r0, sp, #16, 0
    a640:	eb000c43 	bl	d754 <CString::Append(char const*)>
    a644:	e59f1064 	ldr	r1, [pc, #100]	; a6b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a648:	e28d0010 	add	r0, sp, #16, 0
    a64c:	eb000c40 	bl	d754 <CString::Append(char const*)>
    a650:	e1a0000d 	mov	r0, sp
    a654:	eb000c08 	bl	d67c <CString::operator char const*() const>
    a658:	e1a01000 	mov	r1, r0
    a65c:	e28d0010 	add	r0, sp, #16, 0
    a660:	eb000c3b 	bl	d754 <CString::Append(char const*)>
    a664:	e59f1050 	ldr	r1, [pc, #80]	; a6bc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    a668:	e28d0010 	add	r0, sp, #16, 0
    a66c:	eb000c38 	bl	d754 <CString::Append(char const*)>
    a670:	e59f103c 	ldr	r1, [pc, #60]	; a6b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a674:	e28d0010 	add	r0, sp, #16, 0
    a678:	eb000c35 	bl	d754 <CString::Append(char const*)>
    a67c:	e28d0010 	add	r0, sp, #16, 0
    a680:	eb000bfd 	bl	d67c <CString::operator char const*() const>
    a684:	e1a01000 	mov	r1, r0
    a688:	e1a00004 	mov	r0, r4
    a68c:	eb000047 	bl	a7b0 <CLogger::Write(char const*)>
    a690:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    a694:	e3530000 	cmp	r3, #0, 0
    a698:	0a000000 	beq	a6a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c8>
    a69c:	e12fff33 	blx	r3
    a6a0:	e3a000ff 	mov	r0, #255, 0	; 0xff
    a6a4:	eb001131 	bl	eb70 <set_qemu_exit_status>
    a6a8:	eb001134 	bl	eb80 <halt>
    a6ac:	00019c0c 	.word	0x00019c0c
    a6b0:	00019c08 	.word	0x00019c08
    a6b4:	00019bfc 	.word	0x00019bfc
    a6b8:	00019bf4 	.word	0x00019bf4
    a6bc:	00019c00 	.word	0x00019c00

0000a6c0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    a6c0:	e92d4070 	push	{r4, r5, r6, lr}
    a6c4:	e1a04000 	mov	r4, r0
    a6c8:	e5900000 	ldr	r0, [r0]
    a6cc:	e24dd0c8 	sub	sp, sp, #200, 0	; 0xc8
    a6d0:	e1520000 	cmp	r2, r0
    a6d4:	8a000012 	bhi	a724 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
    a6d8:	e1a05003 	mov	r5, r3
    a6dc:	e3a03000 	mov	r3, #0, 0
    a6e0:	e1520003 	cmp	r2, r3
    a6e4:	e5cd3000 	strb	r3, [sp]
    a6e8:	0a00000f 	beq	a72c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    a6ec:	e1a0000d 	mov	r0, sp
    a6f0:	eb0015d0 	bl	fe38 <strcat>
    a6f4:	e59f1094 	ldr	r1, [pc, #148]	; a790 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    a6f8:	e1a0000d 	mov	r0, sp
    a6fc:	eb0015cd 	bl	fe38 <strcat>
    a700:	e1a01005 	mov	r1, r5
    a704:	e1a0000d 	mov	r0, sp
    a708:	eb0015ca 	bl	fe38 <strcat>
    a70c:	e59f1080 	ldr	r1, [pc, #128]	; a794 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a710:	e1a0000d 	mov	r0, sp
    a714:	eb0015c7 	bl	fe38 <strcat>
    a718:	e1a0100d 	mov	r1, sp
    a71c:	e1a00004 	mov	r0, r4
    a720:	eb000022 	bl	a7b0 <CLogger::Write(char const*)>
    a724:	e28dd0c8 	add	sp, sp, #200, 0	; 0xc8
    a728:	e8bd8070 	pop	{r4, r5, r6, pc}
    a72c:	e1a06001 	mov	r6, r1
    a730:	e1a0000d 	mov	r0, sp
    a734:	e59f105c 	ldr	r1, [pc, #92]	; a798 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a738:	eb0015a5 	bl	fdd4 <strcpy>
    a73c:	e1a01006 	mov	r1, r6
    a740:	e1a0000d 	mov	r0, sp
    a744:	eb0015bb 	bl	fe38 <strcat>
    a748:	e59f1040 	ldr	r1, [pc, #64]	; a790 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    a74c:	e1a0000d 	mov	r0, sp
    a750:	eb0015b8 	bl	fe38 <strcat>
    a754:	e1a01005 	mov	r1, r5
    a758:	e1a0000d 	mov	r0, sp
    a75c:	eb0015b5 	bl	fe38 <strcat>
    a760:	e59f1034 	ldr	r1, [pc, #52]	; a79c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    a764:	e1a0000d 	mov	r0, sp
    a768:	eb0015b2 	bl	fe38 <strcat>
    a76c:	e59f1020 	ldr	r1, [pc, #32]	; a794 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a770:	e1a0000d 	mov	r0, sp
    a774:	eb0015af 	bl	fe38 <strcat>
    a778:	e1a0100d 	mov	r1, sp
    a77c:	e1a00004 	mov	r0, r4
    a780:	eb00000a 	bl	a7b0 <CLogger::Write(char const*)>
    a784:	e3a000ff 	mov	r0, #255, 0	; 0xff
    a788:	eb0010f8 	bl	eb70 <set_qemu_exit_status>
    a78c:	eb0010fb 	bl	eb80 <halt>
    a790:	00019c08 	.word	0x00019c08
    a794:	00019bfc 	.word	0x00019bfc
    a798:	00019bf4 	.word	0x00019bf4
    a79c:	00019c00 	.word	0x00019c00

0000a7a0 <CLogger::Get()>:
    a7a0:	e59f3004 	ldr	r3, [pc, #4]	; a7ac <CLogger::Get()+0xc>
    a7a4:	e5930000 	ldr	r0, [r3]
    a7a8:	e12fff1e 	bx	lr
    a7ac:	0001cc48 	.word	0x0001cc48

0000a7b0 <CLogger::Write(char const*)>:
    a7b0:	e92d4070 	push	{r4, r5, r6, lr}
    a7b4:	e1a04000 	mov	r4, r0
    a7b8:	e1a00001 	mov	r0, r1
    a7bc:	e1a06001 	mov	r6, r1
    a7c0:	eb0014df 	bl	fb44 <strlen>
    a7c4:	e1a05000 	mov	r5, r0
    a7c8:	e5940008 	ldr	r0, [r4, #8]
    a7cc:	e1a02005 	mov	r2, r5
    a7d0:	e5903000 	ldr	r3, [r0]
    a7d4:	e1a01006 	mov	r1, r6
    a7d8:	e593300c 	ldr	r3, [r3, #12]
    a7dc:	e12fff33 	blx	r3
    a7e0:	e5940018 	ldr	r0, [r4, #24]
    a7e4:	e3500000 	cmp	r0, #0, 0
    a7e8:	1a00001e 	bne	a868 <CLogger::Write(char const*)+0xb8>
    a7ec:	e3550000 	cmp	r5, #0, 0
    a7f0:	e2450001 	sub	r0, r5, #1, 0
    a7f4:	08bd8070 	popeq	{r4, r5, r6, pc}
    a7f8:	e1a0e006 	mov	lr, r6
    a7fc:	e59f1078 	ldr	r1, [pc, #120]	; a87c <CLogger::Write(char const*)+0xcc>
    a800:	e0de50d1 	ldrsb	r5, [lr], #1
    a804:	e26ec001 	rsb	ip, lr, #1, 0
    a808:	e355000d 	cmp	r5, #13, 0
    a80c:	e086c00c 	add	ip, r6, ip
    a810:	0a000009 	beq	a83c <CLogger::Write(char const*)+0x8c>
    a814:	e5942010 	ldr	r2, [r4, #16]
    a818:	e594300c 	ldr	r3, [r4, #12]
    a81c:	e7c35002 	strb	r5, [r3, r2]
    a820:	e5943010 	ldr	r3, [r4, #16]
    a824:	e5942014 	ldr	r2, [r4, #20]
    a828:	e2833001 	add	r3, r3, #1, 0
    a82c:	e0033001 	and	r3, r3, r1
    a830:	e1530002 	cmp	r3, r2
    a834:	e5843010 	str	r3, [r4, #16]
    a838:	0a000006 	beq	a858 <CLogger::Write(char const*)+0xa8>
    a83c:	e17c0000 	cmn	ip, r0
    a840:	1affffee 	bne	a800 <CLogger::Write(char const*)+0x50>
    a844:	e5943018 	ldr	r3, [r4, #24]
    a848:	e3530000 	cmp	r3, #0, 0
    a84c:	08bd8070 	popeq	{r4, r5, r6, pc}
    a850:	e8bd4070 	pop	{r4, r5, r6, lr}
    a854:	ea001b19 	b	114c0 <LeaveCritical>
    a858:	e2433001 	sub	r3, r3, #1, 0
    a85c:	e0033001 	and	r3, r3, r1
    a860:	e5843010 	str	r3, [r4, #16]
    a864:	eafffff6 	b	a844 <CLogger::Write(char const*)+0x94>
    a868:	eb001aea 	bl	11418 <EnterCritical>
    a86c:	e3550000 	cmp	r5, #0, 0
    a870:	e2450001 	sub	r0, r5, #1, 0
    a874:	1affffdf 	bne	a7f8 <CLogger::Write(char const*)+0x48>
    a878:	eafffff1 	b	a844 <CLogger::Write(char const*)+0x94>
    a87c:	00003fff 	.word	0x00003fff

0000a880 <CLogger::Read(void*, unsigned int)>:
    a880:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a884:	e1a04000 	mov	r4, r0
    a888:	e5900018 	ldr	r0, [r0, #24]
    a88c:	e1a05001 	mov	r5, r1
    a890:	e3500000 	cmp	r0, #0, 0
    a894:	e1a06002 	mov	r6, r2
    a898:	1a00001f 	bne	a91c <CLogger::Read(void*, unsigned int)+0x9c>
    a89c:	e1c421d0 	ldrd	r2, [r4, #16]
    a8a0:	e1520003 	cmp	r2, r3
    a8a4:	0a000024 	beq	a93c <CLogger::Read(void*, unsigned int)+0xbc>
    a8a8:	e1a07006 	mov	r7, r6
    a8ac:	e3a0c000 	mov	ip, #0, 0
    a8b0:	e59f208c 	ldr	r2, [pc, #140]	; a944 <CLogger::Read(void*, unsigned int)+0xc4>
    a8b4:	ea00000a 	b	a8e4 <CLogger::Read(void*, unsigned int)+0x64>
    a8b8:	e594100c 	ldr	r1, [r4, #12]
    a8bc:	e28cc001 	add	ip, ip, #1, 0
    a8c0:	e19130d3 	ldrsb	r3, [r1, r3]
    a8c4:	e4c53001 	strb	r3, [r5], #1
    a8c8:	e5943014 	ldr	r3, [r4, #20]
    a8cc:	e5941010 	ldr	r1, [r4, #16]
    a8d0:	e2833001 	add	r3, r3, #1, 0
    a8d4:	e0033002 	and	r3, r3, r2
    a8d8:	e1530001 	cmp	r3, r1
    a8dc:	e5843014 	str	r3, [r4, #20]
    a8e0:	0a000006 	beq	a900 <CLogger::Read(void*, unsigned int)+0x80>
    a8e4:	e15c0006 	cmp	ip, r6
    a8e8:	1afffff2 	bne	a8b8 <CLogger::Read(void*, unsigned int)+0x38>
    a8ec:	e5943018 	ldr	r3, [r4, #24]
    a8f0:	e3530000 	cmp	r3, #0, 0
    a8f4:	1a000005 	bne	a910 <CLogger::Read(void*, unsigned int)+0x90>
    a8f8:	e1a00007 	mov	r0, r7
    a8fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a900:	e5943018 	ldr	r3, [r4, #24]
    a904:	e1a0700c 	mov	r7, ip
    a908:	e3530000 	cmp	r3, #0, 0
    a90c:	0afffff9 	beq	a8f8 <CLogger::Read(void*, unsigned int)+0x78>
    a910:	eb001aea 	bl	114c0 <LeaveCritical>
    a914:	e1a00007 	mov	r0, r7
    a918:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a91c:	eb001abd 	bl	11418 <EnterCritical>
    a920:	e1c421d0 	ldrd	r2, [r4, #16]
    a924:	e1520003 	cmp	r2, r3
    a928:	1affffde 	bne	a8a8 <CLogger::Read(void*, unsigned int)+0x28>
    a92c:	e5943018 	ldr	r3, [r4, #24]
    a930:	e3530000 	cmp	r3, #0, 0
    a934:	0a000000 	beq	a93c <CLogger::Read(void*, unsigned int)+0xbc>
    a938:	eb001ae0 	bl	114c0 <LeaveCritical>
    a93c:	e3e07000 	mvn	r7, #0, 0
    a940:	eaffffec 	b	a8f8 <CLogger::Read(void*, unsigned int)+0x78>
    a944:	00003fff 	.word	0x00003fff

0000a948 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    a948:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a94c:	e1a04000 	mov	r4, r0
    a950:	e24dd010 	sub	sp, sp, #16, 0
    a954:	e3a00f42 	mov	r0, #264	; 0x108
    a958:	e1a06003 	mov	r6, r3
    a95c:	e1a07002 	mov	r7, r2
    a960:	e58d1004 	str	r1, [sp, #4]
    a964:	eb00177d 	bl	10760 <operator new(unsigned int)>
    a968:	e3a08000 	mov	r8, #0, 0
    a96c:	e1a05000 	mov	r5, r0
    a970:	e3a02032 	mov	r2, #50, 0	; 0x32
    a974:	e59d1004 	ldr	r1, [sp, #4]
    a978:	e4c07001 	strb	r7, [r0], #1
    a97c:	eb00151f 	bl	fe00 <strncpy>
    a980:	e1a01006 	mov	r1, r6
    a984:	e3a020c8 	mov	r2, #200, 0	; 0xc8
    a988:	e2850033 	add	r0, r5, #51, 0	; 0x33
    a98c:	e5c58032 	strb	r8, [r5, #50]	; 0x32
    a990:	eb00151a 	bl	fe00 <strncpy>
    a994:	e5940004 	ldr	r0, [r4, #4]
    a998:	e5c580fa 	strb	r8, [r5, #250]	; 0xfa
    a99c:	e1500008 	cmp	r0, r8
    a9a0:	0a000004 	beq	a9b8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    a9a4:	e28d200c 	add	r2, sp, #12, 0
    a9a8:	e28d1008 	add	r1, sp, #8, 0
    a9ac:	eb00115e 	bl	ef2c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    a9b0:	e1500008 	cmp	r0, r8
    a9b4:	1a000038 	bne	aa9c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
    a9b8:	e3a03000 	mov	r3, #0, 0
    a9bc:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    a9c0:	e5853100 	str	r3, [r5, #256]	; 0x100
    a9c4:	e5853104 	str	r3, [r5, #260]	; 0x104
    a9c8:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    a9cc:	e3500000 	cmp	r0, #0, 0
    a9d0:	1a00002e 	bne	aa90 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
    a9d4:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    a9d8:	e0841103 	add	r1, r4, r3, lsl #2
    a9dc:	e3530031 	cmp	r3, #49, 0	; 0x31
    a9e0:	e581501c 	str	r5, [r1, #28]
    a9e4:	e2831001 	add	r1, r3, #1, 0
    a9e8:	0a00001c 	beq	aa60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
    a9ec:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    a9f0:	e58410e4 	str	r1, [r4, #228]	; 0xe4
    a9f4:	e1510002 	cmp	r1, r2
    a9f8:	0a000007 	beq	aa1c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
    a9fc:	e3500000 	cmp	r0, #0, 0
    aa00:	1a000014 	bne	aa58 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
    aa04:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    aa08:	e3530000 	cmp	r3, #0, 0
    aa0c:	0a000000 	beq	aa14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    aa10:	e12fff33 	blx	r3
    aa14:	e28dd010 	add	sp, sp, #16, 0
    aa18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aa1c:	e0843103 	add	r3, r4, r3, lsl #2
    aa20:	e3510031 	cmp	r1, #49, 0	; 0x31
    aa24:	e5935020 	ldr	r5, [r3, #32]
    aa28:	03a03000 	moveq	r3, #0, 0
    aa2c:	e2811001 	add	r1, r1, #1, 0
    aa30:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    aa34:	1a000010 	bne	aa7c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
    aa38:	e3500000 	cmp	r0, #0, 0
    aa3c:	1a000011 	bne	aa88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
    aa40:	e3550000 	cmp	r5, #0, 0
    aa44:	0affffee 	beq	aa04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    aa48:	e1a00005 	mov	r0, r5
    aa4c:	e3a01f42 	mov	r1, #264	; 0x108
    aa50:	eb001750 	bl	10798 <operator delete(void*, unsigned int)>
    aa54:	eaffffea 	b	aa04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    aa58:	eb001a98 	bl	114c0 <LeaveCritical>
    aa5c:	eaffffe8 	b	aa04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    aa60:	e3a01000 	mov	r1, #0, 0
    aa64:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    aa68:	e58410e4 	str	r1, [r4, #228]	; 0xe4
    aa6c:	e1530001 	cmp	r3, r1
    aa70:	1affffe1 	bne	a9fc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
    aa74:	e3a01001 	mov	r1, #1, 0
    aa78:	e594501c 	ldr	r5, [r4, #28]
    aa7c:	e3500000 	cmp	r0, #0, 0
    aa80:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    aa84:	0affffed 	beq	aa40 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    aa88:	eb001a8c 	bl	114c0 <LeaveCritical>
    aa8c:	eaffffeb 	b	aa40 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    aa90:	eb001a60 	bl	11418 <EnterCritical>
    aa94:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    aa98:	eaffffcd 	b	a9d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    aa9c:	e59d300c 	ldr	r3, [sp, #12]
    aaa0:	e59f1020 	ldr	r1, [pc, #32]	; aac8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x180>
    aaa4:	e59d2008 	ldr	r2, [sp, #8]
    aaa8:	e0831391 	umull	r1, r3, r1, r3
    aaac:	e1a036a3 	lsr	r3, r3, #13
    aab0:	e5940004 	ldr	r0, [r4, #4]
    aab4:	e5853100 	str	r3, [r5, #256]	; 0x100
    aab8:	e58520fc 	str	r2, [r5, #252]	; 0xfc
    aabc:	eb0010ec 	bl	ee74 <CTimer::GetTimeZone() const>
    aac0:	e5850104 	str	r0, [r5, #260]	; 0x104
    aac4:	eaffffbf 	b	a9c8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
    aac8:	d1b71759 	.word	0xd1b71759

0000aacc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    aacc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aad0:	e1a04000 	mov	r4, r0
    aad4:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    aad8:	e1a08001 	mov	r8, r1
    aadc:	e3500000 	cmp	r0, #0, 0
    aae0:	e1a06002 	mov	r6, r2
    aae4:	e1a07003 	mov	r7, r3
    aae8:	1a000022 	bne	ab78 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
    aaec:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
    aaf0:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    aaf4:	e15c0003 	cmp	ip, r3
    aaf8:	0a000028 	beq	aba0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    aafc:	e35c0031 	cmp	ip, #49, 0	; 0x31
    ab00:	e084310c 	add	r3, r4, ip, lsl #2
    ab04:	e593501c 	ldr	r5, [r3, #28]
    ab08:	03a03000 	moveq	r3, #0, 0
    ab0c:	e28cc001 	add	ip, ip, #1, 0
    ab10:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    ab14:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    ab18:	e3500000 	cmp	r0, #0, 0
    ab1c:	1a000021 	bne	aba8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
    ab20:	e1a01005 	mov	r1, r5
    ab24:	e4d13001 	ldrb	r3, [r1], #1
    ab28:	e1a00006 	mov	r0, r6
    ab2c:	e5c83000 	strb	r3, [r8]
    ab30:	eb0014a7 	bl	fdd4 <strcpy>
    ab34:	e2851033 	add	r1, r5, #51, 0	; 0x33
    ab38:	e1a00007 	mov	r0, r7
    ab3c:	eb0014a4 	bl	fdd4 <strcpy>
    ab40:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
    ab44:	e59d1018 	ldr	r1, [sp, #24]
    ab48:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    ab4c:	e5812000 	str	r2, [r1]
    ab50:	e59d201c 	ldr	r2, [sp, #28]
    ab54:	e1a00005 	mov	r0, r5
    ab58:	e5823000 	str	r3, [r2]
    ab5c:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    ab60:	e59d2020 	ldr	r2, [sp, #32]
    ab64:	e3a01f42 	mov	r1, #264	; 0x108
    ab68:	e5823000 	str	r3, [r2]
    ab6c:	eb001709 	bl	10798 <operator delete(void*, unsigned int)>
    ab70:	e3a00001 	mov	r0, #1, 0
    ab74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ab78:	eb001a26 	bl	11418 <EnterCritical>
    ab7c:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
    ab80:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    ab84:	e153000c 	cmp	r3, ip
    ab88:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    ab8c:	1affffda 	bne	aafc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    ab90:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    ab94:	e3530000 	cmp	r3, #0, 0
    ab98:	0a000000 	beq	aba0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    ab9c:	eb001a47 	bl	114c0 <LeaveCritical>
    aba0:	e3a00000 	mov	r0, #0, 0
    aba4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aba8:	eb001a44 	bl	114c0 <LeaveCritical>
    abac:	eaffffdb 	b	ab20 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000abb0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    abb0:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    abb4:	e12fff1e 	bx	lr

0000abb8 <CLogger::RegisterPanicHandler(void (*)())>:
    abb8:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    abbc:	e12fff1e 	bx	lr

0000abc0 <CMachineInfo::CMachineInfo()>:
    abc0:	e92d4810 	push	{r4, fp, lr}
    abc4:	e28db008 	add	fp, sp, #8, 0
    abc8:	e24dd04c 	sub	sp, sp, #76, 0	; 0x4c
    abcc:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    abd0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abd4:	e3a02000 	mov	r2, #0, 0
    abd8:	e5832000 	str	r2, [r3]
    abdc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abe0:	e3a02010 	mov	r2, #16, 0
    abe4:	e5c32004 	strb	r2, [r3, #4]
    abe8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abec:	e3a02000 	mov	r2, #0, 0
    abf0:	e5832008 	str	r2, [r3, #8]
    abf4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abf8:	e3a02000 	mov	r2, #0, 0
    abfc:	e583200c 	str	r2, [r3, #12]
    ac00:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac04:	e3a02004 	mov	r2, #4, 0
    ac08:	e5c32010 	strb	r2, [r3, #16]
    ac0c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac10:	e3a02000 	mov	r2, #0, 0
    ac14:	e5832014 	str	r2, [r3, #20]
    ac18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac1c:	e59f23b4 	ldr	r2, [pc, #948]	; afd8 <CMachineInfo::CMachineInfo()+0x418>
    ac20:	e1c321b8 	strh	r2, [r3, #24]
    ac24:	e59f33b0 	ldr	r3, [pc, #944]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac28:	e5933000 	ldr	r3, [r3]
    ac2c:	e3530000 	cmp	r3, #0, 0
    ac30:	0a00001e 	beq	acb0 <CMachineInfo::CMachineInfo()+0xf0>
    ac34:	e59f33a0 	ldr	r3, [pc, #928]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac38:	e5933000 	ldr	r3, [r3]
    ac3c:	e5932000 	ldr	r2, [r3]
    ac40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac44:	e5832000 	str	r2, [r3]
    ac48:	e59f338c 	ldr	r3, [pc, #908]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac4c:	e5933000 	ldr	r3, [r3]
    ac50:	e5d32004 	ldrb	r2, [r3, #4]
    ac54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac58:	e5c32004 	strb	r2, [r3, #4]
    ac5c:	e59f3378 	ldr	r3, [pc, #888]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac60:	e5933000 	ldr	r3, [r3]
    ac64:	e5932008 	ldr	r2, [r3, #8]
    ac68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac6c:	e5832008 	str	r2, [r3, #8]
    ac70:	e59f3364 	ldr	r3, [pc, #868]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac74:	e5933000 	ldr	r3, [r3]
    ac78:	e593200c 	ldr	r2, [r3, #12]
    ac7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac80:	e583200c 	str	r2, [r3, #12]
    ac84:	e59f3350 	ldr	r3, [pc, #848]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac88:	e5933000 	ldr	r3, [r3]
    ac8c:	e5d32010 	ldrb	r2, [r3, #16]
    ac90:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac94:	e5c32010 	strb	r2, [r3, #16]
    ac98:	e59f333c 	ldr	r3, [pc, #828]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    ac9c:	e5933000 	ldr	r3, [r3]
    aca0:	e5932014 	ldr	r2, [r3, #20]
    aca4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aca8:	e5832014 	str	r2, [r3, #20]
    acac:	ea0000c5 	b	afc8 <CMachineInfo::CMachineInfo()+0x408>
    acb0:	e59f2324 	ldr	r2, [pc, #804]	; afdc <CMachineInfo::CMachineInfo()+0x41c>
    acb4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acb8:	e5823000 	str	r3, [r2]
    acbc:	e24b3020 	sub	r3, fp, #32, 0
    acc0:	e3a01001 	mov	r1, #1, 0
    acc4:	e1a00003 	mov	r0, r3
    acc8:	eb001ceb 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    accc:	e24b2030 	sub	r2, fp, #48, 0	; 0x30
    acd0:	e24b0020 	sub	r0, fp, #32, 0
    acd4:	e3a03000 	mov	r3, #0, 0
    acd8:	e58d3000 	str	r3, [sp]
    acdc:	e3a03010 	mov	r3, #16, 0
    ace0:	e59f12f8 	ldr	r1, [pc, #760]	; afe0 <CMachineInfo::CMachineInfo()+0x420>
    ace4:	eb001cf0 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ace8:	e1a03000 	mov	r3, r0
    acec:	e3530000 	cmp	r3, #0, 0
    acf0:	0a000003 	beq	ad04 <CMachineInfo::CMachineInfo()+0x144>
    acf4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    acf8:	e6ff2073 	uxth	r2, r3
    acfc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad00:	e1c321b8 	strh	r2, [r3, #24]
    ad04:	e24b2040 	sub	r2, fp, #64, 0	; 0x40
    ad08:	e24b0020 	sub	r0, fp, #32, 0
    ad0c:	e3a03000 	mov	r3, #0, 0
    ad10:	e58d3000 	str	r3, [sp]
    ad14:	e3a03010 	mov	r3, #16, 0
    ad18:	e59f12c4 	ldr	r1, [pc, #708]	; afe4 <CMachineInfo::CMachineInfo()+0x424>
    ad1c:	eb001ce2 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ad20:	e1a03000 	mov	r3, r0
    ad24:	e2233001 	eor	r3, r3, #1, 0
    ad28:	e6ef3073 	uxtb	r3, r3
    ad2c:	e3530000 	cmp	r3, #0, 0
    ad30:	0a000001 	beq	ad3c <CMachineInfo::CMachineInfo()+0x17c>
    ad34:	e3a04000 	mov	r4, #0, 0
    ad38:	ea00009e 	b	afb8 <CMachineInfo::CMachineInfo()+0x3f8>
    ad3c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    ad40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad44:	e5832000 	str	r2, [r3]
    ad48:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad4c:	e5933000 	ldr	r3, [r3]
    ad50:	e2033502 	and	r3, r3, #8388608	; 0x800000
    ad54:	e3530000 	cmp	r3, #0, 0
    ad58:	0a000064 	beq	aef0 <CMachineInfo::CMachineInfo()+0x330>
    ad5c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ad60:	e5933000 	ldr	r3, [r3]
    ad64:	e1a03223 	lsr	r3, r3, #4
    ad68:	e6ef3073 	uxtb	r3, r3
    ad6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ad70:	e3a03000 	mov	r3, #0, 0
    ad74:	e50b3010 	str	r3, [fp, #-16]
    ad78:	e51b3010 	ldr	r3, [fp, #-16]
    ad7c:	e353000d 	cmp	r3, #13, 0
    ad80:	8a00000f 	bhi	adc4 <CMachineInfo::CMachineInfo()+0x204>
    ad84:	e59f125c 	ldr	r1, [pc, #604]	; afe8 <CMachineInfo::CMachineInfo()+0x428>
    ad88:	e51b2010 	ldr	r2, [fp, #-16]
    ad8c:	e1a03002 	mov	r3, r2
    ad90:	e1a03083 	lsl	r3, r3, #1
    ad94:	e0833002 	add	r3, r3, r2
    ad98:	e1a03103 	lsl	r3, r3, #2
    ad9c:	e0813003 	add	r3, r1, r3
    ada0:	e5933000 	ldr	r3, [r3]
    ada4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    ada8:	e1520003 	cmp	r2, r3
    adac:	0a000003 	beq	adc0 <CMachineInfo::CMachineInfo()+0x200>
    adb0:	e51b3010 	ldr	r3, [fp, #-16]
    adb4:	e2833001 	add	r3, r3, #1, 0
    adb8:	e50b3010 	str	r3, [fp, #-16]
    adbc:	eaffffed 	b	ad78 <CMachineInfo::CMachineInfo()+0x1b8>
    adc0:	e320f000 	nop	{0}
    adc4:	e51b3010 	ldr	r3, [fp, #-16]
    adc8:	e353000d 	cmp	r3, #13, 0
    adcc:	9a000001 	bls	add8 <CMachineInfo::CMachineInfo()+0x218>
    add0:	e3a04000 	mov	r4, #0, 0
    add4:	ea000077 	b	afb8 <CMachineInfo::CMachineInfo()+0x3f8>
    add8:	e59f1208 	ldr	r1, [pc, #520]	; afe8 <CMachineInfo::CMachineInfo()+0x428>
    addc:	e51b2010 	ldr	r2, [fp, #-16]
    ade0:	e1a03002 	mov	r3, r2
    ade4:	e1a03083 	lsl	r3, r3, #1
    ade8:	e0833002 	add	r3, r3, r2
    adec:	e1a03103 	lsl	r3, r3, #2
    adf0:	e0813003 	add	r3, r1, r3
    adf4:	e2833004 	add	r3, r3, #4, 0
    adf8:	e5d32000 	ldrb	r2, [r3]
    adfc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae00:	e5c32004 	strb	r2, [r3, #4]
    ae04:	e59f11dc 	ldr	r1, [pc, #476]	; afe8 <CMachineInfo::CMachineInfo()+0x428>
    ae08:	e51b2010 	ldr	r2, [fp, #-16]
    ae0c:	e1a03002 	mov	r3, r2
    ae10:	e1a03083 	lsl	r3, r3, #1
    ae14:	e0833002 	add	r3, r3, r2
    ae18:	e1a03103 	lsl	r3, r3, #2
    ae1c:	e0813003 	add	r3, r1, r3
    ae20:	e2833008 	add	r3, r3, #8, 0
    ae24:	e5932000 	ldr	r2, [r3]
    ae28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae2c:	e5832008 	str	r2, [r3, #8]
    ae30:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae34:	e5933000 	ldr	r3, [r3]
    ae38:	e203300f 	and	r3, r3, #15, 0
    ae3c:	e2832001 	add	r2, r3, #1, 0
    ae40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae44:	e583200c 	str	r2, [r3, #12]
    ae48:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae4c:	e5933000 	ldr	r3, [r3]
    ae50:	e1a03623 	lsr	r3, r3, #12
    ae54:	e6ef3073 	uxtb	r3, r3
    ae58:	e203300f 	and	r3, r3, #15, 0
    ae5c:	e6ef2073 	uxtb	r2, r3
    ae60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae64:	e5c32010 	strb	r2, [r3, #16]
    ae68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae6c:	e5933000 	ldr	r3, [r3]
    ae70:	e1a03a23 	lsr	r3, r3, #20
    ae74:	e2033007 	and	r3, r3, #7, 0
    ae78:	e3a02c01 	mov	r2, #256	; 0x100
    ae7c:	e1a03312 	lsl	r3, r2, r3
    ae80:	e1a02003 	mov	r2, r3
    ae84:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae88:	e5832014 	str	r2, [r3, #20]
    ae8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ae90:	e5d33010 	ldrb	r3, [r3, #16]
    ae94:	e3530003 	cmp	r3, #3, 0
    ae98:	9a000002 	bls	aea8 <CMachineInfo::CMachineInfo()+0x2e8>
    ae9c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aea0:	e3a02004 	mov	r2, #4, 0
    aea4:	e5c32010 	strb	r2, [r3, #16]
    aea8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aeac:	e5d33004 	ldrb	r3, [r3, #4]
    aeb0:	e3530003 	cmp	r3, #3, 0
    aeb4:	1a00003e 	bne	afb4 <CMachineInfo::CMachineInfo()+0x3f4>
    aeb8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aebc:	e5933014 	ldr	r3, [r3, #20]
    aec0:	e3530c01 	cmp	r3, #256	; 0x100
    aec4:	1a00003a 	bne	afb4 <CMachineInfo::CMachineInfo()+0x3f4>
    aec8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aecc:	e593300c 	ldr	r3, [r3, #12]
    aed0:	e3530001 	cmp	r3, #1, 0
    aed4:	1a000001 	bne	aee0 <CMachineInfo::CMachineInfo()+0x320>
    aed8:	e3a02001 	mov	r2, #1, 0
    aedc:	ea000000 	b	aee4 <CMachineInfo::CMachineInfo()+0x324>
    aee0:	e3a02002 	mov	r2, #2, 0
    aee4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aee8:	e5c32004 	strb	r2, [r3, #4]
    aeec:	ea000030 	b	afb4 <CMachineInfo::CMachineInfo()+0x3f4>
    aef0:	e3a03000 	mov	r3, #0, 0
    aef4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    aef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    aefc:	e3530010 	cmp	r3, #16, 0
    af00:	8a00000b 	bhi	af34 <CMachineInfo::CMachineInfo()+0x374>
    af04:	e59f20e0 	ldr	r2, [pc, #224]	; afec <CMachineInfo::CMachineInfo()+0x42c>
    af08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    af0c:	e7922203 	ldr	r2, [r2, r3, lsl #4]
    af10:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    af14:	e5933000 	ldr	r3, [r3]
    af18:	e1520003 	cmp	r2, r3
    af1c:	0a000003 	beq	af30 <CMachineInfo::CMachineInfo()+0x370>
    af20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    af24:	e2833001 	add	r3, r3, #1, 0
    af28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    af2c:	eafffff1 	b	aef8 <CMachineInfo::CMachineInfo()+0x338>
    af30:	e320f000 	nop	{0}
    af34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    af38:	e3530010 	cmp	r3, #16, 0
    af3c:	9a000001 	bls	af48 <CMachineInfo::CMachineInfo()+0x388>
    af40:	e3a04000 	mov	r4, #0, 0
    af44:	ea00001b 	b	afb8 <CMachineInfo::CMachineInfo()+0x3f8>
    af48:	e59f209c 	ldr	r2, [pc, #156]	; afec <CMachineInfo::CMachineInfo()+0x42c>
    af4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    af50:	e1a03203 	lsl	r3, r3, #4
    af54:	e0823003 	add	r3, r2, r3
    af58:	e5d32004 	ldrb	r2, [r3, #4]
    af5c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    af60:	e5c32004 	strb	r2, [r3, #4]
    af64:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    af68:	e3a02001 	mov	r2, #1, 0
    af6c:	e5832008 	str	r2, [r3, #8]
    af70:	e59f2074 	ldr	r2, [pc, #116]	; afec <CMachineInfo::CMachineInfo()+0x42c>
    af74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    af78:	e1a03203 	lsl	r3, r3, #4
    af7c:	e0823003 	add	r3, r2, r3
    af80:	e5932008 	ldr	r2, [r3, #8]
    af84:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    af88:	e583200c 	str	r2, [r3, #12]
    af8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    af90:	e3a02000 	mov	r2, #0, 0
    af94:	e5c32010 	strb	r2, [r3, #16]
    af98:	e59f204c 	ldr	r2, [pc, #76]	; afec <CMachineInfo::CMachineInfo()+0x42c>
    af9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    afa0:	e1a03203 	lsl	r3, r3, #4
    afa4:	e0823003 	add	r3, r2, r3
    afa8:	e593200c 	ldr	r2, [r3, #12]
    afac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    afb0:	e5832014 	str	r2, [r3, #20]
    afb4:	e3a04001 	mov	r4, #1, 0
    afb8:	e24b3020 	sub	r3, fp, #32, 0
    afbc:	e1a00003 	mov	r0, r3
    afc0:	eb001c34 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
    afc4:	e3540001 	cmp	r4, #1, 0
    afc8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    afcc:	e1a00003 	mov	r0, r3
    afd0:	e24bd008 	sub	sp, fp, #8, 0
    afd4:	e8bd8810 	pop	{r4, fp, pc}
    afd8:	00001f35 	.word	0x00001f35
    afdc:	0001cc4c 	.word	0x0001cc4c
    afe0:	00060001 	.word	0x00060001
    afe4:	00010002 	.word	0x00010002
    afe8:	0001c9e4 	.word	0x0001c9e4
    afec:	0001c8d4 	.word	0x0001c8d4

0000aff0 <CMachineInfo::~CMachineInfo()>:
    aff0:	e59f3010 	ldr	r3, [pc, #16]	; b008 <CMachineInfo::~CMachineInfo()+0x18>
    aff4:	e5932000 	ldr	r2, [r3]
    aff8:	e1520000 	cmp	r2, r0
    affc:	03a02000 	moveq	r2, #0, 0
    b000:	05832000 	streq	r2, [r3]
    b004:	e12fff1e 	bx	lr
    b008:	0001cc4c 	.word	0x0001cc4c

0000b00c <CMachineInfo::GetMachineModel() const>:
    b00c:	e5d00004 	ldrb	r0, [r0, #4]
    b010:	e12fff1e 	bx	lr

0000b014 <CMachineInfo::GetMachineName() const>:
    b014:	e5d02004 	ldrb	r2, [r0, #4]
    b018:	e59f3008 	ldr	r3, [pc, #8]	; b028 <CMachineInfo::GetMachineName() const+0x14>
    b01c:	e0833102 	add	r3, r3, r2, lsl #2
    b020:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
    b024:	e12fff1e 	bx	lr
    b028:	0001c8d4 	.word	0x0001c8d4

0000b02c <CMachineInfo::GetModelMajor() const>:
    b02c:	e5900008 	ldr	r0, [r0, #8]
    b030:	e12fff1e 	bx	lr

0000b034 <CMachineInfo::GetModelRevision() const>:
    b034:	e590000c 	ldr	r0, [r0, #12]
    b038:	e12fff1e 	bx	lr

0000b03c <CMachineInfo::GetSoCType() const>:
    b03c:	e5d00010 	ldrb	r0, [r0, #16]
    b040:	e12fff1e 	bx	lr

0000b044 <CMachineInfo::GetRAMSize() const>:
    b044:	e5900014 	ldr	r0, [r0, #20]
    b048:	e12fff1e 	bx	lr

0000b04c <CMachineInfo::GetSoCName() const>:
    b04c:	e5d02010 	ldrb	r2, [r0, #16]
    b050:	e59f3008 	ldr	r3, [pc, #8]	; b060 <CMachineInfo::GetSoCName() const+0x14>
    b054:	e0833102 	add	r3, r3, r2, lsl #2
    b058:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
    b05c:	e12fff1e 	bx	lr
    b060:	0001c8d4 	.word	0x0001c8d4

0000b064 <CMachineInfo::GetRevisionRaw() const>:
    b064:	e5900000 	ldr	r0, [r0]
    b068:	e12fff1e 	bx	lr

0000b06c <CMachineInfo::GetActLEDInfo() const>:
    b06c:	e5d02004 	ldrb	r2, [r0, #4]
    b070:	e59f3008 	ldr	r3, [pc, #8]	; b080 <CMachineInfo::GetActLEDInfo() const+0x14>
    b074:	e0833102 	add	r3, r3, r2, lsl #2
    b078:	e5930210 	ldr	r0, [r3, #528]	; 0x210
    b07c:	e12fff1e 	bx	lr
    b080:	0001c8d4 	.word	0x0001c8d4

0000b084 <CMachineInfo::GetClockRate(unsigned int) const>:
    b084:	e92d4030 	push	{r4, r5, lr}
    b088:	e24dd02c 	sub	sp, sp, #44, 0	; 0x2c
    b08c:	e1a04001 	mov	r4, r1
    b090:	e1a05000 	mov	r5, r0
    b094:	e3a01000 	mov	r1, #0, 0
    b098:	e28d000c 	add	r0, sp, #12, 0
    b09c:	eb001bf6 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    b0a0:	e3a03004 	mov	r3, #4, 0
    b0a4:	e58d3000 	str	r3, [sp]
    b0a8:	e3a03014 	mov	r3, #20, 0
    b0ac:	e59f1078 	ldr	r1, [pc, #120]	; b12c <CMachineInfo::GetClockRate(unsigned int) const+0xa8>
    b0b0:	e28d000c 	add	r0, sp, #12, 0
    b0b4:	e08d2003 	add	r2, sp, r3
    b0b8:	e58d4020 	str	r4, [sp, #32]
    b0bc:	eb001bfa 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b0c0:	e3500000 	cmp	r0, #0, 0
    b0c4:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    b0c8:	1a00000a 	bne	b0f8 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    b0cc:	e3540002 	cmp	r4, #2, 0
    b0d0:	0a000013 	beq	b124 <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
    b0d4:	e3540004 	cmp	r4, #4, 0
    b0d8:	0a00000b 	beq	b10c <CMachineInfo::GetClockRate(unsigned int) const+0x88>
    b0dc:	e3540001 	cmp	r4, #1, 0
    b0e0:	0a000003 	beq	b0f4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
    b0e4:	e59f1044 	ldr	r1, [pc, #68]	; b130 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    b0e8:	e59f2044 	ldr	r2, [pc, #68]	; b134 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    b0ec:	e2810010 	add	r0, r1, #16, 0
    b0f0:	eb001a84 	bl	11b08 <assertion_failed>
    b0f4:	e59f403c 	ldr	r4, [pc, #60]	; b138 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    b0f8:	e28d000c 	add	r0, sp, #12, 0
    b0fc:	eb001be5 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
    b100:	e1a00004 	mov	r0, r4
    b104:	e28dd02c 	add	sp, sp, #44, 0	; 0x2c
    b108:	e8bd8030 	pop	{r4, r5, pc}
    b10c:	e5952008 	ldr	r2, [r5, #8]
    b110:	e59f3024 	ldr	r3, [pc, #36]	; b13c <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    b114:	e3520002 	cmp	r2, #2, 0
    b118:	e59f4020 	ldr	r4, [pc, #32]	; b140 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    b11c:	81a04003 	movhi	r4, r3
    b120:	eafffff4 	b	b0f8 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    b124:	e59f4018 	ldr	r4, [pc, #24]	; b144 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    b128:	eafffff2 	b	b0f8 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    b12c:	00030002 	.word	0x00030002
    b130:	00019d88 	.word	0x00019d88
    b134:	00000141 	.word	0x00000141
    b138:	05f5e100 	.word	0x05f5e100
    b13c:	11e1a300 	.word	0x11e1a300
    b140:	0ee6b280 	.word	0x0ee6b280
    b144:	02dc6c00 	.word	0x02dc6c00

0000b148 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    b148:	e3510036 	cmp	r1, #54, 0	; 0x36
    b14c:	0a000006 	beq	b16c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    b150:	e3510037 	cmp	r1, #55, 0	; 0x37
    b154:	1a00000e 	bne	b194 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    b158:	e5d03004 	ldrb	r3, [r0, #4]
    b15c:	e3530003 	cmp	r3, #3, 0
    b160:	83a00028 	movhi	r0, #40, 0	; 0x28
    b164:	93a0002d 	movls	r0, #45, 0	; 0x2d
    b168:	e12fff1e 	bx	lr
    b16c:	e5d03004 	ldrb	r3, [r0, #4]
    b170:	e3530003 	cmp	r3, #3, 0
    b174:	9a000004 	bls	b18c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    b178:	e5903008 	ldr	r3, [r0, #8]
    b17c:	e3530003 	cmp	r3, #3, 0
    b180:	33a0002d 	movcc	r0, #45, 0	; 0x2d
    b184:	23a00029 	movcs	r0, #41, 0	; 0x29
    b188:	e12fff1e 	bx	lr
    b18c:	e3a00028 	mov	r0, #40, 0	; 0x28
    b190:	e12fff1e 	bx	lr
    b194:	e59f100c 	ldr	r1, [pc, #12]	; b1a8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    b198:	e92d4010 	push	{r4, lr}
    b19c:	e59f2008 	ldr	r2, [pc, #8]	; b1ac <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x64>
    b1a0:	e2810010 	add	r0, r1, #16, 0
    b1a4:	eb001a57 	bl	11b08 <assertion_failed>
    b1a8:	00019d88 	.word	0x00019d88
    b1ac:	0000017a 	.word	0x0000017a

0000b1b0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    b1b0:	e5903008 	ldr	r3, [r0, #8]
    b1b4:	e3530003 	cmp	r3, #3, 0
    b1b8:	8a000005 	bhi	b1d4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
    b1bc:	e3510001 	cmp	r1, #1, 0
    b1c0:	0a00000b 	beq	b1f4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    b1c4:	e3510006 	cmp	r1, #6, 0
    b1c8:	e59f002c 	ldr	r0, [pc, #44]	; b1fc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
    b1cc:	13a00000 	movne	r0, #0, 0
    b1d0:	e12fff1e 	bx	lr
    b1d4:	e3510001 	cmp	r1, #1, 0
    b1d8:	0a000003 	beq	b1ec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
    b1dc:	e3510006 	cmp	r1, #6, 0
    b1e0:	e59f0018 	ldr	r0, [pc, #24]	; b200 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    b1e4:	13a00000 	movne	r0, #0, 0
    b1e8:	e12fff1e 	bx	lr
    b1ec:	e59f0010 	ldr	r0, [pc, #16]	; b204 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
    b1f0:	e12fff1e 	bx	lr
    b1f4:	e59f000c 	ldr	r0, [pc, #12]	; b208 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
    b1f8:	e12fff1e 	bx	lr
    b1fc:	1dcd6500 	.word	0x1dcd6500
    b200:	2cb41780 	.word	0x2cb41780
    b204:	0337f980 	.word	0x0337f980
    b208:	0124f800 	.word	0x0124f800

0000b20c <CMachineInfo::GetDevice(TDeviceId) const>:
    b20c:	e3510000 	cmp	r1, #0, 0
    b210:	1a000003 	bne	b224 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    b214:	e5d00004 	ldrb	r0, [r0, #4]
    b218:	e2500001 	subs	r0, r0, #1, 0
    b21c:	13a00001 	movne	r0, #1, 0
    b220:	e12fff1e 	bx	lr
    b224:	e59f100c 	ldr	r1, [pc, #12]	; b238 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    b228:	e92d4010 	push	{r4, lr}
    b22c:	e59f2008 	ldr	r2, [pc, #8]	; b23c <CMachineInfo::GetDevice(TDeviceId) const+0x30>
    b230:	e2810010 	add	r0, r1, #16, 0
    b234:	eb001a33 	bl	11b08 <assertion_failed>
    b238:	00019d88 	.word	0x00019d88
    b23c:	000001b5 	.word	0x000001b5

0000b240 <CMachineInfo::ArePWMChannelsSwapped() const>:
    b240:	e5d03004 	ldrb	r3, [r0, #4]
    b244:	e2430006 	sub	r0, r3, #6, 0
    b248:	e3500001 	cmp	r0, #1, 0
    b24c:	83530003 	cmphi	r3, #3, 0
    b250:	83a00001 	movhi	r0, #1, 0
    b254:	93a00000 	movls	r0, #0, 0
    b258:	e12fff1e 	bx	lr

0000b25c <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    b25c:	e59f30b0 	ldr	r3, [pc, #176]	; b314 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
    b260:	e92d4010 	push	{r4, lr}
    b264:	e5933000 	ldr	r3, [r3]
    b268:	ea000002 	b	b278 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
    b26c:	e1530000 	cmp	r3, r0
    b270:	0a000006 	beq	b290 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
    b274:	e1a00003 	mov	r0, r3
    b278:	e3530000 	cmp	r3, #0, 0
    b27c:	1afffffa 	bne	b26c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
    b280:	e59f1090 	ldr	r1, [pc, #144]	; b318 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
    b284:	e59f2090 	ldr	r2, [pc, #144]	; b31c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    b288:	e2810014 	add	r0, r1, #20, 0
    b28c:	eb001a1d 	bl	11b08 <assertion_failed>
    b290:	e3d1200f 	bics	r2, r1, #15, 0
    b294:	1a00000a 	bne	b2c4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
    b298:	e351000c 	cmp	r1, #12, 0
    b29c:	8a000018 	bhi	b304 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
    b2a0:	e1d321b8 	ldrh	r2, [r3, #24]
    b2a4:	e1a00152 	asr	r0, r2, r1
    b2a8:	e3100001 	tst	r0, #1, 0
    b2ac:	0a00000d 	beq	b2e8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
    b2b0:	e3a00001 	mov	r0, #1, 0
    b2b4:	e1c22110 	bic	r2, r2, r0, lsl r1
    b2b8:	e1c321b8 	strh	r2, [r3, #24]
    b2bc:	e1a00001 	mov	r0, r1
    b2c0:	e8bd8010 	pop	{r4, pc}
    b2c4:	e3510081 	cmp	r1, #129, 0	; 0x81
    b2c8:	03a03006 	moveq	r3, #6, 0
    b2cc:	13a0300c 	movne	r3, #12, 0
    b2d0:	e1d011b8 	ldrh	r1, [r0, #24]
    b2d4:	e1a02351 	asr	r2, r1, r3
    b2d8:	e3120001 	tst	r2, #1, 0
    b2dc:	1a000003 	bne	b2f0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
    b2e0:	e2533001 	subs	r3, r3, #1, 0
    b2e4:	2afffffa 	bcs	b2d4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
    b2e8:	e3a00080 	mov	r0, #128, 0	; 0x80
    b2ec:	e8bd8010 	pop	{r4, pc}
    b2f0:	e3a02001 	mov	r2, #1, 0
    b2f4:	e1c11312 	bic	r1, r1, r2, lsl r3
    b2f8:	e1c011b8 	strh	r1, [r0, #24]
    b2fc:	e1a00003 	mov	r0, r3
    b300:	e8bd8010 	pop	{r4, pc}
    b304:	e59f100c 	ldr	r1, [pc, #12]	; b318 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
    b308:	e59f2010 	ldr	r2, [pc, #16]	; b320 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
    b30c:	e2810024 	add	r0, r1, #36, 0	; 0x24
    b310:	eb0019fc 	bl	11b08 <assertion_failed>
    b314:	0001cc4c 	.word	0x0001cc4c
    b318:	00019d88 	.word	0x00019d88
    b31c:	000001c5 	.word	0x000001c5
    b320:	000001ce 	.word	0x000001ce

0000b324 <CMachineInfo::FreeDMAChannel(unsigned int)>:
    b324:	e59f3074 	ldr	r3, [pc, #116]	; b3a0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
    b328:	e92d4010 	push	{r4, lr}
    b32c:	e5933000 	ldr	r3, [r3]
    b330:	ea000002 	b	b340 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
    b334:	e1530000 	cmp	r3, r0
    b338:	0a000006 	beq	b358 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
    b33c:	e1a00003 	mov	r0, r3
    b340:	e3530000 	cmp	r3, #0, 0
    b344:	1afffffa 	bne	b334 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
    b348:	e59f1054 	ldr	r1, [pc, #84]	; b3a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b34c:	e59f2054 	ldr	r2, [pc, #84]	; b3a8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
    b350:	e2810014 	add	r0, r1, #20, 0
    b354:	eb0019eb 	bl	11b08 <assertion_failed>
    b358:	e351000c 	cmp	r1, #12, 0
    b35c:	8a000007 	bhi	b380 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
    b360:	e1d321b8 	ldrh	r2, [r3, #24]
    b364:	e1e00152 	mvn	r0, r2, asr r1
    b368:	e3100001 	tst	r0, #1, 0
    b36c:	0a000007 	beq	b390 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
    b370:	e3a00001 	mov	r0, #1, 0
    b374:	e1821110 	orr	r1, r2, r0, lsl r1
    b378:	e1c311b8 	strh	r1, [r3, #24]
    b37c:	e8bd8010 	pop	{r4, pc}
    b380:	e59f101c 	ldr	r1, [pc, #28]	; b3a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b384:	e59f2020 	ldr	r2, [pc, #32]	; b3ac <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
    b388:	e2810024 	add	r0, r1, #36, 0	; 0x24
    b38c:	eb0019dd 	bl	11b08 <assertion_failed>
    b390:	e59f100c 	ldr	r1, [pc, #12]	; b3a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b394:	e59f2014 	ldr	r2, [pc, #20]	; b3b0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
    b398:	e2810040 	add	r0, r1, #64, 0	; 0x40
    b39c:	eb0019d9 	bl	11b08 <assertion_failed>
    b3a0:	0001cc4c 	.word	0x0001cc4c
    b3a4:	00019d88 	.word	0x00019d88
    b3a8:	000001ea 	.word	0x000001ea
    b3ac:	000001f2 	.word	0x000001f2
    b3b0:	000001f3 	.word	0x000001f3

0000b3b4 <CMachineInfo::Get()>:
    b3b4:	e59f301c 	ldr	r3, [pc, #28]	; b3d8 <CMachineInfo::Get()+0x24>
    b3b8:	e5930000 	ldr	r0, [r3]
    b3bc:	e3500000 	cmp	r0, #0, 0
    b3c0:	112fff1e 	bxne	lr
    b3c4:	e59f1010 	ldr	r1, [pc, #16]	; b3dc <CMachineInfo::Get()+0x28>
    b3c8:	e92d4010 	push	{r4, lr}
    b3cc:	e59f200c 	ldr	r2, [pc, #12]	; b3e0 <CMachineInfo::Get()+0x2c>
    b3d0:	e2810014 	add	r0, r1, #20, 0
    b3d4:	eb0019cb 	bl	11b08 <assertion_failed>
    b3d8:	0001cc4c 	.word	0x0001cc4c
    b3dc:	00019d88 	.word	0x00019d88
    b3e0:	000001f9 	.word	0x000001f9

0000b3e4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    b3e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b3e8:	e1a04000 	mov	r4, r0
    b3ec:	e3a05000 	mov	r5, #0, 0
    b3f0:	e1a08001 	mov	r8, r1
    b3f4:	e1a07002 	mov	r7, r2
    b3f8:	e1a06003 	mov	r6, r3
    b3fc:	eb001c4e 	bl	1253c <CDevice::CDevice()>
    b400:	e59f3060 	ldr	r3, [pc, #96]	; b468 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x84>
    b404:	e5848004 	str	r8, [r4, #4]
    b408:	e5843000 	str	r3, [r4]
    b40c:	e5847008 	str	r7, [r4, #8]
    b410:	e5c4600c 	strb	r6, [r4, #12]
    b414:	e5845010 	str	r5, [r4, #16]
    b418:	e2840014 	add	r0, r4, #20, 0
    b41c:	eb001ba4 	bl	122b4 <CCharGenerator::CCharGenerator()>
    b420:	e3e03020 	mvn	r3, #32, 0
    b424:	e3a02001 	mov	r2, #1, 0
    b428:	e3a01081 	mov	r1, #129, 0	; 0x81
    b42c:	e5c42044 	strb	r2, [r4, #68]	; 0x44
    b430:	e5845018 	str	r5, [r4, #24]
    b434:	e1a02005 	mov	r2, r5
    b438:	e5845030 	str	r5, [r4, #48]	; 0x30
    b43c:	e5845034 	str	r5, [r4, #52]	; 0x34
    b440:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b444:	e5845040 	str	r5, [r4, #64]	; 0x40
    b448:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    b44c:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    b450:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
    b454:	e2840058 	add	r0, r4, #88, 0	; 0x58
    b458:	eb001c3b 	bl	1254c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    b45c:	e1a00004 	mov	r0, r4
    b460:	e5845080 	str	r5, [r4, #128]	; 0x80
    b464:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b468:	00019df8 	.word	0x00019df8

0000b46c <CScreenDevice::~CScreenDevice()>:
    b46c:	e5d0200c 	ldrb	r2, [r0, #12]
    b470:	e59f3070 	ldr	r3, [pc, #112]	; b4e8 <CScreenDevice::~CScreenDevice()+0x7c>
    b474:	e3520000 	cmp	r2, #0, 0
    b478:	e92d4070 	push	{r4, r5, r6, lr}
    b47c:	e1a04000 	mov	r4, r0
    b480:	e5803000 	str	r3, [r0]
    b484:	0a000003 	beq	b498 <CScreenDevice::~CScreenDevice()+0x2c>
    b488:	e5900018 	ldr	r0, [r0, #24]
    b48c:	e3500000 	cmp	r0, #0, 0
    b490:	0a000000 	beq	b498 <CScreenDevice::~CScreenDevice()+0x2c>
    b494:	eb0014be 	bl	10794 <operator delete[](void*)>
    b498:	e3a03000 	mov	r3, #0, 0
    b49c:	e5945010 	ldr	r5, [r4, #16]
    b4a0:	e5843018 	str	r3, [r4, #24]
    b4a4:	e1550003 	cmp	r5, r3
    b4a8:	0a000004 	beq	b4c0 <CScreenDevice::~CScreenDevice()+0x54>
    b4ac:	e1a00005 	mov	r0, r5
    b4b0:	eb001a36 	bl	11d90 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b4b4:	e1a00005 	mov	r0, r5
    b4b8:	e3a01094 	mov	r1, #148, 0	; 0x94
    b4bc:	eb0014b5 	bl	10798 <operator delete(void*, unsigned int)>
    b4c0:	e3a03000 	mov	r3, #0, 0
    b4c4:	e2840058 	add	r0, r4, #88, 0	; 0x58
    b4c8:	e5843010 	str	r3, [r4, #16]
    b4cc:	eb001c61 	bl	12658 <CDMAChannel::~CDMAChannel()>
    b4d0:	e2840014 	add	r0, r4, #20, 0
    b4d4:	eb001b79 	bl	122c0 <CCharGenerator::~CCharGenerator()>
    b4d8:	e1a00004 	mov	r0, r4
    b4dc:	eb001c08 	bl	12504 <CDevice::~CDevice()>
    b4e0:	e1a00004 	mov	r0, r4
    b4e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b4e8:	00019df8 	.word	0x00019df8

0000b4ec <CScreenDevice::~CScreenDevice()>:
    b4ec:	e92d4010 	push	{r4, lr}
    b4f0:	e1a04000 	mov	r4, r0
    b4f4:	ebffffdc 	bl	b46c <CScreenDevice::~CScreenDevice()>
    b4f8:	e1a00004 	mov	r0, r4
    b4fc:	e3a01084 	mov	r1, #132, 0	; 0x84
    b500:	eb0014a4 	bl	10798 <operator delete(void*, unsigned int)>
    b504:	e1a00004 	mov	r0, r4
    b508:	e8bd8010 	pop	{r4, pc}

0000b50c <CScreenDevice::Initialize()>:
    b50c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b510:	e5d0500c 	ldrb	r5, [r0, #12]
    b514:	e1a04000 	mov	r4, r0
    b518:	e3550000 	cmp	r5, #0, 0
    b51c:	e24dd00c 	sub	sp, sp, #12, 0
    b520:	0a00002c 	beq	b5d8 <CScreenDevice::Initialize()+0xcc>
    b524:	e5903004 	ldr	r3, [r0, #4]
    b528:	e5902008 	ldr	r2, [r0, #8]
    b52c:	e5803024 	str	r3, [r0, #36]	; 0x24
    b530:	e0000392 	mul	r0, r2, r3
    b534:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    b538:	e1a00080 	lsl	r0, r0, #1
    b53c:	e584001c 	str	r0, [r4, #28]
    b540:	e5843020 	str	r3, [r4, #32]
    b544:	23e00000 	mvncs	r0, #0, 0
    b548:	e5842028 	str	r2, [r4, #40]	; 0x28
    b54c:	eb001489 	bl	10778 <operator new[](unsigned int)>
    b550:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    b554:	e5840018 	str	r0, [r4, #24]
    b558:	e2846014 	add	r6, r4, #20, 0
    b55c:	e1a00006 	mov	r0, r6
    b560:	eb001b59 	bl	122cc <CCharGenerator::GetCharHeight() const>
    b564:	e1a01000 	mov	r1, r0
    b568:	e1a00007 	mov	r0, r7
    b56c:	eb0034e6 	bl	1890c <__udivsi3>
    b570:	e1a05000 	mov	r5, r0
    b574:	e1a00006 	mov	r0, r6
    b578:	eb001b53 	bl	122cc <CCharGenerator::GetCharHeight() const>
    b57c:	e3a02000 	mov	r2, #0, 0
    b580:	e0000590 	mul	r0, r0, r5
    b584:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    b588:	e584002c 	str	r0, [r4, #44]	; 0x2c
    b58c:	e1c423fc 	strd	r2, [r4, #60]	; 0x3c
    b590:	e5840038 	str	r0, [r4, #56]	; 0x38
    b594:	e1a00004 	mov	r0, r4
    b598:	eb00021c 	bl	be10 <CScreenDevice::ClearDisplayEnd()>
    b59c:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    b5a0:	e3530000 	cmp	r3, #0, 0
    b5a4:	1a000008 	bne	b5cc <CScreenDevice::Initialize()+0xc0>
    b5a8:	ebfff656 	bl	8f08 <CDeviceNameService::Get()>
    b5ac:	e1a02004 	mov	r2, r4
    b5b0:	e3a03000 	mov	r3, #0, 0
    b5b4:	e59f10c8 	ldr	r1, [pc, #200]	; b684 <CScreenDevice::Initialize()+0x178>
    b5b8:	ebfff5a2 	bl	8c48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    b5bc:	e3a05001 	mov	r5, #1, 0
    b5c0:	e1a00005 	mov	r0, r5
    b5c4:	e28dd00c 	add	sp, sp, #12, 0
    b5c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b5cc:	e1a00004 	mov	r0, r4
    b5d0:	eb0003e9 	bl	c57c <CScreenDevice::InvertCursor() [clone .part.0]>
    b5d4:	eafffff3 	b	b5a8 <CScreenDevice::Initialize()+0x9c>
    b5d8:	e3a00094 	mov	r0, #148, 0	; 0x94
    b5dc:	eb00145f 	bl	10760 <operator new(unsigned int)>
    b5e0:	e1a06000 	mov	r6, r0
    b5e4:	e58d5004 	str	r5, [sp, #4]
    b5e8:	e58d5000 	str	r5, [sp]
    b5ec:	e3a03010 	mov	r3, #16, 0
    b5f0:	e9940006 	ldmib	r4, {r1, r2}
    b5f4:	eb001993 	bl	11c48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b5f8:	e1a00006 	mov	r0, r6
    b5fc:	e5846010 	str	r6, [r4, #16]
    b600:	eb001a0f 	bl	11e44 <CBcmFrameBuffer::Initialize()>
    b604:	e3500000 	cmp	r0, #0, 0
    b608:	0affffec 	beq	b5c0 <CScreenDevice::Initialize()+0xb4>
    b60c:	e5940010 	ldr	r0, [r4, #16]
    b610:	eb001a46 	bl	11f30 <CBcmFrameBuffer::GetDepth() const>
    b614:	e3500010 	cmp	r0, #16, 0
    b618:	1affffe8 	bne	b5c0 <CScreenDevice::Initialize()+0xb4>
    b61c:	e5940010 	ldr	r0, [r4, #16]
    b620:	eb001a44 	bl	11f38 <CBcmFrameBuffer::GetBuffer() const>
    b624:	e1a03000 	mov	r3, r0
    b628:	e5940010 	ldr	r0, [r4, #16]
    b62c:	e5843018 	str	r3, [r4, #24]
    b630:	eb001a42 	bl	11f40 <CBcmFrameBuffer::GetSize() const>
    b634:	e1a03000 	mov	r3, r0
    b638:	e5940010 	ldr	r0, [r4, #16]
    b63c:	e584301c 	str	r3, [r4, #28]
    b640:	eb001a38 	bl	11f28 <CBcmFrameBuffer::GetPitch() const>
    b644:	e1a03000 	mov	r3, r0
    b648:	e5940010 	ldr	r0, [r4, #16]
    b64c:	e5843020 	str	r3, [r4, #32]
    b650:	eb001a2c 	bl	11f08 <CBcmFrameBuffer::GetWidth() const>
    b654:	e1a03000 	mov	r3, r0
    b658:	e5940010 	ldr	r0, [r4, #16]
    b65c:	e5843024 	str	r3, [r4, #36]	; 0x24
    b660:	eb001a2a 	bl	11f10 <CBcmFrameBuffer::GetHeight() const>
    b664:	e5943020 	ldr	r3, [r4, #32]
    b668:	e1a07000 	mov	r7, r0
    b66c:	e3130003 	tst	r3, #3, 0
    b670:	e5840028 	str	r0, [r4, #40]	; 0x28
    b674:	1affffd1 	bne	b5c0 <CScreenDevice::Initialize()+0xb4>
    b678:	e1a030a3 	lsr	r3, r3, #1
    b67c:	e5843020 	str	r3, [r4, #32]
    b680:	eaffffb4 	b	b558 <CScreenDevice::Initialize()+0x4c>
    b684:	00019b44 	.word	0x00019b44

0000b688 <CScreenDevice::GetWidth() const>:
    b688:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b68c:	e12fff1e 	bx	lr

0000b690 <CScreenDevice::GetHeight() const>:
    b690:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b694:	e12fff1e 	bx	lr

0000b698 <CScreenDevice::GetColumns() const>:
    b698:	e92d4010 	push	{r4, lr}
    b69c:	e2800014 	add	r0, r0, #20, 0
    b6a0:	e5904010 	ldr	r4, [r0, #16]
    b6a4:	eb001b06 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    b6a8:	e1a01000 	mov	r1, r0
    b6ac:	e1a00004 	mov	r0, r4
    b6b0:	eb003495 	bl	1890c <__udivsi3>
    b6b4:	e8bd8010 	pop	{r4, pc}

0000b6b8 <CScreenDevice::GetRows() const>:
    b6b8:	e92d4010 	push	{r4, lr}
    b6bc:	e2800014 	add	r0, r0, #20, 0
    b6c0:	e5904018 	ldr	r4, [r0, #24]
    b6c4:	eb001b00 	bl	122cc <CCharGenerator::GetCharHeight() const>
    b6c8:	e1a01000 	mov	r1, r0
    b6cc:	e1a00004 	mov	r0, r4
    b6d0:	eb00348d 	bl	1890c <__udivsi3>
    b6d4:	e8bd8010 	pop	{r4, pc}

0000b6d8 <CScreenDevice::GetFrameBuffer()>:
    b6d8:	e5900010 	ldr	r0, [r0, #16]
    b6dc:	e12fff1e 	bx	lr

0000b6e0 <CScreenDevice::GetStatus()>:
    b6e0:	e92d4010 	push	{r4, lr}
    b6e4:	e591c01c 	ldr	ip, [r1, #28]
    b6e8:	e591e018 	ldr	lr, [r1, #24]
    b6ec:	e5912030 	ldr	r2, [r1, #48]	; 0x30
    b6f0:	e580e000 	str	lr, [r0]
    b6f4:	e580c004 	str	ip, [r0, #4]
    b6f8:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    b6fc:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    b700:	e5802008 	str	r2, [r0, #8]
    b704:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    b708:	e580e00c 	str	lr, [r0, #12]
    b70c:	e580c010 	str	ip, [r0, #16]
    b710:	e591e040 	ldr	lr, [r1, #64]	; 0x40
    b714:	e5d1c044 	ldrb	ip, [r1, #68]	; 0x44
    b718:	e5802014 	str	r2, [r0, #20]
    b71c:	e1d124b6 	ldrh	r2, [r1, #70]	; 0x46
    b720:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    b724:	e580e018 	str	lr, [r0, #24]
    b728:	e5c0c01c 	strb	ip, [r0, #28]
    b72c:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    b730:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    b734:	e1c021be 	strh	r2, [r0, #30]
    b738:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    b73c:	e5c04020 	strb	r4, [r0, #32]
    b740:	e580e024 	str	lr, [r0, #36]	; 0x24
    b744:	e580c028 	str	ip, [r0, #40]	; 0x28
    b748:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    b74c:	e8bd8010 	pop	{r4, pc}

0000b750 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    b750:	e590201c 	ldr	r2, [r0, #28]
    b754:	e5913004 	ldr	r3, [r1, #4]
    b758:	e1520003 	cmp	r2, r3
    b75c:	0a000001 	beq	b768 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    b760:	e3a00000 	mov	r0, #0, 0
    b764:	e12fff1e 	bx	lr
    b768:	e92d4070 	push	{r4, r5, r6, lr}
    b76c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b770:	e1a05001 	mov	r5, r1
    b774:	e5901020 	ldr	r1, [r0, #32]
    b778:	e1a04000 	mov	r4, r0
    b77c:	e1510003 	cmp	r1, r3
    b780:	1a00002e 	bne	b840 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    b784:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    b788:	e3500000 	cmp	r0, #0, 0
    b78c:	1a000020 	bne	b814 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>
    b790:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    b794:	e3530000 	cmp	r3, #0, 0
    b798:	1a000028 	bne	b840 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    b79c:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b7a0:	e3530000 	cmp	r3, #0, 0
    b7a4:	1a000025 	bne	b840 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    b7a8:	e5951000 	ldr	r1, [r5]
    b7ac:	e5940018 	ldr	r0, [r4, #24]
    b7b0:	eb0012de 	bl	10330 <memcpy>
    b7b4:	e1c500dc 	ldrd	r0, [r5, #12]
    b7b8:	e5953008 	ldr	r3, [r5, #8]
    b7bc:	e5942080 	ldr	r2, [r4, #128]	; 0x80
    b7c0:	e5d5c01c 	ldrb	ip, [r5, #28]
    b7c4:	e3520000 	cmp	r2, #0, 0
    b7c8:	e5952014 	ldr	r2, [r5, #20]
    b7cc:	e5843030 	str	r3, [r4, #48]	; 0x30
    b7d0:	e5953018 	ldr	r3, [r5, #24]
    b7d4:	e5840034 	str	r0, [r4, #52]	; 0x34
    b7d8:	e5841038 	str	r1, [r4, #56]	; 0x38
    b7dc:	e1d501be 	ldrh	r0, [r5, #30]
    b7e0:	e5d51020 	ldrb	r1, [r5, #32]
    b7e4:	e584203c 	str	r2, [r4, #60]	; 0x3c
    b7e8:	e5843040 	str	r3, [r4, #64]	; 0x40
    b7ec:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
    b7f0:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    b7f4:	e1c424fc 	strd	r2, [r4, #76]	; 0x4c
    b7f8:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    b7fc:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    b800:	1a000012 	bne	b850 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    b804:	e3a03000 	mov	r3, #0, 0
    b808:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b80c:	e3a00001 	mov	r0, #1, 0
    b810:	e8bd8070 	pop	{r4, r5, r6, pc}
    b814:	eb0016ff 	bl	11418 <EnterCritical>
    b818:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    b81c:	e3530000 	cmp	r3, #0, 0
    b820:	1a000002 	bne	b830 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe0>
    b824:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b828:	e3530000 	cmp	r3, #0, 0
    b82c:	0a000005 	beq	b848 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf8>
    b830:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    b834:	e3530000 	cmp	r3, #0, 0
    b838:	0a000000 	beq	b840 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    b83c:	eb00171f 	bl	114c0 <LeaveCritical>
    b840:	e3a00000 	mov	r0, #0, 0
    b844:	e8bd8070 	pop	{r4, r5, r6, pc}
    b848:	e594201c 	ldr	r2, [r4, #28]
    b84c:	eaffffd5 	b	b7a8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b850:	eb00171a 	bl	114c0 <LeaveCritical>
    b854:	eaffffea 	b	b804 <CScreenDevice::SetStatus(TScreenStatus const&)+0xb4>

0000b858 <CScreenDevice::Write(void const*, unsigned int)>:
    b858:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b85c:	e1a05000 	mov	r5, r0
    b860:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    b864:	e1a04001 	mov	r4, r1
    b868:	e3500000 	cmp	r0, #0, 0
    b86c:	e1a07002 	mov	r7, r2
    b870:	1a000022 	bne	b900 <CScreenDevice::Write(void const*, unsigned int)+0xa8>
    b874:	e3a02001 	mov	r2, #1, 0
    b878:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    b87c:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    b880:	e3530000 	cmp	r3, #0, 0
    b884:	1a000017 	bne	b8e8 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    b888:	e3570000 	cmp	r7, #0, 0
    b88c:	e2473001 	sub	r3, r7, #1, 0
    b890:	0a00000b 	beq	b8c4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    b894:	e2837001 	add	r7, r3, #1, 0
    b898:	e0846007 	add	r6, r4, r7
    b89c:	e0d410d1 	ldrsb	r1, [r4], #1
    b8a0:	e1a00005 	mov	r0, r5
    b8a4:	eb000019 	bl	b910 <CScreenDevice::Write(char)>
    b8a8:	e1540006 	cmp	r4, r6
    b8ac:	1afffffa 	bne	b89c <CScreenDevice::Write(void const*, unsigned int)+0x44>
    b8b0:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    b8b4:	e3530000 	cmp	r3, #0, 0
    b8b8:	0a000001 	beq	b8c4 <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    b8bc:	e1a00005 	mov	r0, r5
    b8c0:	eb00032d 	bl	c57c <CScreenDevice::InvertCursor() [clone .part.0]>
    b8c4:	e3a02000 	mov	r2, #0, 0
    b8c8:	e5953080 	ldr	r3, [r5, #128]	; 0x80
    b8cc:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    b8d0:	e1530002 	cmp	r3, r2
    b8d4:	1a00000b 	bne	b908 <CScreenDevice::Write(void const*, unsigned int)+0xb0>
    b8d8:	e3a03000 	mov	r3, #0, 0
    b8dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b8e0:	e1a00007 	mov	r0, r7
    b8e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b8e8:	e1a00005 	mov	r0, r5
    b8ec:	eb000322 	bl	c57c <CScreenDevice::InvertCursor() [clone .part.0]>
    b8f0:	e3570000 	cmp	r7, #0, 0
    b8f4:	e2473001 	sub	r3, r7, #1, 0
    b8f8:	1affffe5 	bne	b894 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    b8fc:	eaffffeb 	b	b8b0 <CScreenDevice::Write(void const*, unsigned int)+0x58>
    b900:	eb0016c4 	bl	11418 <EnterCritical>
    b904:	eaffffda 	b	b874 <CScreenDevice::Write(void const*, unsigned int)+0x1c>
    b908:	eb0016ec 	bl	114c0 <LeaveCritical>
    b90c:	eafffff1 	b	b8d8 <CScreenDevice::Write(void const*, unsigned int)+0x80>

0000b910 <CScreenDevice::Write(char)>:
    b910:	e92d4010 	push	{r4, lr}
    b914:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b918:	e1a04000 	mov	r4, r0
    b91c:	e24dd008 	sub	sp, sp, #8, 0
    b920:	e3530007 	cmp	r3, #7, 0
    b924:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b928:	ea000047 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    b92c:	0000ba5c 	.word	0x0000ba5c
    b930:	0000bb4c 	.word	0x0000bb4c
    b934:	0000babc 	.word	0x0000babc
    b938:	0000b94c 	.word	0x0000b94c
    b93c:	0000bb60 	.word	0x0000bb60
    b940:	0000bb80 	.word	0x0000bb80
    b944:	0000bba0 	.word	0x0000bba0
    b948:	0000bb14 	.word	0x0000bb14
    b94c:	e241303b 	sub	r3, r1, #59, 0	; 0x3b
    b950:	e3530032 	cmp	r3, #50, 0	; 0x32
    b954:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b958:	ea000070 	b	bb20 <CScreenDevice::Write(char)+0x210>
    b95c:	0000bc84 	.word	0x0000bc84
    b960:	0000bb20 	.word	0x0000bb20
    b964:	0000bb20 	.word	0x0000bb20
    b968:	0000bb20 	.word	0x0000bb20
    b96c:	0000bb20 	.word	0x0000bb20
    b970:	0000bb20 	.word	0x0000bb20
    b974:	0000bb20 	.word	0x0000bb20
    b978:	0000bb20 	.word	0x0000bb20
    b97c:	0000bb20 	.word	0x0000bb20
    b980:	0000bb20 	.word	0x0000bb20
    b984:	0000bb20 	.word	0x0000bb20
    b988:	0000bb20 	.word	0x0000bb20
    b98c:	0000bb20 	.word	0x0000bb20
    b990:	0000bb20 	.word	0x0000bb20
    b994:	0000bb20 	.word	0x0000bb20
    b998:	0000bb20 	.word	0x0000bb20
    b99c:	0000bb20 	.word	0x0000bb20
    b9a0:	0000ba4c 	.word	0x0000ba4c
    b9a4:	0000ba4c 	.word	0x0000ba4c
    b9a8:	0000bb20 	.word	0x0000bb20
    b9ac:	0000bb20 	.word	0x0000bb20
    b9b0:	0000ba4c 	.word	0x0000ba4c
    b9b4:	0000bb20 	.word	0x0000bb20
    b9b8:	0000bb20 	.word	0x0000bb20
    b9bc:	0000bb20 	.word	0x0000bb20
    b9c0:	0000bb20 	.word	0x0000bb20
    b9c4:	0000bb20 	.word	0x0000bb20
    b9c8:	0000bb20 	.word	0x0000bb20
    b9cc:	0000bb20 	.word	0x0000bb20
    b9d0:	0000bd10 	.word	0x0000bd10
    b9d4:	0000bb20 	.word	0x0000bb20
    b9d8:	0000bb20 	.word	0x0000bb20
    b9dc:	0000bb20 	.word	0x0000bb20
    b9e0:	0000bb20 	.word	0x0000bb20
    b9e4:	0000bb20 	.word	0x0000bb20
    b9e8:	0000bb20 	.word	0x0000bb20
    b9ec:	0000bb20 	.word	0x0000bb20
    b9f0:	0000bb20 	.word	0x0000bb20
    b9f4:	0000bb20 	.word	0x0000bb20
    b9f8:	0000bb20 	.word	0x0000bb20
    b9fc:	0000bb20 	.word	0x0000bb20
    ba00:	0000bb20 	.word	0x0000bb20
    ba04:	0000bb20 	.word	0x0000bb20
    ba08:	0000bb20 	.word	0x0000bb20
    ba0c:	0000bb20 	.word	0x0000bb20
    ba10:	0000bc68 	.word	0x0000bc68
    ba14:	0000bb20 	.word	0x0000bb20
    ba18:	0000bb20 	.word	0x0000bb20
    ba1c:	0000bb20 	.word	0x0000bb20
    ba20:	0000bc68 	.word	0x0000bc68
    ba24:	0000bc90 	.word	0x0000bc90
    ba28:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    ba2c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ba30:	e1520003 	cmp	r2, r3
    ba34:	9a000004 	bls	ba4c <CScreenDevice::Write(char)+0x13c>
    ba38:	e2800014 	add	r0, r0, #20, 0
    ba3c:	eb001a22 	bl	122cc <CCharGenerator::GetCharHeight() const>
    ba40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ba44:	e0430000 	sub	r0, r3, r0
    ba48:	e5840040 	str	r0, [r4, #64]	; 0x40
    ba4c:	e3a03000 	mov	r3, #0, 0
    ba50:	e5843030 	str	r3, [r4, #48]	; 0x30
    ba54:	e28dd008 	add	sp, sp, #8, 0
    ba58:	e8bd8010 	pop	{r4, pc}
    ba5c:	e2413008 	sub	r3, r1, #8, 0
    ba60:	e3530013 	cmp	r3, #19, 0
    ba64:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ba68:	ea000062 	b	bbf8 <CScreenDevice::Write(char)+0x2e8>
    ba6c:	0000bc5c 	.word	0x0000bc5c
    ba70:	0000bc50 	.word	0x0000bc50
    ba74:	0000bc3c 	.word	0x0000bc3c
    ba78:	0000bbf8 	.word	0x0000bbf8
    ba7c:	0000bbf8 	.word	0x0000bbf8
    ba80:	0000bc30 	.word	0x0000bc30
    ba84:	0000bbf8 	.word	0x0000bbf8
    ba88:	0000bbf8 	.word	0x0000bbf8
    ba8c:	0000bbf8 	.word	0x0000bbf8
    ba90:	0000bbf8 	.word	0x0000bbf8
    ba94:	0000bbf8 	.word	0x0000bbf8
    ba98:	0000bbf8 	.word	0x0000bbf8
    ba9c:	0000bbf8 	.word	0x0000bbf8
    baa0:	0000bbf8 	.word	0x0000bbf8
    baa4:	0000bbf8 	.word	0x0000bbf8
    baa8:	0000bbf8 	.word	0x0000bbf8
    baac:	0000bbf8 	.word	0x0000bbf8
    bab0:	0000bbf8 	.word	0x0000bbf8
    bab4:	0000bbf8 	.word	0x0000bbf8
    bab8:	0000bc24 	.word	0x0000bc24
    babc:	e241303f 	sub	r3, r1, #63, 0	; 0x3f
    bac0:	e3530011 	cmp	r3, #17, 0
    bac4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bac8:	ea0000b2 	b	bd98 <CScreenDevice::Write(char)+0x488>
    bacc:	0000bd24 	.word	0x0000bd24
    bad0:	0000bd98 	.word	0x0000bd98
    bad4:	0000ba28 	.word	0x0000ba28
    bad8:	0000bd88 	.word	0x0000bd88
    badc:	0000bd78 	.word	0x0000bd78
    bae0:	0000bd68 	.word	0x0000bd68
    bae4:	0000bd98 	.word	0x0000bd98
    bae8:	0000bd98 	.word	0x0000bd98
    baec:	0000bd98 	.word	0x0000bd98
    baf0:	0000bd50 	.word	0x0000bd50
    baf4:	0000bd98 	.word	0x0000bd98
    baf8:	0000bd40 	.word	0x0000bd40
    bafc:	0000bd30 	.word	0x0000bd30
    bb00:	0000ba4c 	.word	0x0000ba4c
    bb04:	0000ba4c 	.word	0x0000ba4c
    bb08:	0000bd98 	.word	0x0000bd98
    bb0c:	0000bd98 	.word	0x0000bd98
    bb10:	0000ba4c 	.word	0x0000ba4c
    bb14:	e3c13004 	bic	r3, r1, #4, 0
    bb18:	e3530068 	cmp	r3, #104, 0	; 0x68
    bb1c:	0a00002e 	beq	bbdc <CScreenDevice::Write(char)+0x2cc>
    bb20:	e2411030 	sub	r1, r1, #48, 0	; 0x30
    bb24:	e6ef3071 	uxtb	r3, r1
    bb28:	e3530009 	cmp	r3, #9, 0
    bb2c:	8affffc6 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bb30:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bb34:	e0833103 	add	r3, r3, r3, lsl #2
    bb38:	e0811083 	add	r1, r1, r3, lsl #1
    bb3c:	e3510063 	cmp	r1, #99, 0	; 0x63
    bb40:	e584104c 	str	r1, [r4, #76]	; 0x4c
    bb44:	8affffc0 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bb48:	eaffffc1 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bb4c:	e351005b 	cmp	r1, #91, 0	; 0x5b
    bb50:	1affffbd 	bne	ba4c <CScreenDevice::Write(char)+0x13c>
    bb54:	e3a03002 	mov	r3, #2, 0
    bb58:	e5803030 	str	r3, [r0, #48]	; 0x30
    bb5c:	eaffffbc 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bb60:	e2411030 	sub	r1, r1, #48, 0	; 0x30
    bb64:	e6ef3071 	uxtb	r3, r1
    bb68:	e3530009 	cmp	r3, #9, 0
    bb6c:	8affffb6 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bb70:	e3a03007 	mov	r3, #7, 0
    bb74:	e580104c 	str	r1, [r0, #76]	; 0x4c
    bb78:	e5803030 	str	r3, [r0, #48]	; 0x30
    bb7c:	eaffffb4 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bb80:	e2411030 	sub	r1, r1, #48, 0	; 0x30
    bb84:	e6ef3071 	uxtb	r3, r1
    bb88:	e3530009 	cmp	r3, #9, 0
    bb8c:	8affffae 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bb90:	e3a03006 	mov	r3, #6, 0
    bb94:	e5801050 	str	r1, [r0, #80]	; 0x50
    bb98:	e5803030 	str	r3, [r0, #48]	; 0x30
    bb9c:	eaffffac 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bba0:	e3510048 	cmp	r1, #72, 0	; 0x48
    bba4:	0a000090 	beq	bdec <CScreenDevice::Write(char)+0x4dc>
    bba8:	e3510072 	cmp	r1, #114, 0	; 0x72
    bbac:	0a00008a 	beq	bddc <CScreenDevice::Write(char)+0x4cc>
    bbb0:	e2411030 	sub	r1, r1, #48, 0	; 0x30
    bbb4:	e6ef3071 	uxtb	r3, r1
    bbb8:	e3530009 	cmp	r3, #9, 0
    bbbc:	8affffa2 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bbc0:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    bbc4:	e0833103 	add	r3, r3, r3, lsl #2
    bbc8:	e0811083 	add	r1, r1, r3, lsl #1
    bbcc:	e35100c7 	cmp	r1, #199, 0	; 0xc7
    bbd0:	e5801050 	str	r1, [r0, #80]	; 0x50
    bbd4:	8affff9c 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bbd8:	eaffff9d 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bbdc:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    bbe0:	e3530019 	cmp	r3, #25, 0
    bbe4:	02411068 	subeq	r1, r1, #104, 0	; 0x68
    bbe8:	016f1f11 	clzeq	r1, r1
    bbec:	01a012a1 	lsreq	r1, r1, #5
    bbf0:	05c01044 	strbeq	r1, [r0, #68]	; 0x44
    bbf4:	eaffff94 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bbf8:	e6ef3071 	uxtb	r3, r1
    bbfc:	e353001f 	cmp	r3, #31, 0
    bc00:	9affff93 	bls	ba54 <CScreenDevice::Write(char)+0x144>
    bc04:	e1d034b6 	ldrh	r3, [r0, #70]	; 0x46
    bc08:	e58d3000 	str	r3, [sp]
    bc0c:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
    bc10:	eb0001c2 	bl	c320 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    bc14:	e1a00004 	mov	r0, r4
    bc18:	e28dd008 	add	sp, sp, #8, 0
    bc1c:	e8bd4010 	pop	{r4, lr}
    bc20:	ea0000f7 	b	c004 <CScreenDevice::CursorRight()>
    bc24:	e3a03001 	mov	r3, #1, 0
    bc28:	e5803030 	str	r3, [r0, #48]	; 0x30
    bc2c:	eaffff88 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bc30:	e3a03000 	mov	r3, #0, 0
    bc34:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bc38:	eaffff85 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bc3c:	e3a03000 	mov	r3, #0, 0
    bc40:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bc44:	e28dd008 	add	sp, sp, #8, 0
    bc48:	e8bd4010 	pop	{r4, lr}
    bc4c:	ea0000a1 	b	bed8 <CScreenDevice::CursorDown()>
    bc50:	e28dd008 	add	sp, sp, #8, 0
    bc54:	e8bd4010 	pop	{r4, lr}
    bc58:	ea00016a 	b	c208 <CScreenDevice::Tabulator()>
    bc5c:	e28dd008 	add	sp, sp, #8, 0
    bc60:	e8bd4010 	pop	{r4, lr}
    bc64:	ea0000b2 	b	bf34 <CScreenDevice::CursorLeft()>
    bc68:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    bc6c:	e3530004 	cmp	r3, #4, 0
    bc70:	02411068 	subeq	r1, r1, #104, 0	; 0x68
    bc74:	016f1f11 	clzeq	r1, r1
    bc78:	01a012a1 	lsreq	r1, r1, #5
    bc7c:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    bc80:	eaffff71 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bc84:	e3a03005 	mov	r3, #5, 0
    bc88:	e5803030 	str	r3, [r0, #48]	; 0x30
    bc8c:	eaffff70 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bc90:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    bc94:	e353001b 	cmp	r3, #27, 0
    bc98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bc9c:	eaffff6a 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bca0:	0000bdb8 	.word	0x0000bdb8
    bca4:	0000bdc4 	.word	0x0000bdc4
    bca8:	0000bdd0 	.word	0x0000bdd0
    bcac:	0000ba4c 	.word	0x0000ba4c
    bcb0:	0000ba4c 	.word	0x0000ba4c
    bcb4:	0000ba4c 	.word	0x0000ba4c
    bcb8:	0000ba4c 	.word	0x0000ba4c
    bcbc:	0000ba4c 	.word	0x0000ba4c
    bcc0:	0000ba4c 	.word	0x0000ba4c
    bcc4:	0000ba4c 	.word	0x0000ba4c
    bcc8:	0000ba4c 	.word	0x0000ba4c
    bccc:	0000ba4c 	.word	0x0000ba4c
    bcd0:	0000ba4c 	.word	0x0000ba4c
    bcd4:	0000ba4c 	.word	0x0000ba4c
    bcd8:	0000ba4c 	.word	0x0000ba4c
    bcdc:	0000ba4c 	.word	0x0000ba4c
    bce0:	0000ba4c 	.word	0x0000ba4c
    bce4:	0000ba4c 	.word	0x0000ba4c
    bce8:	0000ba4c 	.word	0x0000ba4c
    bcec:	0000ba4c 	.word	0x0000ba4c
    bcf0:	0000ba4c 	.word	0x0000ba4c
    bcf4:	0000ba4c 	.word	0x0000ba4c
    bcf8:	0000ba4c 	.word	0x0000ba4c
    bcfc:	0000ba4c 	.word	0x0000ba4c
    bd00:	0000ba4c 	.word	0x0000ba4c
    bd04:	0000ba4c 	.word	0x0000ba4c
    bd08:	0000ba4c 	.word	0x0000ba4c
    bd0c:	0000bdb8 	.word	0x0000bdb8
    bd10:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    bd14:	e3510000 	cmp	r1, #0, 0
    bd18:	0affff4b 	beq	ba4c <CScreenDevice::Write(char)+0x13c>
    bd1c:	eb0001fe 	bl	c51c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
    bd20:	eaffff49 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bd24:	e3a03004 	mov	r3, #4, 0
    bd28:	e5803030 	str	r3, [r0, #48]	; 0x30
    bd2c:	eaffff48 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd30:	eb000056 	bl	be90 <CScreenDevice::ClearLineEnd()>
    bd34:	e3a03000 	mov	r3, #0, 0
    bd38:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd3c:	eaffff44 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd40:	eb000032 	bl	be10 <CScreenDevice::ClearDisplayEnd()>
    bd44:	e3a03000 	mov	r3, #0, 0
    bd48:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd4c:	eaffff40 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd50:	e3a03000 	mov	r3, #0, 0
    bd54:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    bd58:	e580303c 	str	r3, [r0, #60]	; 0x3c
    bd5c:	e5803030 	str	r3, [r0, #48]	; 0x30
    bd60:	e5802040 	str	r2, [r0, #64]	; 0x40
    bd64:	eaffff3a 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd68:	eb000071 	bl	bf34 <CScreenDevice::CursorLeft()>
    bd6c:	e3a03000 	mov	r3, #0, 0
    bd70:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd74:	eaffff36 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd78:	eb0000a1 	bl	c004 <CScreenDevice::CursorRight()>
    bd7c:	e3a03000 	mov	r3, #0, 0
    bd80:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd84:	eaffff32 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd88:	eb000052 	bl	bed8 <CScreenDevice::CursorDown()>
    bd8c:	e3a03000 	mov	r3, #0, 0
    bd90:	e5843030 	str	r3, [r4, #48]	; 0x30
    bd94:	eaffff2e 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bd98:	e2411030 	sub	r1, r1, #48, 0	; 0x30
    bd9c:	e6ef3071 	uxtb	r3, r1
    bda0:	e3530009 	cmp	r3, #9, 0
    bda4:	8affff28 	bhi	ba4c <CScreenDevice::Write(char)+0x13c>
    bda8:	e3a03003 	mov	r3, #3, 0
    bdac:	e580104c 	str	r1, [r0, #76]	; 0x4c
    bdb0:	e5803030 	str	r3, [r0, #48]	; 0x30
    bdb4:	eaffff26 	b	ba54 <CScreenDevice::Write(char)+0x144>
    bdb8:	e3e03020 	mvn	r3, #32, 0
    bdbc:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    bdc0:	eaffff21 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bdc4:	e3a03b3e 	mov	r3, #63488	; 0xf800
    bdc8:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    bdcc:	eaffff1e 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bdd0:	e3a0301f 	mov	r3, #31, 0
    bdd4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    bdd8:	eaffff1b 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bddc:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    bde0:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    bde4:	eb0000be 	bl	c0e4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    bde8:	eaffff17 	b	ba4c <CScreenDevice::Write(char)+0x13c>
    bdec:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    bdf0:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    bdf4:	eb000069 	bl	bfa0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    bdf8:	e3a03000 	mov	r3, #0, 0
    bdfc:	e5843030 	str	r3, [r4, #48]	; 0x30
    be00:	eaffff13 	b	ba54 <CScreenDevice::Write(char)+0x144>

0000be04 <CScreenDevice::CarriageReturn()>:
    be04:	e3a03000 	mov	r3, #0, 0
    be08:	e580303c 	str	r3, [r0, #60]	; 0x3c
    be0c:	e12fff1e 	bx	lr

0000be10 <CScreenDevice::ClearDisplayEnd()>:
    be10:	e92d4070 	push	{r4, r5, r6, lr}
    be14:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    be18:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    be1c:	e1a05000 	mov	r5, r0
    be20:	e1540003 	cmp	r4, r3
    be24:	e2806014 	add	r6, r0, #20, 0
    be28:	2a000009 	bcs	be54 <CScreenDevice::ClearDisplayEnd()+0x44>
    be2c:	e1a01004 	mov	r1, r4
    be30:	e1a00005 	mov	r0, r5
    be34:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    be38:	eb000161 	bl	c3c4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    be3c:	e1a00006 	mov	r0, r6
    be40:	eb00191f 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    be44:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    be48:	e0844000 	add	r4, r4, r0
    be4c:	e1530004 	cmp	r3, r4
    be50:	8afffff5 	bhi	be2c <CScreenDevice::ClearDisplayEnd()+0x1c>
    be54:	e1a00006 	mov	r0, r6
    be58:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    be5c:	eb00191a 	bl	122cc <CCharGenerator::GetCharHeight() const>
    be60:	e5953020 	ldr	r3, [r5, #32]
    be64:	e0840000 	add	r0, r4, r0
    be68:	e0000093 	mul	r0, r3, r0
    be6c:	e595201c 	ldr	r2, [r5, #28]
    be70:	e5953018 	ldr	r3, [r5, #24]
    be74:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    be78:	e0830080 	add	r0, r3, r0, lsl #1
    be7c:	08bd8070 	popeq	{r4, r5, r6, pc}
    be80:	e3a01000 	mov	r1, #0, 0
    be84:	e8bd4070 	pop	{r4, r5, r6, lr}
    be88:	e1a02082 	lsl	r2, r2, #1
    be8c:	ea000ede 	b	fa0c <memset>

0000be90 <CScreenDevice::ClearLineEnd()>:
    be90:	e92d4070 	push	{r4, r5, r6, lr}
    be94:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    be98:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    be9c:	e1540003 	cmp	r4, r3
    bea0:	28bd8070 	popcs	{r4, r5, r6, pc}
    bea4:	e1a05000 	mov	r5, r0
    bea8:	e2806014 	add	r6, r0, #20, 0
    beac:	e1a01004 	mov	r1, r4
    beb0:	e1a00005 	mov	r0, r5
    beb4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    beb8:	eb000141 	bl	c3c4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bebc:	e1a00006 	mov	r0, r6
    bec0:	eb0018ff 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    bec4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bec8:	e0844000 	add	r4, r4, r0
    becc:	e1530004 	cmp	r3, r4
    bed0:	8afffff5 	bhi	beac <CScreenDevice::ClearLineEnd()+0x1c>
    bed4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bed8 <CScreenDevice::CursorDown()>:
    bed8:	e92d4070 	push	{r4, r5, r6, lr}
    bedc:	e1a04000 	mov	r4, r0
    bee0:	e2805014 	add	r5, r0, #20, 0
    bee4:	e1a00005 	mov	r0, r5
    bee8:	eb0018f7 	bl	122cc <CCharGenerator::GetCharHeight() const>
    beec:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    bef0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    bef4:	e0800002 	add	r0, r0, r2
    bef8:	e1500003 	cmp	r0, r3
    befc:	e5840040 	str	r0, [r4, #64]	; 0x40
    bf00:	38bd8070 	popcc	{r4, r5, r6, pc}
    bf04:	e1a00004 	mov	r0, r4
    bf08:	eb0000d1 	bl	c254 <CScreenDevice::Scroll()>
    bf0c:	e1a00005 	mov	r0, r5
    bf10:	eb0018ed 	bl	122cc <CCharGenerator::GetCharHeight() const>
    bf14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bf18:	e0430000 	sub	r0, r3, r0
    bf1c:	e5840040 	str	r0, [r4, #64]	; 0x40
    bf20:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bf24 <CScreenDevice::CursorHome()>:
    bf24:	e3a02000 	mov	r2, #0, 0
    bf28:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bf2c:	e1c023fc 	strd	r2, [r0, #60]	; 0x3c
    bf30:	e12fff1e 	bx	lr

0000bf34 <CScreenDevice::CursorLeft()>:
    bf34:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    bf38:	e92d4070 	push	{r4, r5, r6, lr}
    bf3c:	e3530000 	cmp	r3, #0, 0
    bf40:	e1a04000 	mov	r4, r0
    bf44:	1a00000f 	bne	bf88 <CScreenDevice::CursorLeft()+0x54>
    bf48:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    bf4c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bf50:	e1520003 	cmp	r2, r3
    bf54:	98bd8070 	popls	{r4, r5, r6, pc}
    bf58:	e2806014 	add	r6, r0, #20, 0
    bf5c:	e1a00006 	mov	r0, r6
    bf60:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    bf64:	eb0018d6 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    bf68:	e0450000 	sub	r0, r5, r0
    bf6c:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bf70:	e1a00006 	mov	r0, r6
    bf74:	eb0018d4 	bl	122cc <CCharGenerator::GetCharHeight() const>
    bf78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bf7c:	e0430000 	sub	r0, r3, r0
    bf80:	e5840040 	str	r0, [r4, #64]	; 0x40
    bf84:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf88:	e2800014 	add	r0, r0, #20, 0
    bf8c:	eb0018cc 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    bf90:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bf94:	e0430000 	sub	r0, r3, r0
    bf98:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bf9c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bfa0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    bfa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bfa4:	e2807014 	add	r7, r0, #20, 0
    bfa8:	e1a04000 	mov	r4, r0
    bfac:	e1a00007 	mov	r0, r7
    bfb0:	e1a05002 	mov	r5, r2
    bfb4:	e1a06001 	mov	r6, r1
    bfb8:	eb0018c1 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    bfbc:	e1a02000 	mov	r2, r0
    bfc0:	e2455001 	sub	r5, r5, #1, 0
    bfc4:	e0050592 	mul	r5, r2, r5
    bfc8:	e1a00007 	mov	r0, r7
    bfcc:	eb0018be 	bl	122cc <CCharGenerator::GetCharHeight() const>
    bfd0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bfd4:	e1530005 	cmp	r3, r5
    bfd8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bfdc:	e2461001 	sub	r1, r6, #1, 0
    bfe0:	e0010190 	mul	r1, r0, r1
    bfe4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    bfe8:	e1530001 	cmp	r3, r1
    bfec:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    bff0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    bff4:	e1530001 	cmp	r3, r1
    bff8:	8584503c 	strhi	r5, [r4, #60]	; 0x3c
    bffc:	85841040 	strhi	r1, [r4, #64]	; 0x40
    c000:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c004 <CScreenDevice::CursorRight()>:
    c004:	e92d4010 	push	{r4, lr}
    c008:	e1a04000 	mov	r4, r0
    c00c:	e2800014 	add	r0, r0, #20, 0
    c010:	eb0018ab 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c014:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    c018:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c01c:	e0800002 	add	r0, r0, r2
    c020:	e1500003 	cmp	r0, r3
    c024:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c028:	38bd8010 	popcc	{r4, pc}
    c02c:	e3a03000 	mov	r3, #0, 0
    c030:	e1a00004 	mov	r0, r4
    c034:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c038:	e8bd4010 	pop	{r4, lr}
    c03c:	eaffffa5 	b	bed8 <CScreenDevice::CursorDown()>

0000c040 <CScreenDevice::CursorUp()>:
    c040:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c044:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c048:	e1520003 	cmp	r2, r3
    c04c:	912fff1e 	bxls	lr
    c050:	e92d4010 	push	{r4, lr}
    c054:	e1a04000 	mov	r4, r0
    c058:	e2800014 	add	r0, r0, #20, 0
    c05c:	eb00189a 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c060:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c064:	e0430000 	sub	r0, r3, r0
    c068:	e5840040 	str	r0, [r4, #64]	; 0x40
    c06c:	e8bd8010 	pop	{r4, pc}

0000c070 <CScreenDevice::DeleteChars(unsigned int)>:
    c070:	e12fff1e 	bx	lr

0000c074 <CScreenDevice::DeleteLines(unsigned int)>:
    c074:	e12fff1e 	bx	lr

0000c078 <CScreenDevice::DisplayChar(char)>:
    c078:	e6ef3071 	uxtb	r3, r1
    c07c:	e353001f 	cmp	r3, #31, 0
    c080:	912fff1e 	bxls	lr
    c084:	e92d4010 	push	{r4, lr}
    c088:	e1a04000 	mov	r4, r0
    c08c:	e1d024b6 	ldrh	r2, [r0, #70]	; 0x46
    c090:	e24dd008 	sub	sp, sp, #8, 0
    c094:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c098:	e58d2000 	str	r2, [sp]
    c09c:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c0a0:	eb00009e 	bl	c320 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c0a4:	e1a00004 	mov	r0, r4
    c0a8:	e28dd008 	add	sp, sp, #8, 0
    c0ac:	e8bd4010 	pop	{r4, lr}
    c0b0:	eaffffd3 	b	c004 <CScreenDevice::CursorRight()>

0000c0b4 <CScreenDevice::EraseChars(unsigned int)>:
    c0b4:	e3510000 	cmp	r1, #0, 0
    c0b8:	012fff1e 	bxeq	lr
    c0bc:	ea000116 	b	c51c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

0000c0c0 <CScreenDevice::InsertLines(unsigned int)>:
    c0c0:	e12fff1e 	bx	lr

0000c0c4 <CScreenDevice::InsertMode(bool)>:
    c0c4:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    c0c8:	e12fff1e 	bx	lr

0000c0cc <CScreenDevice::NewLine()>:
    c0cc:	e3a02000 	mov	r2, #0, 0
    c0d0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c0d4:	eaffff7f 	b	bed8 <CScreenDevice::CursorDown()>

0000c0d8 <CScreenDevice::ReverseScroll()>:
    c0d8:	e12fff1e 	bx	lr

0000c0dc <CScreenDevice::SetCursorMode(bool)>:
    c0dc:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    c0e0:	e12fff1e 	bx	lr

0000c0e4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    c0e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c0e8:	e2808014 	add	r8, r0, #20, 0
    c0ec:	e1a05000 	mov	r5, r0
    c0f0:	e1a00008 	mov	r0, r8
    c0f4:	e1a07001 	mov	r7, r1
    c0f8:	e1a04002 	mov	r4, r2
    c0fc:	eb001872 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c100:	e1a06000 	mov	r6, r0
    c104:	e1a00008 	mov	r0, r8
    c108:	eb00186f 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c10c:	e2477001 	sub	r7, r7, #1, 0
    c110:	e0060796 	mul	r6, r6, r7
    c114:	e0020094 	mul	r2, r4, r0
    c118:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    c11c:	e1510006 	cmp	r1, r6
    c120:	93a03000 	movls	r3, #0, 0
    c124:	83a03001 	movhi	r3, #1, 0
    c128:	e3520000 	cmp	r2, #0, 0
    c12c:	03a03000 	moveq	r3, #0, 0
    c130:	e1510002 	cmp	r1, r2
    c134:	33a03000 	movcc	r3, #0, 0
    c138:	22033001 	andcs	r3, r3, #1, 0
    c13c:	e1560002 	cmp	r6, r2
    c140:	23a03000 	movcs	r3, #0, 0
    c144:	32033001 	andcc	r3, r3, #1, 0
    c148:	e3530000 	cmp	r3, #0, 0
    c14c:	e3a03000 	mov	r3, #0, 0
    c150:	05956034 	ldreq	r6, [r5, #52]	; 0x34
    c154:	15856034 	strne	r6, [r5, #52]	; 0x34
    c158:	15852038 	strne	r2, [r5, #56]	; 0x38
    c15c:	e5856040 	str	r6, [r5, #64]	; 0x40
    c160:	e585303c 	str	r3, [r5, #60]	; 0x3c
    c164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c168 <CScreenDevice::SetStandoutMode(unsigned int)>:
    c168:	e351001b 	cmp	r1, #27, 0
    c16c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c170:	ea00001d 	b	c1ec <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    c174:	0000c1f0 	.word	0x0000c1f0
    c178:	0000c1fc 	.word	0x0000c1fc
    c17c:	0000c1e4 	.word	0x0000c1e4
    c180:	0000c1ec 	.word	0x0000c1ec
    c184:	0000c1ec 	.word	0x0000c1ec
    c188:	0000c1ec 	.word	0x0000c1ec
    c18c:	0000c1ec 	.word	0x0000c1ec
    c190:	0000c1ec 	.word	0x0000c1ec
    c194:	0000c1ec 	.word	0x0000c1ec
    c198:	0000c1ec 	.word	0x0000c1ec
    c19c:	0000c1ec 	.word	0x0000c1ec
    c1a0:	0000c1ec 	.word	0x0000c1ec
    c1a4:	0000c1ec 	.word	0x0000c1ec
    c1a8:	0000c1ec 	.word	0x0000c1ec
    c1ac:	0000c1ec 	.word	0x0000c1ec
    c1b0:	0000c1ec 	.word	0x0000c1ec
    c1b4:	0000c1ec 	.word	0x0000c1ec
    c1b8:	0000c1ec 	.word	0x0000c1ec
    c1bc:	0000c1ec 	.word	0x0000c1ec
    c1c0:	0000c1ec 	.word	0x0000c1ec
    c1c4:	0000c1ec 	.word	0x0000c1ec
    c1c8:	0000c1ec 	.word	0x0000c1ec
    c1cc:	0000c1ec 	.word	0x0000c1ec
    c1d0:	0000c1ec 	.word	0x0000c1ec
    c1d4:	0000c1ec 	.word	0x0000c1ec
    c1d8:	0000c1ec 	.word	0x0000c1ec
    c1dc:	0000c1ec 	.word	0x0000c1ec
    c1e0:	0000c1f0 	.word	0x0000c1f0
    c1e4:	e3a0301f 	mov	r3, #31, 0
    c1e8:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    c1ec:	e12fff1e 	bx	lr
    c1f0:	e3e03020 	mvn	r3, #32, 0
    c1f4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    c1f8:	e12fff1e 	bx	lr
    c1fc:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c200:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    c204:	e12fff1e 	bx	lr

0000c208 <CScreenDevice::Tabulator()>:
    c208:	e92d4070 	push	{r4, r5, r6, lr}
    c20c:	e1a04000 	mov	r4, r0
    c210:	e2800014 	add	r0, r0, #20, 0
    c214:	eb00182a 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c218:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    c21c:	e1a05180 	lsl	r5, r0, #3
    c220:	e1a01005 	mov	r1, r5
    c224:	e0830180 	add	r0, r3, r0, lsl #3
    c228:	eb0031b7 	bl	1890c <__udivsi3>
    c22c:	e0000095 	mul	r0, r5, r0
    c230:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c234:	e584003c 	str	r0, [r4, #60]	; 0x3c
    c238:	e1500003 	cmp	r0, r3
    c23c:	38bd8070 	popcc	{r4, r5, r6, pc}
    c240:	e3a03000 	mov	r3, #0, 0
    c244:	e1a00004 	mov	r0, r4
    c248:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c24c:	e8bd4070 	pop	{r4, r5, r6, lr}
    c250:	eaffff20 	b	bed8 <CScreenDevice::CursorDown()>

0000c254 <CScreenDevice::Scroll()>:
    c254:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c258:	e1a05000 	mov	r5, r0
    c25c:	e24dd014 	sub	sp, sp, #20, 0
    c260:	e2800014 	add	r0, r0, #20, 0
    c264:	eb001818 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c268:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    c26c:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    c270:	e595c020 	ldr	ip, [r5, #32]
    c274:	e0444003 	sub	r4, r4, r3
    c278:	e0444000 	sub	r4, r4, r0
    c27c:	e1a0e08c 	lsl	lr, ip, #1
    c280:	e004049e 	mul	r4, lr, r4
    c284:	e007039c 	mul	r7, ip, r3
    c288:	e5952018 	ldr	r2, [r5, #24]
    c28c:	e3540000 	cmp	r4, #0, 0
    c290:	e1a06000 	mov	r6, r0
    c294:	e0827087 	add	r7, r2, r7, lsl #1
    c298:	1a000009 	bne	c2c4 <CScreenDevice::Scroll()+0x70>
    c29c:	e002069c 	mul	r2, ip, r6
    c2a0:	e1a02082 	lsl	r2, r2, #1
    c2a4:	e1b02122 	lsrs	r2, r2, #2
    c2a8:	0a00001a 	beq	c318 <CScreenDevice::Scroll()+0xc4>
    c2ac:	e1a00007 	mov	r0, r7
    c2b0:	e3a01000 	mov	r1, #0, 0
    c2b4:	e1a02102 	lsl	r2, r2, #2
    c2b8:	e28dd014 	add	sp, sp, #20, 0
    c2bc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    c2c0:	ea000dd1 	b	fa0c <memset>
    c2c4:	e3a0c000 	mov	ip, #0, 0
    c2c8:	e3a01002 	mov	r1, #2, 0
    c2cc:	e0833000 	add	r3, r3, r0
    c2d0:	e022239e 	mla	r2, lr, r3, r2
    c2d4:	e88d1002 	stm	sp, {r1, ip}
    c2d8:	e1a03004 	mov	r3, r4
    c2dc:	e1a01007 	mov	r1, r7
    c2e0:	e2850058 	add	r0, r5, #88, 0	; 0x58
    c2e4:	e58d000c 	str	r0, [sp, #12]
    c2e8:	eb001917 	bl	1274c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    c2ec:	e59d000c 	ldr	r0, [sp, #12]
    c2f0:	eb001aed 	bl	12eac <CDMAChannel::Start()>
    c2f4:	e59d000c 	ldr	r0, [sp, #12]
    c2f8:	eb001b46 	bl	13018 <CDMAChannel::Wait()>
    c2fc:	e595c020 	ldr	ip, [r5, #32]
    c300:	e3c44003 	bic	r4, r4, #3, 0
    c304:	e002069c 	mul	r2, ip, r6
    c308:	e1a02082 	lsl	r2, r2, #1
    c30c:	e1b02122 	lsrs	r2, r2, #2
    c310:	e0877004 	add	r7, r7, r4
    c314:	1affffe4 	bne	c2ac <CScreenDevice::Scroll()+0x58>
    c318:	e28dd014 	add	sp, sp, #20, 0
    c31c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c320 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    c320:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c324:	e1a06000 	mov	r6, r0
    c328:	e1a09001 	mov	r9, r1
    c32c:	e1a08002 	mov	r8, r2
    c330:	e1a0a003 	mov	sl, r3
    c334:	e3a07000 	mov	r7, #0, 0
    c338:	e1ddb2b8 	ldrh	fp, [sp, #40]	; 0x28
    c33c:	e2805014 	add	r5, r0, #20, 0
    c340:	e1a00005 	mov	r0, r5
    c344:	eb0017e0 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c348:	e1500007 	cmp	r0, r7
    c34c:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c350:	e3a04000 	mov	r4, #0, 0
    c354:	ea000013 	b	c3a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x88>
    c358:	e1a01009 	mov	r1, r9
    c35c:	e1a03007 	mov	r3, r7
    c360:	e1a02004 	mov	r2, r4
    c364:	e1a00005 	mov	r0, r5
    c368:	eb0017db 	bl	122dc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    c36c:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    c370:	e3500000 	cmp	r0, #0, 0
    c374:	e0843008 	add	r3, r4, r8
    c378:	11a0100b 	movne	r1, fp
    c37c:	03a01000 	moveq	r1, #0, 0
    c380:	e1520003 	cmp	r2, r3
    c384:	9a000006 	bls	c3a4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x84>
    c388:	e5962028 	ldr	r2, [r6, #40]	; 0x28
    c38c:	e15a0002 	cmp	sl, r2
    c390:	35962020 	ldrcc	r2, [r6, #32]
    c394:	35960018 	ldrcc	r0, [r6, #24]
    c398:	30233a92 	mlacc	r3, r2, sl, r3
    c39c:	31a03083 	lslcc	r3, r3, #1
    c3a0:	318010b3 	strhcc	r1, [r0, r3]
    c3a4:	e2844001 	add	r4, r4, #1, 0
    c3a8:	e1a00005 	mov	r0, r5
    c3ac:	eb0017c4 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c3b0:	e1500004 	cmp	r0, r4
    c3b4:	8affffe7 	bhi	c358 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
    c3b8:	e2877001 	add	r7, r7, #1, 0
    c3bc:	e28aa001 	add	sl, sl, #1, 0
    c3c0:	eaffffde 	b	c340 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x20>

0000c3c4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c3c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c3c8:	e3a08000 	mov	r8, #0, 0
    c3cc:	e1a0a000 	mov	sl, r0
    c3d0:	e1a06001 	mov	r6, r1
    c3d4:	e1a07002 	mov	r7, r2
    c3d8:	e1a09008 	mov	r9, r8
    c3dc:	e2805014 	add	r5, r0, #20, 0
    c3e0:	e1a00005 	mov	r0, r5
    c3e4:	eb0017b8 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c3e8:	e1500008 	cmp	r0, r8
    c3ec:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    c3f0:	e3a04000 	mov	r4, #0, 0
    c3f4:	e1a00005 	mov	r0, r5
    c3f8:	eb0017b1 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c3fc:	e1500004 	cmp	r0, r4
    c400:	e0843006 	add	r3, r4, r6
    c404:	9a00000c 	bls	c43c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
    c408:	e59a2024 	ldr	r2, [sl, #36]	; 0x24
    c40c:	e2844001 	add	r4, r4, #1, 0
    c410:	e1520003 	cmp	r2, r3
    c414:	9afffff6 	bls	c3f4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c418:	e59a2028 	ldr	r2, [sl, #40]	; 0x28
    c41c:	e1570002 	cmp	r7, r2
    c420:	2afffff3 	bcs	c3f4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c424:	e59a2020 	ldr	r2, [sl, #32]
    c428:	e59a1018 	ldr	r1, [sl, #24]
    c42c:	e0233792 	mla	r3, r2, r7, r3
    c430:	e1a03083 	lsl	r3, r3, #1
    c434:	e18190b3 	strh	r9, [r1, r3]
    c438:	eaffffed 	b	c3f4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    c43c:	e2888001 	add	r8, r8, #1, 0
    c440:	e2877001 	add	r7, r7, #1, 0
    c444:	eaffffe5 	b	c3e0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000c448 <CScreenDevice::InvertCursor()>:
    c448:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    c44c:	e3530000 	cmp	r3, #0, 0
    c450:	012fff1e 	bxeq	lr
    c454:	ea000048 	b	c57c <CScreenDevice::InvertCursor() [clone .part.0]>

0000c458 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c458:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c45c:	e15c0001 	cmp	ip, r1
    c460:	912fff1e 	bxls	lr
    c464:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    c468:	e15c0002 	cmp	ip, r2
    c46c:	8590c020 	ldrhi	ip, [r0, #32]
    c470:	85900018 	ldrhi	r0, [r0, #24]
    c474:	8022129c 	mlahi	r2, ip, r2, r1
    c478:	81a02082 	lslhi	r2, r2, #1
    c47c:	818030b2 	strhhi	r3, [r0, r2]
    c480:	e12fff1e 	bx	lr

0000c484 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c484:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c488:	e1530001 	cmp	r3, r1
    c48c:	9a000002 	bls	c49c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    c490:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c494:	e1530002 	cmp	r3, r2
    c498:	8a000001 	bhi	c4a4 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    c49c:	e3a00000 	mov	r0, #0, 0
    c4a0:	e12fff1e 	bx	lr
    c4a4:	e590c020 	ldr	ip, [r0, #32]
    c4a8:	e5903018 	ldr	r3, [r0, #24]
    c4ac:	e022129c 	mla	r2, ip, r2, r1
    c4b0:	e1a02082 	lsl	r2, r2, #1
    c4b4:	e19300b2 	ldrh	r0, [r3, r2]
    c4b8:	e12fff1e 	bx	lr

0000c4bc <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c4bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c4c0:	e1a05000 	mov	r5, r0
    c4c4:	e1a04001 	mov	r4, r1
    c4c8:	e24dd00c 	sub	sp, sp, #12, 0
    c4cc:	e2800014 	add	r0, r0, #20, 0
    c4d0:	e1a06002 	mov	r6, r2
    c4d4:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c4d8:	eb001779 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c4dc:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    c4e0:	e2041003 	and	r1, r4, #3, 0
    c4e4:	e2814001 	add	r4, r1, #1, 0
    c4e8:	e0000490 	mul	r0, r0, r4
    c4ec:	e59f3024 	ldr	r3, [pc, #36]	; c518 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x5c>
    c4f0:	e2066003 	and	r6, r6, #3, 0
    c4f4:	e0836006 	add	r6, r3, r6
    c4f8:	e0472000 	sub	r2, r7, r0
    c4fc:	e3a03000 	mov	r3, #0, 0
    c500:	e1a00005 	mov	r0, r5
    c504:	e1d612d0 	ldrsb	r1, [r6, #32]
    c508:	e58dc000 	str	ip, [sp]
    c50c:	ebffff83 	bl	c320 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c510:	e28dd00c 	add	sp, sp, #12, 0
    c514:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c518:	00019df0 	.word	0x00019df0

0000c51c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
    c51c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c520:	e1a05000 	mov	r5, r0
    c524:	e2807014 	add	r7, r0, #20, 0
    c528:	e1a00007 	mov	r0, r7
    c52c:	e1a06001 	mov	r6, r1
    c530:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c534:	eb001762 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c538:	e0204096 	mla	r0, r6, r0, r4
    c53c:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    c540:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    c544:	e1500006 	cmp	r0, r6
    c548:	31a06000 	movcc	r6, r0
    c54c:	e1560004 	cmp	r6, r4
    c550:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    c554:	e1a01004 	mov	r1, r4
    c558:	e1a00005 	mov	r0, r5
    c55c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c560:	ebffff97 	bl	c3c4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c564:	e1a00007 	mov	r0, r7
    c568:	eb001755 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c56c:	e0844000 	add	r4, r4, r0
    c570:	e1560004 	cmp	r6, r4
    c574:	8afffff6 	bhi	c554 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
    c578:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c57c <CScreenDevice::InvertCursor() [clone .part.0]>:
    c57c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c580:	e2806014 	add	r6, r0, #20, 0
    c584:	e1a05000 	mov	r5, r0
    c588:	e1a00006 	mov	r0, r6
    c58c:	eb001750 	bl	122d4 <CCharGenerator::GetUnderline() const>
    c590:	e3a08000 	mov	r8, #0, 0
    c594:	e1a07000 	mov	r7, r0
    c598:	e1a00006 	mov	r0, r6
    c59c:	eb00174a 	bl	122cc <CCharGenerator::GetCharHeight() const>
    c5a0:	e1500007 	cmp	r0, r7
    c5a4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    c5a8:	e3a04000 	mov	r4, #0, 0
    c5ac:	ea000000 	b	c5b4 <CScreenDevice::InvertCursor() [clone .part.0]+0x38>
    c5b0:	e2844001 	add	r4, r4, #1, 0
    c5b4:	e1a00006 	mov	r0, r6
    c5b8:	eb001741 	bl	122c4 <CCharGenerator::GetCharWidth() const>
    c5bc:	e1500004 	cmp	r0, r4
    c5c0:	9a000013 	bls	c614 <CScreenDevice::InvertCursor() [clone .part.0]+0x98>
    c5c4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    c5c8:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    c5cc:	e0843003 	add	r3, r4, r3
    c5d0:	e1530002 	cmp	r3, r2
    c5d4:	2afffff5 	bcs	c5b0 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
    c5d8:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    c5dc:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    c5e0:	e0872002 	add	r2, r7, r2
    c5e4:	e1520001 	cmp	r2, r1
    c5e8:	2afffff0 	bcs	c5b0 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
    c5ec:	e5950020 	ldr	r0, [r5, #32]
    c5f0:	e5951018 	ldr	r1, [r5, #24]
    c5f4:	e0233290 	mla	r3, r0, r2, r3
    c5f8:	e1a03083 	lsl	r3, r3, #1
    c5fc:	e19120b3 	ldrh	r2, [r1, r3]
    c600:	e3520000 	cmp	r2, #0, 0
    c604:	1a000004 	bne	c61c <CScreenDevice::InvertCursor() [clone .part.0]+0xa0>
    c608:	e1d524b6 	ldrh	r2, [r5, #70]	; 0x46
    c60c:	e18120b3 	strh	r2, [r1, r3]
    c610:	eaffffe6 	b	c5b0 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
    c614:	e2877001 	add	r7, r7, #1, 0
    c618:	eaffffde 	b	c598 <CScreenDevice::InvertCursor() [clone .part.0]+0x1c>
    c61c:	e18180b3 	strh	r8, [r1, r3]
    c620:	eaffffe2 	b	c5b0 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>

0000c624 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
    c624:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c628:	e1a04000 	mov	r4, r0
    c62c:	e3a0b000 	mov	fp, #0, 0
    c630:	e1a07001 	mov	r7, r1
    c634:	e1a06002 	mov	r6, r2
    c638:	e1a05003 	mov	r5, r3
    c63c:	e24dd00c 	sub	sp, sp, #12, 0
    c640:	e280a018 	add	sl, r0, #24, 0
    c644:	eb0017bc 	bl	1253c <CDevice::CDevice()>
    c648:	e59f31a0 	ldr	r3, [pc, #416]	; c7f0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
    c64c:	e5847004 	str	r7, [r4, #4]
    c650:	e5843000 	str	r3, [r4]
    c654:	e1a0000a 	mov	r0, sl
    c658:	e2849040 	add	r9, r4, #64, 0	; 0x40
    c65c:	e5c46008 	strb	r6, [r4, #8]
    c660:	e584500c 	str	r5, [r4, #12]
    c664:	e584b010 	str	fp, [r4, #16]
    c668:	e5c4b014 	strb	fp, [r4, #20]
    c66c:	ebfff2c0 	bl	9174 <CGPIOPin::CGPIOPin()>
    c670:	e2848068 	add	r8, r4, #104, 0	; 0x68
    c674:	e1a00009 	mov	r0, r9
    c678:	ebfff2bd 	bl	9174 <CGPIOPin::CGPIOPin()>
    c67c:	e2847090 	add	r7, r4, #144, 0	; 0x90
    c680:	e1a00008 	mov	r0, r8
    c684:	ebfff2ba 	bl	9174 <CGPIOPin::CGPIOPin()>
    c688:	e1a00007 	mov	r0, r7
    c68c:	ebfff2b8 	bl	9174 <CGPIOPin::CGPIOPin()>
    c690:	e156000b 	cmp	r6, fp
    c694:	13a00002 	movne	r0, #2, 0
    c698:	03a00001 	moveq	r0, #1, 0
    c69c:	e3a02001 	mov	r2, #1, 0
    c6a0:	e2841a01 	add	r1, r4, #4096	; 0x1000
    c6a4:	e584b8b8 	str	fp, [r4, #2232]	; 0x8b8
    c6a8:	e584b8bc 	str	fp, [r4, #2236]	; 0x8bc
    c6ac:	e584b8c0 	str	fp, [r4, #2240]	; 0x8c0
    c6b0:	e581b0c4 	str	fp, [r1, #196]	; 0xc4
    c6b4:	e58100dc 	str	r0, [r1, #220]	; 0xdc
    c6b8:	e581b0e0 	str	fp, [r1, #224]	; 0xe0
    c6bc:	e581b0c8 	str	fp, [r1, #200]	; 0xc8
    c6c0:	e58120cc 	str	r2, [r1, #204]	; 0xcc
    c6c4:	e594000c 	ldr	r0, [r4, #12]
    c6c8:	e581b0d0 	str	fp, [r1, #208]	; 0xd0
    c6cc:	e150000b 	cmp	r0, fp
    c6d0:	1a000027 	bne	c774 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x150>
    c6d4:	e59f6118 	ldr	r6, [pc, #280]	; c7f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
    c6d8:	e1a03205 	lsl	r3, r5, #4
    c6dc:	e0861205 	add	r1, r6, r5, lsl #4
    c6e0:	e5911004 	ldr	r1, [r1, #4]
    c6e4:	e3510035 	cmp	r1, #53, 0	; 0x35
    c6e8:	8a000021 	bhi	c774 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x150>
    c6ec:	e59f0104 	ldr	r0, [pc, #260]	; c7f8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d4>
    c6f0:	e590c010 	ldr	ip, [r0, #16]
    c6f4:	e15c000b 	cmp	ip, fp
    c6f8:	1a000032 	bne	c7c8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1a4>
    c6fc:	e796c105 	ldr	ip, [r6, r5, lsl #2]
    c700:	e5804010 	str	r4, [r0, #16]
    c704:	e35c0000 	cmp	ip, #0, 0
    c708:	e584c010 	str	ip, [r4, #16]
    c70c:	0a000032 	beq	c7dc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b8>
    c710:	e3550000 	cmp	r5, #0, 0
    c714:	0a000019 	beq	c780 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x15c>
    c718:	e0866003 	add	r6, r6, r3
    c71c:	e1a00008 	mov	r0, r8
    c720:	ebfff2bf 	bl	9224 <CGPIOPin::AssignPin(unsigned int)>
    c724:	e5961008 	ldr	r1, [r6, #8]
    c728:	e3a02001 	mov	r2, #1, 0
    c72c:	e2811004 	add	r1, r1, #4, 0
    c730:	e1a00008 	mov	r0, r8
    c734:	e6ef1071 	uxtb	r1, r1
    c738:	ebfff2da 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c73c:	e1a00007 	mov	r0, r7
    c740:	e596100c 	ldr	r1, [r6, #12]
    c744:	ebfff2b6 	bl	9224 <CGPIOPin::AssignPin(unsigned int)>
    c748:	e5961010 	ldr	r1, [r6, #16]
    c74c:	e3a02001 	mov	r2, #1, 0
    c750:	e2811004 	add	r1, r1, #4, 0
    c754:	e1a00007 	mov	r0, r7
    c758:	e6ef1071 	uxtb	r1, r1
    c75c:	ebfff2d1 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c760:	e1a00007 	mov	r0, r7
    c764:	e3a01002 	mov	r1, #2, 0
    c768:	ebfff4eb 	bl	9b1c <CGPIOPin::SetPullMode(TGPIOPullMode)>
    c76c:	e3a03001 	mov	r3, #1, 0
    c770:	e5c43014 	strb	r3, [r4, #20]
    c774:	e1a00004 	mov	r0, r4
    c778:	e28dd00c 	add	sp, sp, #12, 0
    c77c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c780:	e3a01020 	mov	r1, #32, 0
    c784:	e1a0000a 	mov	r0, sl
    c788:	e58d3004 	str	r3, [sp, #4]
    c78c:	ebfff2a4 	bl	9224 <CGPIOPin::AssignPin(unsigned int)>
    c790:	e3a02001 	mov	r2, #1, 0
    c794:	e1a01005 	mov	r1, r5
    c798:	e1a0000a 	mov	r0, sl
    c79c:	ebfff2c1 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c7a0:	e3a01021 	mov	r1, #33, 0	; 0x21
    c7a4:	e1a00009 	mov	r0, r9
    c7a8:	ebfff29d 	bl	9224 <CGPIOPin::AssignPin(unsigned int)>
    c7ac:	e1a01005 	mov	r1, r5
    c7b0:	e3a02001 	mov	r2, #1, 0
    c7b4:	e1a00009 	mov	r0, r9
    c7b8:	ebfff2ba 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c7bc:	e5961004 	ldr	r1, [r6, #4]
    c7c0:	e59d3004 	ldr	r3, [sp, #4]
    c7c4:	eaffffd3 	b	c718 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xf4>
    c7c8:	e59f3020 	ldr	r3, [pc, #32]	; c7f0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
    c7cc:	e3a020b0 	mov	r2, #176, 0	; 0xb0
    c7d0:	e2831018 	add	r1, r3, #24, 0
    c7d4:	e2830024 	add	r0, r3, #36, 0	; 0x24
    c7d8:	eb0014ca 	bl	11b08 <assertion_failed>
    c7dc:	e59f300c 	ldr	r3, [pc, #12]	; c7f0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
    c7e0:	e3a020b4 	mov	r2, #180, 0	; 0xb4
    c7e4:	e2831018 	add	r1, r3, #24, 0
    c7e8:	e283003c 	add	r0, r3, #60, 0	; 0x3c
    c7ec:	eb0014c5 	bl	11b08 <assertion_failed>
    c7f0:	00019e20 	.word	0x00019e20
    c7f4:	0001cb28 	.word	0x0001cb28
    c7f8:	0001cc50 	.word	0x0001cc50

0000c7fc <CSerialDevice::~CSerialDevice()>:
    c7fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c800:	e5d03014 	ldrb	r3, [r0, #20]
    c804:	e59fc130 	ldr	ip, [pc, #304]	; c93c <CSerialDevice::~CSerialDevice()+0x140>
    c808:	e3530000 	cmp	r3, #0, 0
    c80c:	e1a04000 	mov	r4, r0
    c810:	e24dd00c 	sub	sp, sp, #12, 0
    c814:	e580c000 	str	ip, [r0]
    c818:	0a00003c 	beq	c910 <CSerialDevice::~CSerialDevice()+0x114>
    c81c:	e3a00001 	mov	r0, #1, 0
    c820:	e59f5118 	ldr	r5, [pc, #280]	; c940 <CSerialDevice::~CSerialDevice()+0x144>
    c824:	e594100c 	ldr	r1, [r4, #12]
    c828:	e595200c 	ldr	r2, [r5, #12]
    c82c:	e3a03000 	mov	r3, #0, 0
    c830:	e1c22110 	bic	r2, r2, r0, lsl r1
    c834:	e585200c 	str	r2, [r5, #12]
    c838:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c83c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c840:	e5942010 	ldr	r2, [r4, #16]
    c844:	e5823038 	str	r3, [r2, #56]	; 0x38
    c848:	e5942010 	ldr	r2, [r4, #16]
    c84c:	e5823030 	str	r3, [r2, #48]	; 0x30
    c850:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c854:	e5943004 	ldr	r3, [r4, #4]
    c858:	e3530000 	cmp	r3, #0, 0
    c85c:	0a00000e 	beq	c89c <CSerialDevice::~CSerialDevice()+0xa0>
    c860:	e5953000 	ldr	r3, [r5]
    c864:	e2433001 	sub	r3, r3, #1, 0
    c868:	e3530000 	cmp	r3, #0, 0
    c86c:	e5853000 	str	r3, [r5]
    c870:	1a000009 	bne	c89c <CSerialDevice::~CSerialDevice()+0xa0>
    c874:	e5950004 	ldr	r0, [r5, #4]
    c878:	e3500000 	cmp	r0, #0, 0
    c87c:	0a00002a 	beq	c92c <CSerialDevice::~CSerialDevice()+0x130>
    c880:	e5d53008 	ldrb	r3, [r5, #8]
    c884:	e3530000 	cmp	r3, #0, 0
    c888:	0a000024 	beq	c920 <CSerialDevice::~CSerialDevice()+0x124>
    c88c:	eb0013a2 	bl	1171c <CInterruptSystem::DisconnectFIQ()>
    c890:	e3a03000 	mov	r3, #0, 0
    c894:	e5853004 	str	r3, [r5, #4]
    c898:	e5c53008 	strb	r3, [r5, #8]
    c89c:	e2847068 	add	r7, r4, #104, 0	; 0x68
    c8a0:	e1a00007 	mov	r0, r7
    c8a4:	e3a02001 	mov	r2, #1, 0
    c8a8:	e3a01000 	mov	r1, #0, 0
    c8ac:	e2846090 	add	r6, r4, #144, 0	; 0x90
    c8b0:	ebfff27c 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c8b4:	e1a00006 	mov	r0, r6
    c8b8:	e3a02001 	mov	r2, #1, 0
    c8bc:	e3a01000 	mov	r1, #0, 0
    c8c0:	e58d6004 	str	r6, [sp, #4]
    c8c4:	ebfff277 	bl	92a8 <CGPIOPin::SetMode(TGPIOMode, bool)>
    c8c8:	e3a03000 	mov	r3, #0, 0
    c8cc:	e594200c 	ldr	r2, [r4, #12]
    c8d0:	e59d0004 	ldr	r0, [sp, #4]
    c8d4:	e0855102 	add	r5, r5, r2, lsl #2
    c8d8:	e5c43014 	strb	r3, [r4, #20]
    c8dc:	e5853010 	str	r3, [r5, #16]
    c8e0:	ebfff248 	bl	9208 <CGPIOPin::~CGPIOPin()>
    c8e4:	e1a00007 	mov	r0, r7
    c8e8:	ebfff246 	bl	9208 <CGPIOPin::~CGPIOPin()>
    c8ec:	e2840040 	add	r0, r4, #64, 0	; 0x40
    c8f0:	ebfff244 	bl	9208 <CGPIOPin::~CGPIOPin()>
    c8f4:	e2840018 	add	r0, r4, #24, 0
    c8f8:	ebfff242 	bl	9208 <CGPIOPin::~CGPIOPin()>
    c8fc:	e1a00004 	mov	r0, r4
    c900:	eb0016ff 	bl	12504 <CDevice::~CDevice()>
    c904:	e1a00004 	mov	r0, r4
    c908:	e28dd00c 	add	sp, sp, #12, 0
    c90c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c910:	e2800090 	add	r0, r0, #144, 0	; 0x90
    c914:	ebfff23b 	bl	9208 <CGPIOPin::~CGPIOPin()>
    c918:	e2840068 	add	r0, r4, #104, 0	; 0x68
    c91c:	eafffff1 	b	c8e8 <CSerialDevice::~CSerialDevice()+0xec>
    c920:	e3a01039 	mov	r1, #57, 0	; 0x39
    c924:	eb0013ed 	bl	118e0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    c928:	eaffffd8 	b	c890 <CSerialDevice::~CSerialDevice()+0x94>
    c92c:	e3a020e0 	mov	r2, #224, 0	; 0xe0
    c930:	e28c1018 	add	r1, ip, #24, 0
    c934:	e28c0050 	add	r0, ip, #80, 0	; 0x50
    c938:	eb001472 	bl	11b08 <assertion_failed>
    c93c:	00019e20 	.word	0x00019e20
    c940:	0001cc50 	.word	0x0001cc50

0000c944 <CSerialDevice::~CSerialDevice()>:
    c944:	e92d4010 	push	{r4, lr}
    c948:	e1a04000 	mov	r4, r0
    c94c:	ebffffaa 	bl	c7fc <CSerialDevice::~CSerialDevice()>
    c950:	e1a00004 	mov	r0, r4
    c954:	e59f1008 	ldr	r1, [pc, #8]	; c964 <CSerialDevice::~CSerialDevice()+0x20>
    c958:	eb000f8e 	bl	10798 <operator delete(void*, unsigned int)>
    c95c:	e1a00004 	mov	r0, r4
    c960:	e8bd8010 	pop	{r4, pc}
    c964:	000010e4 	.word	0x000010e4

0000c968 <CSerialDevice::Initialize(unsigned int)>:
    c968:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c96c:	e5d06014 	ldrb	r6, [r0, #20]
    c970:	e3560000 	cmp	r6, #0, 0
    c974:	1a000001 	bne	c980 <CSerialDevice::Initialize(unsigned int)+0x18>
    c978:	e1a00006 	mov	r0, r6
    c97c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c980:	e1a05001 	mov	r5, r1
    c984:	e1a04000 	mov	r4, r0
    c988:	ebfffa89 	bl	b3b4 <CMachineInfo::Get()>
    c98c:	e3a01002 	mov	r1, #2, 0
    c990:	ebfff9bb 	bl	b084 <CMachineInfo::GetClockRate(unsigned int) const>
    c994:	e3500000 	cmp	r0, #0, 0
    c998:	0a00006a 	beq	cb48 <CSerialDevice::Initialize(unsigned int)+0x1e0>
    c99c:	e59f31e4 	ldr	r3, [pc, #484]	; cb88 <CSerialDevice::Initialize(unsigned int)+0x220>
    c9a0:	e2452f4b 	sub	r2, r5, #300	; 0x12c
    c9a4:	e1520003 	cmp	r2, r3
    c9a8:	8a00006a 	bhi	cb58 <CSerialDevice::Initialize(unsigned int)+0x1f0>
    c9ac:	e1a01205 	lsl	r1, r5, #4
    c9b0:	eb003050 	bl	18af8 <__aeabi_uidivmod>
    c9b4:	e59f31d0 	ldr	r3, [pc, #464]	; cb8c <CSerialDevice::Initialize(unsigned int)+0x224>
    c9b8:	e2402001 	sub	r2, r0, #1, 0
    c9bc:	e1520003 	cmp	r2, r3
    c9c0:	e1a07000 	mov	r7, r0
    c9c4:	e1a00001 	mov	r0, r1
    c9c8:	8a000066 	bhi	cb68 <CSerialDevice::Initialize(unsigned int)+0x200>
    c9cc:	e1a01005 	mov	r1, r5
    c9d0:	e1a00180 	lsl	r0, r0, #3
    c9d4:	eb002fcc 	bl	1890c <__udivsi3>
    c9d8:	e2005001 	and	r5, r0, #1, 0
    c9dc:	e08550a0 	add	r5, r5, r0, lsr #1
    c9e0:	e355003f 	cmp	r5, #63, 0	; 0x3f
    c9e4:	8a000063 	bhi	cb78 <CSerialDevice::Initialize(unsigned int)+0x210>
    c9e8:	e5940004 	ldr	r0, [r4, #4]
    c9ec:	e3500000 	cmp	r0, #0, 0
    c9f0:	0a000011 	beq	ca3c <CSerialDevice::Initialize(unsigned int)+0xd4>
    c9f4:	e59f8194 	ldr	r8, [pc, #404]	; cb90 <CSerialDevice::Initialize(unsigned int)+0x228>
    c9f8:	e5983000 	ldr	r3, [r8]
    c9fc:	e3530000 	cmp	r3, #0, 0
    ca00:	1a000037 	bne	cae4 <CSerialDevice::Initialize(unsigned int)+0x17c>
    ca04:	e5d42008 	ldrb	r2, [r4, #8]
    ca08:	e5880004 	str	r0, [r8, #4]
    ca0c:	e3520000 	cmp	r2, #0, 0
    ca10:	e5c82008 	strb	r2, [r8, #8]
    ca14:	1a00003f 	bne	cb18 <CSerialDevice::Initialize(unsigned int)+0x1b0>
    ca18:	e1a03002 	mov	r3, r2
    ca1c:	e3a01039 	mov	r1, #57, 0	; 0x39
    ca20:	e59f216c 	ldr	r2, [pc, #364]	; cb94 <CSerialDevice::Initialize(unsigned int)+0x22c>
    ca24:	eb001379 	bl	11810 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ca28:	e5983000 	ldr	r3, [r8]
    ca2c:	e3530000 	cmp	r3, #0, 0
    ca30:	1a000040 	bne	cb38 <CSerialDevice::Initialize(unsigned int)+0x1d0>
    ca34:	e3a03001 	mov	r3, #1, 0
    ca38:	e5883000 	str	r3, [r8]
    ca3c:	e3a03000 	mov	r3, #0, 0
    ca40:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ca44:	e5942010 	ldr	r2, [r4, #16]
    ca48:	e59f0148 	ldr	r0, [pc, #328]	; cb98 <CSerialDevice::Initialize(unsigned int)+0x230>
    ca4c:	e5823038 	str	r3, [r2, #56]	; 0x38
    ca50:	e5942010 	ldr	r2, [r4, #16]
    ca54:	e5941004 	ldr	r1, [r4, #4]
    ca58:	e5820044 	str	r0, [r2, #68]	; 0x44
    ca5c:	e5942010 	ldr	r2, [r4, #16]
    ca60:	e1510003 	cmp	r1, r3
    ca64:	e5827024 	str	r7, [r2, #36]	; 0x24
    ca68:	e5942010 	ldr	r2, [r4, #16]
    ca6c:	e5825028 	str	r5, [r2, #40]	; 0x28
    ca70:	0a000024 	beq	cb08 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    ca74:	e3a01009 	mov	r1, #9, 0
    ca78:	e3a0e070 	mov	lr, #112, 0	; 0x70
    ca7c:	e3a00e45 	mov	r0, #1104	; 0x450
    ca80:	e3a0c001 	mov	ip, #1, 0
    ca84:	e5942010 	ldr	r2, [r4, #16]
    ca88:	e5821034 	str	r1, [r2, #52]	; 0x34
    ca8c:	e5942010 	ldr	r2, [r4, #16]
    ca90:	e59f10f8 	ldr	r1, [pc, #248]	; cb90 <CSerialDevice::Initialize(unsigned int)+0x228>
    ca94:	e582e02c 	str	lr, [r2, #44]	; 0x2c
    ca98:	e5942010 	ldr	r2, [r4, #16]
    ca9c:	e5820038 	str	r0, [r2, #56]	; 0x38
    caa0:	e591200c 	ldr	r2, [r1, #12]
    caa4:	e594000c 	ldr	r0, [r4, #12]
    caa8:	e182201c 	orr	r2, r2, ip, lsl r0
    caac:	e581200c 	str	r2, [r1, #12]
    cab0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cab4:	e5943010 	ldr	r3, [r4, #16]
    cab8:	e59f20dc 	ldr	r2, [pc, #220]	; cb9c <CSerialDevice::Initialize(unsigned int)+0x234>
    cabc:	e3a05000 	mov	r5, #0, 0
    cac0:	e5832030 	str	r2, [r3, #48]	; 0x30
    cac4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    cac8:	ebfff10e 	bl	8f08 <CDeviceNameService::Get()>
    cacc:	e1a03005 	mov	r3, r5
    cad0:	e1a02004 	mov	r2, r4
    cad4:	e59f10c4 	ldr	r1, [pc, #196]	; cba0 <CSerialDevice::Initialize(unsigned int)+0x238>
    cad8:	ebfff05a 	bl	8c48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    cadc:	e1a00006 	mov	r0, r6
    cae0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cae4:	e5983004 	ldr	r3, [r8, #4]
    cae8:	e1500003 	cmp	r0, r3
    caec:	0a00000d 	beq	cb28 <CSerialDevice::Initialize(unsigned int)+0x1c0>
    caf0:	e3a06000 	mov	r6, #0, 0
    caf4:	e594300c 	ldr	r3, [r4, #12]
    caf8:	e5c46014 	strb	r6, [r4, #20]
    cafc:	e0888103 	add	r8, r8, r3, lsl #2
    cb00:	e5886010 	str	r6, [r8, #16]
    cb04:	eaffff9b 	b	c978 <CSerialDevice::Initialize(unsigned int)+0x10>
    cb08:	e3a02060 	mov	r2, #96, 0	; 0x60
    cb0c:	e5943010 	ldr	r3, [r4, #16]
    cb10:	e583202c 	str	r2, [r3, #44]	; 0x2c
    cb14:	eaffffe6 	b	cab4 <CSerialDevice::Initialize(unsigned int)+0x14c>
    cb18:	e3a01039 	mov	r1, #57, 0	; 0x39
    cb1c:	e59f2070 	ldr	r2, [pc, #112]	; cb94 <CSerialDevice::Initialize(unsigned int)+0x22c>
    cb20:	eb0012c9 	bl	1164c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    cb24:	eaffffbf 	b	ca28 <CSerialDevice::Initialize(unsigned int)+0xc0>
    cb28:	e5d42008 	ldrb	r2, [r4, #8]
    cb2c:	e5d83008 	ldrb	r3, [r8, #8]
    cb30:	e1520003 	cmp	r2, r3
    cb34:	1affffed 	bne	caf0 <CSerialDevice::Initialize(unsigned int)+0x188>
    cb38:	e59f1064 	ldr	r1, [pc, #100]	; cba4 <CSerialDevice::Initialize(unsigned int)+0x23c>
    cb3c:	e59f2064 	ldr	r2, [pc, #100]	; cba8 <CSerialDevice::Initialize(unsigned int)+0x240>
    cb40:	e28100c4 	add	r0, r1, #196, 0	; 0xc4
    cb44:	eb0013ef 	bl	11b08 <assertion_failed>
    cb48:	e59f1054 	ldr	r1, [pc, #84]	; cba4 <CSerialDevice::Initialize(unsigned int)+0x23c>
    cb4c:	e3a020fd 	mov	r2, #253, 0	; 0xfd
    cb50:	e2810050 	add	r0, r1, #80, 0	; 0x50
    cb54:	eb0013eb 	bl	11b08 <assertion_failed>
    cb58:	e59f1044 	ldr	r1, [pc, #68]	; cba4 <CSerialDevice::Initialize(unsigned int)+0x23c>
    cb5c:	e3a020ff 	mov	r2, #255, 0	; 0xff
    cb60:	e2810060 	add	r0, r1, #96, 0	; 0x60
    cb64:	eb0013e7 	bl	11b08 <assertion_failed>
    cb68:	e59f1034 	ldr	r1, [pc, #52]	; cba4 <CSerialDevice::Initialize(unsigned int)+0x23c>
    cb6c:	e59f2038 	ldr	r2, [pc, #56]	; cbac <CSerialDevice::Initialize(unsigned int)+0x244>
    cb70:	e281008c 	add	r0, r1, #140, 0	; 0x8c
    cb74:	eb0013e3 	bl	11b08 <assertion_failed>
    cb78:	e59f1024 	ldr	r1, [pc, #36]	; cba4 <CSerialDevice::Initialize(unsigned int)+0x23c>
    cb7c:	e59f202c 	ldr	r2, [pc, #44]	; cbb0 <CSerialDevice::Initialize(unsigned int)+0x248>
    cb80:	e28100b0 	add	r0, r1, #176, 0	; 0xb0
    cb84:	eb0013df 	bl	11b08 <assertion_failed>
    cb88:	003d07d4 	.word	0x003d07d4
    cb8c:	0000fffe 	.word	0x0000fffe
    cb90:	0001cc50 	.word	0x0001cc50
    cb94:	0000d504 	.word	0x0000d504
    cb98:	000007ff 	.word	0x000007ff
    cb9c:	00000301 	.word	0x00000301
    cba0:	00019f24 	.word	0x00019f24
    cba4:	00019e38 	.word	0x00019e38
    cba8:	00000127 	.word	0x00000127
    cbac:	00000102 	.word	0x00000102
    cbb0:	00000105 	.word	0x00000105

0000cbb4 <CSerialDevice::Write(void const*, unsigned int)>:
    cbb4:	e5d03014 	ldrb	r3, [r0, #20]
    cbb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cbbc:	e3530000 	cmp	r3, #0, 0
    cbc0:	0a00005d 	beq	cd3c <CSerialDevice::Write(void const*, unsigned int)+0x188>
    cbc4:	e2806a01 	add	r6, r0, #4096	; 0x1000
    cbc8:	e1a07000 	mov	r7, r0
    cbcc:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
    cbd0:	e1a04001 	mov	r4, r1
    cbd4:	e3500000 	cmp	r0, #0, 0
    cbd8:	e1a08002 	mov	r8, r2
    cbdc:	1a000049 	bne	cd08 <CSerialDevice::Write(void const*, unsigned int)+0x154>
    cbe0:	e3540000 	cmp	r4, #0, 0
    cbe4:	0a000058 	beq	cd4c <CSerialDevice::Write(void const*, unsigned int)+0x198>
    cbe8:	e3580000 	cmp	r8, #0, 0
    cbec:	0a00005a 	beq	cd5c <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    cbf0:	e3a05000 	mov	r5, #0, 0
    cbf4:	e2444001 	sub	r4, r4, #1, 0
    cbf8:	ea000002 	b	cc08 <CSerialDevice::Write(void const*, unsigned int)+0x54>
    cbfc:	e2855001 	add	r5, r5, #1, 0
    cc00:	e1580005 	cmp	r8, r5
    cc04:	0a00000f 	beq	cc48 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    cc08:	e1a00007 	mov	r0, r7
    cc0c:	e5f41001 	ldrb	r1, [r4, #1]!
    cc10:	eb000185 	bl	d22c <CSerialDevice::Write(unsigned char)>
    cc14:	e3500000 	cmp	r0, #0, 0
    cc18:	0a00000a 	beq	cc48 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    cc1c:	e5d43000 	ldrb	r3, [r4]
    cc20:	e353000a 	cmp	r3, #10, 0
    cc24:	1afffff4 	bne	cbfc <CSerialDevice::Write(void const*, unsigned int)+0x48>
    cc28:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
    cc2c:	e3130001 	tst	r3, #1, 0
    cc30:	0afffff1 	beq	cbfc <CSerialDevice::Write(void const*, unsigned int)+0x48>
    cc34:	e3a0100d 	mov	r1, #13, 0
    cc38:	e1a00007 	mov	r0, r7
    cc3c:	eb00017a 	bl	d22c <CSerialDevice::Write(unsigned char)>
    cc40:	e3500000 	cmp	r0, #0, 0
    cc44:	1affffec 	bne	cbfc <CSerialDevice::Write(void const*, unsigned int)+0x48>
    cc48:	e59630e0 	ldr	r3, [r6, #224]	; 0xe0
    cc4c:	e3530000 	cmp	r3, #0, 0
    cc50:	1a00002e 	bne	cd10 <CSerialDevice::Write(void const*, unsigned int)+0x15c>
    cc54:	e5973004 	ldr	r3, [r7, #4]
    cc58:	e3530000 	cmp	r3, #0, 0
    cc5c:	0a000027 	beq	cd00 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    cc60:	e59600dc 	ldr	r0, [r6, #220]	; 0xdc
    cc64:	e3500000 	cmp	r0, #0, 0
    cc68:	1a00002d 	bne	cd24 <CSerialDevice::Write(void const*, unsigned int)+0x170>
    cc6c:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
    cc70:	e59620c8 	ldr	r2, [r6, #200]	; 0xc8
    cc74:	e1520003 	cmp	r2, r3
    cc78:	0a000020 	beq	cd00 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    cc7c:	e3a03000 	mov	r3, #0, 0
    cc80:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    cc84:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
    cc88:	e59620c8 	ldr	r2, [r6, #200]	; 0xc8
    cc8c:	e1520003 	cmp	r2, r3
    cc90:	0a000015 	beq	ccec <CSerialDevice::Write(void const*, unsigned int)+0x138>
    cc94:	e59f00c8 	ldr	r0, [pc, #200]	; cd64 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    cc98:	ea00000c 	b	ccd0 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
    cc9c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    cca0:	e2831001 	add	r1, r3, #1, 0
    cca4:	e58610c8 	str	r1, [r6, #200]	; 0xc8
    cca8:	e0873003 	add	r3, r7, r3
    ccac:	e5d338c4 	ldrb	r3, [r3, #2244]	; 0x8c4
    ccb0:	e5823000 	str	r3, [r2]
    ccb4:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    ccb8:	e0033000 	and	r3, r3, r0
    ccbc:	e58630c8 	str	r3, [r6, #200]	; 0xc8
    ccc0:	e59620c4 	ldr	r2, [r6, #196]	; 0xc4
    ccc4:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    ccc8:	e1520003 	cmp	r2, r3
    cccc:	0a000006 	beq	ccec <CSerialDevice::Write(void const*, unsigned int)+0x138>
    ccd0:	e5972010 	ldr	r2, [r7, #16]
    ccd4:	e5923018 	ldr	r3, [r2, #24]
    ccd8:	e3130020 	tst	r3, #32, 0
    ccdc:	0affffee 	beq	cc9c <CSerialDevice::Write(void const*, unsigned int)+0xe8>
    cce0:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    cce4:	e3833020 	orr	r3, r3, #32, 0
    cce8:	e5823038 	str	r3, [r2, #56]	; 0x38
    ccec:	e3a03000 	mov	r3, #0, 0
    ccf0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ccf4:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
    ccf8:	e3530000 	cmp	r3, #0, 0
    ccfc:	1a000005 	bne	cd18 <CSerialDevice::Write(void const*, unsigned int)+0x164>
    cd00:	e1a00005 	mov	r0, r5
    cd04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd08:	eb0011c2 	bl	11418 <EnterCritical>
    cd0c:	eaffffb3 	b	cbe0 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    cd10:	eb0011ea 	bl	114c0 <LeaveCritical>
    cd14:	eaffffce 	b	cc54 <CSerialDevice::Write(void const*, unsigned int)+0xa0>
    cd18:	eb0011e8 	bl	114c0 <LeaveCritical>
    cd1c:	e1a00005 	mov	r0, r5
    cd20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd24:	eb0011bb 	bl	11418 <EnterCritical>
    cd28:	e59620c4 	ldr	r2, [r6, #196]	; 0xc4
    cd2c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    cd30:	e1520003 	cmp	r2, r3
    cd34:	1affffd0 	bne	cc7c <CSerialDevice::Write(void const*, unsigned int)+0xc8>
    cd38:	eaffffed 	b	ccf4 <CSerialDevice::Write(void const*, unsigned int)+0x140>
    cd3c:	e59f1024 	ldr	r1, [pc, #36]	; cd68 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    cd40:	e59f2024 	ldr	r2, [pc, #36]	; cd6c <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
    cd44:	e28100f4 	add	r0, r1, #244, 0	; 0xf4
    cd48:	eb00136e 	bl	11b08 <assertion_failed>
    cd4c:	e59f1014 	ldr	r1, [pc, #20]	; cd68 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
    cd50:	e59f2018 	ldr	r2, [pc, #24]	; cd70 <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
    cd54:	e2810c01 	add	r0, r1, #256	; 0x100
    cd58:	eb00136a 	bl	11b08 <assertion_failed>
    cd5c:	e1a05008 	mov	r5, r8
    cd60:	eaffffb8 	b	cc48 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    cd64:	000007ff 	.word	0x000007ff
    cd68:	00019e38 	.word	0x00019e38
    cd6c:	0000014d 	.word	0x0000014d
    cd70:	00000152 	.word	0x00000152

0000cd74 <CSerialDevice::Read(void*, unsigned int)>:
    cd74:	e5d03014 	ldrb	r3, [r0, #20]
    cd78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd7c:	e3530000 	cmp	r3, #0, 0
    cd80:	0a00004d 	beq	cebc <CSerialDevice::Read(void*, unsigned int)+0x148>
    cd84:	e3510000 	cmp	r1, #0, 0
    cd88:	e1a08001 	mov	r8, r1
    cd8c:	0a00004e 	beq	cecc <CSerialDevice::Read(void*, unsigned int)+0x158>
    cd90:	e5905004 	ldr	r5, [r0, #4]
    cd94:	e1a04000 	mov	r4, r0
    cd98:	e3550000 	cmp	r5, #0, 0
    cd9c:	e1a07002 	mov	r7, r2
    cda0:	0a000029 	beq	ce4c <CSerialDevice::Read(void*, unsigned int)+0xd8>
    cda4:	e2806a01 	add	r6, r0, #4096	; 0x1000
    cda8:	e59600dc 	ldr	r0, [r6, #220]	; 0xdc
    cdac:	e3500000 	cmp	r0, #0, 0
    cdb0:	1a00003c 	bne	cea8 <CSerialDevice::Read(void*, unsigned int)+0x134>
    cdb4:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    cdb8:	e3530000 	cmp	r3, #0, 0
    cdbc:	ba00001a 	blt	ce2c <CSerialDevice::Read(void*, unsigned int)+0xb8>
    cdc0:	e3570000 	cmp	r7, #0, 0
    cdc4:	0a00004a 	beq	cef4 <CSerialDevice::Read(void*, unsigned int)+0x180>
    cdc8:	e3a05000 	mov	r5, #0, 0
    cdcc:	e59fc130 	ldr	ip, [pc, #304]	; cf04 <CSerialDevice::Read(void*, unsigned int)+0x190>
    cdd0:	ea00000b 	b	ce04 <CSerialDevice::Read(void*, unsigned int)+0x90>
    cdd4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    cdd8:	e2855001 	add	r5, r5, #1, 0
    cddc:	e2830001 	add	r0, r3, #1, 0
    cde0:	e58408bc 	str	r0, [r4, #2236]	; 0x8bc
    cde4:	e0843003 	add	r3, r4, r3
    cde8:	e5d330b8 	ldrb	r3, [r3, #184]	; 0xb8
    cdec:	e1570005 	cmp	r7, r5
    cdf0:	e4c83001 	strb	r3, [r8], #1
    cdf4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    cdf8:	e003300c 	and	r3, r3, ip
    cdfc:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    ce00:	0a00000c 	beq	ce38 <CSerialDevice::Read(void*, unsigned int)+0xc4>
    ce04:	e59408b8 	ldr	r0, [r4, #2232]	; 0x8b8
    ce08:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    ce0c:	e1500003 	cmp	r0, r3
    ce10:	1affffef 	bne	cdd4 <CSerialDevice::Read(void*, unsigned int)+0x60>
    ce14:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
    ce18:	e3530000 	cmp	r3, #0, 0
    ce1c:	0a000008 	beq	ce44 <CSerialDevice::Read(void*, unsigned int)+0xd0>
    ce20:	eb0011a6 	bl	114c0 <LeaveCritical>
    ce24:	e1a00005 	mov	r0, r5
    ce28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce2c:	e3a03000 	mov	r3, #0, 0
    ce30:	e59458c0 	ldr	r5, [r4, #2240]	; 0x8c0
    ce34:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
    ce38:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
    ce3c:	e3530000 	cmp	r3, #0, 0
    ce40:	1afffff6 	bne	ce20 <CSerialDevice::Read(void*, unsigned int)+0xac>
    ce44:	e1a00005 	mov	r0, r5
    ce48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ce4c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    ce50:	e3520000 	cmp	r2, #0, 0
    ce54:	1a00000b 	bne	ce88 <CSerialDevice::Read(void*, unsigned int)+0x114>
    ce58:	ea000027 	b	cefc <CSerialDevice::Read(void*, unsigned int)+0x188>
    ce5c:	e5933000 	ldr	r3, [r3]
    ce60:	e3130b01 	tst	r3, #1024	; 0x400
    ce64:	1a00001c 	bne	cedc <CSerialDevice::Read(void*, unsigned int)+0x168>
    ce68:	e3130b02 	tst	r3, #2048	; 0x800
    ce6c:	1a00001c 	bne	cee4 <CSerialDevice::Read(void*, unsigned int)+0x170>
    ce70:	e3130c01 	tst	r3, #256	; 0x100
    ce74:	1a00001c 	bne	ceec <CSerialDevice::Read(void*, unsigned int)+0x178>
    ce78:	e2855001 	add	r5, r5, #1, 0
    ce7c:	e1550007 	cmp	r5, r7
    ce80:	e4c83001 	strb	r3, [r8], #1
    ce84:	0a000003 	beq	ce98 <CSerialDevice::Read(void*, unsigned int)+0x124>
    ce88:	e5943010 	ldr	r3, [r4, #16]
    ce8c:	e5930018 	ldr	r0, [r3, #24]
    ce90:	e3100010 	tst	r0, #16, 0
    ce94:	0afffff0 	beq	ce5c <CSerialDevice::Read(void*, unsigned int)+0xe8>
    ce98:	e3a03000 	mov	r3, #0, 0
    ce9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    cea0:	e1a00005 	mov	r0, r5
    cea4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cea8:	eb00115a 	bl	11418 <EnterCritical>
    ceac:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    ceb0:	e3530000 	cmp	r3, #0, 0
    ceb4:	aaffffc1 	bge	cdc0 <CSerialDevice::Read(void*, unsigned int)+0x4c>
    ceb8:	eaffffdb 	b	ce2c <CSerialDevice::Read(void*, unsigned int)+0xb8>
    cebc:	e59f1044 	ldr	r1, [pc, #68]	; cf08 <CSerialDevice::Read(void*, unsigned int)+0x194>
    cec0:	e59f2044 	ldr	r2, [pc, #68]	; cf0c <CSerialDevice::Read(void*, unsigned int)+0x198>
    cec4:	e28100f4 	add	r0, r1, #244, 0	; 0xf4
    cec8:	eb00130e 	bl	11b08 <assertion_failed>
    cecc:	e59f1034 	ldr	r1, [pc, #52]	; cf08 <CSerialDevice::Read(void*, unsigned int)+0x194>
    ced0:	e59f2038 	ldr	r2, [pc, #56]	; cf10 <CSerialDevice::Read(void*, unsigned int)+0x19c>
    ced4:	e2810c01 	add	r0, r1, #256	; 0x100
    ced8:	eb00130a 	bl	11b08 <assertion_failed>
    cedc:	e3e05000 	mvn	r5, #0, 0
    cee0:	eaffffec 	b	ce98 <CSerialDevice::Read(void*, unsigned int)+0x124>
    cee4:	e3e05001 	mvn	r5, #1, 0
    cee8:	eaffffea 	b	ce98 <CSerialDevice::Read(void*, unsigned int)+0x124>
    ceec:	e3e05002 	mvn	r5, #2, 0
    cef0:	eaffffe8 	b	ce98 <CSerialDevice::Read(void*, unsigned int)+0x124>
    cef4:	e1a05007 	mov	r5, r7
    cef8:	eaffffce 	b	ce38 <CSerialDevice::Read(void*, unsigned int)+0xc4>
    cefc:	e1a05002 	mov	r5, r2
    cf00:	eaffffe4 	b	ce98 <CSerialDevice::Read(void*, unsigned int)+0x124>
    cf04:	000007ff 	.word	0x000007ff
    cf08:	00019e38 	.word	0x00019e38
    cf0c:	0000018f 	.word	0x0000018f
    cf10:	00000192 	.word	0x00000192

0000cf14 <CSerialDevice::GetOptions() const>:
    cf14:	e2800a01 	add	r0, r0, #4096	; 0x1000
    cf18:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
    cf1c:	e12fff1e 	bx	lr

0000cf20 <CSerialDevice::SetOptions(unsigned int)>:
    cf20:	e2800a01 	add	r0, r0, #4096	; 0x1000
    cf24:	e58010cc 	str	r1, [r0, #204]	; 0xcc
    cf28:	e12fff1e 	bx	lr

0000cf2c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    cf2c:	e5903004 	ldr	r3, [r0, #4]
    cf30:	e92d4010 	push	{r4, lr}
    cf34:	e3530000 	cmp	r3, #0, 0
    cf38:	0a00000e 	beq	cf78 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
    cf3c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    cf40:	e59030d0 	ldr	r3, [r0, #208]	; 0xd0
    cf44:	e3530000 	cmp	r3, #0, 0
    cf48:	1a00000e 	bne	cf88 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
    cf4c:	e3510000 	cmp	r1, #0, 0
    cf50:	0a000010 	beq	cf98 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
    cf54:	e1d130d0 	ldrsb	r3, [r1]
    cf58:	e3530000 	cmp	r3, #0, 0
    cf5c:	0a000011 	beq	cfa8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
    cf60:	e3520000 	cmp	r2, #0, 0
    cf64:	0a000013 	beq	cfb8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
    cf68:	e58020d8 	str	r2, [r0, #216]	; 0xd8
    cf6c:	e58010d4 	str	r1, [r0, #212]	; 0xd4
    cf70:	e58010d0 	str	r1, [r0, #208]	; 0xd0
    cf74:	e8bd8010 	pop	{r4, pc}
    cf78:	e59f1048 	ldr	r1, [pc, #72]	; cfc8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    cf7c:	e59f2048 	ldr	r2, [pc, #72]	; cfcc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
    cf80:	e2810f43 	add	r0, r1, #268	; 0x10c
    cf84:	eb0012df 	bl	11b08 <assertion_failed>
    cf88:	e59f1038 	ldr	r1, [pc, #56]	; cfc8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    cf8c:	e59f203c 	ldr	r2, [pc, #60]	; cfd0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
    cf90:	e2810f49 	add	r0, r1, #292	; 0x124
    cf94:	eb0012db 	bl	11b08 <assertion_failed>
    cf98:	e59f1028 	ldr	r1, [pc, #40]	; cfc8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    cf9c:	e3a02f7b 	mov	r2, #492	; 0x1ec
    cfa0:	e2810f4d 	add	r0, r1, #308	; 0x134
    cfa4:	eb0012d7 	bl	11b08 <assertion_failed>
    cfa8:	e59f1018 	ldr	r1, [pc, #24]	; cfc8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    cfac:	e59f2020 	ldr	r2, [pc, #32]	; cfd4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    cfb0:	e2810d05 	add	r0, r1, #320	; 0x140
    cfb4:	eb0012d3 	bl	11b08 <assertion_failed>
    cfb8:	e59f1008 	ldr	r1, [pc, #8]	; cfc8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    cfbc:	e59f2014 	ldr	r2, [pc, #20]	; cfd8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
    cfc0:	e2810e15 	add	r0, r1, #336	; 0x150
    cfc4:	eb0012cf 	bl	11b08 <assertion_failed>
    cfc8:	00019e38 	.word	0x00019e38
    cfcc:	000001e9 	.word	0x000001e9
    cfd0:	000001ea 	.word	0x000001ea
    cfd4:	000001ed 	.word	0x000001ed
    cfd8:	000001ee 	.word	0x000001ee

0000cfdc <CSerialDevice::AvailableForWrite()>:
    cfdc:	e92d4010 	push	{r4, lr}
    cfe0:	e5d03014 	ldrb	r3, [r0, #20]
    cfe4:	e24dd008 	sub	sp, sp, #8, 0
    cfe8:	e3530000 	cmp	r3, #0, 0
    cfec:	0a00001c 	beq	d064 <CSerialDevice::AvailableForWrite()+0x88>
    cff0:	e5903004 	ldr	r3, [r0, #4]
    cff4:	e3530000 	cmp	r3, #0, 0
    cff8:	0a00001d 	beq	d074 <CSerialDevice::AvailableForWrite()+0x98>
    cffc:	e2804a01 	add	r4, r0, #4096	; 0x1000
    d000:	e59420dc 	ldr	r2, [r4, #220]	; 0xdc
    d004:	e3520000 	cmp	r2, #0, 0
    d008:	1a00000c 	bne	d040 <CSerialDevice::AvailableForWrite()+0x64>
    d00c:	e59410c8 	ldr	r1, [r4, #200]	; 0xc8
    d010:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    d014:	e1510003 	cmp	r1, r3
    d018:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d01c:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
    d020:	92833e7f 	addls	r3, r3, #2032	; 0x7f0
    d024:	9283300f 	addls	r3, r3, #15, 0
    d028:	82433001 	subhi	r3, r3, #1, 0
    d02c:	e3520000 	cmp	r2, #0, 0
    d030:	e0430000 	sub	r0, r3, r0
    d034:	1a000005 	bne	d050 <CSerialDevice::AvailableForWrite()+0x74>
    d038:	e28dd008 	add	sp, sp, #8, 0
    d03c:	e8bd8010 	pop	{r4, pc}
    d040:	e1a00002 	mov	r0, r2
    d044:	eb0010f3 	bl	11418 <EnterCritical>
    d048:	e59420dc 	ldr	r2, [r4, #220]	; 0xdc
    d04c:	eaffffee 	b	d00c <CSerialDevice::AvailableForWrite()+0x30>
    d050:	e58d0004 	str	r0, [sp, #4]
    d054:	eb001119 	bl	114c0 <LeaveCritical>
    d058:	e59d0004 	ldr	r0, [sp, #4]
    d05c:	e28dd008 	add	sp, sp, #8, 0
    d060:	e8bd8010 	pop	{r4, pc}
    d064:	e59f1018 	ldr	r1, [pc, #24]	; d084 <CSerialDevice::AvailableForWrite()+0xa8>
    d068:	e3a02f7e 	mov	r2, #504	; 0x1f8
    d06c:	e28100f4 	add	r0, r1, #244, 0	; 0xf4
    d070:	eb0012a4 	bl	11b08 <assertion_failed>
    d074:	e59f1008 	ldr	r1, [pc, #8]	; d084 <CSerialDevice::AvailableForWrite()+0xa8>
    d078:	e59f2008 	ldr	r2, [pc, #8]	; d088 <CSerialDevice::AvailableForWrite()+0xac>
    d07c:	e2810f43 	add	r0, r1, #268	; 0x10c
    d080:	eb0012a0 	bl	11b08 <assertion_failed>
    d084:	00019e38 	.word	0x00019e38
    d088:	000001f9 	.word	0x000001f9

0000d08c <CSerialDevice::AvailableForRead()>:
    d08c:	e92d4030 	push	{r4, r5, lr}
    d090:	e5d03014 	ldrb	r3, [r0, #20]
    d094:	e24dd00c 	sub	sp, sp, #12, 0
    d098:	e3530000 	cmp	r3, #0, 0
    d09c:	0a00001b 	beq	d110 <CSerialDevice::AvailableForRead()+0x84>
    d0a0:	e5903004 	ldr	r3, [r0, #4]
    d0a4:	e1a04000 	mov	r4, r0
    d0a8:	e3530000 	cmp	r3, #0, 0
    d0ac:	0a00001b 	beq	d120 <CSerialDevice::AvailableForRead()+0x94>
    d0b0:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d0b4:	e59520dc 	ldr	r2, [r5, #220]	; 0xdc
    d0b8:	e3520000 	cmp	r2, #0, 0
    d0bc:	1a00000a 	bne	d0ec <CSerialDevice::AvailableForRead()+0x60>
    d0c0:	e59418b8 	ldr	r1, [r4, #2232]	; 0x8b8
    d0c4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d0c8:	e1510003 	cmp	r1, r3
    d0cc:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d0d0:	e59408bc 	ldr	r0, [r4, #2236]	; 0x8bc
    d0d4:	32833b02 	addcc	r3, r3, #2048	; 0x800
    d0d8:	e3520000 	cmp	r2, #0, 0
    d0dc:	e0430000 	sub	r0, r3, r0
    d0e0:	1a000005 	bne	d0fc <CSerialDevice::AvailableForRead()+0x70>
    d0e4:	e28dd00c 	add	sp, sp, #12, 0
    d0e8:	e8bd8030 	pop	{r4, r5, pc}
    d0ec:	e1a00002 	mov	r0, r2
    d0f0:	eb0010c8 	bl	11418 <EnterCritical>
    d0f4:	e59520dc 	ldr	r2, [r5, #220]	; 0xdc
    d0f8:	eafffff0 	b	d0c0 <CSerialDevice::AvailableForRead()+0x34>
    d0fc:	e58d0004 	str	r0, [sp, #4]
    d100:	eb0010ee 	bl	114c0 <LeaveCritical>
    d104:	e59d0004 	ldr	r0, [sp, #4]
    d108:	e28dd00c 	add	sp, sp, #12, 0
    d10c:	e8bd8030 	pop	{r4, r5, pc}
    d110:	e59f1018 	ldr	r1, [pc, #24]	; d130 <CSerialDevice::AvailableForRead()+0xa4>
    d114:	e59f2018 	ldr	r2, [pc, #24]	; d134 <CSerialDevice::AvailableForRead()+0xa8>
    d118:	e28100f4 	add	r0, r1, #244, 0	; 0xf4
    d11c:	eb001279 	bl	11b08 <assertion_failed>
    d120:	e59f1008 	ldr	r1, [pc, #8]	; d130 <CSerialDevice::AvailableForRead()+0xa4>
    d124:	e59f200c 	ldr	r2, [pc, #12]	; d138 <CSerialDevice::AvailableForRead()+0xac>
    d128:	e2810f43 	add	r0, r1, #268	; 0x10c
    d12c:	eb001275 	bl	11b08 <assertion_failed>
    d130:	00019e38 	.word	0x00019e38
    d134:	0000020e 	.word	0x0000020e
    d138:	0000020f 	.word	0x0000020f

0000d13c <CSerialDevice::Peek()>:
    d13c:	e92d4030 	push	{r4, r5, lr}
    d140:	e5d03014 	ldrb	r3, [r0, #20]
    d144:	e24dd00c 	sub	sp, sp, #12, 0
    d148:	e3530000 	cmp	r3, #0, 0
    d14c:	0a000021 	beq	d1d8 <CSerialDevice::Peek()+0x9c>
    d150:	e5903004 	ldr	r3, [r0, #4]
    d154:	e1a04000 	mov	r4, r0
    d158:	e3530000 	cmp	r3, #0, 0
    d15c:	0a000021 	beq	d1e8 <CSerialDevice::Peek()+0xac>
    d160:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d164:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
    d168:	e3500000 	cmp	r0, #0, 0
    d16c:	1a000008 	bne	d194 <CSerialDevice::Peek()+0x58>
    d170:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d174:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d178:	e1520003 	cmp	r2, r3
    d17c:	0a00001d 	beq	d1f8 <CSerialDevice::Peek()+0xbc>
    d180:	e59408bc 	ldr	r0, [r4, #2236]	; 0x8bc
    d184:	e0844000 	add	r4, r4, r0
    d188:	e5d400b8 	ldrb	r0, [r4, #184]	; 0xb8
    d18c:	e28dd00c 	add	sp, sp, #12, 0
    d190:	e8bd8030 	pop	{r4, r5, pc}
    d194:	eb00109f 	bl	11418 <EnterCritical>
    d198:	e59428b8 	ldr	r2, [r4, #2232]	; 0x8b8
    d19c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d1a0:	e1520003 	cmp	r2, r3
    d1a4:	159408bc 	ldrne	r0, [r4, #2236]	; 0x8bc
    d1a8:	059530dc 	ldreq	r3, [r5, #220]	; 0xdc
    d1ac:	159530dc 	ldrne	r3, [r5, #220]	; 0xdc
    d1b0:	10844000 	addne	r4, r4, r0
    d1b4:	03e00000 	mvneq	r0, #0, 0
    d1b8:	15d400b8 	ldrbne	r0, [r4, #184]	; 0xb8
    d1bc:	e3530000 	cmp	r3, #0, 0
    d1c0:	0afffff1 	beq	d18c <CSerialDevice::Peek()+0x50>
    d1c4:	e58d0004 	str	r0, [sp, #4]
    d1c8:	eb0010bc 	bl	114c0 <LeaveCritical>
    d1cc:	e59d0004 	ldr	r0, [sp, #4]
    d1d0:	e28dd00c 	add	sp, sp, #12, 0
    d1d4:	e8bd8030 	pop	{r4, r5, pc}
    d1d8:	e59f1020 	ldr	r1, [pc, #32]	; d200 <CSerialDevice::Peek()+0xc4>
    d1dc:	e3a02f89 	mov	r2, #548	; 0x224
    d1e0:	e28100f4 	add	r0, r1, #244, 0	; 0xf4
    d1e4:	eb001247 	bl	11b08 <assertion_failed>
    d1e8:	e59f1010 	ldr	r1, [pc, #16]	; d200 <CSerialDevice::Peek()+0xc4>
    d1ec:	e59f2010 	ldr	r2, [pc, #16]	; d204 <CSerialDevice::Peek()+0xc8>
    d1f0:	e2810f43 	add	r0, r1, #268	; 0x10c
    d1f4:	eb001243 	bl	11b08 <assertion_failed>
    d1f8:	e3e00000 	mvn	r0, #0, 0
    d1fc:	eaffffe2 	b	d18c <CSerialDevice::Peek()+0x50>
    d200:	00019e38 	.word	0x00019e38
    d204:	00000225 	.word	0x00000225

0000d208 <CSerialDevice::Flush()>:
    d208:	e3a03000 	mov	r3, #0, 0
    d20c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d210:	e5902010 	ldr	r2, [r0, #16]
    d214:	e2822018 	add	r2, r2, #24, 0
    d218:	e5923000 	ldr	r3, [r2]
    d21c:	e2133008 	ands	r3, r3, #8, 0
    d220:	1afffffc 	bne	d218 <CSerialDevice::Flush()+0x10>
    d224:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d228:	e12fff1e 	bx	lr

0000d22c <CSerialDevice::Write(unsigned char)>:
    d22c:	e92d4070 	push	{r4, r5, r6, lr}
    d230:	e5903004 	ldr	r3, [r0, #4]
    d234:	e1a04000 	mov	r4, r0
    d238:	e3530000 	cmp	r3, #0, 0
    d23c:	e1a05001 	mov	r5, r1
    d240:	e24dd008 	sub	sp, sp, #8, 0
    d244:	0a000027 	beq	d2e8 <CSerialDevice::Write(unsigned char)+0xbc>
    d248:	e2806a01 	add	r6, r0, #4096	; 0x1000
    d24c:	e59620dc 	ldr	r2, [r6, #220]	; 0xdc
    d250:	e3520000 	cmp	r2, #0, 0
    d254:	1a000017 	bne	d2b8 <CSerialDevice::Write(unsigned char)+0x8c>
    d258:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
    d25c:	e59610c8 	ldr	r1, [r6, #200]	; 0xc8
    d260:	e2833001 	add	r3, r3, #1, 0
    d264:	e1a03a83 	lsl	r3, r3, #21
    d268:	e1a03aa3 	lsr	r3, r3, #21
    d26c:	e1530001 	cmp	r3, r1
    d270:	0a000027 	beq	d314 <CSerialDevice::Write(unsigned char)+0xe8>
    d274:	e3a00001 	mov	r0, #1, 0
    d278:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
    d27c:	e0844003 	add	r4, r4, r3
    d280:	e0833000 	add	r3, r3, r0
    d284:	e58630c4 	str	r3, [r6, #196]	; 0xc4
    d288:	e5c458c4 	strb	r5, [r4, #2244]	; 0x8c4
    d28c:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
    d290:	e1a03a83 	lsl	r3, r3, #21
    d294:	e1a03aa3 	lsr	r3, r3, #21
    d298:	e58630c4 	str	r3, [r6, #196]	; 0xc4
    d29c:	e3520000 	cmp	r2, #0, 0
    d2a0:	0a000002 	beq	d2b0 <CSerialDevice::Write(unsigned char)+0x84>
    d2a4:	e58d0004 	str	r0, [sp, #4]
    d2a8:	eb001084 	bl	114c0 <LeaveCritical>
    d2ac:	e59d0004 	ldr	r0, [sp, #4]
    d2b0:	e28dd008 	add	sp, sp, #8, 0
    d2b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2b8:	e1a00002 	mov	r0, r2
    d2bc:	eb001055 	bl	11418 <EnterCritical>
    d2c0:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
    d2c4:	e59620c8 	ldr	r2, [r6, #200]	; 0xc8
    d2c8:	e2833001 	add	r3, r3, #1, 0
    d2cc:	e1a03a83 	lsl	r3, r3, #21
    d2d0:	e1a03aa3 	lsr	r3, r3, #21
    d2d4:	e1530002 	cmp	r3, r2
    d2d8:	03a00000 	moveq	r0, #0, 0
    d2dc:	e59620dc 	ldr	r2, [r6, #220]	; 0xdc
    d2e0:	1affffe3 	bne	d274 <CSerialDevice::Write(unsigned char)+0x48>
    d2e4:	eaffffec 	b	d29c <CSerialDevice::Write(unsigned char)+0x70>
    d2e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d2ec:	e5901010 	ldr	r1, [r0, #16]
    d2f0:	e2812018 	add	r2, r1, #24, 0
    d2f4:	e5923000 	ldr	r3, [r2]
    d2f8:	e2133020 	ands	r3, r3, #32, 0
    d2fc:	1afffffc 	bne	d2f4 <CSerialDevice::Write(unsigned char)+0xc8>
    d300:	e5815000 	str	r5, [r1]
    d304:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d308:	e3a00001 	mov	r0, #1, 0
    d30c:	e28dd008 	add	sp, sp, #8, 0
    d310:	e8bd8070 	pop	{r4, r5, r6, pc}
    d314:	e1a00002 	mov	r0, r2
    d318:	e28dd008 	add	sp, sp, #8, 0
    d31c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d320 <CSerialDevice::InterruptHandler()>:
    d320:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d324:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d328:	e1a04000 	mov	r4, r0
    d32c:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
    d330:	e24dd004 	sub	sp, sp, #4, 0
    d334:	e3500000 	cmp	r0, #0, 0
    d338:	1a00006c 	bne	d4f0 <CSerialDevice::InterruptHandler()+0x1d0>
    d33c:	e3a01000 	mov	r1, #0, 0
    d340:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    d344:	e5943010 	ldr	r3, [r4, #16]
    d348:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d34c:	e5832044 	str	r2, [r3, #68]	; 0x44
    d350:	e5942010 	ldr	r2, [r4, #16]
    d354:	e5926018 	ldr	r6, [r2, #24]
    d358:	e2827018 	add	r7, r2, #24, 0
    d35c:	e2166010 	ands	r6, r6, #16, 0
    d360:	11a06001 	movne	r6, r1
    d364:	1a000035 	bne	d440 <CSerialDevice::InterruptHandler()+0x120>
    d368:	e3e0a002 	mvn	sl, #2, 0
    d36c:	e3e08001 	mvn	r8, #1, 0
    d370:	e3e09000 	mvn	r9, #0, 0
    d374:	e595e0d0 	ldr	lr, [r5, #208]	; 0xd0
    d378:	e59fc180 	ldr	ip, [pc, #384]	; d500 <CSerialDevice::InterruptHandler()+0x1e0>
    d37c:	ea000020 	b	d404 <CSerialDevice::InterruptHandler()+0xe4>
    d380:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d384:	e3530000 	cmp	r3, #0, 0
    d388:	058498c0 	streq	r9, [r4, #2240]	; 0x8c0
    d38c:	e35e0000 	cmp	lr, #0, 0
    d390:	0a00000a 	beq	d3c0 <CSerialDevice::InterruptHandler()+0xa0>
    d394:	e59500d4 	ldr	r0, [r5, #212]	; 0xd4
    d398:	e6af3071 	sxtb	r3, r1
    d39c:	e1d0b0d0 	ldrsb	fp, [r0]
    d3a0:	e15b0003 	cmp	fp, r3
    d3a4:	1585e0d4 	strne	lr, [r5, #212]	; 0xd4
    d3a8:	1a000004 	bne	d3c0 <CSerialDevice::InterruptHandler()+0xa0>
    d3ac:	e2803001 	add	r3, r0, #1, 0
    d3b0:	e58530d4 	str	r3, [r5, #212]	; 0xd4
    d3b4:	e1d030d1 	ldrsb	r3, [r0, #1]
    d3b8:	e3530000 	cmp	r3, #0, 0
    d3bc:	03a06001 	moveq	r6, #1, 0
    d3c0:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d3c4:	e59408bc 	ldr	r0, [r4, #2236]	; 0x8bc
    d3c8:	e2833001 	add	r3, r3, #1, 0
    d3cc:	e003300c 	and	r3, r3, ip
    d3d0:	e1530000 	cmp	r3, r0
    d3d4:	0a000013 	beq	d428 <CSerialDevice::InterruptHandler()+0x108>
    d3d8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d3dc:	e2830001 	add	r0, r3, #1, 0
    d3e0:	e0843003 	add	r3, r4, r3
    d3e4:	e58408b8 	str	r0, [r4, #2232]	; 0x8b8
    d3e8:	e5c310b8 	strb	r1, [r3, #184]	; 0xb8
    d3ec:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
    d3f0:	e003300c 	and	r3, r3, ip
    d3f4:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
    d3f8:	e5973000 	ldr	r3, [r7]
    d3fc:	e3130010 	tst	r3, #16, 0
    d400:	1a00000e 	bne	d440 <CSerialDevice::InterruptHandler()+0x120>
    d404:	e5921000 	ldr	r1, [r2]
    d408:	e3110b01 	tst	r1, #1024	; 0x400
    d40c:	1affffdb 	bne	d380 <CSerialDevice::InterruptHandler()+0x60>
    d410:	e3110b02 	tst	r1, #2048	; 0x800
    d414:	0a00002d 	beq	d4d0 <CSerialDevice::InterruptHandler()+0x1b0>
    d418:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d41c:	e3530000 	cmp	r3, #0, 0
    d420:	058488c0 	streq	r8, [r4, #2240]	; 0x8c0
    d424:	eaffffd8 	b	d38c <CSerialDevice::InterruptHandler()+0x6c>
    d428:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d42c:	e3530000 	cmp	r3, #0, 0
    d430:	058488c0 	streq	r8, [r4, #2240]	; 0x8c0
    d434:	e5973000 	ldr	r3, [r7]
    d438:	e3130010 	tst	r3, #16, 0
    d43c:	0afffff0 	beq	d404 <CSerialDevice::InterruptHandler()+0xe4>
    d440:	e5973000 	ldr	r3, [r7]
    d444:	e3130020 	tst	r3, #32, 0
    d448:	1a000015 	bne	d4a4 <CSerialDevice::InterruptHandler()+0x184>
    d44c:	e59f00ac 	ldr	r0, [pc, #172]	; d500 <CSerialDevice::InterruptHandler()+0x1e0>
    d450:	ea00000c 	b	d488 <CSerialDevice::InterruptHandler()+0x168>
    d454:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d458:	e2831001 	add	r1, r3, #1, 0
    d45c:	e58510c8 	str	r1, [r5, #200]	; 0xc8
    d460:	e0843003 	add	r3, r4, r3
    d464:	e5d338c4 	ldrb	r3, [r3, #2244]	; 0x8c4
    d468:	e5823000 	str	r3, [r2]
    d46c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d470:	e0033000 	and	r3, r3, r0
    d474:	e58530c8 	str	r3, [r5, #200]	; 0xc8
    d478:	e5942010 	ldr	r2, [r4, #16]
    d47c:	e5923018 	ldr	r3, [r2, #24]
    d480:	e3130020 	tst	r3, #32, 0
    d484:	1a000006 	bne	d4a4 <CSerialDevice::InterruptHandler()+0x184>
    d488:	e59510c4 	ldr	r1, [r5, #196]	; 0xc4
    d48c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
    d490:	e1510003 	cmp	r1, r3
    d494:	1affffee 	bne	d454 <CSerialDevice::InterruptHandler()+0x134>
    d498:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    d49c:	e3c33020 	bic	r3, r3, #32, 0
    d4a0:	e5823038 	str	r3, [r2, #56]	; 0x38
    d4a4:	e3a03000 	mov	r3, #0, 0
    d4a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d4ac:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
    d4b0:	e3530000 	cmp	r3, #0, 0
    d4b4:	1a00000f 	bne	d4f8 <CSerialDevice::InterruptHandler()+0x1d8>
    d4b8:	e3560000 	cmp	r6, #0, 0
    d4bc:	0a000009 	beq	d4e8 <CSerialDevice::InterruptHandler()+0x1c8>
    d4c0:	e59530d8 	ldr	r3, [r5, #216]	; 0xd8
    d4c4:	e28dd004 	add	sp, sp, #4, 0
    d4c8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4cc:	e12fff13 	bx	r3
    d4d0:	e3110c01 	tst	r1, #256	; 0x100
    d4d4:	0affffac 	beq	d38c <CSerialDevice::InterruptHandler()+0x6c>
    d4d8:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d4dc:	e3530000 	cmp	r3, #0, 0
    d4e0:	0584a8c0 	streq	sl, [r4, #2240]	; 0x8c0
    d4e4:	eaffffa8 	b	d38c <CSerialDevice::InterruptHandler()+0x6c>
    d4e8:	e28dd004 	add	sp, sp, #4, 0
    d4ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4f0:	eb000fc8 	bl	11418 <EnterCritical>
    d4f4:	eaffff90 	b	d33c <CSerialDevice::InterruptHandler()+0x1c>
    d4f8:	eb000ff0 	bl	114c0 <LeaveCritical>
    d4fc:	eaffffed 	b	d4b8 <CSerialDevice::InterruptHandler()+0x198>
    d500:	000007ff 	.word	0x000007ff

0000d504 <CSerialDevice::InterruptStub(void*)>:
    d504:	e3a03000 	mov	r3, #0, 0
    d508:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d50c:	e59f302c 	ldr	r3, [pc, #44]	; d540 <CSerialDevice::InterruptStub(void*)+0x3c>
    d510:	e593200c 	ldr	r2, [r3, #12]
    d514:	e3120001 	tst	r2, #1, 0
    d518:	012fff1e 	bxeq	lr
    d51c:	e5930010 	ldr	r0, [r3, #16]
    d520:	e3500000 	cmp	r0, #0, 0
    d524:	0a000000 	beq	d52c <CSerialDevice::InterruptStub(void*)+0x28>
    d528:	eaffff7c 	b	d320 <CSerialDevice::InterruptHandler()>
    d52c:	e59f1010 	ldr	r1, [pc, #16]	; d544 <CSerialDevice::InterruptStub(void*)+0x40>
    d530:	e92d4010 	push	{r4, lr}
    d534:	e59f200c 	ldr	r2, [pc, #12]	; d548 <CSerialDevice::InterruptStub(void*)+0x44>
    d538:	e2810e16 	add	r0, r1, #352	; 0x160
    d53c:	eb001171 	bl	11b08 <assertion_failed>
    d540:	0001cc50 	.word	0x0001cc50
    d544:	00019e38 	.word	0x00019e38
    d548:	000002d1 	.word	0x000002d1
    d54c:	00000000 	.word	0x00000000

0000d550 <CString::~CString()>:
    d550:	e92d4010 	push	{r4, lr}
    d554:	e1a04000 	mov	r4, r0
    d558:	e5900004 	ldr	r0, [r0, #4]
    d55c:	e59f3014 	ldr	r3, [pc, #20]	; d578 <CString::~CString()+0x28>
    d560:	e3500000 	cmp	r0, #0, 0
    d564:	e5843000 	str	r3, [r4]
    d568:	0a000000 	beq	d570 <CString::~CString()+0x20>
    d56c:	eb000c88 	bl	10794 <operator delete[](void*)>
    d570:	e1a00004 	mov	r0, r4
    d574:	e8bd8010 	pop	{r4, pc}
    d578:	00019fc4 	.word	0x00019fc4

0000d57c <CString::~CString()>:
    d57c:	e92d4010 	push	{r4, lr}
    d580:	e1a04000 	mov	r4, r0
    d584:	e5900004 	ldr	r0, [r0, #4]
    d588:	e59f3020 	ldr	r3, [pc, #32]	; d5b0 <CString::~CString()+0x34>
    d58c:	e3500000 	cmp	r0, #0, 0
    d590:	e5843000 	str	r3, [r4]
    d594:	0a000000 	beq	d59c <CString::~CString()+0x20>
    d598:	eb000c7d 	bl	10794 <operator delete[](void*)>
    d59c:	e1a00004 	mov	r0, r4
    d5a0:	e3a01010 	mov	r1, #16, 0
    d5a4:	eb000c7b 	bl	10798 <operator delete(void*, unsigned int)>
    d5a8:	e1a00004 	mov	r0, r4
    d5ac:	e8bd8010 	pop	{r4, pc}
    d5b0:	00019fc4 	.word	0x00019fc4

0000d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d5b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d5b8:	e990004c 	ldmib	r0, {r2, r3, r6}
    d5bc:	e0466002 	sub	r6, r6, r2
    d5c0:	e0861001 	add	r1, r6, r1
    d5c4:	e2812001 	add	r2, r1, #1, 0
    d5c8:	e1520003 	cmp	r2, r3
    d5cc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d5d0:	e1a04000 	mov	r4, r0
    d5d4:	e2815041 	add	r5, r1, #65, 0	; 0x41
    d5d8:	e1a00005 	mov	r0, r5
    d5dc:	eb000c65 	bl	10778 <operator new[](unsigned int)>
    d5e0:	e3a02000 	mov	r2, #0, 0
    d5e4:	e594300c 	ldr	r3, [r4, #12]
    d5e8:	e1a07000 	mov	r7, r0
    d5ec:	e5c32000 	strb	r2, [r3]
    d5f0:	e5941004 	ldr	r1, [r4, #4]
    d5f4:	eb0009f6 	bl	fdd4 <strcpy>
    d5f8:	e5940004 	ldr	r0, [r4, #4]
    d5fc:	e3500000 	cmp	r0, #0, 0
    d600:	0a000000 	beq	d608 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d604:	eb000c62 	bl	10794 <operator delete[](void*)>
    d608:	e0876006 	add	r6, r7, r6
    d60c:	e584600c 	str	r6, [r4, #12]
    d610:	e5847004 	str	r7, [r4, #4]
    d614:	e5845008 	str	r5, [r4, #8]
    d618:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d61c <CString::CString()>:
    d61c:	e3a02000 	mov	r2, #0, 0
    d620:	e59f1008 	ldr	r1, [pc, #8]	; d630 <CString::CString()+0x14>
    d624:	e5802008 	str	r2, [r0, #8]
    d628:	e8800006 	stm	r0, {r1, r2}
    d62c:	e12fff1e 	bx	lr
    d630:	00019fc4 	.word	0x00019fc4

0000d634 <CString::CString(char const*)>:
    d634:	e92d4010 	push	{r4, lr}
    d638:	e1a04000 	mov	r4, r0
    d63c:	e59f3034 	ldr	r3, [pc, #52]	; d678 <CString::CString(char const*)+0x44>
    d640:	e24dd008 	sub	sp, sp, #8, 0
    d644:	e5843000 	str	r3, [r4]
    d648:	e1a00001 	mov	r0, r1
    d64c:	e58d1004 	str	r1, [sp, #4]
    d650:	eb00093b 	bl	fb44 <strlen>
    d654:	e2800001 	add	r0, r0, #1, 0
    d658:	e5840008 	str	r0, [r4, #8]
    d65c:	eb000c45 	bl	10778 <operator new[](unsigned int)>
    d660:	e59d1004 	ldr	r1, [sp, #4]
    d664:	e5840004 	str	r0, [r4, #4]
    d668:	eb0009d9 	bl	fdd4 <strcpy>
    d66c:	e1a00004 	mov	r0, r4
    d670:	e28dd008 	add	sp, sp, #8, 0
    d674:	e8bd8010 	pop	{r4, pc}
    d678:	00019fc4 	.word	0x00019fc4

0000d67c <CString::operator char const*() const>:
    d67c:	e5900004 	ldr	r0, [r0, #4]
    d680:	e59f3008 	ldr	r3, [pc, #8]	; d690 <CString::operator char const*() const+0x14>
    d684:	e3500000 	cmp	r0, #0, 0
    d688:	01a00003 	moveq	r0, r3
    d68c:	e12fff1e 	bx	lr
    d690:	0001a404 	.word	0x0001a404

0000d694 <CString::operator=(char const*)>:
    d694:	e92d4010 	push	{r4, lr}
    d698:	e1a04000 	mov	r4, r0
    d69c:	e5900004 	ldr	r0, [r0, #4]
    d6a0:	e24dd008 	sub	sp, sp, #8, 0
    d6a4:	e3500000 	cmp	r0, #0, 0
    d6a8:	0a000002 	beq	d6b8 <CString::operator=(char const*)+0x24>
    d6ac:	e58d1004 	str	r1, [sp, #4]
    d6b0:	eb000c37 	bl	10794 <operator delete[](void*)>
    d6b4:	e59d1004 	ldr	r1, [sp, #4]
    d6b8:	e1a00001 	mov	r0, r1
    d6bc:	e58d1004 	str	r1, [sp, #4]
    d6c0:	eb00091f 	bl	fb44 <strlen>
    d6c4:	e2800001 	add	r0, r0, #1, 0
    d6c8:	e5840008 	str	r0, [r4, #8]
    d6cc:	eb000c29 	bl	10778 <operator new[](unsigned int)>
    d6d0:	e59d1004 	ldr	r1, [sp, #4]
    d6d4:	e5840004 	str	r0, [r4, #4]
    d6d8:	eb0009bd 	bl	fdd4 <strcpy>
    d6dc:	e5940004 	ldr	r0, [r4, #4]
    d6e0:	e28dd008 	add	sp, sp, #8, 0
    d6e4:	e8bd8010 	pop	{r4, pc}

0000d6e8 <CString::operator=(CString const&)>:
    d6e8:	e92d4070 	push	{r4, r5, r6, lr}
    d6ec:	e1a04000 	mov	r4, r0
    d6f0:	e5900004 	ldr	r0, [r0, #4]
    d6f4:	e1a05001 	mov	r5, r1
    d6f8:	e3500000 	cmp	r0, #0, 0
    d6fc:	0a000000 	beq	d704 <CString::operator=(CString const&)+0x1c>
    d700:	eb000c23 	bl	10794 <operator delete[](void*)>
    d704:	e5950004 	ldr	r0, [r5, #4]
    d708:	e59f6030 	ldr	r6, [pc, #48]	; d740 <CString::operator=(CString const&)+0x58>
    d70c:	e3500000 	cmp	r0, #0, 0
    d710:	01a00006 	moveq	r0, r6
    d714:	eb00090a 	bl	fb44 <strlen>
    d718:	e2800001 	add	r0, r0, #1, 0
    d71c:	e5840008 	str	r0, [r4, #8]
    d720:	eb000c14 	bl	10778 <operator new[](unsigned int)>
    d724:	e5840004 	str	r0, [r4, #4]
    d728:	e5951004 	ldr	r1, [r5, #4]
    d72c:	e3510000 	cmp	r1, #0, 0
    d730:	01a01006 	moveq	r1, r6
    d734:	eb0009a6 	bl	fdd4 <strcpy>
    d738:	e1a00004 	mov	r0, r4
    d73c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d740:	0001a404 	.word	0x0001a404

0000d744 <CString::GetLength() const>:
    d744:	e5900004 	ldr	r0, [r0, #4]
    d748:	e3500000 	cmp	r0, #0, 0
    d74c:	012fff1e 	bxeq	lr
    d750:	ea0008fb 	b	fb44 <strlen>

0000d754 <CString::Append(char const*)>:
    d754:	e92d4070 	push	{r4, r5, r6, lr}
    d758:	e3a03001 	mov	r3, #1, 0
    d75c:	e1a04000 	mov	r4, r0
    d760:	e5900004 	ldr	r0, [r0, #4]
    d764:	e1a06001 	mov	r6, r1
    d768:	e3500000 	cmp	r0, #0, 0
    d76c:	e5843008 	str	r3, [r4, #8]
    d770:	0a000003 	beq	d784 <CString::Append(char const*)+0x30>
    d774:	eb0008f2 	bl	fb44 <strlen>
    d778:	e5943008 	ldr	r3, [r4, #8]
    d77c:	e0830000 	add	r0, r3, r0
    d780:	e5840008 	str	r0, [r4, #8]
    d784:	e1a00006 	mov	r0, r6
    d788:	eb0008ed 	bl	fb44 <strlen>
    d78c:	e5943008 	ldr	r3, [r4, #8]
    d790:	e0800003 	add	r0, r0, r3
    d794:	e5840008 	str	r0, [r4, #8]
    d798:	eb000bf6 	bl	10778 <operator new[](unsigned int)>
    d79c:	e5941004 	ldr	r1, [r4, #4]
    d7a0:	e1a05000 	mov	r5, r0
    d7a4:	e3510000 	cmp	r1, #0, 0
    d7a8:	05c01000 	strbeq	r1, [r0]
    d7ac:	0a000004 	beq	d7c4 <CString::Append(char const*)+0x70>
    d7b0:	eb000987 	bl	fdd4 <strcpy>
    d7b4:	e5940004 	ldr	r0, [r4, #4]
    d7b8:	e3500000 	cmp	r0, #0, 0
    d7bc:	0a000000 	beq	d7c4 <CString::Append(char const*)+0x70>
    d7c0:	eb000bf3 	bl	10794 <operator delete[](void*)>
    d7c4:	e1a01006 	mov	r1, r6
    d7c8:	e1a00005 	mov	r0, r5
    d7cc:	eb000999 	bl	fe38 <strcat>
    d7d0:	e5845004 	str	r5, [r4, #4]
    d7d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d7d8 <CString::Compare(char const*) const>:
    d7d8:	e5900004 	ldr	r0, [r0, #4]
    d7dc:	ea0008e2 	b	fb6c <strcmp>

0000d7e0 <CString::Find(char) const>:
    d7e0:	e5902004 	ldr	r2, [r0, #4]
    d7e4:	e1d230d0 	ldrsb	r3, [r2]
    d7e8:	e3530000 	cmp	r3, #0, 0
    d7ec:	0a000006 	beq	d80c <CString::Find(char) const+0x2c>
    d7f0:	e3a00000 	mov	r0, #0, 0
    d7f4:	e1510003 	cmp	r1, r3
    d7f8:	012fff1e 	bxeq	lr
    d7fc:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d800:	e2800001 	add	r0, r0, #1, 0
    d804:	e3530000 	cmp	r3, #0, 0
    d808:	1afffff9 	bne	d7f4 <CString::Find(char) const+0x14>
    d80c:	e3e00000 	mvn	r0, #0, 0
    d810:	e12fff1e 	bx	lr

0000d814 <CString::PutChar(char, unsigned int)>:
    d814:	e92d4070 	push	{r4, r5, r6, lr}
    d818:	e2524000 	subs	r4, r2, #0, 0
    d81c:	08bd8070 	popeq	{r4, r5, r6, pc}
    d820:	e1a06001 	mov	r6, r1
    d824:	e1a01004 	mov	r1, r4
    d828:	e1a05000 	mov	r5, r0
    d82c:	ebffff60 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d830:	e2442001 	sub	r2, r4, #1, 0
    d834:	e595300c 	ldr	r3, [r5, #12]
    d838:	e2422001 	sub	r2, r2, #1, 0
    d83c:	e2830001 	add	r0, r3, #1, 0
    d840:	e3720001 	cmn	r2, #1, 0
    d844:	e585000c 	str	r0, [r5, #12]
    d848:	e5c36000 	strb	r6, [r3]
    d84c:	1afffff8 	bne	d834 <CString::PutChar(char, unsigned int)+0x20>
    d850:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d854 <CString::PutString(char const*)>:
    d854:	e92d4070 	push	{r4, r5, r6, lr}
    d858:	e1a04000 	mov	r4, r0
    d85c:	e1a00001 	mov	r0, r1
    d860:	e1a06001 	mov	r6, r1
    d864:	eb0008b6 	bl	fb44 <strlen>
    d868:	e2505000 	subs	r5, r0, #0, 0
    d86c:	0a000002 	beq	d87c <CString::PutString(char const*)+0x28>
    d870:	e1a01005 	mov	r1, r5
    d874:	e1a00004 	mov	r0, r4
    d878:	ebffff4d 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d87c:	e1a01006 	mov	r1, r6
    d880:	e594000c 	ldr	r0, [r4, #12]
    d884:	eb000952 	bl	fdd4 <strcpy>
    d888:	e594000c 	ldr	r0, [r4, #12]
    d88c:	e0800005 	add	r0, r0, r5
    d890:	e584000c 	str	r0, [r4, #12]
    d894:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d898 <CString::Replace(char const*, char const*)>:
    d898:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d89c:	e1d170d0 	ldrsb	r7, [r1]
    d8a0:	e24dd010 	sub	sp, sp, #16, 0
    d8a4:	e3570000 	cmp	r7, #0, 0
    d8a8:	1a000002 	bne	d8b8 <CString::Replace(char const*, char const*)+0x20>
    d8ac:	e1a00007 	mov	r0, r7
    d8b0:	e28dd010 	add	sp, sp, #16, 0
    d8b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d8b8:	e1a05000 	mov	r5, r0
    d8bc:	e1a06001 	mov	r6, r1
    d8c0:	e5901004 	ldr	r1, [r0, #4]
    d8c4:	e1a0000d 	mov	r0, sp
    d8c8:	e1a08002 	mov	r8, r2
    d8cc:	ebffff58 	bl	d634 <CString::CString(char const*)>
    d8d0:	e5950004 	ldr	r0, [r5, #4]
    d8d4:	e3500000 	cmp	r0, #0, 0
    d8d8:	0a000000 	beq	d8e0 <CString::Replace(char const*, char const*)+0x48>
    d8dc:	eb000bac 	bl	10794 <operator delete[](void*)>
    d8e0:	e3a00040 	mov	r0, #64, 0	; 0x40
    d8e4:	e5850008 	str	r0, [r5, #8]
    d8e8:	eb000ba2 	bl	10778 <operator new[](unsigned int)>
    d8ec:	e3a07000 	mov	r7, #0, 0
    d8f0:	e59d9004 	ldr	r9, [sp, #4]
    d8f4:	e5850004 	str	r0, [r5, #4]
    d8f8:	e585000c 	str	r0, [r5, #12]
    d8fc:	e1a00009 	mov	r0, r9
    d900:	e1d610d0 	ldrsb	r1, [r6]
    d904:	eb00095c 	bl	fe7c <strchr>
    d908:	e2504000 	subs	r4, r0, #0, 0
    d90c:	0a00002a 	beq	d9bc <CString::Replace(char const*, char const*)+0x124>
    d910:	e1590004 	cmp	r9, r4
    d914:	3a000016 	bcc	d974 <CString::Replace(char const*, char const*)+0xdc>
    d918:	e1d630d1 	ldrsb	r3, [r6, #1]
    d91c:	e2842001 	add	r2, r4, #1, 0
    d920:	e3530000 	cmp	r3, #0, 0
    d924:	e286e001 	add	lr, r6, #1, 0
    d928:	0a00001d 	beq	d9a4 <CString::Replace(char const*, char const*)+0x10c>
    d92c:	e1a0c002 	mov	ip, r2
    d930:	ea000003 	b	d944 <CString::Replace(char const*, char const*)+0xac>
    d934:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    d938:	e1a0200c 	mov	r2, ip
    d93c:	e3530000 	cmp	r3, #0, 0
    d940:	0a000017 	beq	d9a4 <CString::Replace(char const*, char const*)+0x10c>
    d944:	e0dc40d1 	ldrsb	r4, [ip], #1
    d948:	e1540003 	cmp	r4, r3
    d94c:	0afffff8 	beq	d934 <CString::Replace(char const*, char const*)+0x9c>
    d950:	e3a01001 	mov	r1, #1, 0
    d954:	e1a00005 	mov	r0, r5
    d958:	e0d940d1 	ldrsb	r4, [r9], #1
    d95c:	ebffff14 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d960:	e595300c 	ldr	r3, [r5, #12]
    d964:	e2832001 	add	r2, r3, #1, 0
    d968:	e585200c 	str	r2, [r5, #12]
    d96c:	e5c34000 	strb	r4, [r3]
    d970:	eaffffe1 	b	d8fc <CString::Replace(char const*, char const*)+0x64>
    d974:	e3a01001 	mov	r1, #1, 0
    d978:	e1a00005 	mov	r0, r5
    d97c:	e0d9a0d1 	ldrsb	sl, [r9], #1
    d980:	ebffff0b 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d984:	e595300c 	ldr	r3, [r5, #12]
    d988:	e1540009 	cmp	r4, r9
    d98c:	e2832001 	add	r2, r3, #1, 0
    d990:	e585200c 	str	r2, [r5, #12]
    d994:	e5c3a000 	strb	sl, [r3]
    d998:	1afffff5 	bne	d974 <CString::Replace(char const*, char const*)+0xdc>
    d99c:	e1a09004 	mov	r9, r4
    d9a0:	eaffffdc 	b	d918 <CString::Replace(char const*, char const*)+0x80>
    d9a4:	e1a01008 	mov	r1, r8
    d9a8:	e1a00005 	mov	r0, r5
    d9ac:	e1a09002 	mov	r9, r2
    d9b0:	e2877001 	add	r7, r7, #1, 0
    d9b4:	ebffffa6 	bl	d854 <CString::PutString(char const*)>
    d9b8:	eaffffcf 	b	d8fc <CString::Replace(char const*, char const*)+0x64>
    d9bc:	e1a00005 	mov	r0, r5
    d9c0:	e1a01009 	mov	r1, r9
    d9c4:	ebffffa2 	bl	d854 <CString::PutString(char const*)>
    d9c8:	e595200c 	ldr	r2, [r5, #12]
    d9cc:	e59f3020 	ldr	r3, [pc, #32]	; d9f4 <CString::Replace(char const*, char const*)+0x15c>
    d9d0:	e5c24000 	strb	r4, [r2]
    d9d4:	e59d0004 	ldr	r0, [sp, #4]
    d9d8:	e58d3000 	str	r3, [sp]
    d9dc:	e3500000 	cmp	r0, #0, 0
    d9e0:	0affffb1 	beq	d8ac <CString::Replace(char const*, char const*)+0x14>
    d9e4:	eb000b6a 	bl	10794 <operator delete[](void*)>
    d9e8:	e1a00007 	mov	r0, r7
    d9ec:	e28dd010 	add	sp, sp, #16, 0
    d9f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d9f4:	00019fc4 	.word	0x00019fc4

0000d9f8 <CString::ReserveSpace(unsigned int)>:
    d9f8:	e3510000 	cmp	r1, #0, 0
    d9fc:	012fff1e 	bxeq	lr
    da00:	eafffeeb 	b	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000da04 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    da04:	e1510002 	cmp	r1, r2
    da08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    da0c:	e1a05001 	mov	r5, r1
    da10:	e1a06002 	mov	r6, r2
    da14:	e1a08000 	mov	r8, r0
    da18:	e1a07003 	mov	r7, r3
    da1c:	23a0a001 	movcs	sl, #1, 0
    da20:	3a000023 	bcc	dab4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb0>
    da24:	e00a0a96 	mul	sl, r6, sl
    da28:	e1a00005 	mov	r0, r5
    da2c:	e1a0100a 	mov	r1, sl
    da30:	eb002bb5 	bl	1890c <__udivsi3>
    da34:	e1500006 	cmp	r0, r6
    da38:	e1a04000 	mov	r4, r0
    da3c:	2afffff8 	bcs	da24 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    da40:	e3570000 	cmp	r7, #0, 0
    da44:	13a09037 	movne	r9, #55, 0	; 0x37
    da48:	03a09057 	moveq	r9, #87, 0	; 0x57
    da4c:	e1a07008 	mov	r7, r8
    da50:	ea000003 	b	da64 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
    da54:	e1a01000 	mov	r1, r0
    da58:	e1a00005 	mov	r0, r5
    da5c:	eb002baa 	bl	1890c <__udivsi3>
    da60:	e1a04000 	mov	r4, r0
    da64:	e1a00005 	mov	r0, r5
    da68:	e1a0100a 	mov	r1, sl
    da6c:	eb002c21 	bl	18af8 <__aeabi_uidivmod>
    da70:	e3540009 	cmp	r4, #9, 0
    da74:	e2840030 	add	r0, r4, #48, 0	; 0x30
    da78:	80894004 	addhi	r4, r9, r4
    da7c:	96af4070 	sxtbls	r4, r0
    da80:	86af4074 	sxtbhi	r4, r4
    da84:	e1a0000a 	mov	r0, sl
    da88:	e1a05001 	mov	r5, r1
    da8c:	e4c74001 	strb	r4, [r7], #1
    da90:	e1a01006 	mov	r1, r6
    da94:	eb002b9c 	bl	1890c <__udivsi3>
    da98:	e15a0006 	cmp	sl, r6
    da9c:	e1a0a000 	mov	sl, r0
    daa0:	2affffeb 	bcs	da54 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    daa4:	e3a03000 	mov	r3, #0, 0
    daa8:	e1a00008 	mov	r0, r8
    daac:	e5c73000 	strb	r3, [r7]
    dab0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dab4:	e1a04001 	mov	r4, r1
    dab8:	e3a0a001 	mov	sl, #1, 0
    dabc:	eaffffdf 	b	da40 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000dac0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    dac0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dac4:	e3a0b000 	mov	fp, #0, 0
    dac8:	e1a08002 	mov	r8, r2
    dacc:	e24dd01c 	sub	sp, sp, #28, 0
    dad0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
    dad4:	e15b0003 	cmp	fp, r3
    dad8:	e1a09003 	mov	r9, r3
    dadc:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
    dae0:	01520008 	cmpeq	r2, r8
    dae4:	e1a0a002 	mov	sl, r2
    dae8:	93a06001 	movls	r6, #1, 0
    daec:	93a07000 	movls	r7, #0, 0
    daf0:	e58d0014 	str	r0, [sp, #20]
    daf4:	e58d3004 	str	r3, [sp, #4]
    daf8:	8a000041 	bhi	dc04 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x144>
    dafc:	e0030b96 	mul	r3, r6, fp
    db00:	e023379a 	mla	r3, sl, r7, r3
    db04:	e0876a96 	umull	r6, r7, r6, sl
    db08:	e0837007 	add	r7, r3, r7
    db0c:	e1a02006 	mov	r2, r6
    db10:	e1a03007 	mov	r3, r7
    db14:	e1a00008 	mov	r0, r8
    db18:	e1a01009 	mov	r1, r9
    db1c:	eb002cc3 	bl	18e30 <__aeabi_uldivmod>
    db20:	e15b0001 	cmp	fp, r1
    db24:	015a0000 	cmpeq	sl, r0
    db28:	e1a04000 	mov	r4, r0
    db2c:	e1a05001 	mov	r5, r1
    db30:	9afffff1 	bls	dafc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
    db34:	e59d3004 	ldr	r3, [sp, #4]
    db38:	e3530000 	cmp	r3, #0, 0
    db3c:	13a03037 	movne	r3, #55, 0	; 0x37
    db40:	03a03057 	moveq	r3, #87, 0	; 0x57
    db44:	e58d3010 	str	r3, [sp, #16]
    db48:	e59d3014 	ldr	r3, [sp, #20]
    db4c:	e58d3004 	str	r3, [sp, #4]
    db50:	ea00000a 	b	db80 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xc0>
    db54:	e58d000c 	str	r0, [sp, #12]
    db58:	e58d1008 	str	r1, [sp, #8]
    db5c:	e1a00008 	mov	r0, r8
    db60:	e1a01009 	mov	r1, r9
    db64:	eb002cb1 	bl	18e30 <__aeabi_uldivmod>
    db68:	e59d200c 	ldr	r2, [sp, #12]
    db6c:	e59d3008 	ldr	r3, [sp, #8]
    db70:	e1a04000 	mov	r4, r0
    db74:	e1a06002 	mov	r6, r2
    db78:	e1a05001 	mov	r5, r1
    db7c:	e1a07003 	mov	r7, r3
    db80:	e1a00008 	mov	r0, r8
    db84:	e1a01009 	mov	r1, r9
    db88:	e1a02006 	mov	r2, r6
    db8c:	e1a03007 	mov	r3, r7
    db90:	eb002ca6 	bl	18e30 <__aeabi_uldivmod>
    db94:	e3550000 	cmp	r5, #0, 0
    db98:	03540009 	cmpeq	r4, #9, 0
    db9c:	e1a09003 	mov	r9, r3
    dba0:	859d3010 	ldrhi	r3, [sp, #16]
    dba4:	e1a08002 	mov	r8, r2
    dba8:	e2842030 	add	r2, r4, #48, 0	; 0x30
    dbac:	80834004 	addhi	r4, r3, r4
    dbb0:	e59d3004 	ldr	r3, [sp, #4]
    dbb4:	96af4072 	sxtbls	r4, r2
    dbb8:	86af4074 	sxtbhi	r4, r4
    dbbc:	e4c34001 	strb	r4, [r3], #1
    dbc0:	e1a0200a 	mov	r2, sl
    dbc4:	e58d3004 	str	r3, [sp, #4]
    dbc8:	e1a00006 	mov	r0, r6
    dbcc:	e1a0300b 	mov	r3, fp
    dbd0:	e1a01007 	mov	r1, r7
    dbd4:	eb002c95 	bl	18e30 <__aeabi_uldivmod>
    dbd8:	e15b0007 	cmp	fp, r7
    dbdc:	015a0006 	cmpeq	sl, r6
    dbe0:	e1a02000 	mov	r2, r0
    dbe4:	e1a03001 	mov	r3, r1
    dbe8:	9affffd9 	bls	db54 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x94>
    dbec:	e3a03000 	mov	r3, #0, 0
    dbf0:	e59d0014 	ldr	r0, [sp, #20]
    dbf4:	e59d2004 	ldr	r2, [sp, #4]
    dbf8:	e5c23000 	strb	r3, [r2]
    dbfc:	e28dd01c 	add	sp, sp, #28, 0
    dc00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc04:	e1a04008 	mov	r4, r8
    dc08:	e1a05009 	mov	r5, r9
    dc0c:	e3a06001 	mov	r6, #1, 0
    dc10:	e3a07000 	mov	r7, #0, 0
    dc14:	eaffffc6 	b	db34 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

0000dc18 <CString::ftoa(char*, double, unsigned int)>:
    dc18:	eeb50bc0 	vcmpe.f64	d0, #0.0
    dc1c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    dc20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc24:	ed9f7b97 	vldr	d7, [pc, #604]	; de88 <CString::ftoa(char*, double, unsigned int)+0x270>
    dc28:	ed2d8b02 	vpush	{d8}
    dc2c:	eeb08b40 	vmov.f64	d8, d0
    dc30:	4eb18b40 	vnegmi.f64	d8, d0
    dc34:	43a0302d 	movmi	r3, #45, 0	; 0x2d
    dc38:	e1a0b000 	mov	fp, r0
    dc3c:	eeb48bc7 	vcmpe.f64	d8, d7
    dc40:	44cb3001 	strbmi	r3, [fp], #1
    dc44:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    dc48:	e24dd01c 	sub	sp, sp, #28, 0
    dc4c:	e1a09000 	mov	r9, r0
    dc50:	e58d1004 	str	r1, [sp, #4]
    dc54:	ca00007c 	bgt	de4c <CString::ftoa(char*, double, unsigned int)+0x234>
    dc58:	eefc7bc8 	vcvt.u32.f64	s15, d8
    dc5c:	ee177a90 	vmov	r7, s15
    dc60:	e3570009 	cmp	r7, #9, 0
    dc64:	83a04001 	movhi	r4, #1, 0
    dc68:	9a00007e 	bls	de68 <CString::ftoa(char*, double, unsigned int)+0x250>
    dc6c:	e0844104 	add	r4, r4, r4, lsl #2
    dc70:	e1a04084 	lsl	r4, r4, #1
    dc74:	e1a01004 	mov	r1, r4
    dc78:	e1a00007 	mov	r0, r7
    dc7c:	eb002b22 	bl	1890c <__udivsi3>
    dc80:	e3500009 	cmp	r0, #9, 0
    dc84:	e1a05000 	mov	r5, r0
    dc88:	8afffff7 	bhi	dc6c <CString::ftoa(char*, double, unsigned int)+0x54>
    dc8c:	e1a0600b 	mov	r6, fp
    dc90:	e1a0a007 	mov	sl, r7
    dc94:	e59f81fc 	ldr	r8, [pc, #508]	; de98 <CString::ftoa(char*, double, unsigned int)+0x280>
    dc98:	ea000003 	b	dcac <CString::ftoa(char*, double, unsigned int)+0x94>
    dc9c:	e1a01004 	mov	r1, r4
    dca0:	e1a0000a 	mov	r0, sl
    dca4:	eb002b18 	bl	1890c <__udivsi3>
    dca8:	e1a05000 	mov	r5, r0
    dcac:	e1a0000a 	mov	r0, sl
    dcb0:	e1a01004 	mov	r1, r4
    dcb4:	eb002b8f 	bl	18af8 <__aeabi_uidivmod>
    dcb8:	e1a0a001 	mov	sl, r1
    dcbc:	e0813498 	umull	r3, r1, r8, r4
    dcc0:	e3550009 	cmp	r5, #9, 0
    dcc4:	e2850030 	add	r0, r5, #48, 0	; 0x30
    dcc8:	82855057 	addhi	r5, r5, #87, 0	; 0x57
    dccc:	96af5070 	sxtbls	r5, r0
    dcd0:	86af5075 	sxtbhi	r5, r5
    dcd4:	e3540009 	cmp	r4, #9, 0
    dcd8:	e4c65001 	strb	r5, [r6], #1
    dcdc:	e1a041a1 	lsr	r4, r1, #3
    dce0:	8affffed 	bhi	dc9c <CString::ftoa(char*, double, unsigned int)+0x84>
    dce4:	e3a03000 	mov	r3, #0, 0
    dce8:	e59d4004 	ldr	r4, [sp, #4]
    dcec:	e5c63000 	strb	r3, [r6]
    dcf0:	e1540003 	cmp	r4, r3
    dcf4:	1a000003 	bne	dd08 <CString::ftoa(char*, double, unsigned int)+0xf0>
    dcf8:	e1a00009 	mov	r0, r9
    dcfc:	e28dd01c 	add	sp, sp, #28, 0
    dd00:	ecbd8b02 	vpop	{d8}
    dd04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd08:	e1a0000b 	mov	r0, fp
    dd0c:	eb00078c 	bl	fb44 <strlen>
    dd10:	e3a0302e 	mov	r3, #46, 0	; 0x2e
    dd14:	e3540009 	cmp	r4, #9, 0
    dd18:	e08b1000 	add	r1, fp, r0
    dd1c:	e7cb3000 	strb	r3, [fp, r0]
    dd20:	31a0b004 	movcc	fp, r4
    dd24:	23a0b009 	movcs	fp, #9, 0
    dd28:	e3540001 	cmp	r4, #1, 0
    dd2c:	e58d1004 	str	r1, [sp, #4]
    dd30:	e281a001 	add	sl, r1, #1, 0
    dd34:	9a000051 	bls	de80 <CString::ftoa(char*, double, unsigned int)+0x268>
    dd38:	e3a02002 	mov	r2, #2, 0
    dd3c:	e3a0300a 	mov	r3, #10, 0
    dd40:	e2822001 	add	r2, r2, #1, 0
    dd44:	e0833103 	add	r3, r3, r3, lsl #2
    dd48:	e152000b 	cmp	r2, fp
    dd4c:	e1a03083 	lsl	r3, r3, #1
    dd50:	9afffffa 	bls	dd40 <CString::ftoa(char*, double, unsigned int)+0x128>
    dd54:	ee073a90 	vmov	s15, r3
    dd58:	eeb87b67 	vcvt.f64.u32	d7, s15
    dd5c:	ee067a90 	vmov	s13, r7
    dd60:	eeb86b66 	vcvt.f64.u32	d6, s13
    dd64:	ee386b46 	vsub.f64	d6, d8, d6
    dd68:	ee267b07 	vmul.f64	d7, d6, d7
    dd6c:	eefc7bc7 	vcvt.u32.f64	s15, d7
    dd70:	ee178a90 	vmov	r8, s15
    dd74:	e3580009 	cmp	r8, #9, 0
    dd78:	83a04001 	movhi	r4, #1, 0
    dd7c:	9a00003c 	bls	de74 <CString::ftoa(char*, double, unsigned int)+0x25c>
    dd80:	e0844104 	add	r4, r4, r4, lsl #2
    dd84:	e1a04084 	lsl	r4, r4, #1
    dd88:	e1a01004 	mov	r1, r4
    dd8c:	e1a00008 	mov	r0, r8
    dd90:	eb002add 	bl	1890c <__udivsi3>
    dd94:	e3500009 	cmp	r0, #9, 0
    dd98:	e1a05000 	mov	r5, r0
    dd9c:	8afffff7 	bhi	dd80 <CString::ftoa(char*, double, unsigned int)+0x168>
    dda0:	e59f70f0 	ldr	r7, [pc, #240]	; de98 <CString::ftoa(char*, double, unsigned int)+0x280>
    dda4:	e28d600c 	add	r6, sp, #12, 0
    dda8:	ea000003 	b	ddbc <CString::ftoa(char*, double, unsigned int)+0x1a4>
    ddac:	e1a01004 	mov	r1, r4
    ddb0:	e1a00008 	mov	r0, r8
    ddb4:	eb002ad4 	bl	1890c <__udivsi3>
    ddb8:	e1a05000 	mov	r5, r0
    ddbc:	e1a00008 	mov	r0, r8
    ddc0:	e1a01004 	mov	r1, r4
    ddc4:	eb002b4b 	bl	18af8 <__aeabi_uidivmod>
    ddc8:	e1a08001 	mov	r8, r1
    ddcc:	e0813497 	umull	r3, r1, r7, r4
    ddd0:	e3550009 	cmp	r5, #9, 0
    ddd4:	e2852030 	add	r2, r5, #48, 0	; 0x30
    ddd8:	82855057 	addhi	r5, r5, #87, 0	; 0x57
    dddc:	96af5072 	sxtbls	r5, r2
    dde0:	86af5075 	sxtbhi	r5, r5
    dde4:	e3540009 	cmp	r4, #9, 0
    dde8:	e4c65001 	strb	r5, [r6], #1
    ddec:	e1a041a1 	lsr	r4, r1, #3
    ddf0:	8affffed 	bhi	ddac <CString::ftoa(char*, double, unsigned int)+0x194>
    ddf4:	e3a03000 	mov	r3, #0, 0
    ddf8:	e28d000c 	add	r0, sp, #12, 0
    ddfc:	e5c63000 	strb	r3, [r6]
    de00:	eb00074f 	bl	fb44 <strlen>
    de04:	e05b0000 	subs	r0, fp, r0
    de08:	0a000008 	beq	de30 <CString::ftoa(char*, double, unsigned int)+0x218>
    de0c:	e1a0300a 	mov	r3, sl
    de10:	e3a02030 	mov	r2, #48, 0	; 0x30
    de14:	e59dc004 	ldr	ip, [sp, #4]
    de18:	e2801001 	add	r1, r0, #1, 0
    de1c:	e08c8001 	add	r8, ip, r1
    de20:	e4c32001 	strb	r2, [r3], #1
    de24:	e1530008 	cmp	r3, r8
    de28:	1afffffc 	bne	de20 <CString::ftoa(char*, double, unsigned int)+0x208>
    de2c:	e08aa000 	add	sl, sl, r0
    de30:	e1a0000a 	mov	r0, sl
    de34:	e28d100c 	add	r1, sp, #12, 0
    de38:	eb0007e5 	bl	fdd4 <strcpy>
    de3c:	e1a00009 	mov	r0, r9
    de40:	e28dd01c 	add	sp, sp, #28, 0
    de44:	ecbd8b02 	vpop	{d8}
    de48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de4c:	e1a0000b 	mov	r0, fp
    de50:	e59f1044 	ldr	r1, [pc, #68]	; de9c <CString::ftoa(char*, double, unsigned int)+0x284>
    de54:	eb0007de 	bl	fdd4 <strcpy>
    de58:	e1a00009 	mov	r0, r9
    de5c:	e28dd01c 	add	sp, sp, #28, 0
    de60:	ecbd8b02 	vpop	{d8}
    de64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de68:	ee175a90 	vmov	r5, s15
    de6c:	e3a04001 	mov	r4, #1, 0
    de70:	eaffff85 	b	dc8c <CString::ftoa(char*, double, unsigned int)+0x74>
    de74:	ee175a90 	vmov	r5, s15
    de78:	e3a04001 	mov	r4, #1, 0
    de7c:	eaffffc7 	b	dda0 <CString::ftoa(char*, double, unsigned int)+0x188>
    de80:	ed9f7b02 	vldr	d7, [pc, #8]	; de90 <CString::ftoa(char*, double, unsigned int)+0x278>
    de84:	eaffffb4 	b	dd5c <CString::ftoa(char*, double, unsigned int)+0x144>
    de88:	ffe00000 	.word	0xffe00000
    de8c:	41efffff 	.word	0x41efffff
    de90:	00000000 	.word	0x00000000
    de94:	40240000 	.word	0x40240000
    de98:	cccccccd 	.word	0xcccccccd
    de9c:	00019fa8 	.word	0x00019fa8

0000dea0 <CString::FormatV(char const*, std::__va_list)>:
    dea0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dea4:	ed2d8b02 	vpush	{d8}
    dea8:	e24dd064 	sub	sp, sp, #100, 0	; 0x64
    deac:	e58d0028 	str	r0, [sp, #40]	; 0x28
    deb0:	e5900004 	ldr	r0, [r0, #4]
    deb4:	e1a0b001 	mov	fp, r1
    deb8:	e3500000 	cmp	r0, #0, 0
    debc:	e58d2018 	str	r2, [sp, #24]
    dec0:	0a000000 	beq	dec8 <CString::FormatV(char const*, std::__va_list)+0x28>
    dec4:	eb000a32 	bl	10794 <operator delete[](void*)>
    dec8:	e3a00040 	mov	r0, #64, 0	; 0x40
    decc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    ded0:	e5850008 	str	r0, [r5, #8]
    ded4:	eb000a27 	bl	10778 <operator new[](unsigned int)>
    ded8:	e5850004 	str	r0, [r5, #4]
    dedc:	e585000c 	str	r0, [r5, #12]
    dee0:	e1db40d0 	ldrsb	r4, [fp]
    dee4:	e3540000 	cmp	r4, #0, 0
    dee8:	0a00006b 	beq	e09c <CString::FormatV(char const*, std::__va_list)+0x1fc>
    deec:	e3540025 	cmp	r4, #37, 0	; 0x25
    def0:	1a00005c 	bne	e068 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    def4:	e1db30d1 	ldrsb	r3, [fp, #1]
    def8:	e3530025 	cmp	r3, #37, 0	; 0x25
    defc:	0a00006b 	beq	e0b0 <CString::FormatV(char const*, std::__va_list)+0x210>
    df00:	e3530023 	cmp	r3, #35, 0	; 0x23
    df04:	01db30d2 	ldrsbeq	r3, [fp, #2]
    df08:	13a00000 	movne	r0, #0, 0
    df0c:	028bb002 	addeq	fp, fp, #2, 0
    df10:	03a00001 	moveq	r0, #1, 0
    df14:	128bb001 	addne	fp, fp, #1, 0
    df18:	e353002d 	cmp	r3, #45, 0	; 0x2d
    df1c:	03a02001 	moveq	r2, #1, 0
    df20:	13a02000 	movne	r2, #0, 0
    df24:	01db30d1 	ldrsbeq	r3, [fp, #1]
    df28:	058d201c 	streq	r2, [sp, #28]
    df2c:	008bb002 	addeq	fp, fp, r2
    df30:	158d201c 	strne	r2, [sp, #28]
    df34:	e3530030 	cmp	r3, #48, 0	; 0x30
    df38:	03a02001 	moveq	r2, #1, 0
    df3c:	13a02000 	movne	r2, #0, 0
    df40:	01db30d1 	ldrsbeq	r3, [fp, #1]
    df44:	058d2020 	streq	r2, [sp, #32]
    df48:	008bb002 	addeq	fp, fp, r2
    df4c:	158d2020 	strne	r2, [sp, #32]
    df50:	e2432030 	sub	r2, r3, #48, 0	; 0x30
    df54:	e6ef2072 	uxtb	r2, r2
    df58:	e3520009 	cmp	r2, #9, 0
    df5c:	e3a04000 	mov	r4, #0, 0
    df60:	8a000007 	bhi	df84 <CString::FormatV(char const*, std::__va_list)+0xe4>
    df64:	e0844104 	add	r4, r4, r4, lsl #2
    df68:	e0834084 	add	r4, r3, r4, lsl #1
    df6c:	e1fb30d1 	ldrsb	r3, [fp, #1]!
    df70:	e2444030 	sub	r4, r4, #48, 0	; 0x30
    df74:	e2432030 	sub	r2, r3, #48, 0	; 0x30
    df78:	e6ef2072 	uxtb	r2, r2
    df7c:	e3520009 	cmp	r2, #9, 0
    df80:	9afffff7 	bls	df64 <CString::FormatV(char const*, std::__va_list)+0xc4>
    df84:	e353002e 	cmp	r3, #46, 0	; 0x2e
    df88:	0a000051 	beq	e0d4 <CString::FormatV(char const*, std::__va_list)+0x234>
    df8c:	e3a01006 	mov	r1, #6, 0
    df90:	e1dba0d0 	ldrsb	sl, [fp]
    df94:	e35a006c 	cmp	sl, #108, 0	; 0x6c
    df98:	13a03000 	movne	r3, #0, 0
    df9c:	11a06003 	movne	r6, r3
    dfa0:	158d3004 	strne	r3, [sp, #4]
    dfa4:	1a00000a 	bne	dfd4 <CString::FormatV(char const*, std::__va_list)+0x134>
    dfa8:	e1dba0d1 	ldrsb	sl, [fp, #1]
    dfac:	e35a006c 	cmp	sl, #108, 0	; 0x6c
    dfb0:	03a03001 	moveq	r3, #1, 0
    dfb4:	13a03000 	movne	r3, #0, 0
    dfb8:	03a06000 	moveq	r6, #0, 0
    dfbc:	13a06001 	movne	r6, #1, 0
    dfc0:	01dba0d2 	ldrsbeq	sl, [fp, #2]
    dfc4:	008bb003 	addeq	fp, fp, r3
    dfc8:	058d3004 	streq	r3, [sp, #4]
    dfcc:	158d3004 	strne	r3, [sp, #4]
    dfd0:	e28bb001 	add	fp, fp, #1, 0
    dfd4:	e24a3058 	sub	r3, sl, #88, 0	; 0x58
    dfd8:	e3530020 	cmp	r3, #32, 0
    dfdc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    dfe0:	ea00004b 	b	e114 <CString::FormatV(char const*, std::__va_list)+0x274>
    dfe4:	0000e144 	.word	0x0000e144
    dfe8:	0000e114 	.word	0x0000e114
    dfec:	0000e114 	.word	0x0000e114
    dff0:	0000e114 	.word	0x0000e114
    dff4:	0000e114 	.word	0x0000e114
    dff8:	0000e114 	.word	0x0000e114
    dffc:	0000e114 	.word	0x0000e114
    e000:	0000e114 	.word	0x0000e114
    e004:	0000e114 	.word	0x0000e114
    e008:	0000e114 	.word	0x0000e114
    e00c:	0000e114 	.word	0x0000e114
    e010:	0000e650 	.word	0x0000e650
    e014:	0000e330 	.word	0x0000e330
    e018:	0000e114 	.word	0x0000e114
    e01c:	0000e694 	.word	0x0000e694
    e020:	0000e114 	.word	0x0000e114
    e024:	0000e114 	.word	0x0000e114
    e028:	0000e330 	.word	0x0000e330
    e02c:	0000e114 	.word	0x0000e114
    e030:	0000e114 	.word	0x0000e114
    e034:	0000e114 	.word	0x0000e114
    e038:	0000e114 	.word	0x0000e114
    e03c:	0000e114 	.word	0x0000e114
    e040:	0000e558 	.word	0x0000e558
    e044:	0000e144 	.word	0x0000e144
    e048:	0000e114 	.word	0x0000e114
    e04c:	0000e114 	.word	0x0000e114
    e050:	0000e51c 	.word	0x0000e51c
    e054:	0000e114 	.word	0x0000e114
    e058:	0000e8d0 	.word	0x0000e8d0
    e05c:	0000e114 	.word	0x0000e114
    e060:	0000e114 	.word	0x0000e114
    e064:	0000e144 	.word	0x0000e144
    e068:	e3a01001 	mov	r1, #1, 0
    e06c:	e1a00005 	mov	r0, r5
    e070:	ebfffd4f 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e074:	e595300c 	ldr	r3, [r5, #12]
    e078:	e2832001 	add	r2, r3, #1, 0
    e07c:	e585200c 	str	r2, [r5, #12]
    e080:	e5c34000 	strb	r4, [r3]
    e084:	e28bb001 	add	fp, fp, #1, 0
    e088:	e1db40d0 	ldrsb	r4, [fp]
    e08c:	e3540000 	cmp	r4, #0, 0
    e090:	1affff95 	bne	deec <CString::FormatV(char const*, std::__va_list)+0x4c>
    e094:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    e098:	e593000c 	ldr	r0, [r3, #12]
    e09c:	e3a03000 	mov	r3, #0, 0
    e0a0:	e5c03000 	strb	r3, [r0]
    e0a4:	e28dd064 	add	sp, sp, #100, 0	; 0x64
    e0a8:	ecbd8b02 	vpop	{d8}
    e0ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0b0:	e3a01001 	mov	r1, #1, 0
    e0b4:	e1a00005 	mov	r0, r5
    e0b8:	ebfffd3d 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e0bc:	e595300c 	ldr	r3, [r5, #12]
    e0c0:	e28bb002 	add	fp, fp, #2, 0
    e0c4:	e2832001 	add	r2, r3, #1, 0
    e0c8:	e585200c 	str	r2, [r5, #12]
    e0cc:	e5c34000 	strb	r4, [r3]
    e0d0:	eaffffec 	b	e088 <CString::FormatV(char const*, std::__va_list)+0x1e8>
    e0d4:	e1dba0d1 	ldrsb	sl, [fp, #1]
    e0d8:	e3a01000 	mov	r1, #0, 0
    e0dc:	e24a3030 	sub	r3, sl, #48, 0	; 0x30
    e0e0:	e6ef3073 	uxtb	r3, r3
    e0e4:	e3530009 	cmp	r3, #9, 0
    e0e8:	e28bb001 	add	fp, fp, #1, 0
    e0ec:	8affffa8 	bhi	df94 <CString::FormatV(char const*, std::__va_list)+0xf4>
    e0f0:	e0811101 	add	r1, r1, r1, lsl #2
    e0f4:	e08a1081 	add	r1, sl, r1, lsl #1
    e0f8:	e1fba0d1 	ldrsb	sl, [fp, #1]!
    e0fc:	e2411030 	sub	r1, r1, #48, 0	; 0x30
    e100:	e24a3030 	sub	r3, sl, #48, 0	; 0x30
    e104:	e6ef3073 	uxtb	r3, r3
    e108:	e3530009 	cmp	r3, #9, 0
    e10c:	9afffff7 	bls	e0f0 <CString::FormatV(char const*, std::__va_list)+0x250>
    e110:	eaffff9f 	b	df94 <CString::FormatV(char const*, std::__va_list)+0xf4>
    e114:	e3a01001 	mov	r1, #1, 0
    e118:	e1a00005 	mov	r0, r5
    e11c:	ebfffd24 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e120:	e3a01001 	mov	r1, #1, 0
    e124:	e3a02025 	mov	r2, #37, 0	; 0x25
    e128:	e595300c 	ldr	r3, [r5, #12]
    e12c:	e0830001 	add	r0, r3, r1
    e130:	e585000c 	str	r0, [r5, #12]
    e134:	e5c32000 	strb	r2, [r3]
    e138:	e1a00005 	mov	r0, r5
    e13c:	e1db40d0 	ldrsb	r4, [fp]
    e140:	eaffffca 	b	e070 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    e144:	e3500000 	cmp	r0, #0, 0
    e148:	03a08010 	moveq	r8, #16, 0
    e14c:	0a000007 	beq	e170 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    e150:	e3a08010 	mov	r8, #16, 0
    e154:	e59f39cc 	ldr	r3, [pc, #2508]	; eb28 <CString::FormatV(char const*, std::__va_list)+0xc88>
    e158:	e35a0058 	cmp	sl, #88, 0	; 0x58
    e15c:	e59f19c8 	ldr	r1, [pc, #2504]	; eb2c <CString::FormatV(char const*, std::__va_list)+0xc8c>
    e160:	e1a00005 	mov	r0, r5
    e164:	01a01003 	moveq	r1, r3
    e168:	ebfffdb9 	bl	d854 <CString::PutString(char const*)>
    e16c:	e1dba0d0 	ldrsb	sl, [fp]
    e170:	e59d3004 	ldr	r3, [sp, #4]
    e174:	e3530000 	cmp	r3, #0, 0
    e178:	0a000106 	beq	e598 <CString::FormatV(char const*, std::__va_list)+0x6f8>
    e17c:	e3a01000 	mov	r1, #0, 0
    e180:	e1a00008 	mov	r0, r8
    e184:	e59d3018 	ldr	r3, [sp, #24]
    e188:	e1cd01f0 	strd	r0, [sp, #16]
    e18c:	e2833007 	add	r3, r3, #7, 0
    e190:	e3c3c007 	bic	ip, r3, #7, 0
    e194:	e0cc20d8 	ldrd	r2, [ip], #8
    e198:	e1530001 	cmp	r3, r1
    e19c:	01520008 	cmpeq	r2, r8
    e1a0:	e1cd20f8 	strd	r2, [sp, #8]
    e1a4:	e58dc018 	str	ip, [sp, #24]
    e1a8:	3a000239 	bcc	ea94 <CString::FormatV(char const*, std::__va_list)+0xbf4>
    e1ac:	e58da004 	str	sl, [sp, #4]
    e1b0:	e58d4024 	str	r4, [sp, #36]	; 0x24
    e1b4:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    e1b8:	e58db030 	str	fp, [sp, #48]	; 0x30
    e1bc:	e3a08001 	mov	r8, #1, 0
    e1c0:	e3a09000 	mov	r9, #0, 0
    e1c4:	e1a04000 	mov	r4, r0
    e1c8:	e1a05001 	mov	r5, r1
    e1cc:	e1a0a002 	mov	sl, r2
    e1d0:	e1a0b003 	mov	fp, r3
    e1d4:	e0030598 	mul	r3, r8, r5
    e1d8:	e0233994 	mla	r3, r4, r9, r3
    e1dc:	e0898498 	umull	r8, r9, r8, r4
    e1e0:	e0839009 	add	r9, r3, r9
    e1e4:	e1a02008 	mov	r2, r8
    e1e8:	e1a03009 	mov	r3, r9
    e1ec:	e1a0000a 	mov	r0, sl
    e1f0:	e1a0100b 	mov	r1, fp
    e1f4:	eb002b0d 	bl	18e30 <__aeabi_uldivmod>
    e1f8:	e1510005 	cmp	r1, r5
    e1fc:	01500004 	cmpeq	r0, r4
    e200:	e1a06000 	mov	r6, r0
    e204:	e1a07001 	mov	r7, r1
    e208:	2afffff1 	bcs	e1d4 <CString::FormatV(char const*, std::__va_list)+0x334>
    e20c:	e59da004 	ldr	sl, [sp, #4]
    e210:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    e214:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
    e218:	e59db030 	ldr	fp, [sp, #48]	; 0x30
    e21c:	e35a0058 	cmp	sl, #88, 0	; 0x58
    e220:	13a03057 	movne	r3, #87, 0	; 0x57
    e224:	03a03037 	moveq	r3, #55, 0	; 0x37
    e228:	e28da03c 	add	sl, sp, #60, 0	; 0x3c
    e22c:	ee08aa10 	vmov	s16, sl
    e230:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    e234:	e58da004 	str	sl, [sp, #4]
    e238:	e58d5030 	str	r5, [sp, #48]	; 0x30
    e23c:	e58db034 	str	fp, [sp, #52]	; 0x34
    e240:	e58d3024 	str	r3, [sp, #36]	; 0x24
    e244:	e1cd40d8 	ldrd	r4, [sp, #8]
    e248:	e1cda1d0 	ldrd	sl, [sp, #16]
    e24c:	ea00000a 	b	e27c <CString::FormatV(char const*, std::__va_list)+0x3dc>
    e250:	e58d0010 	str	r0, [sp, #16]
    e254:	e58d1008 	str	r1, [sp, #8]
    e258:	e1a00004 	mov	r0, r4
    e25c:	e1a01005 	mov	r1, r5
    e260:	eb002af2 	bl	18e30 <__aeabi_uldivmod>
    e264:	e59d2010 	ldr	r2, [sp, #16]
    e268:	e59d3008 	ldr	r3, [sp, #8]
    e26c:	e1a06000 	mov	r6, r0
    e270:	e1a08002 	mov	r8, r2
    e274:	e1a07001 	mov	r7, r1
    e278:	e1a09003 	mov	r9, r3
    e27c:	e1a00004 	mov	r0, r4
    e280:	e1a01005 	mov	r1, r5
    e284:	e1a02008 	mov	r2, r8
    e288:	e1a03009 	mov	r3, r9
    e28c:	eb002ae7 	bl	18e30 <__aeabi_uldivmod>
    e290:	e3570000 	cmp	r7, #0, 0
    e294:	03560009 	cmpeq	r6, #9, 0
    e298:	e1a05003 	mov	r5, r3
    e29c:	859d3024 	ldrhi	r3, [sp, #36]	; 0x24
    e2a0:	e59dc004 	ldr	ip, [sp, #4]
    e2a4:	e1a04002 	mov	r4, r2
    e2a8:	e2862030 	add	r2, r6, #48, 0	; 0x30
    e2ac:	80836006 	addhi	r6, r3, r6
    e2b0:	96af6072 	sxtbls	r6, r2
    e2b4:	86af6076 	sxtbhi	r6, r6
    e2b8:	e1a0200a 	mov	r2, sl
    e2bc:	e1a0300b 	mov	r3, fp
    e2c0:	e4cc6001 	strb	r6, [ip], #1
    e2c4:	e1a00008 	mov	r0, r8
    e2c8:	e1a01009 	mov	r1, r9
    e2cc:	e58dc004 	str	ip, [sp, #4]
    e2d0:	eb002ad6 	bl	18e30 <__aeabi_uldivmod>
    e2d4:	e159000b 	cmp	r9, fp
    e2d8:	0158000a 	cmpeq	r8, sl
    e2dc:	e1a02000 	mov	r2, r0
    e2e0:	e1a03001 	mov	r3, r1
    e2e4:	2affffd9 	bcs	e250 <CString::FormatV(char const*, std::__va_list)+0x3b0>
    e2e8:	e3a03000 	mov	r3, #0, 0
    e2ec:	e59da004 	ldr	sl, [sp, #4]
    e2f0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    e2f4:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    e2f8:	e59db034 	ldr	fp, [sp, #52]	; 0x34
    e2fc:	e5ca3000 	strb	r3, [sl]
    e300:	ee180a10 	vmov	r0, s16
    e304:	eb00060e 	bl	fb44 <strlen>
    e308:	e59d301c 	ldr	r3, [sp, #28]
    e30c:	e1a06000 	mov	r6, r0
    e310:	e3530000 	cmp	r3, #0, 0
    e314:	1a0000fe 	bne	e714 <CString::FormatV(char const*, std::__va_list)+0x874>
    e318:	e1500004 	cmp	r0, r4
    e31c:	3a00010f 	bcc	e760 <CString::FormatV(char const*, std::__va_list)+0x8c0>
    e320:	ee181a10 	vmov	r1, s16
    e324:	e1a00005 	mov	r0, r5
    e328:	ebfffd49 	bl	d854 <CString::PutString(char const*)>
    e32c:	eaffff54 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e330:	e59d3004 	ldr	r3, [sp, #4]
    e334:	e3530000 	cmp	r3, #0, 0
    e338:	e59d3018 	ldr	r3, [sp, #24]
    e33c:	0a000139 	beq	e828 <CString::FormatV(char const*, std::__va_list)+0x988>
    e340:	e2833007 	add	r3, r3, #7, 0
    e344:	e3c31007 	bic	r1, r3, #7, 0
    e348:	e0c120d8 	ldrd	r2, [r1], #8
    e34c:	e3520000 	cmp	r2, #0, 0
    e350:	e1a07003 	mov	r7, r3
    e354:	e2d33000 	sbcs	r3, r3, #0, 0
    e358:	a3a03000 	movge	r3, #0, 0
    e35c:	e1a06002 	mov	r6, r2
    e360:	e58d1018 	str	r1, [sp, #24]
    e364:	a58d3004 	strge	r3, [sp, #4]
    e368:	aa000003 	bge	e37c <CString::FormatV(char const*, std::__va_list)+0x4dc>
    e36c:	e2762000 	rsbs	r2, r6, #0, 0
    e370:	e2e73000 	rsc	r3, r7, #0, 0
    e374:	e1a06002 	mov	r6, r2
    e378:	e1a07003 	mov	r7, r3
    e37c:	e356000a 	cmp	r6, #10, 0
    e380:	e2d71000 	sbcs	r1, r7, #0, 0
    e384:	e1a02006 	mov	r2, r6
    e388:	e1a03007 	mov	r3, r7
    e38c:	e1a08006 	mov	r8, r6
    e390:	e1a09007 	mov	r9, r7
    e394:	ba0001d8 	blt	eafc <CString::FormatV(char const*, std::__va_list)+0xc5c>
    e398:	e58db008 	str	fp, [sp, #8]
    e39c:	e3a06001 	mov	r6, #1, 0
    e3a0:	e3a07000 	mov	r7, #0, 0
    e3a4:	e1a0a002 	mov	sl, r2
    e3a8:	e1a0b003 	mov	fp, r3
    e3ac:	e1a02107 	lsl	r2, r7, #2
    e3b0:	e1a03106 	lsl	r3, r6, #2
    e3b4:	e0933006 	adds	r3, r3, r6
    e3b8:	e1822f26 	orr	r2, r2, r6, lsr #30
    e3bc:	e0a22007 	adc	r2, r2, r7
    e3c0:	e0936003 	adds	r6, r3, r3
    e3c4:	e0a27002 	adc	r7, r2, r2
    e3c8:	e1a03007 	mov	r3, r7
    e3cc:	e1a02006 	mov	r2, r6
    e3d0:	e1a0000a 	mov	r0, sl
    e3d4:	e1a0100b 	mov	r1, fp
    e3d8:	eb002a94 	bl	18e30 <__aeabi_uldivmod>
    e3dc:	e3510000 	cmp	r1, #0, 0
    e3e0:	03500009 	cmpeq	r0, #9, 0
    e3e4:	8afffff0 	bhi	e3ac <CString::FormatV(char const*, std::__va_list)+0x50c>
    e3e8:	e59db008 	ldr	fp, [sp, #8]
    e3ec:	e28d303c 	add	r3, sp, #60, 0	; 0x3c
    e3f0:	e58d4010 	str	r4, [sp, #16]
    e3f4:	e58d5024 	str	r5, [sp, #36]	; 0x24
    e3f8:	ee083a10 	vmov	s16, r3
    e3fc:	e1a0a003 	mov	sl, r3
    e400:	e1a04000 	mov	r4, r0
    e404:	e1a05001 	mov	r5, r1
    e408:	e58db02c 	str	fp, [sp, #44]	; 0x2c
    e40c:	ea000009 	b	e438 <CString::FormatV(char const*, std::__va_list)+0x598>
    e410:	e1a03001 	mov	r3, r1
    e414:	e58d0008 	str	r0, [sp, #8]
    e418:	e1a01009 	mov	r1, r9
    e41c:	e1a00008 	mov	r0, r8
    e420:	eb002a82 	bl	18e30 <__aeabi_uldivmod>
    e424:	e59d2008 	ldr	r2, [sp, #8]
    e428:	e1a04000 	mov	r4, r0
    e42c:	e1a06002 	mov	r6, r2
    e430:	e1a05001 	mov	r5, r1
    e434:	e1a0700b 	mov	r7, fp
    e438:	e1a00008 	mov	r0, r8
    e43c:	e1a01009 	mov	r1, r9
    e440:	e1a02006 	mov	r2, r6
    e444:	e1a03007 	mov	r3, r7
    e448:	eb002a78 	bl	18e30 <__aeabi_uldivmod>
    e44c:	e3550000 	cmp	r5, #0, 0
    e450:	03540009 	cmpeq	r4, #9, 0
    e454:	e2841030 	add	r1, r4, #48, 0	; 0x30
    e458:	82844057 	addhi	r4, r4, #87, 0	; 0x57
    e45c:	96af4071 	sxtbls	r4, r1
    e460:	86af4074 	sxtbhi	r4, r4
    e464:	e1a08002 	mov	r8, r2
    e468:	e1a09003 	mov	r9, r3
    e46c:	e3a0200a 	mov	r2, #10, 0
    e470:	e3a03000 	mov	r3, #0, 0
    e474:	e1a00006 	mov	r0, r6
    e478:	e1a01007 	mov	r1, r7
    e47c:	e4ca4001 	strb	r4, [sl], #1
    e480:	eb002a6a 	bl	18e30 <__aeabi_uldivmod>
    e484:	e3570000 	cmp	r7, #0, 0
    e488:	03560009 	cmpeq	r6, #9, 0
    e48c:	e1a02000 	mov	r2, r0
    e490:	e1a0b001 	mov	fp, r1
    e494:	8affffdd 	bhi	e410 <CString::FormatV(char const*, std::__va_list)+0x570>
    e498:	e3a03000 	mov	r3, #0, 0
    e49c:	e59d4010 	ldr	r4, [sp, #16]
    e4a0:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    e4a4:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
    e4a8:	e5ca3000 	strb	r3, [sl]
    e4ac:	ee180a10 	vmov	r0, s16
    e4b0:	eb0005a3 	bl	fb44 <strlen>
    e4b4:	e59d3004 	ldr	r3, [sp, #4]
    e4b8:	e1a06000 	mov	r6, r0
    e4bc:	e3530000 	cmp	r3, #0, 0
    e4c0:	e59d301c 	ldr	r3, [sp, #28]
    e4c4:	1a0000b6 	bne	e7a4 <CString::FormatV(char const*, std::__va_list)+0x904>
    e4c8:	e3530000 	cmp	r3, #0, 0
    e4cc:	0a00011b 	beq	e940 <CString::FormatV(char const*, std::__va_list)+0xaa0>
    e4d0:	ee181a10 	vmov	r1, s16
    e4d4:	e1a00005 	mov	r0, r5
    e4d8:	ebfffcdd 	bl	d854 <CString::PutString(char const*)>
    e4dc:	e1540006 	cmp	r4, r6
    e4e0:	9afffee7 	bls	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e4e4:	e0444006 	sub	r4, r4, r6
    e4e8:	e1a00005 	mov	r0, r5
    e4ec:	e1a01004 	mov	r1, r4
    e4f0:	ebfffc2f 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e4f4:	e3a00020 	mov	r0, #32, 0
    e4f8:	e2443001 	sub	r3, r4, #1, 0
    e4fc:	e595200c 	ldr	r2, [r5, #12]
    e500:	e2433001 	sub	r3, r3, #1, 0
    e504:	e2821001 	add	r1, r2, #1, 0
    e508:	e3730001 	cmn	r3, #1, 0
    e50c:	e585100c 	str	r1, [r5, #12]
    e510:	e5c20000 	strb	r0, [r2]
    e514:	1afffff8 	bne	e4fc <CString::FormatV(char const*, std::__va_list)+0x65c>
    e518:	eafffed9 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e51c:	e59d7018 	ldr	r7, [sp, #24]
    e520:	e4978004 	ldr	r8, [r7], #4
    e524:	e1a00008 	mov	r0, r8
    e528:	eb000585 	bl	fb44 <strlen>
    e52c:	e59d301c 	ldr	r3, [sp, #28]
    e530:	e1a06000 	mov	r6, r0
    e534:	e3530000 	cmp	r3, #0, 0
    e538:	1a000131 	bne	ea04 <CString::FormatV(char const*, std::__va_list)+0xb64>
    e53c:	e1500004 	cmp	r0, r4
    e540:	3a000142 	bcc	ea50 <CString::FormatV(char const*, std::__va_list)+0xbb0>
    e544:	e1a01008 	mov	r1, r8
    e548:	e1a00005 	mov	r0, r5
    e54c:	e58d7018 	str	r7, [sp, #24]
    e550:	ebfffcbf 	bl	d854 <CString::PutString(char const*)>
    e554:	eafffeca 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e558:	e3500000 	cmp	r0, #0, 0
    e55c:	03a08008 	moveq	r8, #8, 0
    e560:	0affff02 	beq	e170 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    e564:	e3a01001 	mov	r1, #1, 0
    e568:	e1a00005 	mov	r0, r5
    e56c:	ebfffc10 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e570:	e3a02030 	mov	r2, #48, 0	; 0x30
    e574:	e595300c 	ldr	r3, [r5, #12]
    e578:	e3a08008 	mov	r8, #8, 0
    e57c:	e2831001 	add	r1, r3, #1, 0
    e580:	e585100c 	str	r1, [r5, #12]
    e584:	e5c32000 	strb	r2, [r3]
    e588:	e59d3004 	ldr	r3, [sp, #4]
    e58c:	e1dba0d0 	ldrsb	sl, [fp]
    e590:	e3530000 	cmp	r3, #0, 0
    e594:	1afffef8 	bne	e17c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    e598:	e59d2018 	ldr	r2, [sp, #24]
    e59c:	e4929004 	ldr	r9, [r2], #4
    e5a0:	e1580009 	cmp	r8, r9
    e5a4:	e58d2018 	str	r2, [sp, #24]
    e5a8:	8a000136 	bhi	ea88 <CString::FormatV(char const*, std::__va_list)+0xbe8>
    e5ac:	e3a07001 	mov	r7, #1, 0
    e5b0:	e0070798 	mul	r7, r8, r7
    e5b4:	e1a00009 	mov	r0, r9
    e5b8:	e1a01007 	mov	r1, r7
    e5bc:	eb0028d2 	bl	1890c <__udivsi3>
    e5c0:	e1580000 	cmp	r8, r0
    e5c4:	9afffff9 	bls	e5b0 <CString::FormatV(char const*, std::__va_list)+0x710>
    e5c8:	e1a06000 	mov	r6, r0
    e5cc:	e35a0058 	cmp	sl, #88, 0	; 0x58
    e5d0:	13a03057 	movne	r3, #87, 0	; 0x57
    e5d4:	03a03037 	moveq	r3, #55, 0	; 0x37
    e5d8:	e28da03c 	add	sl, sp, #60, 0	; 0x3c
    e5dc:	e58d4004 	str	r4, [sp, #4]
    e5e0:	ee08aa10 	vmov	s16, sl
    e5e4:	e1a04007 	mov	r4, r7
    e5e8:	e1a07003 	mov	r7, r3
    e5ec:	ea000003 	b	e600 <CString::FormatV(char const*, std::__va_list)+0x760>
    e5f0:	e1a01000 	mov	r1, r0
    e5f4:	e1a00009 	mov	r0, r9
    e5f8:	eb0028c3 	bl	1890c <__udivsi3>
    e5fc:	e1a06000 	mov	r6, r0
    e600:	e1a00009 	mov	r0, r9
    e604:	e1a01004 	mov	r1, r4
    e608:	eb00293a 	bl	18af8 <__aeabi_uidivmod>
    e60c:	e3560009 	cmp	r6, #9, 0
    e610:	e2862030 	add	r2, r6, #48, 0	; 0x30
    e614:	80876006 	addhi	r6, r7, r6
    e618:	96af6072 	sxtbls	r6, r2
    e61c:	86af6076 	sxtbhi	r6, r6
    e620:	e1a00004 	mov	r0, r4
    e624:	e1a09001 	mov	r9, r1
    e628:	e4ca6001 	strb	r6, [sl], #1
    e62c:	e1a01008 	mov	r1, r8
    e630:	eb0028b5 	bl	1890c <__udivsi3>
    e634:	e1580004 	cmp	r8, r4
    e638:	e1a04000 	mov	r4, r0
    e63c:	9affffeb 	bls	e5f0 <CString::FormatV(char const*, std::__va_list)+0x750>
    e640:	e3a03000 	mov	r3, #0, 0
    e644:	e59d4004 	ldr	r4, [sp, #4]
    e648:	e5ca3000 	strb	r3, [sl]
    e64c:	eaffff2b 	b	e300 <CString::FormatV(char const*, std::__va_list)+0x460>
    e650:	e59d7018 	ldr	r7, [sp, #24]
    e654:	e59d301c 	ldr	r3, [sp, #28]
    e658:	e4976004 	ldr	r6, [r7], #4
    e65c:	e3530000 	cmp	r3, #0, 0
    e660:	e6af6076 	sxtb	r6, r6
    e664:	1a0000c8 	bne	e98c <CString::FormatV(char const*, std::__va_list)+0xaec>
    e668:	e3540001 	cmp	r4, #1, 0
    e66c:	8a000099 	bhi	e8d8 <CString::FormatV(char const*, std::__va_list)+0xa38>
    e670:	e3a01001 	mov	r1, #1, 0
    e674:	e1a00005 	mov	r0, r5
    e678:	ebfffbcd 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e67c:	e595300c 	ldr	r3, [r5, #12]
    e680:	e58d7018 	str	r7, [sp, #24]
    e684:	e2832001 	add	r2, r3, #1, 0
    e688:	e585200c 	str	r2, [r5, #12]
    e68c:	e5c36000 	strb	r6, [r3]
    e690:	eafffe7b 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e694:	e59d3018 	ldr	r3, [sp, #24]
    e698:	e28d203c 	add	r2, sp, #60, 0	; 0x3c
    e69c:	e2833007 	add	r3, r3, #7, 0
    e6a0:	e3c33007 	bic	r3, r3, #7, 0
    e6a4:	e1a06002 	mov	r6, r2
    e6a8:	ecb30b02 	vldmia	r3!, {d0}
    e6ac:	e1a00002 	mov	r0, r2
    e6b0:	e58d3018 	str	r3, [sp, #24]
    e6b4:	ee082a10 	vmov	s16, r2
    e6b8:	ebfffd56 	bl	dc18 <CString::ftoa(char*, double, unsigned int)>
    e6bc:	e1a00006 	mov	r0, r6
    e6c0:	eb00051f 	bl	fb44 <strlen>
    e6c4:	e59d301c 	ldr	r3, [sp, #28]
    e6c8:	e1a06000 	mov	r6, r0
    e6cc:	e3530000 	cmp	r3, #0, 0
    e6d0:	1a0000b8 	bne	e9b8 <CString::FormatV(char const*, std::__va_list)+0xb18>
    e6d4:	e1500004 	cmp	r0, r4
    e6d8:	2affff10 	bcs	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e6dc:	e0444000 	sub	r4, r4, r0
    e6e0:	e1a01004 	mov	r1, r4
    e6e4:	e1a00005 	mov	r0, r5
    e6e8:	ebfffbb1 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e6ec:	e3a00020 	mov	r0, #32, 0
    e6f0:	e2443001 	sub	r3, r4, #1, 0
    e6f4:	e595200c 	ldr	r2, [r5, #12]
    e6f8:	e2433001 	sub	r3, r3, #1, 0
    e6fc:	e2821001 	add	r1, r2, #1, 0
    e700:	e3730001 	cmn	r3, #1, 0
    e704:	e585100c 	str	r1, [r5, #12]
    e708:	e5c20000 	strb	r0, [r2]
    e70c:	1afffff8 	bne	e6f4 <CString::FormatV(char const*, std::__va_list)+0x854>
    e710:	eaffff02 	b	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e714:	ee181a10 	vmov	r1, s16
    e718:	e1a00005 	mov	r0, r5
    e71c:	ebfffc4c 	bl	d854 <CString::PutString(char const*)>
    e720:	e1560004 	cmp	r6, r4
    e724:	2afffe56 	bcs	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e728:	e0444006 	sub	r4, r4, r6
    e72c:	e1a00005 	mov	r0, r5
    e730:	e1a01004 	mov	r1, r4
    e734:	ebfffb9e 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e738:	e3a00020 	mov	r0, #32, 0
    e73c:	e2443001 	sub	r3, r4, #1, 0
    e740:	e595200c 	ldr	r2, [r5, #12]
    e744:	e2433001 	sub	r3, r3, #1, 0
    e748:	e2821001 	add	r1, r2, #1, 0
    e74c:	e3730001 	cmn	r3, #1, 0
    e750:	e585100c 	str	r1, [r5, #12]
    e754:	e5c20000 	strb	r0, [r2]
    e758:	1afffff8 	bne	e740 <CString::FormatV(char const*, std::__va_list)+0x8a0>
    e75c:	eafffe48 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e760:	e59d3020 	ldr	r3, [sp, #32]
    e764:	e0444000 	sub	r4, r4, r0
    e768:	e3530000 	cmp	r3, #0, 0
    e76c:	e1a01004 	mov	r1, r4
    e770:	e1a00005 	mov	r0, r5
    e774:	13a06030 	movne	r6, #48, 0	; 0x30
    e778:	03a06020 	moveq	r6, #32, 0
    e77c:	ebfffb8c 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e780:	e2443001 	sub	r3, r4, #1, 0
    e784:	e595200c 	ldr	r2, [r5, #12]
    e788:	e2433001 	sub	r3, r3, #1, 0
    e78c:	e2821001 	add	r1, r2, #1, 0
    e790:	e3730001 	cmn	r3, #1, 0
    e794:	e585100c 	str	r1, [r5, #12]
    e798:	e5c26000 	strb	r6, [r2]
    e79c:	1afffff8 	bne	e784 <CString::FormatV(char const*, std::__va_list)+0x8e4>
    e7a0:	eafffede 	b	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e7a4:	e3530000 	cmp	r3, #0, 0
    e7a8:	e2806001 	add	r6, r0, #1, 0
    e7ac:	1a00005a 	bne	e91c <CString::FormatV(char const*, std::__va_list)+0xa7c>
    e7b0:	e59d3020 	ldr	r3, [sp, #32]
    e7b4:	e3530000 	cmp	r3, #0, 0
    e7b8:	1a0000c6 	bne	ead8 <CString::FormatV(char const*, std::__va_list)+0xc38>
    e7bc:	e1540006 	cmp	r4, r6
    e7c0:	9a00000f 	bls	e804 <CString::FormatV(char const*, std::__va_list)+0x964>
    e7c4:	e0444006 	sub	r4, r4, r6
    e7c8:	e1a00005 	mov	r0, r5
    e7cc:	e1a01004 	mov	r1, r4
    e7d0:	ebfffb77 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e7d4:	e3a00020 	mov	r0, #32, 0
    e7d8:	e2443001 	sub	r3, r4, #1, 0
    e7dc:	e595200c 	ldr	r2, [r5, #12]
    e7e0:	e2433001 	sub	r3, r3, #1, 0
    e7e4:	e2821001 	add	r1, r2, #1, 0
    e7e8:	e3730001 	cmn	r3, #1, 0
    e7ec:	e585100c 	str	r1, [r5, #12]
    e7f0:	e5c20000 	strb	r0, [r2]
    e7f4:	1afffff8 	bne	e7dc <CString::FormatV(char const*, std::__va_list)+0x93c>
    e7f8:	e59d3004 	ldr	r3, [sp, #4]
    e7fc:	e3530000 	cmp	r3, #0, 0
    e800:	0afffec6 	beq	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e804:	e3a01001 	mov	r1, #1, 0
    e808:	e1a00005 	mov	r0, r5
    e80c:	ebfffb68 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e810:	e3a0202d 	mov	r2, #45, 0	; 0x2d
    e814:	e595300c 	ldr	r3, [r5, #12]
    e818:	e2831001 	add	r1, r3, #1, 0
    e81c:	e585100c 	str	r1, [r5, #12]
    e820:	e5c32000 	strb	r2, [r3]
    e824:	eafffebd 	b	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e828:	e4937004 	ldr	r7, [r3], #4
    e82c:	e3570000 	cmp	r7, #0, 0
    e830:	e58d3018 	str	r3, [sp, #24]
    e834:	ba000034 	blt	e90c <CString::FormatV(char const*, std::__va_list)+0xa6c>
    e838:	e3570009 	cmp	r7, #9, 0
    e83c:	e1a09007 	mov	r9, r7
    e840:	da0000b2 	ble	eb10 <CString::FormatV(char const*, std::__va_list)+0xc70>
    e844:	e3a06001 	mov	r6, #1, 0
    e848:	e0866106 	add	r6, r6, r6, lsl #2
    e84c:	e1a06086 	lsl	r6, r6, #1
    e850:	e1a01006 	mov	r1, r6
    e854:	e1a00007 	mov	r0, r7
    e858:	eb00282b 	bl	1890c <__udivsi3>
    e85c:	e3500009 	cmp	r0, #9, 0
    e860:	8afffff8 	bhi	e848 <CString::FormatV(char const*, std::__va_list)+0x9a8>
    e864:	e1a08000 	mov	r8, r0
    e868:	e28d303c 	add	r3, sp, #60, 0	; 0x3c
    e86c:	ee083a10 	vmov	s16, r3
    e870:	e1a07003 	mov	r7, r3
    e874:	ea000003 	b	e888 <CString::FormatV(char const*, std::__va_list)+0x9e8>
    e878:	e1a01006 	mov	r1, r6
    e87c:	e1a00009 	mov	r0, r9
    e880:	eb002821 	bl	1890c <__udivsi3>
    e884:	e1a08000 	mov	r8, r0
    e888:	e1a00009 	mov	r0, r9
    e88c:	e1a01006 	mov	r1, r6
    e890:	eb002898 	bl	18af8 <__aeabi_uidivmod>
    e894:	e3580009 	cmp	r8, #9, 0
    e898:	e2883030 	add	r3, r8, #48, 0	; 0x30
    e89c:	96af8073 	sxtbls	r8, r3
    e8a0:	e59f3288 	ldr	r3, [pc, #648]	; eb30 <CString::FormatV(char const*, std::__va_list)+0xc90>
    e8a4:	e1a09001 	mov	r9, r1
    e8a8:	e0813693 	umull	r3, r1, r3, r6
    e8ac:	82888057 	addhi	r8, r8, #87, 0	; 0x57
    e8b0:	86af8078 	sxtbhi	r8, r8
    e8b4:	e3560009 	cmp	r6, #9, 0
    e8b8:	e4c78001 	strb	r8, [r7], #1
    e8bc:	e1a061a1 	lsr	r6, r1, #3
    e8c0:	8affffec 	bhi	e878 <CString::FormatV(char const*, std::__va_list)+0x9d8>
    e8c4:	e3a03000 	mov	r3, #0, 0
    e8c8:	e5c73000 	strb	r3, [r7]
    e8cc:	eafffef6 	b	e4ac <CString::FormatV(char const*, std::__va_list)+0x60c>
    e8d0:	e3a0800a 	mov	r8, #10, 0
    e8d4:	eafffe25 	b	e170 <CString::FormatV(char const*, std::__va_list)+0x2d0>
    e8d8:	e2441001 	sub	r1, r4, #1, 0
    e8dc:	e1a00005 	mov	r0, r5
    e8e0:	ebfffb33 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e8e4:	e3a01020 	mov	r1, #32, 0
    e8e8:	e2444002 	sub	r4, r4, #2, 0
    e8ec:	e595300c 	ldr	r3, [r5, #12]
    e8f0:	e2444001 	sub	r4, r4, #1, 0
    e8f4:	e2832001 	add	r2, r3, #1, 0
    e8f8:	e3740001 	cmn	r4, #1, 0
    e8fc:	e585200c 	str	r2, [r5, #12]
    e900:	e5c31000 	strb	r1, [r3]
    e904:	1afffff8 	bne	e8ec <CString::FormatV(char const*, std::__va_list)+0xa4c>
    e908:	eaffff58 	b	e670 <CString::FormatV(char const*, std::__va_list)+0x7d0>
    e90c:	e3a03001 	mov	r3, #1, 0
    e910:	e2677000 	rsb	r7, r7, #0, 0
    e914:	e58d3004 	str	r3, [sp, #4]
    e918:	eaffffc6 	b	e838 <CString::FormatV(char const*, std::__va_list)+0x998>
    e91c:	e3a01001 	mov	r1, #1, 0
    e920:	e1a00005 	mov	r0, r5
    e924:	ebfffb22 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e928:	e3a0202d 	mov	r2, #45, 0	; 0x2d
    e92c:	e595300c 	ldr	r3, [r5, #12]
    e930:	e2831001 	add	r1, r3, #1, 0
    e934:	e585100c 	str	r1, [r5, #12]
    e938:	e5c32000 	strb	r2, [r3]
    e93c:	eafffee3 	b	e4d0 <CString::FormatV(char const*, std::__va_list)+0x630>
    e940:	e59d3020 	ldr	r3, [sp, #32]
    e944:	e3530000 	cmp	r3, #0, 0
    e948:	0a000073 	beq	eb1c <CString::FormatV(char const*, std::__va_list)+0xc7c>
    e94c:	e1560004 	cmp	r6, r4
    e950:	2afffe72 	bcs	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e954:	e0444006 	sub	r4, r4, r6
    e958:	e1a00005 	mov	r0, r5
    e95c:	e1a01004 	mov	r1, r4
    e960:	ebfffb13 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e964:	e3a00030 	mov	r0, #48, 0	; 0x30
    e968:	e2443001 	sub	r3, r4, #1, 0
    e96c:	e595200c 	ldr	r2, [r5, #12]
    e970:	e2433001 	sub	r3, r3, #1, 0
    e974:	e2821001 	add	r1, r2, #1, 0
    e978:	e3730001 	cmn	r3, #1, 0
    e97c:	e585100c 	str	r1, [r5, #12]
    e980:	e5c20000 	strb	r0, [r2]
    e984:	1afffff8 	bne	e96c <CString::FormatV(char const*, std::__va_list)+0xacc>
    e988:	eafffe64 	b	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    e98c:	e3a01001 	mov	r1, #1, 0
    e990:	e1a00005 	mov	r0, r5
    e994:	ebfffb06 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e998:	e595300c 	ldr	r3, [r5, #12]
    e99c:	e3540001 	cmp	r4, #1, 0
    e9a0:	e2832001 	add	r2, r3, #1, 0
    e9a4:	e585200c 	str	r2, [r5, #12]
    e9a8:	e5c36000 	strb	r6, [r3]
    e9ac:	8a00003c 	bhi	eaa4 <CString::FormatV(char const*, std::__va_list)+0xc04>
    e9b0:	e58d7018 	str	r7, [sp, #24]
    e9b4:	eafffdb2 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e9b8:	ee181a10 	vmov	r1, s16
    e9bc:	e1a00005 	mov	r0, r5
    e9c0:	ebfffba3 	bl	d854 <CString::PutString(char const*)>
    e9c4:	e1560004 	cmp	r6, r4
    e9c8:	2afffdad 	bcs	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e9cc:	e0444006 	sub	r4, r4, r6
    e9d0:	e1a00005 	mov	r0, r5
    e9d4:	e1a01004 	mov	r1, r4
    e9d8:	ebfffaf5 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e9dc:	e3a00020 	mov	r0, #32, 0
    e9e0:	e2443001 	sub	r3, r4, #1, 0
    e9e4:	e595200c 	ldr	r2, [r5, #12]
    e9e8:	e2433001 	sub	r3, r3, #1, 0
    e9ec:	e2821001 	add	r1, r2, #1, 0
    e9f0:	e3730001 	cmn	r3, #1, 0
    e9f4:	e585100c 	str	r1, [r5, #12]
    e9f8:	e5c20000 	strb	r0, [r2]
    e9fc:	1afffff8 	bne	e9e4 <CString::FormatV(char const*, std::__va_list)+0xb44>
    ea00:	eafffd9f 	b	e084 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    ea04:	e1a01008 	mov	r1, r8
    ea08:	e1a00005 	mov	r0, r5
    ea0c:	ebfffb90 	bl	d854 <CString::PutString(char const*)>
    ea10:	e1560004 	cmp	r6, r4
    ea14:	2affffe5 	bcs	e9b0 <CString::FormatV(char const*, std::__va_list)+0xb10>
    ea18:	e0444006 	sub	r4, r4, r6
    ea1c:	e1a00005 	mov	r0, r5
    ea20:	e1a01004 	mov	r1, r4
    ea24:	ebfffae2 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea28:	e3a00020 	mov	r0, #32, 0
    ea2c:	e2443001 	sub	r3, r4, #1, 0
    ea30:	e595200c 	ldr	r2, [r5, #12]
    ea34:	e2433001 	sub	r3, r3, #1, 0
    ea38:	e2821001 	add	r1, r2, #1, 0
    ea3c:	e3730001 	cmn	r3, #1, 0
    ea40:	e585100c 	str	r1, [r5, #12]
    ea44:	e5c20000 	strb	r0, [r2]
    ea48:	1afffff8 	bne	ea30 <CString::FormatV(char const*, std::__va_list)+0xb90>
    ea4c:	eaffffd7 	b	e9b0 <CString::FormatV(char const*, std::__va_list)+0xb10>
    ea50:	e0444000 	sub	r4, r4, r0
    ea54:	e1a01004 	mov	r1, r4
    ea58:	e1a00005 	mov	r0, r5
    ea5c:	ebfffad4 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea60:	e3a00020 	mov	r0, #32, 0
    ea64:	e2443001 	sub	r3, r4, #1, 0
    ea68:	e595200c 	ldr	r2, [r5, #12]
    ea6c:	e2433001 	sub	r3, r3, #1, 0
    ea70:	e2821001 	add	r1, r2, #1, 0
    ea74:	e3730001 	cmn	r3, #1, 0
    ea78:	e585100c 	str	r1, [r5, #12]
    ea7c:	e5c20000 	strb	r0, [r2]
    ea80:	1afffff8 	bne	ea68 <CString::FormatV(char const*, std::__va_list)+0xbc8>
    ea84:	eafffeae 	b	e544 <CString::FormatV(char const*, std::__va_list)+0x6a4>
    ea88:	e1a06009 	mov	r6, r9
    ea8c:	e3a07001 	mov	r7, #1, 0
    ea90:	eafffecd 	b	e5cc <CString::FormatV(char const*, std::__va_list)+0x72c>
    ea94:	e3a08001 	mov	r8, #1, 0
    ea98:	e1cd60d8 	ldrd	r6, [sp, #8]
    ea9c:	e3a09000 	mov	r9, #0, 0
    eaa0:	eafffddd 	b	e21c <CString::FormatV(char const*, std::__va_list)+0x37c>
    eaa4:	e2441001 	sub	r1, r4, #1, 0
    eaa8:	e1a00005 	mov	r0, r5
    eaac:	ebfffac0 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eab0:	e3a01020 	mov	r1, #32, 0
    eab4:	e2444002 	sub	r4, r4, #2, 0
    eab8:	e595300c 	ldr	r3, [r5, #12]
    eabc:	e2444001 	sub	r4, r4, #1, 0
    eac0:	e2832001 	add	r2, r3, #1, 0
    eac4:	e3740001 	cmn	r4, #1, 0
    eac8:	e585200c 	str	r2, [r5, #12]
    eacc:	e5c31000 	strb	r1, [r3]
    ead0:	1afffff8 	bne	eab8 <CString::FormatV(char const*, std::__va_list)+0xc18>
    ead4:	eaffffb5 	b	e9b0 <CString::FormatV(char const*, std::__va_list)+0xb10>
    ead8:	e3a01001 	mov	r1, #1, 0
    eadc:	e1a00005 	mov	r0, r5
    eae0:	ebfffab3 	bl	d5b4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eae4:	e3a0202d 	mov	r2, #45, 0	; 0x2d
    eae8:	e595300c 	ldr	r3, [r5, #12]
    eaec:	e2831001 	add	r1, r3, #1, 0
    eaf0:	e585100c 	str	r1, [r5, #12]
    eaf4:	e5c32000 	strb	r2, [r3]
    eaf8:	eaffff93 	b	e94c <CString::FormatV(char const*, std::__va_list)+0xaac>
    eafc:	e1a00008 	mov	r0, r8
    eb00:	e3a06001 	mov	r6, #1, 0
    eb04:	e3a07000 	mov	r7, #0, 0
    eb08:	e1a01009 	mov	r1, r9
    eb0c:	eafffe36 	b	e3ec <CString::FormatV(char const*, std::__va_list)+0x54c>
    eb10:	e1a08009 	mov	r8, r9
    eb14:	e3a06001 	mov	r6, #1, 0
    eb18:	eaffff52 	b	e868 <CString::FormatV(char const*, std::__va_list)+0x9c8>
    eb1c:	e1500004 	cmp	r0, r4
    eb20:	2afffdfe 	bcs	e320 <CString::FormatV(char const*, std::__va_list)+0x480>
    eb24:	eaffff26 	b	e7c4 <CString::FormatV(char const*, std::__va_list)+0x924>
    eb28:	00019fb8 	.word	0x00019fb8
    eb2c:	00019fb4 	.word	0x00019fb4
    eb30:	cccccccd 	.word	0xcccccccd

0000eb34 <CString::Format(char const*, ...)>:
    eb34:	e92d000e 	push	{r1, r2, r3}
    eb38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    eb3c:	e24dd008 	sub	sp, sp, #8, 0
    eb40:	e28d2010 	add	r2, sp, #16, 0
    eb44:	e59d100c 	ldr	r1, [sp, #12]
    eb48:	e58d2004 	str	r2, [sp, #4]
    eb4c:	ebfffcd3 	bl	dea0 <CString::FormatV(char const*, std::__va_list)>
    eb50:	e28dd008 	add	sp, sp, #8, 0
    eb54:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    eb58:	e28dd00c 	add	sp, sp, #12, 0
    eb5c:	e12fff1e 	bx	lr

0000eb60 <__aeabi_atexit>:
    eb60:	e12fff1e 	bx	lr

0000eb64 <__errno>:
    eb64:	e59f0000 	ldr	r0, [pc]	; eb6c <__errno+0x8>
    eb68:	e12fff1e 	bx	lr
    eb6c:	0001cc68 	.word	0x0001cc68

0000eb70 <set_qemu_exit_status>:
    eb70:	e59f3004 	ldr	r3, [pc, #4]	; eb7c <set_qemu_exit_status+0xc>
    eb74:	e5830008 	str	r0, [r3, #8]
    eb78:	e12fff1e 	bx	lr
    eb7c:	0001cc64 	.word	0x0001cc64

0000eb80 <halt>:
    eb80:	f10c0080 	cpsid	i
    eb84:	f10c0040 	cpsid	f
    eb88:	eafffffe 	b	eb88 <halt+0x8>

0000eb8c <reboot>:
    eb8c:	e3a03000 	mov	r3, #0, 0
    eb90:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    eb94:	e59f3010 	ldr	r3, [pc, #16]	; ebac <reboot+0x20>
    eb98:	e59f1010 	ldr	r1, [pc, #16]	; ebb0 <reboot+0x24>
    eb9c:	e59f2010 	ldr	r2, [pc, #16]	; ebb4 <reboot+0x28>
    eba0:	e5831024 	str	r1, [r3, #36]	; 0x24
    eba4:	e583201c 	str	r2, [r3, #28]
    eba8:	eafffffe 	b	eba8 <reboot+0x1c>
    ebac:	20100000 	.word	0x20100000
    ebb0:	5a000001 	.word	0x5a000001
    ebb4:	5a000020 	.word	0x5a000020

0000ebb8 <vfpinit>:
    ebb8:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    ebbc:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    ebc0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    ebc4:	e3a03000 	mov	r3, #0, 0
    ebc8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    ebcc:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    ebd0:	eee83a10 	vmsr	fpexc, r3
    ebd4:	e3a03402 	mov	r3, #33554432	; 0x2000000
    ebd8:	eee13a10 	vmsr	fpscr, r3
    ebdc:	e12fff1e 	bx	lr

0000ebe0 <sysinit>:
    ebe0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ebe4:	e24dd0fc 	sub	sp, sp, #252, 0	; 0xfc
    ebe8:	f1080040 	cpsie	f
    ebec:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    ebf0:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    ebf4:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    ebf8:	e3a01000 	mov	r1, #0, 0
    ebfc:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
    ec00:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    ec04:	eee83a10 	vmsr	fpexc, r3
    ec08:	e3a03402 	mov	r3, #33554432	; 0x2000000
    ec0c:	eee13a10 	vmsr	fpscr, r3
    ec10:	e59f0088 	ldr	r0, [pc, #136]	; eca0 <sysinit+0xc0>
    ec14:	e59f2088 	ldr	r2, [pc, #136]	; eca4 <sysinit+0xc4>
    ec18:	e59f5088 	ldr	r5, [pc, #136]	; eca8 <sysinit+0xc8>
    ec1c:	e0422000 	sub	r2, r2, r0
    ec20:	eb000379 	bl	fa0c <memset>
    ec24:	e1a0000d 	mov	r0, sp
    ec28:	ebffefe4 	bl	abc0 <CMachineInfo::CMachineInfo()>
    ec2c:	e3a01001 	mov	r1, #1, 0
    ec30:	e28d001c 	add	r0, sp, #28, 0
    ec34:	eb000901 	bl	11040 <CMemorySystem::CMemorySystem(bool)>
    ec38:	e59f306c 	ldr	r3, [pc, #108]	; ecac <sysinit+0xcc>
    ec3c:	e1550003 	cmp	r5, r3
    ec40:	2a000009 	bcs	ec6c <sysinit+0x8c>
    ec44:	e2433001 	sub	r3, r3, #1, 0
    ec48:	e0433005 	sub	r3, r3, r5
    ec4c:	e3c33003 	bic	r3, r3, #3, 0
    ec50:	e2833004 	add	r3, r3, #4, 0
    ec54:	e1a04005 	mov	r4, r5
    ec58:	e0855003 	add	r5, r5, r3
    ec5c:	e4943004 	ldr	r3, [r4], #4
    ec60:	e12fff33 	blx	r3
    ec64:	e1540005 	cmp	r4, r5
    ec68:	1afffffb 	bne	ec5c <sysinit+0x7c>
    ec6c:	ebffe501 	bl	8078 <main>
    ec70:	e3500001 	cmp	r0, #1, 0
    ec74:	0a000000 	beq	ec7c <sysinit+0x9c>
    ec78:	ebffffc0 	bl	eb80 <halt>
    ec7c:	eb0006a1 	bl	10708 <IsChainBootEnabled>
    ec80:	e3500000 	cmp	r0, #0, 0
    ec84:	1a000000 	bne	ec8c <sysinit+0xac>
    ec88:	ebffffbf 	bl	eb8c <reboot>
    ec8c:	e28d001c 	add	r0, sp, #28, 0
    ec90:	eb00094e 	bl	111d0 <CMemorySystem::Destructor()>
    ec94:	f10c0040 	cpsid	f
    ec98:	eb0006a0 	bl	10720 <DoChainBoot>
    ec9c:	eafffff9 	b	ec88 <sysinit+0xa8>
    eca0:	0001cc34 	.word	0x0001cc34
    eca4:	0001cce8 	.word	0x0001cce8
    eca8:	0001c8b8 	.word	0x0001c8b8
    ecac:	0001c8c4 	.word	0x0001c8c4

0000ecb0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    ecb0:	e3a03000 	mov	r3, #0, 0
    ecb4:	e2800001 	add	r0, r0, #1, 0
    ecb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ecbc:	e59f3020 	ldr	r3, [pc, #32]	; ece4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
    ecc0:	e1a01003 	mov	r1, r3
    ecc4:	e5932004 	ldr	r2, [r3, #4]
    ecc8:	e5913004 	ldr	r3, [r1, #4]
    eccc:	e0433002 	sub	r3, r3, r2
    ecd0:	e1500003 	cmp	r0, r3
    ecd4:	8afffffb 	bhi	ecc8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
    ecd8:	e3a03000 	mov	r3, #0, 0
    ecdc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ece0:	e12fff1e 	bx	lr
    ece4:	20003000 	.word	0x20003000

0000ece8 <CTimer::CTimer(CInterruptSystem*)>:
    ece8:	e92d4070 	push	{r4, r5, r6, lr}
    ecec:	e3a05000 	mov	r5, #0, 0
    ecf0:	e3a06001 	mov	r6, #1, 0
    ecf4:	e1a04000 	mov	r4, r0
    ecf8:	e5805004 	str	r5, [r0, #4]
    ecfc:	e5801000 	str	r1, [r0]
    ed00:	e5805008 	str	r5, [r0, #8]
    ed04:	e5805014 	str	r5, [r0, #20]
    ed08:	e5806010 	str	r6, [r0, #16]
    ed0c:	e580500c 	str	r5, [r0, #12]
    ed10:	e2800018 	add	r0, r0, #24, 0
    ed14:	eb001219 	bl	13580 <CPtrList::CPtrList()>
    ed18:	e3a020c8 	mov	r2, #200, 0	; 0xc8
    ed1c:	e59f3038 	ldr	r3, [pc, #56]	; ed5c <CTimer::CTimer(CInterruptSystem*)+0x74>
    ed20:	e59f1038 	ldr	r1, [pc, #56]	; ed60 <CTimer::CTimer(CInterruptSystem*)+0x78>
    ed24:	e5930000 	ldr	r0, [r3]
    ed28:	e584601c 	str	r6, [r4, #28]
    ed2c:	e1500005 	cmp	r0, r5
    ed30:	e5845038 	str	r5, [r4, #56]	; 0x38
    ed34:	e5841020 	str	r1, [r4, #32]
    ed38:	e5842024 	str	r2, [r4, #36]	; 0x24
    ed3c:	1a000002 	bne	ed4c <CTimer::CTimer(CInterruptSystem*)+0x64>
    ed40:	e1a00004 	mov	r0, r4
    ed44:	e5834000 	str	r4, [r3]
    ed48:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed4c:	e3a02041 	mov	r2, #65, 0	; 0x41
    ed50:	e59f100c 	ldr	r1, [pc, #12]	; ed64 <CTimer::CTimer(CInterruptSystem*)+0x7c>
    ed54:	e59f000c 	ldr	r0, [pc, #12]	; ed68 <CTimer::CTimer(CInterruptSystem*)+0x80>
    ed58:	eb000b6a 	bl	11b08 <assertion_failed>
    ed5c:	0001cc70 	.word	0x0001cc70
    ed60:	00030d40 	.word	0x00030d40
    ed64:	00019fcc 	.word	0x00019fcc
    ed68:	00019fd8 	.word	0x00019fd8

0000ed6c <CTimer::~CTimer()>:
    ed6c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ed70:	e1a06000 	mov	r6, r0
    ed74:	e5900000 	ldr	r0, [r0]
    ed78:	e24dd00c 	sub	sp, sp, #12, 0
    ed7c:	e3500000 	cmp	r0, #0, 0
    ed80:	0a000028 	beq	ee28 <CTimer::~CTimer()+0xbc>
    ed84:	e3a01003 	mov	r1, #3, 0
    ed88:	e2865018 	add	r5, r6, #24, 0
    ed8c:	eb000ad3 	bl	118e0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    ed90:	e1a00005 	mov	r0, r5
    ed94:	eb001206 	bl	135b4 <CPtrList::GetFirst()>
    ed98:	e2501000 	subs	r1, r0, #0, 0
    ed9c:	e59f7094 	ldr	r7, [pc, #148]	; ee38 <CTimer::~CTimer()+0xcc>
    eda0:	0a000011 	beq	edec <CTimer::~CTimer()+0x80>
    eda4:	e1a00005 	mov	r0, r5
    eda8:	e58d1004 	str	r1, [sp, #4]
    edac:	eb001217 	bl	13610 <CPtrList::GetPtr(TPtrListElement*)>
    edb0:	e2504000 	subs	r4, r0, #0, 0
    edb4:	e59d1004 	ldr	r1, [sp, #4]
    edb8:	0a000012 	beq	ee08 <CTimer::~CTimer()+0x9c>
    edbc:	e5943000 	ldr	r3, [r4]
    edc0:	e1530007 	cmp	r3, r7
    edc4:	1a000013 	bne	ee18 <CTimer::~CTimer()+0xac>
    edc8:	e1a00005 	mov	r0, r5
    edcc:	eb001297 	bl	13830 <CPtrList::Remove(TPtrListElement*)>
    edd0:	e3a01014 	mov	r1, #20, 0
    edd4:	e1a00004 	mov	r0, r4
    edd8:	eb00066e 	bl	10798 <operator delete(void*, unsigned int)>
    eddc:	e1a00005 	mov	r0, r5
    ede0:	eb0011f3 	bl	135b4 <CPtrList::GetFirst()>
    ede4:	e2501000 	subs	r1, r0, #0, 0
    ede8:	1affffed 	bne	eda4 <CTimer::~CTimer()+0x38>
    edec:	e59f3048 	ldr	r3, [pc, #72]	; ee3c <CTimer::~CTimer()+0xd0>
    edf0:	e1a00005 	mov	r0, r5
    edf4:	e5831000 	str	r1, [r3]
    edf8:	eb0011e3 	bl	1358c <CPtrList::~CPtrList()>
    edfc:	e1a00006 	mov	r0, r6
    ee00:	e28dd00c 	add	sp, sp, #12, 0
    ee04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ee08:	e3a02058 	mov	r2, #88, 0	; 0x58
    ee0c:	e59f102c 	ldr	r1, [pc, #44]	; ee40 <CTimer::~CTimer()+0xd4>
    ee10:	e59f002c 	ldr	r0, [pc, #44]	; ee44 <CTimer::~CTimer()+0xd8>
    ee14:	eb000b3b 	bl	11b08 <assertion_failed>
    ee18:	e3a02059 	mov	r2, #89, 0	; 0x59
    ee1c:	e59f101c 	ldr	r1, [pc, #28]	; ee40 <CTimer::~CTimer()+0xd4>
    ee20:	e59f0020 	ldr	r0, [pc, #32]	; ee48 <CTimer::~CTimer()+0xdc>
    ee24:	eb000b37 	bl	11b08 <assertion_failed>
    ee28:	e3a02047 	mov	r2, #71, 0	; 0x47
    ee2c:	e59f100c 	ldr	r1, [pc, #12]	; ee40 <CTimer::~CTimer()+0xd4>
    ee30:	e59f0014 	ldr	r0, [pc, #20]	; ee4c <CTimer::~CTimer()+0xe0>
    ee34:	eb000b33 	bl	11b08 <assertion_failed>
    ee38:	4b544d43 	.word	0x4b544d43
    ee3c:	0001cc70 	.word	0x0001cc70
    ee40:	00019fcc 	.word	0x00019fcc
    ee44:	0001a000 	.word	0x0001a000
    ee48:	0001a00c 	.word	0x0001a00c
    ee4c:	00019fe8 	.word	0x00019fe8

0000ee50 <CTimer::SetTimeZone(int)>:
    ee50:	e59f2018 	ldr	r2, [pc, #24]	; ee70 <CTimer::SetTimeZone(int)+0x20>
    ee54:	e2813e59 	add	r3, r1, #1424	; 0x590
    ee58:	e283300f 	add	r3, r3, #15, 0
    ee5c:	e1530002 	cmp	r3, r2
    ee60:	95801014 	strls	r1, [r0, #20]
    ee64:	93a00001 	movls	r0, #1, 0
    ee68:	83a00000 	movhi	r0, #0, 0
    ee6c:	e12fff1e 	bx	lr
    ee70:	00000b3e 	.word	0x00000b3e

0000ee74 <CTimer::GetTimeZone() const>:
    ee74:	e5900014 	ldr	r0, [r0, #20]
    ee78:	e12fff1e 	bx	lr

0000ee7c <CTimer::SetTime(unsigned int, bool)>:
    ee7c:	e3520000 	cmp	r2, #0, 0
    ee80:	e92d4070 	push	{r4, r5, r6, lr}
    ee84:	e1a04000 	mov	r4, r0
    ee88:	e1a05001 	mov	r5, r1
    ee8c:	1a000004 	bne	eea4 <CTimer::SetTime(unsigned int, bool)+0x28>
    ee90:	e5903014 	ldr	r3, [r0, #20]
    ee94:	e0633203 	rsb	r3, r3, r3, lsl #4
    ee98:	e1b03103 	lsls	r3, r3, #2
    ee9c:	4a000006 	bmi	eebc <CTimer::SetTime(unsigned int, bool)+0x40>
    eea0:	e0855003 	add	r5, r5, r3
    eea4:	e5940010 	ldr	r0, [r4, #16]
    eea8:	e3500000 	cmp	r0, #0, 0
    eeac:	1a000007 	bne	eed0 <CTimer::SetTime(unsigned int, bool)+0x54>
    eeb0:	e3a00001 	mov	r0, #1, 0
    eeb4:	e584500c 	str	r5, [r4, #12]
    eeb8:	e8bd8070 	pop	{r4, r5, r6, pc}
    eebc:	e2631000 	rsb	r1, r3, #0, 0
    eec0:	e1510005 	cmp	r1, r5
    eec4:	dafffff5 	ble	eea0 <CTimer::SetTime(unsigned int, bool)+0x24>
    eec8:	e1a00002 	mov	r0, r2
    eecc:	e8bd8070 	pop	{r4, r5, r6, pc}
    eed0:	eb000950 	bl	11418 <EnterCritical>
    eed4:	e5943010 	ldr	r3, [r4, #16]
    eed8:	e584500c 	str	r5, [r4, #12]
    eedc:	e3530000 	cmp	r3, #0, 0
    eee0:	0a000002 	beq	eef0 <CTimer::SetTime(unsigned int, bool)+0x74>
    eee4:	eb000975 	bl	114c0 <LeaveCritical>
    eee8:	e3a00001 	mov	r0, #1, 0
    eeec:	e8bd8070 	pop	{r4, r5, r6, pc}
    eef0:	e3a00001 	mov	r0, #1, 0
    eef4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000eef8 <CTimer::GetClockTicks()>:
    eef8:	e3a03000 	mov	r3, #0, 0
    eefc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ef00:	e59f2008 	ldr	r2, [pc, #8]	; ef10 <CTimer::GetClockTicks()+0x18>
    ef04:	e5920004 	ldr	r0, [r2, #4]
    ef08:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ef0c:	e12fff1e 	bx	lr
    ef10:	20003000 	.word	0x20003000

0000ef14 <CTimer::GetTicks() const>:
    ef14:	e5900004 	ldr	r0, [r0, #4]
    ef18:	e12fff1e 	bx	lr

0000ef1c <CTimer::GetUptime() const>:
    ef1c:	e5900008 	ldr	r0, [r0, #8]
    ef20:	e12fff1e 	bx	lr

0000ef24 <CTimer::GetTime() const>:
    ef24:	e590000c 	ldr	r0, [r0, #12]
    ef28:	e12fff1e 	bx	lr

0000ef2c <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    ef2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ef30:	e1a04000 	mov	r4, r0
    ef34:	e5900010 	ldr	r0, [r0, #16]
    ef38:	e1a06001 	mov	r6, r1
    ef3c:	e3500000 	cmp	r0, #0, 0
    ef40:	e1a05002 	mov	r5, r2
    ef44:	1a000013 	bne	ef98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
    ef48:	e594700c 	ldr	r7, [r4, #12]
    ef4c:	e5944004 	ldr	r4, [r4, #4]
    ef50:	e3560000 	cmp	r6, #0, 0
    ef54:	0a000018 	beq	efbc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
    ef58:	e3550000 	cmp	r5, #0, 0
    ef5c:	e5867000 	str	r7, [r6]
    ef60:	0a000019 	beq	efcc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    ef64:	e59f3070 	ldr	r3, [pc, #112]	; efdc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
    ef68:	e3a00001 	mov	r0, #1, 0
    ef6c:	e0832493 	umull	r2, r3, r3, r4
    ef70:	e1a032a3 	lsr	r3, r3, #5
    ef74:	e0833103 	add	r3, r3, r3, lsl #2
    ef78:	e0833103 	add	r3, r3, r3, lsl #2
    ef7c:	e0443103 	sub	r3, r4, r3, lsl #2
    ef80:	e0632283 	rsb	r2, r3, r3, lsl #5
    ef84:	e0833102 	add	r3, r3, r2, lsl #2
    ef88:	e0833103 	add	r3, r3, r3, lsl #2
    ef8c:	e1a03203 	lsl	r3, r3, #4
    ef90:	e5853000 	str	r3, [r5]
    ef94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ef98:	eb00091e 	bl	11418 <EnterCritical>
    ef9c:	e5943010 	ldr	r3, [r4, #16]
    efa0:	e594700c 	ldr	r7, [r4, #12]
    efa4:	e3530000 	cmp	r3, #0, 0
    efa8:	e5944004 	ldr	r4, [r4, #4]
    efac:	0affffe7 	beq	ef50 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    efb0:	eb000942 	bl	114c0 <LeaveCritical>
    efb4:	e3560000 	cmp	r6, #0, 0
    efb8:	1affffe6 	bne	ef58 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    efbc:	e3a02f41 	mov	r2, #260	; 0x104
    efc0:	e59f1018 	ldr	r1, [pc, #24]	; efe0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
    efc4:	e59f0018 	ldr	r0, [pc, #24]	; efe4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
    efc8:	eb000ace 	bl	11b08 <assertion_failed>
    efcc:	e59f2014 	ldr	r2, [pc, #20]	; efe8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
    efd0:	e59f1008 	ldr	r1, [pc, #8]	; efe0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
    efd4:	e59f0010 	ldr	r0, [pc, #16]	; efec <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
    efd8:	eb000aca 	bl	11b08 <assertion_failed>
    efdc:	51eb851f 	.word	0x51eb851f
    efe0:	00019fcc 	.word	0x00019fcc
    efe4:	0001a034 	.word	0x0001a034
    efe8:	00000107 	.word	0x00000107
    efec:	0001a044 	.word	0x0001a044

0000eff0 <CTimer::GetUniversalTime() const>:
    eff0:	e5903014 	ldr	r3, [r0, #20]
    eff4:	e590000c 	ldr	r0, [r0, #12]
    eff8:	e0633203 	rsb	r3, r3, r3, lsl #4
    effc:	e1500103 	cmp	r0, r3, lsl #2
    f000:	e1a03103 	lsl	r3, r3, #2
    f004:	a0400003 	subge	r0, r0, r3
    f008:	b3a00000 	movlt	r0, #0, 0
    f00c:	e12fff1e 	bx	lr

0000f010 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    f010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f014:	e1a05000 	mov	r5, r0
    f018:	e5900010 	ldr	r0, [r0, #16]
    f01c:	e1a06001 	mov	r6, r1
    f020:	e3500000 	cmp	r0, #0, 0
    f024:	e1a04002 	mov	r4, r2
    f028:	1a00001b 	bne	f09c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
    f02c:	e595800c 	ldr	r8, [r5, #12]
    f030:	e5957004 	ldr	r7, [r5, #4]
    f034:	e5950014 	ldr	r0, [r5, #20]
    f038:	e0600200 	rsb	r0, r0, r0, lsl #4
    f03c:	e1580100 	cmp	r8, r0, lsl #2
    f040:	e1a00100 	lsl	r0, r0, #2
    f044:	ba000012 	blt	f094 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    f048:	e3560000 	cmp	r6, #0, 0
    f04c:	0a00001a 	beq	f0bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
    f050:	e0480000 	sub	r0, r8, r0
    f054:	e3540000 	cmp	r4, #0, 0
    f058:	e5860000 	str	r0, [r6]
    f05c:	0a00001a 	beq	f0cc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    f060:	e59f3074 	ldr	r3, [pc, #116]	; f0dc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
    f064:	e3a00001 	mov	r0, #1, 0
    f068:	e0832793 	umull	r2, r3, r3, r7
    f06c:	e1a032a3 	lsr	r3, r3, #5
    f070:	e0833103 	add	r3, r3, r3, lsl #2
    f074:	e0833103 	add	r3, r3, r3, lsl #2
    f078:	e0473103 	sub	r3, r7, r3, lsl #2
    f07c:	e0632283 	rsb	r2, r3, r3, lsl #5
    f080:	e0833102 	add	r3, r3, r2, lsl #2
    f084:	e0833103 	add	r3, r3, r3, lsl #2
    f088:	e1a03203 	lsl	r3, r3, #4
    f08c:	e5843000 	str	r3, [r4]
    f090:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f094:	e3a00000 	mov	r0, #0, 0
    f098:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f09c:	eb0008dd 	bl	11418 <EnterCritical>
    f0a0:	e5953010 	ldr	r3, [r5, #16]
    f0a4:	e595800c 	ldr	r8, [r5, #12]
    f0a8:	e3530000 	cmp	r3, #0, 0
    f0ac:	e5957004 	ldr	r7, [r5, #4]
    f0b0:	0affffdf 	beq	f034 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f0b4:	eb000901 	bl	114c0 <LeaveCritical>
    f0b8:	eaffffdd 	b	f034 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f0bc:	e59f201c 	ldr	r2, [pc, #28]	; f0e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
    f0c0:	e59f101c 	ldr	r1, [pc, #28]	; f0e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
    f0c4:	e59f001c 	ldr	r0, [pc, #28]	; f0e8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    f0c8:	eb000a8e 	bl	11b08 <assertion_failed>
    f0cc:	e3a02f4b 	mov	r2, #300	; 0x12c
    f0d0:	e59f100c 	ldr	r1, [pc, #12]	; f0e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
    f0d4:	e59f0010 	ldr	r0, [pc, #16]	; f0ec <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
    f0d8:	eb000a8a 	bl	11b08 <assertion_failed>
    f0dc:	51eb851f 	.word	0x51eb851f
    f0e0:	00000129 	.word	0x00000129
    f0e4:	00019fcc 	.word	0x00019fcc
    f0e8:	0001a034 	.word	0x0001a034
    f0ec:	0001a044 	.word	0x0001a044

0000f0f0 <CTimer::GetTimeString()>:
    f0f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0f4:	e1a04000 	mov	r4, r0
    f0f8:	e5900010 	ldr	r0, [r0, #16]
    f0fc:	e24dd014 	sub	sp, sp, #20, 0
    f100:	e3500000 	cmp	r0, #0, 0
    f104:	1a00005e 	bne	f284 <CTimer::GetTimeString()+0x194>
    f108:	e594b00c 	ldr	fp, [r4, #12]
    f10c:	e594a004 	ldr	sl, [r4, #4]
    f110:	e19b000a 	orrs	r0, fp, sl
    f114:	01a0a000 	moveq	sl, r0
    f118:	0a00004d 	beq	f254 <CTimer::GetTimeString()+0x164>
    f11c:	e59f7180 	ldr	r7, [pc, #384]	; f2a4 <CTimer::GetTimeString()+0x1b4>
    f120:	e59f4180 	ldr	r4, [pc, #384]	; f2a8 <CTimer::GetTimeString()+0x1b8>
    f124:	e0883b97 	umull	r3, r8, r7, fp
    f128:	e1a082a8 	lsr	r8, r8, #5
    f12c:	e1a02008 	mov	r2, r8
    f130:	e0873897 	umull	r3, r7, r7, r8
    f134:	e1a072a7 	lsr	r7, r7, #5
    f138:	e0843794 	umull	r3, r4, r4, r7
    f13c:	e1a09007 	mov	r9, r7
    f140:	e0688208 	rsb	r8, r8, r8, lsl #4
    f144:	e0677207 	rsb	r7, r7, r7, lsl #4
    f148:	e59f615c 	ldr	r6, [pc, #348]	; f2ac <CTimer::GetTimeString()+0x1bc>
    f14c:	e59f515c 	ldr	r5, [pc, #348]	; f2b0 <CTimer::GetTimeString()+0x1c0>
    f150:	e59fe15c 	ldr	lr, [pc, #348]	; f2b4 <CTimer::GetTimeString()+0x1c4>
    f154:	e59fc15c 	ldr	ip, [pc, #348]	; f2b8 <CTimer::GetTimeString()+0x1c8>
    f158:	e04b8108 	sub	r8, fp, r8, lsl #2
    f15c:	e0427107 	sub	r7, r2, r7, lsl #2
    f160:	e1a04224 	lsr	r4, r4, #4
    f164:	ea000008 	b	f18c <CTimer::GetTimeString()+0x9c>
    f168:	e3160003 	tst	r6, #3, 0
    f16c:	03a00001 	moveq	r0, #1, 0
    f170:	13a00000 	movne	r0, #0, 0
    f174:	e2801f5b 	add	r1, r0, #364	; 0x16c
    f178:	e2811001 	add	r1, r1, #1, 0
    f17c:	e1540001 	cmp	r4, r1
    f180:	3a00000b 	bcc	f1b4 <CTimer::GetTimeString()+0xc4>
    f184:	e0444001 	sub	r4, r4, r1
    f188:	e2866001 	add	r6, r6, #1, 0
    f18c:	e0030695 	mul	r3, r5, r6
    f190:	e15e0163 	cmp	lr, r3, ror #2
    f194:	3afffff3 	bcc	f168 <CTimer::GetTimeString()+0x78>
    f198:	e15c0263 	cmp	ip, r3, ror #4
    f19c:	23a00001 	movcs	r0, #1, 0
    f1a0:	33a00000 	movcc	r0, #0, 0
    f1a4:	e2801f5b 	add	r1, r0, #364	; 0x16c
    f1a8:	e2811001 	add	r1, r1, #1, 0
    f1ac:	e1540001 	cmp	r4, r1
    f1b0:	2afffff3 	bcs	f184 <CTimer::GetTimeString()+0x94>
    f1b4:	e3a05000 	mov	r5, #0, 0
    f1b8:	e59f20fc 	ldr	r2, [pc, #252]	; f2bc <CTimer::GetTimeString()+0x1cc>
    f1bc:	ea000001 	b	f1c8 <CTimer::GetTimeString()+0xd8>
    f1c0:	e0444001 	sub	r4, r4, r1
    f1c4:	e2855001 	add	r5, r5, #1, 0
    f1c8:	e3550001 	cmp	r5, #1, 0
    f1cc:	13a03000 	movne	r3, #0, 0
    f1d0:	02003001 	andeq	r3, r0, #1, 0
    f1d4:	e3530000 	cmp	r3, #0, 0
    f1d8:	13a0101d 	movne	r1, #29, 0
    f1dc:	07921105 	ldreq	r1, [r2, r5, lsl #2]
    f1e0:	e1540001 	cmp	r4, r1
    f1e4:	2afffff5 	bcs	f1c0 <CTimer::GetTimeString()+0xd0>
    f1e8:	e3a00010 	mov	r0, #16, 0
    f1ec:	eb00055b 	bl	10760 <operator new(unsigned int)>
    f1f0:	e59fb0c8 	ldr	fp, [pc, #200]	; f2c0 <CTimer::GetTimeString()+0x1d0>
    f1f4:	e08b3a9b 	umull	r3, fp, fp, sl
    f1f8:	e1a0b2ab 	lsr	fp, fp, #5
    f1fc:	e08bb10b 	add	fp, fp, fp, lsl #2
    f200:	e08bb10b 	add	fp, fp, fp, lsl #2
    f204:	e04ab10b 	sub	fp, sl, fp, lsl #2
    f208:	e1a0a000 	mov	sl, r0
    f20c:	ebfff902 	bl	d61c <CString::CString()>
    f210:	e59f30ac 	ldr	r3, [pc, #172]	; f2c4 <CTimer::GetTimeString()+0x1d4>
    f214:	e1560003 	cmp	r6, r3
    f218:	9a000010 	bls	f260 <CTimer::GetTimeString()+0x170>
    f21c:	e59f3084 	ldr	r3, [pc, #132]	; f2a8 <CTimer::GetTimeString()+0x1b8>
    f220:	e98d0180 	stmib	sp, {r7, r8}
    f224:	e0832993 	umull	r2, r3, r3, r9
    f228:	e1a03223 	lsr	r3, r3, #4
    f22c:	e0833083 	add	r3, r3, r3, lsl #1
    f230:	e0499183 	sub	r9, r9, r3, lsl #3
    f234:	e59f208c 	ldr	r2, [pc, #140]	; f2c8 <CTimer::GetTimeString()+0x1d8>
    f238:	e58db00c 	str	fp, [sp, #12]
    f23c:	e58d9000 	str	r9, [sp]
    f240:	e1a0000a 	mov	r0, sl
    f244:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    f248:	e59f107c 	ldr	r1, [pc, #124]	; f2cc <CTimer::GetTimeString()+0x1dc>
    f24c:	e2843001 	add	r3, r4, #1, 0
    f250:	ebfffe37 	bl	eb34 <CString::Format(char const*, ...)>
    f254:	e1a0000a 	mov	r0, sl
    f258:	e28dd014 	add	sp, sp, #20, 0
    f25c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f260:	e1a0000a 	mov	r0, sl
    f264:	e1a03007 	mov	r3, r7
    f268:	e1a02009 	mov	r2, r9
    f26c:	e88d0900 	stm	sp, {r8, fp}
    f270:	e59f1058 	ldr	r1, [pc, #88]	; f2d0 <CTimer::GetTimeString()+0x1e0>
    f274:	ebfffe2e 	bl	eb34 <CString::Format(char const*, ...)>
    f278:	e1a0000a 	mov	r0, sl
    f27c:	e28dd014 	add	sp, sp, #20, 0
    f280:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f284:	eb000863 	bl	11418 <EnterCritical>
    f288:	e5943010 	ldr	r3, [r4, #16]
    f28c:	e594b00c 	ldr	fp, [r4, #12]
    f290:	e3530000 	cmp	r3, #0, 0
    f294:	e594a004 	ldr	sl, [r4, #4]
    f298:	0affff9c 	beq	f110 <CTimer::GetTimeString()+0x20>
    f29c:	eb000887 	bl	114c0 <LeaveCritical>
    f2a0:	eaffff9a 	b	f110 <CTimer::GetTimeString()+0x20>
    f2a4:	88888889 	.word	0x88888889
    f2a8:	aaaaaaab 	.word	0xaaaaaaab
    f2ac:	000007b2 	.word	0x000007b2
    f2b0:	c28f5c29 	.word	0xc28f5c29
    f2b4:	028f5c28 	.word	0x028f5c28
    f2b8:	00a3d70a 	.word	0x00a3d70a
    f2bc:	0001a158 	.word	0x0001a158
    f2c0:	51eb851f 	.word	0x51eb851f
    f2c4:	000007b7 	.word	0x000007b7
    f2c8:	0001cb3c 	.word	0x0001cb3c
    f2cc:	0001a058 	.word	0x0001a058
    f2d0:	0001a074 	.word	0x0001a074

0000f2d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    f2d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f2d8:	e1a07000 	mov	r7, r0
    f2dc:	e1a04002 	mov	r4, r2
    f2e0:	e1a06001 	mov	r6, r1
    f2e4:	e3a00014 	mov	r0, #20, 0
    f2e8:	e1a08003 	mov	r8, r3
    f2ec:	eb00051b 	bl	10760 <operator new(unsigned int)>
    f2f0:	e5971004 	ldr	r1, [r7, #4]
    f2f4:	e3540000 	cmp	r4, #0, 0
    f2f8:	e0816006 	add	r6, r1, r6
    f2fc:	0a000034 	beq	f3d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
    f300:	e1a05000 	mov	r5, r0
    f304:	e597001c 	ldr	r0, [r7, #28]
    f308:	e59f30f0 	ldr	r3, [pc, #240]	; f400 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    f30c:	e59d2020 	ldr	r2, [sp, #32]
    f310:	e3500000 	cmp	r0, #0, 0
    f314:	e5854004 	str	r4, [r5, #4]
    f318:	e5856008 	str	r6, [r5, #8]
    f31c:	e585800c 	str	r8, [r5, #12]
    f320:	e5852010 	str	r2, [r5, #16]
    f324:	e5853000 	str	r3, [r5]
    f328:	1a000020 	bne	f3b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    f32c:	e2874018 	add	r4, r7, #24, 0
    f330:	e1a00004 	mov	r0, r4
    f334:	eb00109e 	bl	135b4 <CPtrList::GetFirst()>
    f338:	e2509000 	subs	r9, r0, #0, 0
    f33c:	0a00002a 	beq	f3ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    f340:	e59f80b8 	ldr	r8, [pc, #184]	; f400 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
    f344:	e1a01009 	mov	r1, r9
    f348:	e1a00004 	mov	r0, r4
    f34c:	eb0010af 	bl	13610 <CPtrList::GetPtr(TPtrListElement*)>
    f350:	e2503000 	subs	r3, r0, #0, 0
    f354:	0a00000d 	beq	f390 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
    f358:	e5932000 	ldr	r2, [r3]
    f35c:	e1520008 	cmp	r2, r8
    f360:	1a00000e 	bne	f3a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
    f364:	e5933008 	ldr	r3, [r3, #8]
    f368:	e1a01009 	mov	r1, r9
    f36c:	e0433006 	sub	r3, r3, r6
    f370:	e3530000 	cmp	r3, #0, 0
    f374:	e1a00004 	mov	r0, r4
    f378:	ca00000e 	bgt	f3b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
    f37c:	eb00108e 	bl	135bc <CPtrList::GetNext(TPtrListElement*)>
    f380:	e3500000 	cmp	r0, #0, 0
    f384:	0a000018 	beq	f3ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    f388:	e1a09000 	mov	r9, r0
    f38c:	eaffffec 	b	f344 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
    f390:	e59f206c 	ldr	r2, [pc, #108]	; f404 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    f394:	e59f106c 	ldr	r1, [pc, #108]	; f408 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    f398:	e59f006c 	ldr	r0, [pc, #108]	; f40c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    f39c:	eb0009d9 	bl	11b08 <assertion_failed>
    f3a0:	e3a02f65 	mov	r2, #404	; 0x194
    f3a4:	e59f105c 	ldr	r1, [pc, #92]	; f408 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    f3a8:	e59f0060 	ldr	r0, [pc, #96]	; f410 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    f3ac:	eb0009d5 	bl	11b08 <assertion_failed>
    f3b0:	eb000818 	bl	11418 <EnterCritical>
    f3b4:	eaffffdc 	b	f32c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    f3b8:	e1a02005 	mov	r2, r5
    f3bc:	eb0010a8 	bl	13664 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    f3c0:	e597301c 	ldr	r3, [r7, #28]
    f3c4:	e3530000 	cmp	r3, #0, 0
    f3c8:	1a000005 	bne	f3e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
    f3cc:	e1a00005 	mov	r0, r5
    f3d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f3d4:	e59f2038 	ldr	r2, [pc, #56]	; f414 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f3d8:	e59f1028 	ldr	r1, [pc, #40]	; f408 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    f3dc:	e59f0034 	ldr	r0, [pc, #52]	; f418 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    f3e0:	eb0009c8 	bl	11b08 <assertion_failed>
    f3e4:	eb000835 	bl	114c0 <LeaveCritical>
    f3e8:	eafffff7 	b	f3cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
    f3ec:	e1a01009 	mov	r1, r9
    f3f0:	e1a00004 	mov	r0, r4
    f3f4:	e1a02005 	mov	r2, r5
    f3f8:	eb0010d3 	bl	1374c <CPtrList::InsertAfter(TPtrListElement*, void*)>
    f3fc:	eaffffef 	b	f3c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
    f400:	4b544d43 	.word	0x4b544d43
    f404:	00000193 	.word	0x00000193
    f408:	00019fcc 	.word	0x00019fcc
    f40c:	0001a088 	.word	0x0001a088
    f410:	0001a098 	.word	0x0001a098
    f414:	00000183 	.word	0x00000183
    f418:	0001a48c 	.word	0x0001a48c

0000f41c <CTimer::CancelKernelTimer(unsigned int)>:
    f41c:	e92d4070 	push	{r4, r5, r6, lr}
    f420:	e2514000 	subs	r4, r1, #0, 0
    f424:	0a000019 	beq	f490 <CTimer::CancelKernelTimer(unsigned int)+0x74>
    f428:	e1a05000 	mov	r5, r0
    f42c:	e590001c 	ldr	r0, [r0, #28]
    f430:	e3500000 	cmp	r0, #0, 0
    f434:	1a000013 	bne	f488 <CTimer::CancelKernelTimer(unsigned int)+0x6c>
    f438:	e2856018 	add	r6, r5, #24, 0
    f43c:	e1a01004 	mov	r1, r4
    f440:	e1a00006 	mov	r0, r6
    f444:	eb00113d 	bl	13940 <CPtrList::Find(void*)>
    f448:	e2501000 	subs	r1, r0, #0, 0
    f44c:	0a000008 	beq	f474 <CTimer::CancelKernelTimer(unsigned int)+0x58>
    f450:	e59f3058 	ldr	r3, [pc, #88]	; f4b0 <CTimer::CancelKernelTimer(unsigned int)+0x94>
    f454:	e5942000 	ldr	r2, [r4]
    f458:	e1520003 	cmp	r2, r3
    f45c:	1a00000f 	bne	f4a0 <CTimer::CancelKernelTimer(unsigned int)+0x84>
    f460:	e1a00006 	mov	r0, r6
    f464:	eb0010f1 	bl	13830 <CPtrList::Remove(TPtrListElement*)>
    f468:	e1a00004 	mov	r0, r4
    f46c:	e3a01014 	mov	r1, #20, 0
    f470:	eb0004c8 	bl	10798 <operator delete(void*, unsigned int)>
    f474:	e595301c 	ldr	r3, [r5, #28]
    f478:	e3530000 	cmp	r3, #0, 0
    f47c:	08bd8070 	popeq	{r4, r5, r6, pc}
    f480:	e8bd4070 	pop	{r4, r5, r6, lr}
    f484:	ea00080d 	b	114c0 <LeaveCritical>
    f488:	eb0007e2 	bl	11418 <EnterCritical>
    f48c:	eaffffe9 	b	f438 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    f490:	e3a02e1b 	mov	r2, #432	; 0x1b0
    f494:	e59f1018 	ldr	r1, [pc, #24]	; f4b4 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    f498:	e59f0018 	ldr	r0, [pc, #24]	; f4b8 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
    f49c:	eb000999 	bl	11b08 <assertion_failed>
    f4a0:	e59f2014 	ldr	r2, [pc, #20]	; f4bc <CTimer::CancelKernelTimer(unsigned int)+0xa0>
    f4a4:	e59f1008 	ldr	r1, [pc, #8]	; f4b4 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    f4a8:	e59f0010 	ldr	r0, [pc, #16]	; f4c0 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
    f4ac:	eb000995 	bl	11b08 <assertion_failed>
    f4b0:	4b544d43 	.word	0x4b544d43
    f4b4:	00019fcc 	.word	0x00019fcc
    f4b8:	0001a000 	.word	0x0001a000
    f4bc:	000001b7 	.word	0x000001b7
    f4c0:	0001a00c 	.word	0x0001a00c

0000f4c4 <CTimer::PollKernelTimers()>:
    f4c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f4c8:	e1a05000 	mov	r5, r0
    f4cc:	e590001c 	ldr	r0, [r0, #28]
    f4d0:	e24dd008 	sub	sp, sp, #8, 0
    f4d4:	e3500000 	cmp	r0, #0, 0
    f4d8:	1a000038 	bne	f5c0 <CTimer::PollKernelTimers()+0xfc>
    f4dc:	e2857018 	add	r7, r5, #24, 0
    f4e0:	e1a00007 	mov	r0, r7
    f4e4:	eb001032 	bl	135b4 <CPtrList::GetFirst()>
    f4e8:	e2501000 	subs	r1, r0, #0, 0
    f4ec:	0a00003d 	beq	f5e8 <CTimer::PollKernelTimers()+0x124>
    f4f0:	e59f8110 	ldr	r8, [pc, #272]	; f608 <CTimer::PollKernelTimers()+0x144>
    f4f4:	e1a00007 	mov	r0, r7
    f4f8:	e58d1004 	str	r1, [sp, #4]
    f4fc:	eb001043 	bl	13610 <CPtrList::GetPtr(TPtrListElement*)>
    f500:	e2504000 	subs	r4, r0, #0, 0
    f504:	e59d1004 	ldr	r1, [sp, #4]
    f508:	0a00002e 	beq	f5c8 <CTimer::PollKernelTimers()+0x104>
    f50c:	e5943000 	ldr	r3, [r4]
    f510:	e1530008 	cmp	r3, r8
    f514:	1a00002f 	bne	f5d8 <CTimer::PollKernelTimers()+0x114>
    f518:	e5952004 	ldr	r2, [r5, #4]
    f51c:	e5943008 	ldr	r3, [r4, #8]
    f520:	e0433002 	sub	r3, r3, r2
    f524:	e3530000 	cmp	r3, #0, 0
    f528:	ca00002e 	bgt	f5e8 <CTimer::PollKernelTimers()+0x124>
    f52c:	e1a00007 	mov	r0, r7
    f530:	e58d1004 	str	r1, [sp, #4]
    f534:	eb001020 	bl	135bc <CPtrList::GetNext(TPtrListElement*)>
    f538:	e59d1004 	ldr	r1, [sp, #4]
    f53c:	e1a06000 	mov	r6, r0
    f540:	e1a00007 	mov	r0, r7
    f544:	eb0010b9 	bl	13830 <CPtrList::Remove(TPtrListElement*)>
    f548:	e595301c 	ldr	r3, [r5, #28]
    f54c:	e3530000 	cmp	r3, #0, 0
    f550:	1a000010 	bne	f598 <CTimer::PollKernelTimers()+0xd4>
    f554:	e5943004 	ldr	r3, [r4, #4]
    f558:	e3530000 	cmp	r3, #0, 0
    f55c:	0a000011 	beq	f5a8 <CTimer::PollKernelTimers()+0xe4>
    f560:	e1a00004 	mov	r0, r4
    f564:	e5942010 	ldr	r2, [r4, #16]
    f568:	e594100c 	ldr	r1, [r4, #12]
    f56c:	e12fff33 	blx	r3
    f570:	e1a00004 	mov	r0, r4
    f574:	e3a01014 	mov	r1, #20, 0
    f578:	eb000486 	bl	10798 <operator delete(void*, unsigned int)>
    f57c:	e595001c 	ldr	r0, [r5, #28]
    f580:	e3500000 	cmp	r0, #0, 0
    f584:	1a00000b 	bne	f5b8 <CTimer::PollKernelTimers()+0xf4>
    f588:	e3560000 	cmp	r6, #0, 0
    f58c:	0a000015 	beq	f5e8 <CTimer::PollKernelTimers()+0x124>
    f590:	e1a01006 	mov	r1, r6
    f594:	eaffffd6 	b	f4f4 <CTimer::PollKernelTimers()+0x30>
    f598:	eb0007c8 	bl	114c0 <LeaveCritical>
    f59c:	e5943004 	ldr	r3, [r4, #4]
    f5a0:	e3530000 	cmp	r3, #0, 0
    f5a4:	1affffed 	bne	f560 <CTimer::PollKernelTimers()+0x9c>
    f5a8:	e59f205c 	ldr	r2, [pc, #92]	; f60c <CTimer::PollKernelTimers()+0x148>
    f5ac:	e59f105c 	ldr	r1, [pc, #92]	; f610 <CTimer::PollKernelTimers()+0x14c>
    f5b0:	e59f005c 	ldr	r0, [pc, #92]	; f614 <CTimer::PollKernelTimers()+0x150>
    f5b4:	eb000953 	bl	11b08 <assertion_failed>
    f5b8:	eb000796 	bl	11418 <EnterCritical>
    f5bc:	eafffff1 	b	f588 <CTimer::PollKernelTimers()+0xc4>
    f5c0:	eb000794 	bl	11418 <EnterCritical>
    f5c4:	eaffffc4 	b	f4dc <CTimer::PollKernelTimers()+0x18>
    f5c8:	e3a02f73 	mov	r2, #460	; 0x1cc
    f5cc:	e59f103c 	ldr	r1, [pc, #60]	; f610 <CTimer::PollKernelTimers()+0x14c>
    f5d0:	e59f0040 	ldr	r0, [pc, #64]	; f618 <CTimer::PollKernelTimers()+0x154>
    f5d4:	eb00094b 	bl	11b08 <assertion_failed>
    f5d8:	e59f203c 	ldr	r2, [pc, #60]	; f61c <CTimer::PollKernelTimers()+0x158>
    f5dc:	e59f102c 	ldr	r1, [pc, #44]	; f610 <CTimer::PollKernelTimers()+0x14c>
    f5e0:	e59f0038 	ldr	r0, [pc, #56]	; f620 <CTimer::PollKernelTimers()+0x15c>
    f5e4:	eb000947 	bl	11b08 <assertion_failed>
    f5e8:	e595301c 	ldr	r3, [r5, #28]
    f5ec:	e3530000 	cmp	r3, #0, 0
    f5f0:	1a000001 	bne	f5fc <CTimer::PollKernelTimers()+0x138>
    f5f4:	e28dd008 	add	sp, sp, #8, 0
    f5f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f5fc:	e28dd008 	add	sp, sp, #8, 0
    f600:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    f604:	ea0007ad 	b	114c0 <LeaveCritical>
    f608:	4b544d43 	.word	0x4b544d43
    f60c:	000001db 	.word	0x000001db
    f610:	00019fcc 	.word	0x00019fcc
    f614:	0001a48c 	.word	0x0001a48c
    f618:	0001a000 	.word	0x0001a000
    f61c:	000001cd 	.word	0x000001cd
    f620:	0001a00c 	.word	0x0001a00c

0000f624 <CTimer::InterruptHandler()>:
    f624:	e92d4070 	push	{r4, r5, r6, lr}
    f628:	e3a03000 	mov	r3, #0, 0
    f62c:	e1a04000 	mov	r4, r0
    f630:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f634:	e59f20f4 	ldr	r2, [pc, #244]	; f730 <CTimer::InterruptHandler()+0x10c>
    f638:	e5923018 	ldr	r3, [r2, #24]
    f63c:	e2833c27 	add	r3, r3, #9984	; 0x2700
    f640:	e2833010 	add	r3, r3, #16, 0
    f644:	e5823018 	str	r3, [r2, #24]
    f648:	e5921004 	ldr	r1, [r2, #4]
    f64c:	e1530001 	cmp	r3, r1
    f650:	e3a01008 	mov	r1, #8, 0
    f654:	35923004 	ldrcc	r3, [r2, #4]
    f658:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    f65c:	32833010 	addcc	r3, r3, #16, 0
    f660:	35823018 	strcc	r3, [r2, #24]
    f664:	e59f20c4 	ldr	r2, [pc, #196]	; f730 <CTimer::InterruptHandler()+0x10c>
    f668:	e3a03000 	mov	r3, #0, 0
    f66c:	e5821000 	str	r1, [r2]
    f670:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f674:	e5900010 	ldr	r0, [r0, #16]
    f678:	e1500003 	cmp	r0, r3
    f67c:	1a000017 	bne	f6e0 <CTimer::InterruptHandler()+0xbc>
    f680:	e5942004 	ldr	r2, [r4, #4]
    f684:	e59f30a8 	ldr	r3, [pc, #168]	; f734 <CTimer::InterruptHandler()+0x110>
    f688:	e2822001 	add	r2, r2, #1, 0
    f68c:	e0831293 	umull	r1, r3, r3, r2
    f690:	e1a032a3 	lsr	r3, r3, #5
    f694:	e0833103 	add	r3, r3, r3, lsl #2
    f698:	e0833103 	add	r3, r3, r3, lsl #2
    f69c:	e0523103 	subs	r3, r2, r3, lsl #2
    f6a0:	e5842004 	str	r2, [r4, #4]
    f6a4:	0a000017 	beq	f708 <CTimer::InterruptHandler()+0xe4>
    f6a8:	e1a00004 	mov	r0, r4
    f6ac:	ebffff84 	bl	f4c4 <CTimer::PollKernelTimers()>
    f6b0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    f6b4:	e3530000 	cmp	r3, #0, 0
    f6b8:	08bd8070 	popeq	{r4, r5, r6, pc}
    f6bc:	e3a05000 	mov	r5, #0, 0
    f6c0:	e2846028 	add	r6, r4, #40, 0	; 0x28
    f6c4:	e4963004 	ldr	r3, [r6], #4
    f6c8:	e12fff33 	blx	r3
    f6cc:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    f6d0:	e2855001 	add	r5, r5, #1, 0
    f6d4:	e1530005 	cmp	r3, r5
    f6d8:	8afffff9 	bhi	f6c4 <CTimer::InterruptHandler()+0xa0>
    f6dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f6e0:	eb00074c 	bl	11418 <EnterCritical>
    f6e4:	e5943004 	ldr	r3, [r4, #4]
    f6e8:	e59f2048 	ldr	r2, [pc, #72]	; f738 <CTimer::InterruptHandler()+0x114>
    f6ec:	e2833001 	add	r3, r3, #1, 0
    f6f0:	e0020392 	mul	r2, r2, r3
    f6f4:	e59f1040 	ldr	r1, [pc, #64]	; f73c <CTimer::InterruptHandler()+0x118>
    f6f8:	e5843004 	str	r3, [r4, #4]
    f6fc:	e1510162 	cmp	r1, r2, ror #2
    f700:	e5943010 	ldr	r3, [r4, #16]
    f704:	3a000005 	bcc	f720 <CTimer::InterruptHandler()+0xfc>
    f708:	e5942008 	ldr	r2, [r4, #8]
    f70c:	e2822001 	add	r2, r2, #1, 0
    f710:	e5842008 	str	r2, [r4, #8]
    f714:	e594200c 	ldr	r2, [r4, #12]
    f718:	e2822001 	add	r2, r2, #1, 0
    f71c:	e584200c 	str	r2, [r4, #12]
    f720:	e3530000 	cmp	r3, #0, 0
    f724:	0affffdf 	beq	f6a8 <CTimer::InterruptHandler()+0x84>
    f728:	eb000764 	bl	114c0 <LeaveCritical>
    f72c:	eaffffdd 	b	f6a8 <CTimer::InterruptHandler()+0x84>
    f730:	20003000 	.word	0x20003000
    f734:	51eb851f 	.word	0x51eb851f
    f738:	c28f5c29 	.word	0xc28f5c29
    f73c:	028f5c28 	.word	0x028f5c28

0000f740 <CTimer::InterruptHandler(void*)>:
    f740:	e3500000 	cmp	r0, #0, 0
    f744:	0a000000 	beq	f74c <CTimer::InterruptHandler(void*)+0xc>
    f748:	eaffffb5 	b	f624 <CTimer::InterruptHandler()>
    f74c:	e92d4010 	push	{r4, lr}
    f750:	e59f2008 	ldr	r2, [pc, #8]	; f760 <CTimer::InterruptHandler(void*)+0x20>
    f754:	e59f1008 	ldr	r1, [pc, #8]	; f764 <CTimer::InterruptHandler(void*)+0x24>
    f758:	e59f0008 	ldr	r0, [pc, #8]	; f768 <CTimer::InterruptHandler(void*)+0x28>
    f75c:	eb0008e9 	bl	11b08 <assertion_failed>
    f760:	00000223 	.word	0x00000223
    f764:	00019fcc 	.word	0x00019fcc
    f768:	0001a0c0 	.word	0x0001a0c0

0000f76c <CTimer::TuneMsDelay()>:
    f76c:	e92d4070 	push	{r4, r5, r6, lr}
    f770:	e1a05000 	mov	r5, r0
    f774:	e5900020 	ldr	r0, [r0, #32]
    f778:	e24dd008 	sub	sp, sp, #8, 0
    f77c:	e0603280 	rsb	r3, r0, r0, lsl #5
    f780:	e0800103 	add	r0, r0, r3, lsl #2
    f784:	e1a00180 	lsl	r0, r0, #3
    f788:	e5954004 	ldr	r4, [r5, #4]
    f78c:	eb000b57 	bl	124f0 <DelayLoop>
    f790:	e5951004 	ldr	r1, [r5, #4]
    f794:	e59f0068 	ldr	r0, [pc, #104]	; f804 <CTimer::TuneMsDelay()+0x98>
    f798:	e0411004 	sub	r1, r1, r4
    f79c:	eb00245a 	bl	1890c <__udivsi3>
    f7a0:	e1a06000 	mov	r6, r0
    f7a4:	e5953020 	ldr	r3, [r5, #32]
    f7a8:	e59f4058 	ldr	r4, [pc, #88]	; f808 <CTimer::TuneMsDelay()+0x9c>
    f7ac:	e0030093 	mul	r3, r3, r0
    f7b0:	e0832394 	umull	r2, r3, r4, r3
    f7b4:	e59f1050 	ldr	r1, [pc, #80]	; f80c <CTimer::TuneMsDelay()+0xa0>
    f7b8:	e1a032a3 	lsr	r3, r3, #5
    f7bc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    f7c0:	e0821291 	umull	r1, r2, r1, r2
    f7c4:	e1a02322 	lsr	r2, r2, #6
    f7c8:	e5852024 	str	r2, [r5, #36]	; 0x24
    f7cc:	e5853020 	str	r3, [r5, #32]
    f7d0:	ebffebf2 	bl	a7a0 <CLogger::Get()>
    f7d4:	e0832694 	umull	r2, r3, r4, r6
    f7d8:	e1a032a3 	lsr	r3, r3, #5
    f7dc:	e0832103 	add	r2, r3, r3, lsl #2
    f7e0:	e0822102 	add	r2, r2, r2, lsl #2
    f7e4:	e0466102 	sub	r6, r6, r2, lsl #2
    f7e8:	e88d0048 	stm	sp, {r3, r6}
    f7ec:	e3a02003 	mov	r2, #3, 0
    f7f0:	e59f3018 	ldr	r3, [pc, #24]	; f810 <CTimer::TuneMsDelay()+0xa4>
    f7f4:	e59f1018 	ldr	r1, [pc, #24]	; f814 <CTimer::TuneMsDelay()+0xa8>
    f7f8:	ebffeb2a 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7fc:	e28dd008 	add	sp, sp, #8, 0
    f800:	e8bd8070 	pop	{r4, r5, r6, pc}
    f804:	00002710 	.word	0x00002710
    f808:	51eb851f 	.word	0x51eb851f
    f80c:	10624dd3 	.word	0x10624dd3
    f810:	0001a0cc 	.word	0x0001a0cc
    f814:	0001a188 	.word	0x0001a188

0000f818 <CTimer::Initialize()>:
    f818:	e92d4070 	push	{r4, r5, r6, lr}
    f81c:	e1a04000 	mov	r4, r0
    f820:	e5900000 	ldr	r0, [r0]
    f824:	e3500000 	cmp	r0, #0, 0
    f828:	0a000011 	beq	f874 <CTimer::Initialize()+0x5c>
    f82c:	e1a03004 	mov	r3, r4
    f830:	e3a01003 	mov	r1, #3, 0
    f834:	e59f2048 	ldr	r2, [pc, #72]	; f884 <CTimer::Initialize()+0x6c>
    f838:	eb0007f4 	bl	11810 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    f83c:	e3a05000 	mov	r5, #0, 0
    f840:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    f844:	e59f203c 	ldr	r2, [pc, #60]	; f888 <CTimer::Initialize()+0x70>
    f848:	e59f303c 	ldr	r3, [pc, #60]	; f88c <CTimer::Initialize()+0x74>
    f84c:	e1a00004 	mov	r0, r4
    f850:	e5823004 	str	r3, [r2, #4]
    f854:	e5923004 	ldr	r3, [r2, #4]
    f858:	e2833c27 	add	r3, r3, #9984	; 0x2700
    f85c:	e2833010 	add	r3, r3, #16, 0
    f860:	e5823018 	str	r3, [r2, #24]
    f864:	ebffffc0 	bl	f76c <CTimer::TuneMsDelay()>
    f868:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    f86c:	e3a00001 	mov	r0, #1, 0
    f870:	e8bd8070 	pop	{r4, r5, r6, pc}
    f874:	e3a02065 	mov	r2, #101, 0	; 0x65
    f878:	e59f1010 	ldr	r1, [pc, #16]	; f890 <CTimer::Initialize()+0x78>
    f87c:	e59f0010 	ldr	r0, [pc, #16]	; f894 <CTimer::Initialize()+0x7c>
    f880:	eb0008a0 	bl	11b08 <assertion_failed>
    f884:	0000f740 	.word	0x0000f740
    f888:	20003000 	.word	0x20003000
    f88c:	fe363c80 	.word	0xfe363c80
    f890:	00019fcc 	.word	0x00019fcc
    f894:	00019fe8 	.word	0x00019fe8

0000f898 <CTimer::RegisterPeriodicHandler(void (*)())>:
    f898:	e3510000 	cmp	r1, #0, 0
    f89c:	e92d4010 	push	{r4, lr}
    f8a0:	0a00000b 	beq	f8d4 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
    f8a4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    f8a8:	e3530003 	cmp	r3, #3, 0
    f8ac:	8a00000c 	bhi	f8e4 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
    f8b0:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    f8b4:	e3a02000 	mov	r2, #0, 0
    f8b8:	e283300a 	add	r3, r3, #10, 0
    f8bc:	e7801103 	str	r1, [r0, r3, lsl #2]
    f8c0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    f8c4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    f8c8:	e2833001 	add	r3, r3, #1, 0
    f8cc:	e5803038 	str	r3, [r0, #56]	; 0x38
    f8d0:	e8bd8010 	pop	{r4, pc}
    f8d4:	e59f2018 	ldr	r2, [pc, #24]	; f8f4 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
    f8d8:	e59f1018 	ldr	r1, [pc, #24]	; f8f8 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
    f8dc:	e59f0018 	ldr	r0, [pc, #24]	; f8fc <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
    f8e0:	eb000888 	bl	11b08 <assertion_failed>
    f8e4:	e59f2014 	ldr	r2, [pc, #20]	; f900 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
    f8e8:	e59f1008 	ldr	r1, [pc, #8]	; f8f8 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
    f8ec:	e59f0010 	ldr	r0, [pc, #16]	; f904 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
    f8f0:	eb000884 	bl	11b08 <assertion_failed>
    f8f4:	00000239 	.word	0x00000239
    f8f8:	00019fcc 	.word	0x00019fcc
    f8fc:	0001a48c 	.word	0x0001a48c
    f900:	0000023b 	.word	0x0000023b
    f904:	0001a0e4 	.word	0x0001a0e4

0000f908 <CTimer::SimpleMsDelay(unsigned int)>:
    f908:	e3500000 	cmp	r0, #0, 0
    f90c:	012fff1e 	bxeq	lr
    f910:	e0603280 	rsb	r3, r0, r0, lsl #5
    f914:	e0800103 	add	r0, r0, r3, lsl #2
    f918:	e1b00180 	lsls	r0, r0, #3
    f91c:	012fff1e 	bxeq	lr
    f920:	eafffce2 	b	ecb0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000f924 <CTimer::SimpleusDelay(unsigned int)>:
    f924:	e3500000 	cmp	r0, #0, 0
    f928:	012fff1e 	bxeq	lr
    f92c:	eafffcdf 	b	ecb0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000f930 <CTimer::IsLeapYear(unsigned int)>:
    f930:	e59f3030 	ldr	r3, [pc, #48]	; f968 <CTimer::IsLeapYear(unsigned int)+0x38>
    f934:	e59f2030 	ldr	r2, [pc, #48]	; f96c <CTimer::IsLeapYear(unsigned int)+0x3c>
    f938:	e0030093 	mul	r3, r3, r0
    f93c:	e1520163 	cmp	r2, r3, ror #2
    f940:	2a000003 	bcs	f954 <CTimer::IsLeapYear(unsigned int)+0x24>
    f944:	e3100003 	tst	r0, #3, 0
    f948:	03a00001 	moveq	r0, #1, 0
    f94c:	13a00000 	movne	r0, #0, 0
    f950:	e12fff1e 	bx	lr
    f954:	e59f2014 	ldr	r2, [pc, #20]	; f970 <CTimer::IsLeapYear(unsigned int)+0x40>
    f958:	e1520263 	cmp	r2, r3, ror #4
    f95c:	23a00001 	movcs	r0, #1, 0
    f960:	33a00000 	movcc	r0, #0, 0
    f964:	e12fff1e 	bx	lr
    f968:	c28f5c29 	.word	0xc28f5c29
    f96c:	028f5c28 	.word	0x028f5c28
    f970:	00a3d70a 	.word	0x00a3d70a

0000f974 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    f974:	e3500001 	cmp	r0, #1, 0
    f978:	0a000002 	beq	f988 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
    f97c:	e59f3048 	ldr	r3, [pc, #72]	; f9cc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
    f980:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    f984:	e12fff1e 	bx	lr
    f988:	e59f3040 	ldr	r3, [pc, #64]	; f9d0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x5c>
    f98c:	e59f2040 	ldr	r2, [pc, #64]	; f9d4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    f990:	e0030193 	mul	r3, r3, r1
    f994:	e1520163 	cmp	r2, r3, ror #2
    f998:	2a000006 	bcs	f9b8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
    f99c:	e3110003 	tst	r1, #3, 0
    f9a0:	03a03001 	moveq	r3, #1, 0
    f9a4:	13a03000 	movne	r3, #0, 0
    f9a8:	e3530000 	cmp	r3, #0, 0
    f9ac:	0afffff2 	beq	f97c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    f9b0:	e3a0001d 	mov	r0, #29, 0
    f9b4:	e12fff1e 	bx	lr
    f9b8:	e59f2018 	ldr	r2, [pc, #24]	; f9d8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x64>
    f9bc:	e1520263 	cmp	r2, r3, ror #4
    f9c0:	23a03001 	movcs	r3, #1, 0
    f9c4:	33a03000 	movcc	r3, #0, 0
    f9c8:	eafffff6 	b	f9a8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x34>
    f9cc:	0001a158 	.word	0x0001a158
    f9d0:	c28f5c29 	.word	0xc28f5c29
    f9d4:	028f5c28 	.word	0x028f5c28
    f9d8:	00a3d70a 	.word	0x00a3d70a

0000f9dc <CTimer::Get()>:
    f9dc:	e59f301c 	ldr	r3, [pc, #28]	; fa00 <CTimer::Get()+0x24>
    f9e0:	e5930000 	ldr	r0, [r3]
    f9e4:	e3500000 	cmp	r0, #0, 0
    f9e8:	112fff1e 	bxne	lr
    f9ec:	e3a02f9f 	mov	r2, #636	; 0x27c
    f9f0:	e92d4010 	push	{r4, lr}
    f9f4:	e59f1008 	ldr	r1, [pc, #8]	; fa04 <CTimer::Get()+0x28>
    f9f8:	e59f0008 	ldr	r0, [pc, #8]	; fa08 <CTimer::Get()+0x2c>
    f9fc:	eb000841 	bl	11b08 <assertion_failed>
    fa00:	0001cc70 	.word	0x0001cc70
    fa04:	00019fcc 	.word	0x00019fcc
    fa08:	0001a118 	.word	0x0001a118

0000fa0c <memset>:
    fa0c:	e352000f 	cmp	r2, #15, 0
    fa10:	e200c003 	and	ip, r0, #3, 0
    fa14:	93a03000 	movls	r3, #0, 0
    fa18:	83a03001 	movhi	r3, #1, 0
    fa1c:	e35c0000 	cmp	ip, #0, 0
    fa20:	13a03000 	movne	r3, #0, 0
    fa24:	e3530000 	cmp	r3, #0, 0
    fa28:	1a000008 	bne	fa50 <memset+0x44>
    fa2c:	e3520000 	cmp	r2, #0, 0
    fa30:	e1a03000 	mov	r3, r0
    fa34:	012fff1e 	bxeq	lr
    fa38:	e6af1071 	sxtb	r1, r1
    fa3c:	e0802002 	add	r2, r0, r2
    fa40:	e4c31001 	strb	r1, [r3], #1
    fa44:	e1530002 	cmp	r3, r2
    fa48:	1afffffc 	bne	fa40 <memset+0x34>
    fa4c:	e12fff1e 	bx	lr
    fa50:	e2423010 	sub	r3, r2, #16, 0
    fa54:	e3c3c00f 	bic	ip, r3, #15, 0
    fa58:	e92d4010 	push	{r4, lr}
    fa5c:	e2804020 	add	r4, r0, #32, 0
    fa60:	e181e401 	orr	lr, r1, r1, lsl #8
    fa64:	e084400c 	add	r4, r4, ip
    fa68:	e1a03223 	lsr	r3, r3, #4
    fa6c:	e18ee80e 	orr	lr, lr, lr, lsl #16
    fa70:	e280c010 	add	ip, r0, #16, 0
    fa74:	e50ce010 	str	lr, [ip, #-16]
    fa78:	e50ce00c 	str	lr, [ip, #-12]
    fa7c:	e50ce008 	str	lr, [ip, #-8]
    fa80:	e50ce004 	str	lr, [ip, #-4]
    fa84:	e28cc010 	add	ip, ip, #16, 0
    fa88:	e15c0004 	cmp	ip, r4
    fa8c:	1afffff8 	bne	fa74 <memset+0x68>
    fa90:	e202200f 	and	r2, r2, #15, 0
    fa94:	e2833001 	add	r3, r3, #1, 0
    fa98:	e3520000 	cmp	r2, #0, 0
    fa9c:	e0803203 	add	r3, r0, r3, lsl #4
    faa0:	08bd8010 	popeq	{r4, pc}
    faa4:	e6af1071 	sxtb	r1, r1
    faa8:	e0832002 	add	r2, r3, r2
    faac:	e4c31001 	strb	r1, [r3], #1
    fab0:	e1530002 	cmp	r3, r2
    fab4:	1afffffc 	bne	faac <memset+0xa0>
    fab8:	e8bd8010 	pop	{r4, pc}

0000fabc <memmove>:
    fabc:	e1500001 	cmp	r0, r1
    fac0:	9a000002 	bls	fad0 <memmove+0x14>
    fac4:	e0813002 	add	r3, r1, r2
    fac8:	e1530000 	cmp	r3, r0
    facc:	8a000000 	bhi	fad4 <memmove+0x18>
    fad0:	ea000216 	b	10330 <memcpy>
    fad4:	e3520000 	cmp	r2, #0, 0
    fad8:	e0802002 	add	r2, r0, r2
    fadc:	012fff1e 	bxeq	lr
    fae0:	e173c0d1 	ldrsb	ip, [r3, #-1]!
    fae4:	e1510003 	cmp	r1, r3
    fae8:	e562c001 	strb	ip, [r2, #-1]!
    faec:	1afffffb 	bne	fae0 <memmove+0x24>
    faf0:	e12fff1e 	bx	lr

0000faf4 <memcmp>:
    faf4:	e3520000 	cmp	r2, #0, 0
    faf8:	e242c001 	sub	ip, r2, #1, 0
    fafc:	0a00000c 	beq	fb34 <memcmp+0x40>
    fb00:	e080c00c 	add	ip, r0, ip
    fb04:	e2411001 	sub	r1, r1, #1, 0
    fb08:	e2400001 	sub	r0, r0, #1, 0
    fb0c:	ea000002 	b	fb1c <memcmp+0x28>
    fb10:	3a000009 	bcc	fb3c <memcmp+0x48>
    fb14:	e150000c 	cmp	r0, ip
    fb18:	0a000005 	beq	fb34 <memcmp+0x40>
    fb1c:	e5f02001 	ldrb	r2, [r0, #1]!
    fb20:	e5f13001 	ldrb	r3, [r1, #1]!
    fb24:	e1520003 	cmp	r2, r3
    fb28:	9afffff8 	bls	fb10 <memcmp+0x1c>
    fb2c:	e3a00001 	mov	r0, #1, 0
    fb30:	e12fff1e 	bx	lr
    fb34:	e3a00000 	mov	r0, #0, 0
    fb38:	e12fff1e 	bx	lr
    fb3c:	e3e00000 	mvn	r0, #0, 0
    fb40:	e12fff1e 	bx	lr

0000fb44 <strlen>:
    fb44:	e0d030d1 	ldrsb	r3, [r0], #1
    fb48:	e3530000 	cmp	r3, #0, 0
    fb4c:	0a000004 	beq	fb64 <strlen+0x20>
    fb50:	e3a03000 	mov	r3, #0, 0
    fb54:	e0d020d1 	ldrsb	r2, [r0], #1
    fb58:	e2833001 	add	r3, r3, #1, 0
    fb5c:	e3520000 	cmp	r2, #0, 0
    fb60:	1afffffb 	bne	fb54 <strlen+0x10>
    fb64:	e1a00003 	mov	r0, r3
    fb68:	e12fff1e 	bx	lr

0000fb6c <strcmp>:
    fb6c:	e1d030d0 	ldrsb	r3, [r0]
    fb70:	e3530000 	cmp	r3, #0, 0
    fb74:	1a000006 	bne	fb94 <strcmp+0x28>
    fb78:	ea000016 	b	fbd8 <strcmp+0x6c>
    fb7c:	e1520003 	cmp	r2, r3
    fb80:	ba00000c 	blt	fbb8 <strcmp+0x4c>
    fb84:	ca00000d 	bgt	fbc0 <strcmp+0x54>
    fb88:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fb8c:	e3530000 	cmp	r3, #0, 0
    fb90:	0a00000c 	beq	fbc8 <strcmp+0x5c>
    fb94:	e1a0c001 	mov	ip, r1
    fb98:	e0d120d1 	ldrsb	r2, [r1], #1
    fb9c:	e3520000 	cmp	r2, #0, 0
    fba0:	1afffff5 	bne	fb7c <strcmp+0x10>
    fba4:	e1530002 	cmp	r3, r2
    fba8:	ca000002 	bgt	fbb8 <strcmp+0x4c>
    fbac:	b3e00000 	mvnlt	r0, #0, 0
    fbb0:	a3a00000 	movge	r0, #0, 0
    fbb4:	e12fff1e 	bx	lr
    fbb8:	e3a00001 	mov	r0, #1, 0
    fbbc:	e12fff1e 	bx	lr
    fbc0:	e3e00000 	mvn	r0, #0, 0
    fbc4:	e12fff1e 	bx	lr
    fbc8:	e1dc20d1 	ldrsb	r2, [ip, #1]
    fbcc:	e1530002 	cmp	r3, r2
    fbd0:	dafffff5 	ble	fbac <strcmp+0x40>
    fbd4:	eafffff7 	b	fbb8 <strcmp+0x4c>
    fbd8:	e1d120d0 	ldrsb	r2, [r1]
    fbdc:	eafffff0 	b	fba4 <strcmp+0x38>

0000fbe0 <strcasecmp>:
    fbe0:	e2400001 	sub	r0, r0, #1, 0
    fbe4:	ea000009 	b	fc10 <strcasecmp+0x30>
    fbe8:	e0d130d1 	ldrsb	r3, [r1], #1
    fbec:	e243c061 	sub	ip, r3, #97, 0	; 0x61
    fbf0:	e35c0019 	cmp	ip, #25, 0
    fbf4:	92433020 	subls	r3, r3, #32, 0
    fbf8:	9a000001 	bls	fc04 <strcasecmp+0x24>
    fbfc:	e3530000 	cmp	r3, #0, 0
    fc00:	0a000012 	beq	fc50 <strcasecmp+0x70>
    fc04:	e1520003 	cmp	r2, r3
    fc08:	ca000012 	bgt	fc58 <strcasecmp+0x78>
    fc0c:	ba000013 	blt	fc60 <strcasecmp+0x80>
    fc10:	e1f020d1 	ldrsb	r2, [r0, #1]!
    fc14:	e2423061 	sub	r3, r2, #97, 0	; 0x61
    fc18:	e3530019 	cmp	r3, #25, 0
    fc1c:	92422020 	subls	r2, r2, #32, 0
    fc20:	9afffff0 	bls	fbe8 <strcasecmp+0x8>
    fc24:	e3520000 	cmp	r2, #0, 0
    fc28:	1affffee 	bne	fbe8 <strcasecmp+0x8>
    fc2c:	e1d130d0 	ldrsb	r3, [r1]
    fc30:	e2431061 	sub	r1, r3, #97, 0	; 0x61
    fc34:	e3510019 	cmp	r1, #25, 0
    fc38:	92433020 	subls	r3, r3, #32, 0
    fc3c:	8a000003 	bhi	fc50 <strcasecmp+0x70>
    fc40:	e1530002 	cmp	r3, r2
    fc44:	d3a00000 	movle	r0, #0, 0
    fc48:	c3e00000 	mvngt	r0, #0, 0
    fc4c:	e12fff1e 	bx	lr
    fc50:	e1530002 	cmp	r3, r2
    fc54:	aafffff9 	bge	fc40 <strcasecmp+0x60>
    fc58:	e3a00001 	mov	r0, #1, 0
    fc5c:	e12fff1e 	bx	lr
    fc60:	e3e00000 	mvn	r0, #0, 0
    fc64:	e12fff1e 	bx	lr

0000fc68 <strncmp>:
    fc68:	e3520000 	cmp	r2, #0, 0
    fc6c:	0a000015 	beq	fcc8 <strncmp+0x60>
    fc70:	e240c001 	sub	ip, r0, #1, 0
    fc74:	e0810002 	add	r0, r1, r2
    fc78:	ea000007 	b	fc9c <strncmp+0x34>
    fc7c:	e0d120d1 	ldrsb	r2, [r1], #1
    fc80:	e3520000 	cmp	r2, #0, 0
    fc84:	0a000008 	beq	fcac <strncmp+0x44>
    fc88:	e1530002 	cmp	r3, r2
    fc8c:	ca00000b 	bgt	fcc0 <strncmp+0x58>
    fc90:	ba00000e 	blt	fcd0 <strncmp+0x68>
    fc94:	e1510000 	cmp	r1, r0
    fc98:	0a00000a 	beq	fcc8 <strncmp+0x60>
    fc9c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fca0:	e3530000 	cmp	r3, #0, 0
    fca4:	1afffff4 	bne	fc7c <strncmp+0x14>
    fca8:	e1d120d0 	ldrsb	r2, [r1]
    fcac:	e1520003 	cmp	r2, r3
    fcb0:	ba000002 	blt	fcc0 <strncmp+0x58>
    fcb4:	c3e00000 	mvngt	r0, #0, 0
    fcb8:	d3a00000 	movle	r0, #0, 0
    fcbc:	e12fff1e 	bx	lr
    fcc0:	e3a00001 	mov	r0, #1, 0
    fcc4:	e12fff1e 	bx	lr
    fcc8:	e3a00000 	mov	r0, #0, 0
    fccc:	e12fff1e 	bx	lr
    fcd0:	e3e00000 	mvn	r0, #0, 0
    fcd4:	e12fff1e 	bx	lr

0000fcd8 <strncasecmp>:
    fcd8:	e3520000 	cmp	r2, #0, 0
    fcdc:	0a00001e 	beq	fd5c <strncasecmp+0x84>
    fce0:	e240c001 	sub	ip, r0, #1, 0
    fce4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fce8:	e2430061 	sub	r0, r3, #97, 0	; 0x61
    fcec:	e3500019 	cmp	r0, #25, 0
    fcf0:	92433020 	subls	r3, r3, #32, 0
    fcf4:	8a00000e 	bhi	fd34 <strncasecmp+0x5c>
    fcf8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fcfc:	e0d100d1 	ldrsb	r0, [r1], #1
    fd00:	e240e061 	sub	lr, r0, #97, 0	; 0x61
    fd04:	e35e0019 	cmp	lr, #25, 0
    fd08:	92400020 	subls	r0, r0, #32, 0
    fd0c:	9a000014 	bls	fd64 <strncasecmp+0x8c>
    fd10:	e3500000 	cmp	r0, #0, 0
    fd14:	1a000012 	bne	fd64 <strncasecmp+0x8c>
    fd18:	e1530000 	cmp	r3, r0
    fd1c:	ca000022 	bgt	fdac <strncasecmp+0xd4>
    fd20:	e1500003 	cmp	r0, r3
    fd24:	d3a02000 	movle	r2, #0, 0
    fd28:	c3e02000 	mvngt	r2, #0, 0
    fd2c:	e1a00002 	mov	r0, r2
    fd30:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fd34:	e3530000 	cmp	r3, #0, 0
    fd38:	1affffee 	bne	fcf8 <strncasecmp+0x20>
    fd3c:	e1d100d0 	ldrsb	r0, [r1]
    fd40:	e2402061 	sub	r2, r0, #97, 0	; 0x61
    fd44:	e3520019 	cmp	r2, #25, 0
    fd48:	92400020 	subls	r0, r0, #32, 0
    fd4c:	8a00001c 	bhi	fdc4 <strncasecmp+0xec>
    fd50:	e1500003 	cmp	r0, r3
    fd54:	d3a02000 	movle	r2, #0, 0
    fd58:	c3e02000 	mvngt	r2, #0, 0
    fd5c:	e1a00002 	mov	r0, r2
    fd60:	e12fff1e 	bx	lr
    fd64:	e1530000 	cmp	r3, r0
    fd68:	ca00000f 	bgt	fdac <strncasecmp+0xd4>
    fd6c:	ba000011 	blt	fdb8 <strncasecmp+0xe0>
    fd70:	e2522001 	subs	r2, r2, #1, 0
    fd74:	0affffec 	beq	fd2c <strncasecmp+0x54>
    fd78:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fd7c:	e2430061 	sub	r0, r3, #97, 0	; 0x61
    fd80:	e3500019 	cmp	r0, #25, 0
    fd84:	92433020 	subls	r3, r3, #32, 0
    fd88:	9affffdb 	bls	fcfc <strncasecmp+0x24>
    fd8c:	e3530000 	cmp	r3, #0, 0
    fd90:	1affffd9 	bne	fcfc <strncasecmp+0x24>
    fd94:	e1d100d0 	ldrsb	r0, [r1]
    fd98:	e2402061 	sub	r2, r0, #97, 0	; 0x61
    fd9c:	e3520019 	cmp	r2, #25, 0
    fda0:	92400020 	subls	r0, r0, #32, 0
    fda4:	9affffdd 	bls	fd20 <strncasecmp+0x48>
    fda8:	eaffffda 	b	fd18 <strncasecmp+0x40>
    fdac:	e3a02001 	mov	r2, #1, 0
    fdb0:	e1a00002 	mov	r0, r2
    fdb4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fdb8:	e3e02000 	mvn	r2, #0, 0
    fdbc:	e1a00002 	mov	r0, r2
    fdc0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fdc4:	e1530000 	cmp	r3, r0
    fdc8:	c3a02001 	movgt	r2, #1, 0
    fdcc:	daffffdf 	ble	fd50 <strncasecmp+0x78>
    fdd0:	eaffffe1 	b	fd5c <strncasecmp+0x84>

0000fdd4 <strcpy>:
    fdd4:	e1d130d0 	ldrsb	r3, [r1]
    fdd8:	e1a02000 	mov	r2, r0
    fddc:	e3530000 	cmp	r3, #0, 0
    fde0:	0a000003 	beq	fdf4 <strcpy+0x20>
    fde4:	e4c23001 	strb	r3, [r2], #1
    fde8:	e1f130d1 	ldrsb	r3, [r1, #1]!
    fdec:	e3530000 	cmp	r3, #0, 0
    fdf0:	1afffffb 	bne	fde4 <strcpy+0x10>
    fdf4:	e3a03000 	mov	r3, #0, 0
    fdf8:	e5c23000 	strb	r3, [r2]
    fdfc:	e12fff1e 	bx	lr

0000fe00 <strncpy>:
    fe00:	e3520000 	cmp	r2, #0, 0
    fe04:	012fff1e 	bxeq	lr
    fe08:	e1a0c000 	mov	ip, r0
    fe0c:	e2411001 	sub	r1, r1, #1, 0
    fe10:	e0802002 	add	r2, r0, r2
    fe14:	ea000002 	b	fe24 <strncpy+0x24>
    fe18:	e4cc3001 	strb	r3, [ip], #1
    fe1c:	e15c0002 	cmp	ip, r2
    fe20:	012fff1e 	bxeq	lr
    fe24:	e1f130d1 	ldrsb	r3, [r1, #1]!
    fe28:	e3530000 	cmp	r3, #0, 0
    fe2c:	1afffff9 	bne	fe18 <strncpy+0x18>
    fe30:	e5cc3000 	strb	r3, [ip]
    fe34:	e12fff1e 	bx	lr

0000fe38 <strcat>:
    fe38:	e1d030d0 	ldrsb	r3, [r0]
    fe3c:	e3530000 	cmp	r3, #0, 0
    fe40:	e1a03000 	mov	r3, r0
    fe44:	0a000002 	beq	fe54 <strcat+0x1c>
    fe48:	e1f320d1 	ldrsb	r2, [r3, #1]!
    fe4c:	e3520000 	cmp	r2, #0, 0
    fe50:	1afffffc 	bne	fe48 <strcat+0x10>
    fe54:	e1d120d0 	ldrsb	r2, [r1]
    fe58:	e3520000 	cmp	r2, #0, 0
    fe5c:	0a000003 	beq	fe70 <strcat+0x38>
    fe60:	e4c32001 	strb	r2, [r3], #1
    fe64:	e1f120d1 	ldrsb	r2, [r1, #1]!
    fe68:	e3520000 	cmp	r2, #0, 0
    fe6c:	1afffffb 	bne	fe60 <strcat+0x28>
    fe70:	e3a02000 	mov	r2, #0, 0
    fe74:	e5c32000 	strb	r2, [r3]
    fe78:	e12fff1e 	bx	lr

0000fe7c <strchr>:
    fe7c:	e1d030d0 	ldrsb	r3, [r0]
    fe80:	e3530000 	cmp	r3, #0, 0
    fe84:	0a000004 	beq	fe9c <strchr+0x20>
    fe88:	e1530001 	cmp	r3, r1
    fe8c:	012fff1e 	bxeq	lr
    fe90:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fe94:	e3530000 	cmp	r3, #0, 0
    fe98:	1afffffa 	bne	fe88 <strchr+0xc>
    fe9c:	e1a00003 	mov	r0, r3
    fea0:	e12fff1e 	bx	lr

0000fea4 <strstr>:
    fea4:	e1d030d0 	ldrsb	r3, [r0]
    fea8:	e3530000 	cmp	r3, #0, 0
    feac:	1a000003 	bne	fec0 <strstr+0x1c>
    feb0:	e1d130d0 	ldrsb	r3, [r1]
    feb4:	e3530000 	cmp	r3, #0, 0
    feb8:	13a00000 	movne	r0, #0, 0
    febc:	e12fff1e 	bx	lr
    fec0:	e92d4010 	push	{r4, lr}
    fec4:	e1d140d0 	ldrsb	r4, [r1]
    fec8:	e3540000 	cmp	r4, #0, 0
    fecc:	08bd8010 	popeq	{r4, pc}
    fed0:	e1a0e001 	mov	lr, r1
    fed4:	e1a03004 	mov	r3, r4
    fed8:	e2402001 	sub	r2, r0, #1, 0
    fedc:	ea000002 	b	feec <strstr+0x48>
    fee0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    fee4:	e3530000 	cmp	r3, #0, 0
    fee8:	08bd8010 	popeq	{r4, pc}
    feec:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
    fef0:	e15c0003 	cmp	ip, r3
    fef4:	0afffff9 	beq	fee0 <strstr+0x3c>
    fef8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fefc:	e3530000 	cmp	r3, #0, 0
    ff00:	1afffff0 	bne	fec8 <strstr+0x24>
    ff04:	e1a00003 	mov	r0, r3
    ff08:	e8bd8010 	pop	{r4, pc}

0000ff0c <strtok_r>:
    ff0c:	e3500000 	cmp	r0, #0, 0
    ff10:	0a000027 	beq	ffb4 <strtok_r+0xa8>
    ff14:	e1d0c0d0 	ldrsb	ip, [r0]
    ff18:	e35c0000 	cmp	ip, #0, 0
    ff1c:	0a00002a 	beq	ffcc <strtok_r+0xc0>
    ff20:	e92d4030 	push	{r4, r5, lr}
    ff24:	e1d140d0 	ldrsb	r4, [r1]
    ff28:	e3540000 	cmp	r4, #0, 0
    ff2c:	0a00000a 	beq	ff5c <strtok_r+0x50>
    ff30:	e1a0e001 	mov	lr, r1
    ff34:	e1a03004 	mov	r3, r4
    ff38:	ea000002 	b	ff48 <strtok_r+0x3c>
    ff3c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    ff40:	e3530000 	cmp	r3, #0, 0
    ff44:	0a000004 	beq	ff5c <strtok_r+0x50>
    ff48:	e153000c 	cmp	r3, ip
    ff4c:	1afffffa 	bne	ff3c <strtok_r+0x30>
    ff50:	e3540000 	cmp	r4, #0, 0
    ff54:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
    ff58:	1afffff4 	bne	ff30 <strtok_r+0x24>
    ff5c:	e35c0000 	cmp	ip, #0, 0
    ff60:	11a05000 	movne	r5, r0
    ff64:	0a00001b 	beq	ffd8 <strtok_r+0xcc>
    ff68:	e3540000 	cmp	r4, #0, 0
    ff6c:	0a00000b 	beq	ffa0 <strtok_r+0x94>
    ff70:	e1a03004 	mov	r3, r4
    ff74:	e1a0e001 	mov	lr, r1
    ff78:	ea000002 	b	ff88 <strtok_r+0x7c>
    ff7c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    ff80:	e3530000 	cmp	r3, #0, 0
    ff84:	0a000005 	beq	ffa0 <strtok_r+0x94>
    ff88:	e153000c 	cmp	r3, ip
    ff8c:	1afffffa 	bne	ff7c <strtok_r+0x70>
    ff90:	e3a03000 	mov	r3, #0, 0
    ff94:	e4c53001 	strb	r3, [r5], #1
    ff98:	e5825000 	str	r5, [r2]
    ff9c:	e8bd8030 	pop	{r4, r5, pc}
    ffa0:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    ffa4:	e35c0000 	cmp	ip, #0, 0
    ffa8:	1affffee 	bne	ff68 <strtok_r+0x5c>
    ffac:	e5825000 	str	r5, [r2]
    ffb0:	e8bd8030 	pop	{r4, r5, pc}
    ffb4:	e5920000 	ldr	r0, [r2]
    ffb8:	e3500000 	cmp	r0, #0, 0
    ffbc:	012fff1e 	bxeq	lr
    ffc0:	e1d0c0d0 	ldrsb	ip, [r0]
    ffc4:	e35c0000 	cmp	ip, #0, 0
    ffc8:	1affffd4 	bne	ff20 <strtok_r+0x14>
    ffcc:	e3a00000 	mov	r0, #0, 0
    ffd0:	e5820000 	str	r0, [r2]
    ffd4:	e12fff1e 	bx	lr
    ffd8:	e3a00000 	mov	r0, #0, 0
    ffdc:	e5820000 	str	r0, [r2]
    ffe0:	e8bd8030 	pop	{r4, r5, pc}

0000ffe4 <strtoul>:
    ffe4:	e3510000 	cmp	r1, #0, 0
    ffe8:	e2423002 	sub	r3, r2, #2, 0
    ffec:	15810000 	strne	r0, [r1]
    fff0:	e3520000 	cmp	r2, #0, 0
    fff4:	13530022 	cmpne	r3, #34, 0	; 0x22
    fff8:	8a000044 	bhi	10110 <strtoul+0x12c>
    fffc:	e92d4070 	push	{r4, r5, r6, lr}
   10000:	e1a0e000 	mov	lr, r0
   10004:	e1de30d0 	ldrsb	r3, [lr]
   10008:	e1a0c00e 	mov	ip, lr
   1000c:	e2430009 	sub	r0, r3, #9, 0
   10010:	e3530020 	cmp	r3, #32, 0
   10014:	e28ee001 	add	lr, lr, #1, 0
   10018:	e6ef0070 	uxtb	r0, r0
   1001c:	0afffff8 	beq	10004 <strtoul+0x20>
   10020:	e3500004 	cmp	r0, #4, 0
   10024:	9afffff6 	bls	10004 <strtoul+0x20>
   10028:	e353002b 	cmp	r3, #43, 0	; 0x2b
   1002c:	0a000027 	beq	100d0 <strtoul+0xec>
   10030:	e353002d 	cmp	r3, #45, 0	; 0x2d
   10034:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   10038:	03a06001 	moveq	r6, #1, 0
   1003c:	01a0c00e 	moveq	ip, lr
   10040:	13a06000 	movne	r6, #0, 0
   10044:	e3530030 	cmp	r3, #48, 0	; 0x30
   10048:	0a000025 	beq	100e4 <strtoul+0x100>
   1004c:	e3520000 	cmp	r2, #0, 0
   10050:	03a0200a 	moveq	r2, #10, 0
   10054:	e353002f 	cmp	r3, #47, 0	; 0x2f
   10058:	e1a0e003 	mov	lr, r3
   1005c:	da00003c 	ble	10154 <strtoul+0x170>
   10060:	e3a05001 	mov	r5, #1, 0
   10064:	e3a04000 	mov	r4, #0, 0
   10068:	ea000008 	b	10090 <strtoul+0xac>
   1006c:	e020e294 	mla	r0, r4, r2, lr
   10070:	e1500004 	cmp	r0, r4
   10074:	3a00002b 	bcc	10128 <strtoul+0x144>
   10078:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   1007c:	e3a05000 	mov	r5, #0, 0
   10080:	e35e002f 	cmp	lr, #47, 0	; 0x2f
   10084:	e1a0300e 	mov	r3, lr
   10088:	da00002b 	ble	1013c <strtoul+0x158>
   1008c:	e1a04000 	mov	r4, r0
   10090:	e2433061 	sub	r3, r3, #97, 0	; 0x61
   10094:	e3530019 	cmp	r3, #25, 0
   10098:	924ee020 	subls	lr, lr, #32, 0
   1009c:	e35e0040 	cmp	lr, #64, 0	; 0x40
   100a0:	c24ee007 	subgt	lr, lr, #7, 0
   100a4:	e24ee030 	sub	lr, lr, #48, 0	; 0x30
   100a8:	e15e0002 	cmp	lr, r2
   100ac:	baffffee 	blt	1006c <strtoul+0x88>
   100b0:	e1a00004 	mov	r0, r4
   100b4:	e2255001 	eor	r5, r5, #1, 0
   100b8:	e3510000 	cmp	r1, #0, 0
   100bc:	e0055006 	and	r5, r5, r6
   100c0:	1581c000 	strne	ip, [r1]
   100c4:	e3550000 	cmp	r5, #0, 0
   100c8:	12600000 	rsbne	r0, r0, #0, 0
   100cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   100d0:	e1dc30d1 	ldrsb	r3, [ip, #1]
   100d4:	e3a06000 	mov	r6, #0, 0
   100d8:	e3530030 	cmp	r3, #48, 0	; 0x30
   100dc:	e1a0c00e 	mov	ip, lr
   100e0:	1affffd9 	bne	1004c <strtoul+0x68>
   100e4:	e1dc30d1 	ldrsb	r3, [ip, #1]
   100e8:	e28ce001 	add	lr, ip, #1, 0
   100ec:	e3c30020 	bic	r0, r3, #32, 0
   100f0:	e3500058 	cmp	r0, #88, 0	; 0x58
   100f4:	1a000007 	bne	10118 <strtoul+0x134>
   100f8:	e3d23010 	bics	r3, r2, #16, 0
   100fc:	1a000012 	bne	1014c <strtoul+0x168>
   10100:	e1dc30d2 	ldrsb	r3, [ip, #2]
   10104:	e3a02010 	mov	r2, #16, 0
   10108:	e28cc002 	add	ip, ip, #2, 0
   1010c:	eaffffd0 	b	10054 <strtoul+0x70>
   10110:	e3a00000 	mov	r0, #0, 0
   10114:	e12fff1e 	bx	lr
   10118:	e3520000 	cmp	r2, #0, 0
   1011c:	e1a0c00e 	mov	ip, lr
   10120:	03a02008 	moveq	r2, #8, 0
   10124:	eaffffca 	b	10054 <strtoul+0x70>
   10128:	e3510000 	cmp	r1, #0, 0
   1012c:	0a000004 	beq	10144 <strtoul+0x160>
   10130:	e3e00000 	mvn	r0, #0, 0
   10134:	e581c000 	str	ip, [r1]
   10138:	e8bd8070 	pop	{r4, r5, r6, pc}
   1013c:	e3a05001 	mov	r5, #1, 0
   10140:	eaffffdc 	b	100b8 <strtoul+0xd4>
   10144:	e3e00000 	mvn	r0, #0, 0
   10148:	e8bd8070 	pop	{r4, r5, r6, pc}
   1014c:	e3a00000 	mov	r0, #0, 0
   10150:	e8bd8070 	pop	{r4, r5, r6, pc}
   10154:	e3510000 	cmp	r1, #0, 0
   10158:	0afffffb 	beq	1014c <strtoul+0x168>
   1015c:	e3a00000 	mov	r0, #0, 0
   10160:	e581c000 	str	ip, [r1]
   10164:	e8bd8070 	pop	{r4, r5, r6, pc}

00010168 <strtoull>:
   10168:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1016c:	e2423002 	sub	r3, r2, #2, 0
   10170:	e251e000 	subs	lr, r1, #0, 0
   10174:	158e0000 	strne	r0, [lr]
   10178:	e3520000 	cmp	r2, #0, 0
   1017c:	13530022 	cmpne	r3, #34, 0	; 0x22
   10180:	8a00004f 	bhi	102c4 <strtoull+0x15c>
   10184:	e1a01000 	mov	r1, r0
   10188:	e1d130d0 	ldrsb	r3, [r1]
   1018c:	e1a0c001 	mov	ip, r1
   10190:	e2430009 	sub	r0, r3, #9, 0
   10194:	e3530020 	cmp	r3, #32, 0
   10198:	e2811001 	add	r1, r1, #1, 0
   1019c:	e6ef0070 	uxtb	r0, r0
   101a0:	0afffff8 	beq	10188 <strtoull+0x20>
   101a4:	e3500004 	cmp	r0, #4, 0
   101a8:	9afffff6 	bls	10188 <strtoull+0x20>
   101ac:	e353002b 	cmp	r3, #43, 0	; 0x2b
   101b0:	0a000034 	beq	10288 <strtoull+0x120>
   101b4:	e353002d 	cmp	r3, #45, 0	; 0x2d
   101b8:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   101bc:	03a08001 	moveq	r8, #1, 0
   101c0:	01a0c001 	moveq	ip, r1
   101c4:	13a08000 	movne	r8, #0, 0
   101c8:	e3530030 	cmp	r3, #48, 0	; 0x30
   101cc:	0a000032 	beq	1029c <strtoull+0x134>
   101d0:	e3520000 	cmp	r2, #0, 0
   101d4:	03a0200a 	moveq	r2, #10, 0
   101d8:	e353002f 	cmp	r3, #47, 0	; 0x2f
   101dc:	e1a09003 	mov	r9, r3
   101e0:	da000049 	ble	1030c <strtoull+0x1a4>
   101e4:	e3a0a001 	mov	sl, #1, 0
   101e8:	e3a04000 	mov	r4, #0, 0
   101ec:	e3a05000 	mov	r5, #0, 0
   101f0:	e1a06002 	mov	r6, r2
   101f4:	e1a07fc2 	asr	r7, r2, #31
   101f8:	ea00000f 	b	1023c <strtoull+0xd4>
   101fc:	e0030592 	mul	r3, r2, r5
   10200:	e0810492 	umull	r0, r1, r2, r4
   10204:	e0233794 	mla	r3, r4, r7, r3
   10208:	e0900009 	adds	r0, r0, r9
   1020c:	e0831001 	add	r1, r3, r1
   10210:	e0a11fc9 	adc	r1, r1, r9, asr #31
   10214:	e1510005 	cmp	r1, r5
   10218:	01500004 	cmpeq	r0, r4
   1021c:	3a00002f 	bcc	102e0 <strtoull+0x178>
   10220:	e1fc90d1 	ldrsb	r9, [ip, #1]!
   10224:	e3a0a000 	mov	sl, #0, 0
   10228:	e359002f 	cmp	r9, #47, 0	; 0x2f
   1022c:	e1a03009 	mov	r3, r9
   10230:	da000030 	ble	102f8 <strtoull+0x190>
   10234:	e1a04000 	mov	r4, r0
   10238:	e1a05001 	mov	r5, r1
   1023c:	e2433061 	sub	r3, r3, #97, 0	; 0x61
   10240:	e3530019 	cmp	r3, #25, 0
   10244:	92499020 	subls	r9, r9, #32, 0
   10248:	e3590040 	cmp	r9, #64, 0	; 0x40
   1024c:	c2499007 	subgt	r9, r9, #7, 0
   10250:	e2499030 	sub	r9, r9, #48, 0	; 0x30
   10254:	e1590002 	cmp	r9, r2
   10258:	baffffe7 	blt	101fc <strtoull+0x94>
   1025c:	e1a00004 	mov	r0, r4
   10260:	e1a01005 	mov	r1, r5
   10264:	e22aa001 	eor	sl, sl, #1, 0
   10268:	e35e0000 	cmp	lr, #0, 0
   1026c:	e008800a 	and	r8, r8, sl
   10270:	158ec000 	strne	ip, [lr]
   10274:	e3580000 	cmp	r8, #0, 0
   10278:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1027c:	e2700000 	rsbs	r0, r0, #0, 0
   10280:	e2e11000 	rsc	r1, r1, #0, 0
   10284:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10288:	e1dc30d1 	ldrsb	r3, [ip, #1]
   1028c:	e3a08000 	mov	r8, #0, 0
   10290:	e3530030 	cmp	r3, #48, 0	; 0x30
   10294:	e1a0c001 	mov	ip, r1
   10298:	1affffcc 	bne	101d0 <strtoull+0x68>
   1029c:	e1dc30d1 	ldrsb	r3, [ip, #1]
   102a0:	e28c0001 	add	r0, ip, #1, 0
   102a4:	e3c31020 	bic	r1, r3, #32, 0
   102a8:	e3510058 	cmp	r1, #88, 0	; 0x58
   102ac:	1a000007 	bne	102d0 <strtoull+0x168>
   102b0:	e3d23010 	bics	r3, r2, #16, 0
   102b4:	01dc30d2 	ldrsbeq	r3, [ip, #2]
   102b8:	03a02010 	moveq	r2, #16, 0
   102bc:	028cc002 	addeq	ip, ip, #2, 0
   102c0:	0affffc4 	beq	101d8 <strtoull+0x70>
   102c4:	e3a00000 	mov	r0, #0, 0
   102c8:	e3a01000 	mov	r1, #0, 0
   102cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   102d0:	e3520000 	cmp	r2, #0, 0
   102d4:	e1a0c000 	mov	ip, r0
   102d8:	03a02008 	moveq	r2, #8, 0
   102dc:	eaffffbd 	b	101d8 <strtoull+0x70>
   102e0:	e35e0000 	cmp	lr, #0, 0
   102e4:	0a000005 	beq	10300 <strtoull+0x198>
   102e8:	e3e00000 	mvn	r0, #0, 0
   102ec:	e3a01000 	mov	r1, #0, 0
   102f0:	e58ec000 	str	ip, [lr]
   102f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   102f8:	e3a0a001 	mov	sl, #1, 0
   102fc:	eaffffd9 	b	10268 <strtoull+0x100>
   10300:	e3e00000 	mvn	r0, #0, 0
   10304:	e3a01000 	mov	r1, #0, 0
   10308:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1030c:	e35e0000 	cmp	lr, #0, 0
   10310:	e3a00000 	mov	r0, #0, 0
   10314:	e3a01000 	mov	r1, #0, 0
   10318:	158ec000 	strne	ip, [lr]
   1031c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010320 <atoi>:
   10320:	e3a0200a 	mov	r2, #10, 0
   10324:	e3a01000 	mov	r1, #0, 0
   10328:	eaffff2d 	b	ffe4 <strtoul>

0001032c <char2int>:
   1032c:	e12fff1e 	bx	lr

00010330 <memcpy>:
   10330:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   10334:	e352007f 	cmp	r2, #127, 0	; 0x7f
   10338:	9a00000b 	bls	1036c <memcpy+0x3c>
   1033c:	e3110003 	tst	r1, #3, 0
   10340:	1a000009 	bne	1036c <memcpy+0x3c>
   10344:	e3100003 	tst	r0, #3, 0
   10348:	1a000007 	bne	1036c <memcpy+0x3c>
   1034c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   10350:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10354:	e2422020 	sub	r2, r2, #32, 0
   10358:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   1035c:	f5d1f040 	pld	[r1, #64]	; 0x40
   10360:	e352001f 	cmp	r2, #31, 0
   10364:	8afffff9 	bhi	10350 <memcpy+0x20>
   10368:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   1036c:	e3520000 	cmp	r2, #0, 0
   10370:	0a000003 	beq	10384 <memcpy+0x54>
   10374:	e4d13001 	ldrb	r3, [r1], #1
   10378:	e2522001 	subs	r2, r2, #1, 0
   1037c:	e4c03001 	strb	r3, [r0], #1
   10380:	1afffffb 	bne	10374 <memcpy+0x44>
   10384:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   10388:	e12fff1e 	bx	lr

0001038c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   1038c:	e3a03000 	mov	r3, #0, 0
   10390:	e3510001 	cmp	r1, #1, 0
   10394:	91a0c002 	movls	ip, r2
   10398:	8382c001 	orrhi	ip, r2, #1, 0
   1039c:	e92d4070 	push	{r4, r5, r6, lr}
   103a0:	e1a04000 	mov	r4, r0
   103a4:	e59f0128 	ldr	r0, [pc, #296]	; 104d4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   103a8:	e15c0003 	cmp	ip, r3
   103ac:	e24dd020 	sub	sp, sp, #32, 0
   103b0:	e5c42004 	strb	r2, [r4, #4]
   103b4:	e5841008 	str	r1, [r4, #8]
   103b8:	e5840000 	str	r0, [r4]
   103bc:	e5843010 	str	r3, [r4, #16]
   103c0:	0a000002 	beq	103d0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   103c4:	e1a00004 	mov	r0, r4
   103c8:	e28dd020 	add	sp, sp, #32, 0
   103cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   103d0:	e59f5100 	ldr	r5, [pc, #256]	; 104d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   103d4:	e5950004 	ldr	r0, [r5, #4]
   103d8:	e1500003 	cmp	r0, r3
   103dc:	1a00000e 	bne	1041c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   103e0:	e5956000 	ldr	r6, [r5]
   103e4:	e3560000 	cmp	r6, #0, 0
   103e8:	0a00000f 	beq	1042c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   103ec:	e3a02000 	mov	r2, #0, 0
   103f0:	e5943008 	ldr	r3, [r4, #8]
   103f4:	e7862103 	str	r2, [r6, r3, lsl #2]
   103f8:	e5953004 	ldr	r3, [r5, #4]
   103fc:	e3530000 	cmp	r3, #0, 0
   10400:	1a000025 	bne	1049c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   10404:	e1a00004 	mov	r0, r4
   10408:	e3a01000 	mov	r1, #0, 0
   1040c:	eb00003b 	bl	10500 <CVirtualGPIOPin::Write(unsigned int)>
   10410:	e1a00004 	mov	r0, r4
   10414:	e28dd020 	add	sp, sp, #32, 0
   10418:	e8bd8070 	pop	{r4, r5, r6, pc}
   1041c:	eb0003fd 	bl	11418 <EnterCritical>
   10420:	e5956000 	ldr	r6, [r5]
   10424:	e3560000 	cmp	r6, #0, 0
   10428:	1affffef 	bne	103ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   1042c:	e3a00001 	mov	r0, #1, 0
   10430:	eb0003b8 	bl	11318 <CMemorySystem::GetCoherentPage(unsigned int)>
   10434:	e1a03000 	mov	r3, r0
   10438:	e1a01006 	mov	r1, r6
   1043c:	e28d0008 	add	r0, sp, #8, 0
   10440:	e5853000 	str	r3, [r5]
   10444:	eb00070c 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10448:	e3a03004 	mov	r3, #4, 0
   1044c:	e595c000 	ldr	ip, [r5]
   10450:	e58d3000 	str	r3, [sp]
   10454:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   10458:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   1045c:	e3a03010 	mov	r3, #16, 0
   10460:	e59f1074 	ldr	r1, [pc, #116]	; 104dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   10464:	e28d0008 	add	r0, sp, #8, 0
   10468:	e28d2010 	add	r2, sp, #16, 0
   1046c:	e58dc01c 	str	ip, [sp, #28]
   10470:	eb00070d 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10474:	e3500000 	cmp	r0, #0, 0
   10478:	0a000009 	beq	104a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   1047c:	e28d0008 	add	r0, sp, #8, 0
   10480:	eb000704 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   10484:	e5956000 	ldr	r6, [r5]
   10488:	e3560000 	cmp	r6, #0, 0
   1048c:	1affffd6 	bne	103ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   10490:	e5953004 	ldr	r3, [r5, #4]
   10494:	e3530000 	cmp	r3, #0, 0
   10498:	0affffd9 	beq	10404 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   1049c:	eb000407 	bl	114c0 <LeaveCritical>
   104a0:	eaffffd7 	b	10404 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   104a4:	e3a03010 	mov	r3, #16, 0
   104a8:	e58d0000 	str	r0, [sp]
   104ac:	e59f102c 	ldr	r1, [pc, #44]	; 104e0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x154>
   104b0:	e28d2010 	add	r2, sp, #16, 0
   104b4:	e28d0008 	add	r0, sp, #8, 0
   104b8:	eb0006fb 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   104bc:	e3500000 	cmp	r0, #0, 0
   104c0:	159d301c 	ldrne	r3, [sp, #28]
   104c4:	05850000 	streq	r0, [r5]
   104c8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   104cc:	15853000 	strne	r3, [r5]
   104d0:	eaffffe9 	b	1047c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   104d4:	0001a198 	.word	0x0001a198
   104d8:	0001cc74 	.word	0x0001cc74
   104dc:	00048020 	.word	0x00048020
   104e0:	00040010 	.word	0x00040010

000104e4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   104e4:	e12fff1e 	bx	lr

000104e8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   104e8:	e92d4010 	push	{r4, lr}
   104ec:	e1a04000 	mov	r4, r0
   104f0:	e3a01014 	mov	r1, #20, 0
   104f4:	eb0000a7 	bl	10798 <operator delete(void*, unsigned int)>
   104f8:	e1a00004 	mov	r0, r4
   104fc:	e8bd8010 	pop	{r4, pc}

00010500 <CVirtualGPIOPin::Write(unsigned int)>:
   10500:	e92d4070 	push	{r4, r5, r6, lr}
   10504:	e5d03004 	ldrb	r3, [r0, #4]
   10508:	e1a04000 	mov	r4, r0
   1050c:	e3530000 	cmp	r3, #0, 0
   10510:	e1a05001 	mov	r5, r1
   10514:	e24dd028 	sub	sp, sp, #40, 0	; 0x28
   10518:	0a000012 	beq	10568 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   1051c:	e5901008 	ldr	r1, [r0, #8]
   10520:	e3510000 	cmp	r1, #0, 0
   10524:	1a000033 	bne	105f8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   10528:	e28d000c 	add	r0, sp, #12, 0
   1052c:	eb0006d2 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10530:	e3a03008 	mov	r3, #8, 0
   10534:	e58d3000 	str	r3, [sp]
   10538:	e3a03014 	mov	r3, #20, 0
   1053c:	e3a0c082 	mov	ip, #130, 0	; 0x82
   10540:	e59f10e0 	ldr	r1, [pc, #224]	; 10628 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   10544:	e28d000c 	add	r0, sp, #12, 0
   10548:	e08d2003 	add	r2, sp, r3
   1054c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10550:	e58dc020 	str	ip, [sp, #32]
   10554:	eb0006d4 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10558:	e28d000c 	add	r0, sp, #12, 0
   1055c:	eb0006cd 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   10560:	e28dd028 	add	sp, sp, #40, 0	; 0x28
   10564:	e8bd8070 	pop	{r4, r5, r6, pc}
   10568:	e5903008 	ldr	r3, [r0, #8]
   1056c:	e3530001 	cmp	r3, #1, 0
   10570:	8afffffa 	bhi	10560 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   10574:	e59f60b0 	ldr	r6, [pc, #176]	; 1062c <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   10578:	e3510001 	cmp	r1, #1, 0
   1057c:	e5962000 	ldr	r2, [r6]
   10580:	93a03000 	movls	r3, #0, 0
   10584:	83a03001 	movhi	r3, #1, 0
   10588:	e3520000 	cmp	r2, #0, 0
   1058c:	03a03001 	moveq	r3, #1, 0
   10590:	e3530000 	cmp	r3, #0, 0
   10594:	1afffff1 	bne	10560 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   10598:	e5960004 	ldr	r0, [r6, #4]
   1059c:	e3500000 	cmp	r0, #0, 0
   105a0:	1a00001e 	bne	10620 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   105a4:	e1d421b0 	ldrh	r2, [r4, #16]
   105a8:	e1d431b2 	ldrh	r3, [r4, #18]
   105ac:	e584500c 	str	r5, [r4, #12]
   105b0:	e0421003 	sub	r1, r2, r3
   105b4:	e6bf1071 	sxth	r1, r1
   105b8:	e3510000 	cmp	r1, #0, 0
   105bc:	da000011 	ble	10608 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   105c0:	e3550000 	cmp	r5, #0, 0
   105c4:	02833001 	addeq	r3, r3, #1, 0
   105c8:	06ff3073 	uxtheq	r3, r3
   105cc:	01c431b2 	strheq	r3, [r4, #18]
   105d0:	1a000003 	bne	105e4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   105d4:	e5940008 	ldr	r0, [r4, #8]
   105d8:	e5961000 	ldr	r1, [r6]
   105dc:	e1833802 	orr	r3, r3, r2, lsl #16
   105e0:	e7813100 	str	r3, [r1, r0, lsl #2]
   105e4:	e5963004 	ldr	r3, [r6, #4]
   105e8:	e3530000 	cmp	r3, #0, 0
   105ec:	0affffdb 	beq	10560 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   105f0:	eb0003b2 	bl	114c0 <LeaveCritical>
   105f4:	eaffffd9 	b	10560 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   105f8:	e59f1030 	ldr	r1, [pc, #48]	; 10630 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   105fc:	e3a0205b 	mov	r2, #91, 0	; 0x5b
   10600:	e2810014 	add	r0, r1, #20, 0
   10604:	eb00053f 	bl	11b08 <assertion_failed>
   10608:	e3550000 	cmp	r5, #0, 0
   1060c:	0afffff4 	beq	105e4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   10610:	e2822001 	add	r2, r2, #1, 0
   10614:	e6ff2072 	uxth	r2, r2
   10618:	e1c421b0 	strh	r2, [r4, #16]
   1061c:	eaffffec 	b	105d4 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   10620:	eb00037c 	bl	11418 <EnterCritical>
   10624:	eaffffde 	b	105a4 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   10628:	00038041 	.word	0x00038041
   1062c:	0001cc74 	.word	0x0001cc74
   10630:	0001a1a0 	.word	0x0001a1a0

00010634 <CVirtualGPIOPin::Invert()>:
   10634:	e590100c 	ldr	r1, [r0, #12]
   10638:	e2211001 	eor	r1, r1, #1, 0
   1063c:	eaffffaf 	b	10500 <CVirtualGPIOPin::Write(unsigned int)>

00010640 <__static_initialization_and_destruction_0(int, int)>:
   10640:	e59f3014 	ldr	r3, [pc, #20]	; 1065c <__static_initialization_and_destruction_0(int, int)+0x1c>
   10644:	e1510003 	cmp	r1, r3
   10648:	03500001 	cmpeq	r0, #1, 0
   1064c:	03a02000 	moveq	r2, #0, 0
   10650:	059f3008 	ldreq	r3, [pc, #8]	; 10660 <__static_initialization_and_destruction_0(int, int)+0x20>
   10654:	05832004 	streq	r2, [r3, #4]
   10658:	e12fff1e 	bx	lr
   1065c:	0000ffff 	.word	0x0000ffff
   10660:	0001cc74 	.word	0x0001cc74

00010664 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   10664:	e3a02000 	mov	r2, #0, 0
   10668:	e59f3004 	ldr	r3, [pc, #4]	; 10674 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   1066c:	e5832004 	str	r2, [r3, #4]
   10670:	e12fff1e 	bx	lr
   10674:	0001cc74 	.word	0x0001cc74

00010678 <ChainBootStub(void const*, unsigned int)>:
   10678:	e2811003 	add	r1, r1, #3, 0
   1067c:	e1b01121 	lsrs	r1, r1, #2
   10680:	0a000007 	beq	106a4 <ChainBootStub(void const*, unsigned int)+0x2c>
   10684:	e1a03000 	mov	r3, r0
   10688:	e0800101 	add	r0, r0, r1, lsl #2
   1068c:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   10690:	e083200c 	add	r2, r3, ip
   10694:	e4931004 	ldr	r1, [r3], #4
   10698:	e1530000 	cmp	r3, r0
   1069c:	e5821000 	str	r1, [r2]
   106a0:	1afffffa 	bne	10690 <ChainBootStub(void const*, unsigned int)+0x18>
   106a4:	e3a03000 	mov	r3, #0, 0
   106a8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   106ac:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   106b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   106b4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   106b8:	e3a03902 	mov	r3, #32768	; 0x8000
   106bc:	e12fff13 	bx	r3

000106c0 <EnableChainBoot>:
   106c0:	e92d4010 	push	{r4, lr}
   106c4:	e1a0c001 	mov	ip, r1
   106c8:	e1a0e000 	mov	lr, r0
   106cc:	e59f302c 	ldr	r3, [pc, #44]	; 10700 <EnableChainBoot+0x40>
   106d0:	e3a02b01 	mov	r2, #1024	; 0x400
   106d4:	e59f1028 	ldr	r1, [pc, #40]	; 10704 <EnableChainBoot+0x44>
   106d8:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   106dc:	e583e000 	str	lr, [r3]
   106e0:	e583c004 	str	ip, [r3, #4]
   106e4:	ebffff11 	bl	10330 <memcpy>
   106e8:	e3a03000 	mov	r3, #0, 0
   106ec:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   106f0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   106f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   106f8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   106fc:	e8bd8010 	pop	{r4, pc}
   10700:	0001cc7c 	.word	0x0001cc7c
   10704:	00010678 	.word	0x00010678

00010708 <IsChainBootEnabled>:
   10708:	e59f300c 	ldr	r3, [pc, #12]	; 1071c <IsChainBootEnabled+0x14>
   1070c:	e5930000 	ldr	r0, [r3]
   10710:	e2500000 	subs	r0, r0, #0, 0
   10714:	13a00001 	movne	r0, #1, 0
   10718:	e12fff1e 	bx	lr
   1071c:	0001cc7c 	.word	0x0001cc7c

00010720 <DoChainBoot>:
   10720:	e59f3008 	ldr	r3, [pc, #8]	; 10730 <DoChainBoot+0x10>
   10724:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   10728:	e1c300d0 	ldrd	r0, [r3]
   1072c:	e12fff12 	bx	r2
   10730:	0001cc7c 	.word	0x0001cc7c

00010734 <operator new(unsigned int, int)>:
   10734:	e3d13002 	bics	r3, r1, #2, 0
   10738:	e1a01000 	mov	r1, r0
   1073c:	0a000001 	beq	10748 <operator new(unsigned int, int)+0x14>
   10740:	e3a00000 	mov	r0, #0, 0
   10744:	e12fff1e 	bx	lr
   10748:	e59f3008 	ldr	r3, [pc, #8]	; 10758 <operator new(unsigned int, int)+0x24>
   1074c:	e5930000 	ldr	r0, [r3]
   10750:	e280000c 	add	r0, r0, #12, 0
   10754:	ea000035 	b	10830 <CHeapAllocator::Allocate(unsigned int)>
   10758:	0001cc88 	.word	0x0001cc88

0001075c <operator new[](unsigned int, int)>:
   1075c:	eafffff4 	b	10734 <operator new(unsigned int, int)>

00010760 <operator new(unsigned int)>:
   10760:	e59f300c 	ldr	r3, [pc, #12]	; 10774 <operator new(unsigned int)+0x14>
   10764:	e1a01000 	mov	r1, r0
   10768:	e5930000 	ldr	r0, [r3]
   1076c:	e280000c 	add	r0, r0, #12, 0
   10770:	ea00002e 	b	10830 <CHeapAllocator::Allocate(unsigned int)>
   10774:	0001cc88 	.word	0x0001cc88

00010778 <operator new[](unsigned int)>:
   10778:	eafffff8 	b	10760 <operator new(unsigned int)>

0001077c <operator delete(void*)>:
   1077c:	e59f300c 	ldr	r3, [pc, #12]	; 10790 <operator delete(void*)+0x14>
   10780:	e1a01000 	mov	r1, r0
   10784:	e5930000 	ldr	r0, [r3]
   10788:	e280000c 	add	r0, r0, #12, 0
   1078c:	ea0000a4 	b	10a24 <CHeapAllocator::Free(void*)>
   10790:	0001cc88 	.word	0x0001cc88

00010794 <operator delete[](void*)>:
   10794:	eafffff8 	b	1077c <operator delete(void*)>

00010798 <operator delete(void*, unsigned int)>:
   10798:	e59f300c 	ldr	r3, [pc, #12]	; 107ac <operator delete(void*, unsigned int)+0x14>
   1079c:	e1a01000 	mov	r1, r0
   107a0:	e5930000 	ldr	r0, [r3]
   107a4:	e280000c 	add	r0, r0, #12, 0
   107a8:	ea00009d 	b	10a24 <CHeapAllocator::Free(void*)>
   107ac:	0001cc88 	.word	0x0001cc88

000107b0 <operator delete[](void*, unsigned int)>:
   107b0:	eafffff8 	b	10798 <operator delete(void*, unsigned int)>

000107b4 <CHeapAllocator::CHeapAllocator(char const*)>:
   107b4:	e3a03000 	mov	r3, #0, 0
   107b8:	e3a02001 	mov	r2, #1, 0
   107bc:	e92d4010 	push	{r4, lr}
   107c0:	e1a04000 	mov	r4, r0
   107c4:	e5801000 	str	r1, [r0]
   107c8:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   107cc:	e5803004 	str	r3, [r0, #4]
   107d0:	e5803008 	str	r3, [r0, #8]
   107d4:	e580300c 	str	r3, [r0, #12]
   107d8:	e1a01003 	mov	r1, r3
   107dc:	e3a020a8 	mov	r2, #168, 0	; 0xa8
   107e0:	e2800010 	add	r0, r0, #16, 0
   107e4:	ebfffc88 	bl	fa0c <memset>
   107e8:	e1a03004 	mov	r3, r4
   107ec:	e59f201c 	ldr	r2, [pc, #28]	; 10810 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   107f0:	e2840038 	add	r0, r4, #56, 0	; 0x38
   107f4:	e4921004 	ldr	r1, [r2], #4
   107f8:	e2833008 	add	r3, r3, #8, 0
   107fc:	e5831008 	str	r1, [r3, #8]
   10800:	e1530000 	cmp	r3, r0
   10804:	1afffffa 	bne	107f4 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   10808:	e1a00004 	mov	r0, r4
   1080c:	e8bd8010 	pop	{r4, pc}
   10810:	0001cb6c 	.word	0x0001cb6c

00010814 <CHeapAllocator::~CHeapAllocator()>:
   10814:	e12fff1e 	bx	lr

00010818 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   10818:	e0812002 	add	r2, r1, r2
   1081c:	e980000e 	stmib	r0, {r1, r2, r3}
   10820:	e12fff1e 	bx	lr

00010824 <CHeapAllocator::GetFreeSpace() const>:
   10824:	e9900005 	ldmib	r0, {r0, r2}
   10828:	e0420000 	sub	r0, r2, r0
   1082c:	e12fff1e 	bx	lr

00010830 <CHeapAllocator::Allocate(unsigned int)>:
   10830:	e5903004 	ldr	r3, [r0, #4]
   10834:	e3530000 	cmp	r3, #0, 0
   10838:	0a000072 	beq	10a08 <CHeapAllocator::Allocate(unsigned int)+0x1d8>
   1083c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10840:	e1a05000 	mov	r5, r0
   10844:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   10848:	e1a04001 	mov	r4, r1
   1084c:	e3500000 	cmp	r0, #0, 0
   10850:	1a000055 	bne	109ac <CHeapAllocator::Allocate(unsigned int)+0x17c>
   10854:	e5953010 	ldr	r3, [r5, #16]
   10858:	e3530000 	cmp	r3, #0, 0
   1085c:	0a00002b 	beq	10910 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   10860:	e2852010 	add	r2, r5, #16, 0
   10864:	ea000002 	b	10874 <CHeapAllocator::Allocate(unsigned int)+0x44>
   10868:	e5b23008 	ldr	r3, [r2, #8]!
   1086c:	e3530000 	cmp	r3, #0, 0
   10870:	0a000026 	beq	10910 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   10874:	e1540003 	cmp	r4, r3
   10878:	8afffffa 	bhi	10868 <CHeapAllocator::Allocate(unsigned int)+0x38>
   1087c:	e5926004 	ldr	r6, [r2, #4]
   10880:	e3560000 	cmp	r6, #0, 0
   10884:	01a04003 	moveq	r4, r3
   10888:	0a000020 	beq	10910 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   1088c:	e5d60001 	ldrb	r0, [r6, #1]
   10890:	e5d63000 	ldrb	r3, [r6]
   10894:	e5d61002 	ldrb	r1, [r6, #2]
   10898:	e1833400 	orr	r3, r3, r0, lsl #8
   1089c:	e5d60003 	ldrb	r0, [r6, #3]
   108a0:	e1833801 	orr	r3, r3, r1, lsl #16
   108a4:	e59f1164 	ldr	r1, [pc, #356]	; 10a10 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   108a8:	e1833c00 	orr	r3, r3, r0, lsl #24
   108ac:	e1530001 	cmp	r3, r1
   108b0:	1a000050 	bne	109f8 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   108b4:	e5d61009 	ldrb	r1, [r6, #9]
   108b8:	e5d63008 	ldrb	r3, [r6, #8]
   108bc:	e5d6000a 	ldrb	r0, [r6, #10]
   108c0:	e1833401 	orr	r3, r3, r1, lsl #8
   108c4:	e5d6100b 	ldrb	r1, [r6, #11]
   108c8:	e1833800 	orr	r3, r3, r0, lsl #16
   108cc:	e1833c01 	orr	r3, r3, r1, lsl #24
   108d0:	e5823004 	str	r3, [r2, #4]
   108d4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   108d8:	e3530000 	cmp	r3, #0, 0
   108dc:	1a000030 	bne	109a4 <CHeapAllocator::Allocate(unsigned int)+0x174>
   108e0:	e3a03000 	mov	r3, #0, 0
   108e4:	e316000f 	tst	r6, #15, 0
   108e8:	e5c63008 	strb	r3, [r6, #8]
   108ec:	e5c63009 	strb	r3, [r6, #9]
   108f0:	e5c6300a 	strb	r3, [r6, #10]
   108f4:	e5c6300b 	strb	r3, [r6, #11]
   108f8:	e2860010 	add	r0, r6, #16, 0
   108fc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10900:	e3a0208e 	mov	r2, #142, 0	; 0x8e
   10904:	e59f1108 	ldr	r1, [pc, #264]	; 10a14 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   10908:	e59f0108 	ldr	r0, [pc, #264]	; 10a18 <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   1090c:	eb00047d 	bl	11b08 <assertion_failed>
   10910:	e5956004 	ldr	r6, [r5, #4]
   10914:	e284301f 	add	r3, r4, #31, 0
   10918:	e3c3300f 	bic	r3, r3, #15, 0
   1091c:	e0863003 	add	r3, r6, r3
   10920:	e1560003 	cmp	r6, r3
   10924:	e595700c 	ldr	r7, [r5, #12]
   10928:	3a000006 	bcc	10948 <CHeapAllocator::Allocate(unsigned int)+0x118>
   1092c:	e3570000 	cmp	r7, #0, 0
   10930:	1a00001f 	bne	109b4 <CHeapAllocator::Allocate(unsigned int)+0x184>
   10934:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10938:	e3530000 	cmp	r3, #0, 0
   1093c:	1a000028 	bne	109e4 <CHeapAllocator::Allocate(unsigned int)+0x1b4>
   10940:	e3a00000 	mov	r0, #0, 0
   10944:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10948:	e5952008 	ldr	r2, [r5, #8]
   1094c:	e0422007 	sub	r2, r2, r7
   10950:	e1530002 	cmp	r3, r2
   10954:	8afffff4 	bhi	1092c <CHeapAllocator::Allocate(unsigned int)+0xfc>
   10958:	e3a0204d 	mov	r2, #77, 0	; 0x4d
   1095c:	e3a0c043 	mov	ip, #67, 0	; 0x43
   10960:	e3a0004c 	mov	r0, #76, 0	; 0x4c
   10964:	e3a01042 	mov	r1, #66, 0	; 0x42
   10968:	e5853004 	str	r3, [r5, #4]
   1096c:	e1a03824 	lsr	r3, r4, #16
   10970:	e5c64004 	strb	r4, [r6, #4]
   10974:	e5c62001 	strb	r2, [r6, #1]
   10978:	e1a02424 	lsr	r2, r4, #8
   1097c:	e1a04c24 	lsr	r4, r4, #24
   10980:	e5c6c000 	strb	ip, [r6]
   10984:	e5c60002 	strb	r0, [r6, #2]
   10988:	e5c61003 	strb	r1, [r6, #3]
   1098c:	e5c62005 	strb	r2, [r6, #5]
   10990:	e5c63006 	strb	r3, [r6, #6]
   10994:	e5c64007 	strb	r4, [r6, #7]
   10998:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   1099c:	e3530000 	cmp	r3, #0, 0
   109a0:	0affffce 	beq	108e0 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   109a4:	eb0002c5 	bl	114c0 <LeaveCritical>
   109a8:	eaffffcc 	b	108e0 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   109ac:	eb000299 	bl	11418 <EnterCritical>
   109b0:	eaffffa7 	b	10854 <CHeapAllocator::Allocate(unsigned int)+0x24>
   109b4:	e3a02000 	mov	r2, #0, 0
   109b8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   109bc:	e585200c 	str	r2, [r5, #12]
   109c0:	e1530002 	cmp	r3, r2
   109c4:	1a000009 	bne	109f0 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   109c8:	ebffe774 	bl	a7a0 <CLogger::Get()>
   109cc:	e3a02000 	mov	r2, #0, 0
   109d0:	e5951000 	ldr	r1, [r5]
   109d4:	e59f3040 	ldr	r3, [pc, #64]	; 10a1c <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   109d8:	ebffe6b2 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   109dc:	e3a00000 	mov	r0, #0, 0
   109e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   109e4:	eb0002b5 	bl	114c0 <LeaveCritical>
   109e8:	e1a00007 	mov	r0, r7
   109ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   109f0:	eb0002b2 	bl	114c0 <LeaveCritical>
   109f4:	eafffff3 	b	109c8 <CHeapAllocator::Allocate(unsigned int)+0x198>
   109f8:	e3a0205e 	mov	r2, #94, 0	; 0x5e
   109fc:	e59f1010 	ldr	r1, [pc, #16]	; 10a14 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   10a00:	e59f0018 	ldr	r0, [pc, #24]	; 10a20 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   10a04:	eb00043f 	bl	11b08 <assertion_failed>
   10a08:	e3a00000 	mov	r0, #0, 0
   10a0c:	e12fff1e 	bx	lr
   10a10:	424c4d43 	.word	0x424c4d43
   10a14:	0001a1c0 	.word	0x0001a1c0
   10a18:	0001a210 	.word	0x0001a210
   10a1c:	0001a200 	.word	0x0001a200
   10a20:	0001a1d4 	.word	0x0001a1d4

00010a24 <CHeapAllocator::Free(void*)>:
   10a24:	e3510000 	cmp	r1, #0, 0
   10a28:	012fff1e 	bxeq	lr
   10a2c:	e92d4070 	push	{r4, r5, r6, lr}
   10a30:	e1a06000 	mov	r6, r0
   10a34:	e5513010 	ldrb	r3, [r1, #-16]
   10a38:	e551000f 	ldrb	r0, [r1, #-15]
   10a3c:	e551200e 	ldrb	r2, [r1, #-14]
   10a40:	e1833400 	orr	r3, r3, r0, lsl #8
   10a44:	e551000d 	ldrb	r0, [r1, #-13]
   10a48:	e1833802 	orr	r3, r3, r2, lsl #16
   10a4c:	e59f20d0 	ldr	r2, [pc, #208]	; 10b24 <CHeapAllocator::Free(void*)+0x100>
   10a50:	e1833c00 	orr	r3, r3, r0, lsl #24
   10a54:	e1530002 	cmp	r3, r2
   10a58:	e2415010 	sub	r5, r1, #16, 0
   10a5c:	1a00002c 	bne	10b14 <CHeapAllocator::Free(void*)+0xf0>
   10a60:	e5963010 	ldr	r3, [r6, #16]
   10a64:	e3530000 	cmp	r3, #0, 0
   10a68:	08bd8070 	popeq	{r4, r5, r6, pc}
   10a6c:	e5d51005 	ldrb	r1, [r5, #5]
   10a70:	e5d52004 	ldrb	r2, [r5, #4]
   10a74:	e5d50006 	ldrb	r0, [r5, #6]
   10a78:	e1822401 	orr	r2, r2, r1, lsl #8
   10a7c:	e5d51007 	ldrb	r1, [r5, #7]
   10a80:	e1822800 	orr	r2, r2, r0, lsl #16
   10a84:	e1822c01 	orr	r2, r2, r1, lsl #24
   10a88:	e2864010 	add	r4, r6, #16, 0
   10a8c:	ea000002 	b	10a9c <CHeapAllocator::Free(void*)+0x78>
   10a90:	e5b43008 	ldr	r3, [r4, #8]!
   10a94:	e3530000 	cmp	r3, #0, 0
   10a98:	08bd8070 	popeq	{r4, r5, r6, pc}
   10a9c:	e1530002 	cmp	r3, r2
   10aa0:	1afffffa 	bne	10a90 <CHeapAllocator::Free(void*)+0x6c>
   10aa4:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   10aa8:	e3500000 	cmp	r0, #0, 0
   10aac:	1a000009 	bne	10ad8 <CHeapAllocator::Free(void*)+0xb4>
   10ab0:	e5943004 	ldr	r3, [r4, #4]
   10ab4:	e1a00423 	lsr	r0, r3, #8
   10ab8:	e1a01823 	lsr	r1, r3, #16
   10abc:	e1a02c23 	lsr	r2, r3, #24
   10ac0:	e5c53008 	strb	r3, [r5, #8]
   10ac4:	e5c50009 	strb	r0, [r5, #9]
   10ac8:	e5c5100a 	strb	r1, [r5, #10]
   10acc:	e5c5200b 	strb	r2, [r5, #11]
   10ad0:	e5845004 	str	r5, [r4, #4]
   10ad4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ad8:	eb00024e 	bl	11418 <EnterCritical>
   10adc:	e5943004 	ldr	r3, [r4, #4]
   10ae0:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
   10ae4:	e1a00423 	lsr	r0, r3, #8
   10ae8:	e3520000 	cmp	r2, #0, 0
   10aec:	e1a01823 	lsr	r1, r3, #16
   10af0:	e1a02c23 	lsr	r2, r3, #24
   10af4:	e5c53008 	strb	r3, [r5, #8]
   10af8:	e5c50009 	strb	r0, [r5, #9]
   10afc:	e5c5100a 	strb	r1, [r5, #10]
   10b00:	e5c5200b 	strb	r2, [r5, #11]
   10b04:	e5845004 	str	r5, [r4, #4]
   10b08:	08bd8070 	popeq	{r4, r5, r6, pc}
   10b0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10b10:	ea00026a 	b	114c0 <LeaveCritical>
   10b14:	e3a020bf 	mov	r2, #191, 0	; 0xbf
   10b18:	e59f1008 	ldr	r1, [pc, #8]	; 10b28 <CHeapAllocator::Free(void*)+0x104>
   10b1c:	e59f0008 	ldr	r0, [pc, #8]	; 10b2c <CHeapAllocator::Free(void*)+0x108>
   10b20:	eb0003f8 	bl	11b08 <assertion_failed>
   10b24:	424c4d43 	.word	0x424c4d43
   10b28:	0001a1c0 	.word	0x0001a1c0
   10b2c:	0001a1d4 	.word	0x0001a1d4

00010b30 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   10b30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10b34:	e2514000 	subs	r4, r1, #0, 0
   10b38:	e24dd00c 	sub	sp, sp, #12, 0
   10b3c:	0a00002d 	beq	10bf8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   10b40:	e3520000 	cmp	r2, #0, 0
   10b44:	0a00002f 	beq	10c08 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   10b48:	e554c00f 	ldrb	ip, [r4, #-15]
   10b4c:	e5543010 	ldrb	r3, [r4, #-16]
   10b50:	e554100e 	ldrb	r1, [r4, #-14]
   10b54:	e183340c 	orr	r3, r3, ip, lsl #8
   10b58:	e554c00d 	ldrb	ip, [r4, #-13]
   10b5c:	e1833801 	orr	r3, r3, r1, lsl #16
   10b60:	e59f10c4 	ldr	r1, [pc, #196]	; 10c2c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   10b64:	e1833c0c 	orr	r3, r3, ip, lsl #24
   10b68:	e1530001 	cmp	r3, r1
   10b6c:	e2446010 	sub	r6, r4, #16, 0
   10b70:	1a000029 	bne	10c1c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xec>
   10b74:	e5d61005 	ldrb	r1, [r6, #5]
   10b78:	e5d63004 	ldrb	r3, [r6, #4]
   10b7c:	e5d6c006 	ldrb	ip, [r6, #6]
   10b80:	e1833401 	orr	r3, r3, r1, lsl #8
   10b84:	e5d61007 	ldrb	r1, [r6, #7]
   10b88:	e183380c 	orr	r3, r3, ip, lsl #16
   10b8c:	e1833c01 	orr	r3, r3, r1, lsl #24
   10b90:	e1530002 	cmp	r3, r2
   10b94:	21a07004 	movcs	r7, r4
   10b98:	3a000002 	bcc	10ba8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   10b9c:	e1a00007 	mov	r0, r7
   10ba0:	e28dd00c 	add	sp, sp, #12, 0
   10ba4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10ba8:	e1a01002 	mov	r1, r2
   10bac:	e1a05000 	mov	r5, r0
   10bb0:	ebffff1e 	bl	10830 <CHeapAllocator::Allocate(unsigned int)>
   10bb4:	e2507000 	subs	r7, r0, #0, 0
   10bb8:	0afffff7 	beq	10b9c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   10bbc:	e5d62005 	ldrb	r2, [r6, #5]
   10bc0:	e5d63004 	ldrb	r3, [r6, #4]
   10bc4:	e5d61006 	ldrb	r1, [r6, #6]
   10bc8:	e1833402 	orr	r3, r3, r2, lsl #8
   10bcc:	e5d62007 	ldrb	r2, [r6, #7]
   10bd0:	e1833801 	orr	r3, r3, r1, lsl #16
   10bd4:	e1832c02 	orr	r2, r3, r2, lsl #24
   10bd8:	e1a01004 	mov	r1, r4
   10bdc:	ebfffdd3 	bl	10330 <memcpy>
   10be0:	e1a00005 	mov	r0, r5
   10be4:	e1a01004 	mov	r1, r4
   10be8:	ebffff8d 	bl	10a24 <CHeapAllocator::Free(void*)>
   10bec:	e1a00007 	mov	r0, r7
   10bf0:	e28dd00c 	add	sp, sp, #12, 0
   10bf4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10bf8:	e1a01002 	mov	r1, r2
   10bfc:	e28dd00c 	add	sp, sp, #12, 0
   10c00:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   10c04:	eaffff09 	b	10830 <CHeapAllocator::Allocate(unsigned int)>
   10c08:	e58d2004 	str	r2, [sp, #4]
   10c0c:	ebffff84 	bl	10a24 <CHeapAllocator::Free(void*)>
   10c10:	e59d2004 	ldr	r2, [sp, #4]
   10c14:	e1a07002 	mov	r7, r2
   10c18:	eaffffdf 	b	10b9c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   10c1c:	e3a020a3 	mov	r2, #163, 0	; 0xa3
   10c20:	e59f1008 	ldr	r1, [pc, #8]	; 10c30 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x100>
   10c24:	e59f0008 	ldr	r0, [pc, #8]	; 10c34 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   10c28:	eb0003b6 	bl	11b08 <assertion_failed>
   10c2c:	424c4d43 	.word	0x424c4d43
   10c30:	0001a1c0 	.word	0x0001a1c0
   10c34:	0001a1d4 	.word	0x0001a1d4

00010c38 <CExceptionHandler::Get() [clone .part.0]>:
   10c38:	e3a02087 	mov	r2, #135, 0	; 0x87
   10c3c:	e92d4010 	push	{r4, lr}
   10c40:	e59f1004 	ldr	r1, [pc, #4]	; 10c4c <CExceptionHandler::Get() [clone .part.0]+0x14>
   10c44:	e59f0004 	ldr	r0, [pc, #4]	; 10c50 <CExceptionHandler::Get() [clone .part.0]+0x18>
   10c48:	eb0003ae 	bl	11b08 <assertion_failed>
   10c4c:	0001a23c 	.word	0x0001a23c
   10c50:	0001a118 	.word	0x0001a118

00010c54 <CExceptionHandler::CExceptionHandler()>:
   10c54:	e59fc074 	ldr	ip, [pc, #116]	; 10cd0 <CExceptionHandler::CExceptionHandler()+0x7c>
   10c58:	e92d4010 	push	{r4, lr}
   10c5c:	e1a04000 	mov	r4, r0
   10c60:	e59c0000 	ldr	r0, [ip]
   10c64:	e3500000 	cmp	r0, #0, 0
   10c68:	1a000014 	bne	10cc0 <CExceptionHandler::CExceptionHandler()+0x6c>
   10c6c:	e59f1060 	ldr	r1, [pc, #96]	; 10cd4 <CExceptionHandler::CExceptionHandler()+0x80>
   10c70:	e59f2060 	ldr	r2, [pc, #96]	; 10cd8 <CExceptionHandler::CExceptionHandler()+0x84>
   10c74:	e59f3060 	ldr	r3, [pc, #96]	; 10cdc <CExceptionHandler::CExceptionHandler()+0x88>
   10c78:	e2411004 	sub	r1, r1, #4, 0
   10c7c:	e242200c 	sub	r2, r2, #12, 0
   10c80:	e2433010 	sub	r3, r3, #16, 0
   10c84:	e1a01141 	asr	r1, r1, #2
   10c88:	e1a02142 	asr	r2, r2, #2
   10c8c:	e1a03143 	asr	r3, r3, #2
   10c90:	e2411002 	sub	r1, r1, #2, 0
   10c94:	e2422002 	sub	r2, r2, #2, 0
   10c98:	e2433002 	sub	r3, r3, #2, 0
   10c9c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   10ca0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   10ca4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   10ca8:	e58c4000 	str	r4, [ip]
   10cac:	e1c020fc 	strd	r2, [r0, #12]
   10cb0:	e5801004 	str	r1, [r0, #4]
   10cb4:	eb000226 	bl	11554 <SyncDataAndInstructionCache>
   10cb8:	e1a00004 	mov	r0, r4
   10cbc:	e8bd8010 	pop	{r4, pc}
   10cc0:	e3a02030 	mov	r2, #48, 0	; 0x30
   10cc4:	e59f1014 	ldr	r1, [pc, #20]	; 10ce0 <CExceptionHandler::CExceptionHandler()+0x8c>
   10cc8:	e59f0014 	ldr	r0, [pc, #20]	; 10ce4 <CExceptionHandler::CExceptionHandler()+0x90>
   10ccc:	eb00038d 	bl	11b08 <assertion_failed>
   10cd0:	0001cc84 	.word	0x0001cc84
   10cd4:	00010fa8 	.word	0x00010fa8
   10cd8:	00010f08 	.word	0x00010f08
   10cdc:	00010f58 	.word	0x00010f58
   10ce0:	0001a23c 	.word	0x0001a23c
   10ce4:	00019fd8 	.word	0x00019fd8

00010ce8 <CExceptionHandler::~CExceptionHandler()>:
   10ce8:	e3a02000 	mov	r2, #0, 0
   10cec:	e59f3004 	ldr	r3, [pc, #4]	; 10cf8 <CExceptionHandler::~CExceptionHandler()+0x10>
   10cf0:	e5832000 	str	r2, [r3]
   10cf4:	e12fff1e 	bx	lr
   10cf8:	0001cc84 	.word	0x0001cc84

00010cfc <CExceptionHandler::Throw(unsigned int)>:
   10cfc:	e92d4010 	push	{r4, lr}
   10d00:	e1a04001 	mov	r4, r1
   10d04:	e24dd008 	sub	sp, sp, #8, 0
   10d08:	ebffe6a4 	bl	a7a0 <CLogger::Get()>
   10d0c:	e59f201c 	ldr	r2, [pc, #28]	; 10d30 <CExceptionHandler::Throw(unsigned int)+0x34>
   10d10:	e59f301c 	ldr	r3, [pc, #28]	; 10d34 <CExceptionHandler::Throw(unsigned int)+0x38>
   10d14:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   10d18:	e3a02000 	mov	r2, #0, 0
   10d1c:	e58d1000 	str	r1, [sp]
   10d20:	e59f1010 	ldr	r1, [pc, #16]	; 10d38 <CExceptionHandler::Throw(unsigned int)+0x3c>
   10d24:	ebffe5df 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10d28:	e28dd008 	add	sp, sp, #8, 0
   10d2c:	e8bd8010 	pop	{r4, pc}
   10d30:	0001cb88 	.word	0x0001cb88
   10d34:	0001a254 	.word	0x0001a254
   10d38:	0001a2f8 	.word	0x0001a2f8

00010d3c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   10d3c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   10d40:	e3510002 	cmp	r1, #2, 0
   10d44:	e1a06001 	mov	r6, r1
   10d48:	e1a04002 	mov	r4, r2
   10d4c:	e24dd024 	sub	sp, sp, #36, 0	; 0x24
   10d50:	0a000026 	beq	10df0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   10d54:	e3510003 	cmp	r1, #3, 0
   10d58:	13a07000 	movne	r7, #0, 0
   10d5c:	11a09007 	movne	r9, r7
   10d60:	1a000001 	bne	10d6c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   10d64:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   10d68:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   10d6c:	e3540000 	cmp	r4, #0, 0
   10d70:	0a000024 	beq	10e08 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   10d74:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   10d78:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   10d7c:	e203301f 	and	r3, r3, #31, 0
   10d80:	e3530011 	cmp	r3, #17, 0
   10d84:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   10d88:	0a00001b 	beq	10dfc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc0>
   10d8c:	e3530012 	cmp	r3, #18, 0
   10d90:	0a000014 	beq	10de8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   10d94:	e1a00005 	mov	r0, r5
   10d98:	e59f1078 	ldr	r1, [pc, #120]	; 10e18 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   10d9c:	eb0005ae 	bl	1245c <debug_stacktrace(unsigned int const*, char const*)>
   10da0:	ebffe67e 	bl	a7a0 <CLogger::Get()>
   10da4:	e59f3070 	ldr	r3, [pc, #112]	; 10e1c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   10da8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   10dac:	e7931106 	ldr	r1, [r3, r6, lsl #2]
   10db0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   10db4:	e58d1000 	str	r1, [sp]
   10db8:	e58d2018 	str	r2, [sp, #24]
   10dbc:	e58d3004 	str	r3, [sp, #4]
   10dc0:	e3a02000 	mov	r2, #0, 0
   10dc4:	e59f3054 	ldr	r3, [pc, #84]	; 10e20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   10dc8:	e59f1048 	ldr	r1, [pc, #72]	; 10e18 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   10dcc:	e58d8014 	str	r8, [sp, #20]
   10dd0:	e58d5010 	str	r5, [sp, #16]
   10dd4:	e58d700c 	str	r7, [sp, #12]
   10dd8:	e58d9008 	str	r9, [sp, #8]
   10ddc:	ebffe5b1 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10de0:	e28dd024 	add	sp, sp, #36, 0	; 0x24
   10de4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10de8:	e8940120 	ldm	r4, {r5, r8}
   10dec:	eaffffe8 	b	10d94 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   10df0:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   10df4:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   10df8:	eaffffdb 	b	10d6c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   10dfc:	e594800c 	ldr	r8, [r4, #12]
   10e00:	e5945008 	ldr	r5, [r4, #8]
   10e04:	eaffffe2 	b	10d94 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   10e08:	e3a02069 	mov	r2, #105, 0	; 0x69
   10e0c:	e59f1010 	ldr	r1, [pc, #16]	; 10e24 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   10e10:	e59f0010 	ldr	r0, [pc, #16]	; 10e28 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   10e14:	eb00033b 	bl	11b08 <assertion_failed>
   10e18:	0001a2f8 	.word	0x0001a2f8
   10e1c:	0001cb88 	.word	0x0001cb88
   10e20:	0001a270 	.word	0x0001a270
   10e24:	0001a23c 	.word	0x0001a23c
   10e28:	0001a264 	.word	0x0001a264

00010e2c <CExceptionHandler::Get()>:
   10e2c:	e59f3010 	ldr	r3, [pc, #16]	; 10e44 <CExceptionHandler::Get()+0x18>
   10e30:	e5930000 	ldr	r0, [r3]
   10e34:	e3500000 	cmp	r0, #0, 0
   10e38:	112fff1e 	bxne	lr
   10e3c:	e92d4010 	push	{r4, lr}
   10e40:	ebffff7c 	bl	10c38 <CExceptionHandler::Get() [clone .part.0]>
   10e44:	0001cc84 	.word	0x0001cc84

00010e48 <ExceptionHandler>:
   10e48:	e92d4070 	push	{r4, r5, r6, lr}
   10e4c:	e3a03000 	mov	r3, #0, 0
   10e50:	e1a04000 	mov	r4, r0
   10e54:	e1a05001 	mov	r5, r1
   10e58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10e5c:	eb0002ca 	bl	1198c <CInterruptSystem::DisableFIQ()>
   10e60:	f1080040 	cpsie	f
   10e64:	e59f301c 	ldr	r3, [pc, #28]	; 10e88 <ExceptionHandler+0x40>
   10e68:	e5930000 	ldr	r0, [r3]
   10e6c:	e3500000 	cmp	r0, #0, 0
   10e70:	0a000003 	beq	10e84 <ExceptionHandler+0x3c>
   10e74:	e1a02005 	mov	r2, r5
   10e78:	e1a01004 	mov	r1, r4
   10e7c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10e80:	eaffffad 	b	10d3c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   10e84:	ebffff6b 	bl	10c38 <CExceptionHandler::Get() [clone .part.0]>
   10e88:	0001cc84 	.word	0x0001cc84

00010e8c <raise>:
   10e8c:	e59f3020 	ldr	r3, [pc, #32]	; 10eb4 <raise+0x28>
   10e90:	e92d4010 	push	{r4, lr}
   10e94:	e5930000 	ldr	r0, [r3]
   10e98:	e3500000 	cmp	r0, #0, 0
   10e9c:	0a000003 	beq	10eb0 <raise+0x24>
   10ea0:	e3a01004 	mov	r1, #4, 0
   10ea4:	ebffff94 	bl	10cfc <CExceptionHandler::Throw(unsigned int)>
   10ea8:	e3a00000 	mov	r0, #0, 0
   10eac:	e8bd8010 	pop	{r4, pc}
   10eb0:	ebffff60 	bl	10c38 <CExceptionHandler::Get() [clone .part.0]>
   10eb4:	0001cc84 	.word	0x0001cc84

00010eb8 <UndefinedInstructionInternal>:
   10eb8:	e24dd004 	sub	sp, sp, #4, 0
   10ebc:	e24ee004 	sub	lr, lr, #4, 0
   10ec0:	e92d4000 	stmfd	sp!, {lr}
   10ec4:	e14fe000 	mrs	lr, SPSR
   10ec8:	e92d4000 	stmfd	sp!, {lr}
   10ecc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10ed0:	e24dd03c 	sub	sp, sp, #60, 0	; 0x3c
   10ed4:	e1a0100d 	mov	r1, sp
   10ed8:	f1020012 	cps	#18
   10edc:	e1a0200d 	mov	r2, sp
   10ee0:	e1a0300e 	mov	r3, lr
   10ee4:	f1020011 	cps	#17
   10ee8:	e1a0400d 	mov	r4, sp
   10eec:	e1a0500e 	mov	r5, lr
   10ef0:	f102001f 	cps	#31
   10ef4:	e1a0d001 	mov	sp, r1
   10ef8:	e92d003c 	push	{r2, r3, r4, r5}
   10efc:	e1a0100d 	mov	r1, sp
   10f00:	e3a00001 	mov	r0, #1, 0
   10f04:	eaffffcf 	b	10e48 <ExceptionHandler>

00010f08 <PrefetchAbortStub>:
   10f08:	e24dd004 	sub	sp, sp, #4, 0
   10f0c:	e24ee004 	sub	lr, lr, #4, 0
   10f10:	e92d4000 	stmfd	sp!, {lr}
   10f14:	e14fe000 	mrs	lr, SPSR
   10f18:	e92d4000 	stmfd	sp!, {lr}
   10f1c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10f20:	e24dd03c 	sub	sp, sp, #60, 0	; 0x3c
   10f24:	e1a0100d 	mov	r1, sp
   10f28:	f1020012 	cps	#18
   10f2c:	e1a0200d 	mov	r2, sp
   10f30:	e1a0300e 	mov	r3, lr
   10f34:	f1020011 	cps	#17
   10f38:	e1a0400d 	mov	r4, sp
   10f3c:	e1a0500e 	mov	r5, lr
   10f40:	f102001f 	cps	#31
   10f44:	e1a0d001 	mov	sp, r1
   10f48:	e92d003c 	push	{r2, r3, r4, r5}
   10f4c:	e1a0100d 	mov	r1, sp
   10f50:	e3a00002 	mov	r0, #2, 0
   10f54:	eaffffbb 	b	10e48 <ExceptionHandler>

00010f58 <DataAbortStub>:
   10f58:	e24dd004 	sub	sp, sp, #4, 0
   10f5c:	e24ee008 	sub	lr, lr, #8, 0
   10f60:	e92d4000 	stmfd	sp!, {lr}
   10f64:	e14fe000 	mrs	lr, SPSR
   10f68:	e92d4000 	stmfd	sp!, {lr}
   10f6c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10f70:	e24dd03c 	sub	sp, sp, #60, 0	; 0x3c
   10f74:	e1a0100d 	mov	r1, sp
   10f78:	f1020012 	cps	#18
   10f7c:	e1a0200d 	mov	r2, sp
   10f80:	e1a0300e 	mov	r3, lr
   10f84:	f1020011 	cps	#17
   10f88:	e1a0400d 	mov	r4, sp
   10f8c:	e1a0500e 	mov	r5, lr
   10f90:	f102001f 	cps	#31
   10f94:	e1a0d001 	mov	sp, r1
   10f98:	e92d003c 	push	{r2, r3, r4, r5}
   10f9c:	e1a0100d 	mov	r1, sp
   10fa0:	e3a00003 	mov	r0, #3, 0
   10fa4:	eaffffa7 	b	10e48 <ExceptionHandler>

00010fa8 <UndefinedInstructionStub>:
   10fa8:	e92d4001 	push	{r0, lr}
   10fac:	eef80a10 	vmrs	r0, fpexc
   10fb0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   10fb4:	0affffbf 	beq	10eb8 <UndefinedInstructionInternal>
   10fb8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   10fbc:	eee80a10 	vmsr	fpexc, r0
   10fc0:	e8fd8001 	ldm	sp!, {r0, pc}^

00010fc4 <IRQStub>:
   10fc4:	e24ee004 	sub	lr, lr, #4, 0
   10fc8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   10fcc:	e59f0060 	ldr	r0, [pc, #96]	; 11034 <FIQStub+0x58>
   10fd0:	e580e000 	str	lr, [r0]
   10fd4:	eb0002c5 	bl	11af0 <InterruptHandler>
   10fd8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00010fdc <FIQStub>:
   10fdc:	e24ee004 	sub	lr, lr, #4, 0
   10fe0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   10fe4:	e3a03000 	mov	r3, #0, 0
   10fe8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10fec:	e59f2044 	ldr	r2, [pc, #68]	; 11038 <FIQStub+0x5c>
   10ff0:	e5921000 	ldr	r1, [r2]
   10ff4:	e3510000 	cmp	r1, #0, 0
   10ff8:	0a000004 	beq	11010 <FIQStub+0x34>
   10ffc:	e5920004 	ldr	r0, [r2, #4]
   11000:	e12fff31 	blx	r1
   11004:	e3a03000 	mov	r3, #0, 0
   11008:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1100c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11010:	e3a03000 	mov	r3, #0, 0
   11014:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11018:	e59f101c 	ldr	r1, [pc, #28]	; 1103c <FIQStub+0x60>
   1101c:	e3a00000 	mov	r0, #0, 0
   11020:	e5810000 	str	r0, [r1]
   11024:	e3a03000 	mov	r3, #0, 0
   11028:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1102c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11030:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   11034:	0001cba8 	.word	0x0001cba8
   11038:	0001cb9c 	.word	0x0001cb9c
   1103c:	2000b20c 	.word	0x2000b20c

00011040 <CMemorySystem::CMemorySystem(bool)>:
   11040:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11044:	e1a04000 	mov	r4, r0
   11048:	e3a05000 	mov	r5, #0, 0
   1104c:	e280700c 	add	r7, r0, #12, 0
   11050:	e5c01000 	strb	r1, [r0]
   11054:	e24dd02c 	sub	sp, sp, #44, 0	; 0x2c
   11058:	e59f1110 	ldr	r1, [pc, #272]	; 11170 <CMemorySystem::CMemorySystem(bool)+0x130>
   1105c:	e5845004 	str	r5, [r4, #4]
   11060:	e5845008 	str	r5, [r4, #8]
   11064:	e1a00007 	mov	r0, r7
   11068:	e28460c8 	add	r6, r4, #200, 0	; 0xc8
   1106c:	ebfffdd0 	bl	107b4 <CHeapAllocator::CHeapAllocator(char const*)>
   11070:	e1a00006 	mov	r0, r6
   11074:	eb000a47 	bl	13998 <CPageAllocator::CPageAllocator()>
   11078:	e59f30f4 	ldr	r3, [pc, #244]	; 11174 <CMemorySystem::CMemorySystem(bool)+0x134>
   1107c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11080:	e5935000 	ldr	r5, [r3]
   11084:	e3550000 	cmp	r5, #0, 0
   11088:	0a000002 	beq	11098 <CMemorySystem::CMemorySystem(bool)+0x58>
   1108c:	e1a00004 	mov	r0, r4
   11090:	e28dd02c 	add	sp, sp, #44, 0	; 0x2c
   11094:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11098:	e3a01001 	mov	r1, #1, 0
   1109c:	e28d000c 	add	r0, sp, #12, 0
   110a0:	e5834000 	str	r4, [r3]
   110a4:	eb0003f4 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   110a8:	e3a03014 	mov	r3, #20, 0
   110ac:	e59f10c4 	ldr	r1, [pc, #196]	; 11178 <CMemorySystem::CMemorySystem(bool)+0x138>
   110b0:	e58d5000 	str	r5, [sp]
   110b4:	e28d000c 	add	r0, sp, #12, 0
   110b8:	e08d2003 	add	r2, sp, r3
   110bc:	eb0003fa 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   110c0:	e3500000 	cmp	r0, #0, 0
   110c4:	0a000016 	beq	11124 <CMemorySystem::CMemorySystem(bool)+0xe4>
   110c8:	e59d3020 	ldr	r3, [sp, #32]
   110cc:	e3530000 	cmp	r3, #0, 0
   110d0:	1a000022 	bne	11160 <CMemorySystem::CMemorySystem(bool)+0x120>
   110d4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   110d8:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   110dc:	e2432617 	sub	r2, r3, #24117248	; 0x1700000
   110e0:	e1a00007 	mov	r0, r7
   110e4:	e3a01613 	mov	r1, #19922944	; 0x1300000
   110e8:	e5843004 	str	r3, [r4, #4]
   110ec:	e3a03701 	mov	r3, #262144	; 0x40000
   110f0:	ebfffdc8 	bl	10818 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   110f4:	e1a01005 	mov	r1, r5
   110f8:	e1a00006 	mov	r0, r6
   110fc:	e3a02501 	mov	r2, #4194304	; 0x400000
   11100:	eb000a2c 	bl	139b8 <CPageAllocator::Setup(unsigned int, unsigned int)>
   11104:	e5d43000 	ldrb	r3, [r4]
   11108:	e3530000 	cmp	r3, #0, 0
   1110c:	1a00000a 	bne	1113c <CMemorySystem::CMemorySystem(bool)+0xfc>
   11110:	e28d000c 	add	r0, sp, #12, 0
   11114:	eb0003df 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   11118:	e1a00004 	mov	r0, r4
   1111c:	e28dd02c 	add	sp, sp, #44, 0	; 0x2c
   11120:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11124:	e3a03303 	mov	r3, #201326592	; 0xc000000
   11128:	e3a026a9 	mov	r2, #177209344	; 0xa900000
   1112c:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   11130:	e58d0020 	str	r0, [sp, #32]
   11134:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11138:	eaffffe8 	b	110e0 <CMemorySystem::CMemorySystem(bool)+0xa0>
   1113c:	e3a00004 	mov	r0, #4, 0
   11140:	ebfffd86 	bl	10760 <operator new(unsigned int)>
   11144:	e1a05000 	mov	r5, r0
   11148:	e5941004 	ldr	r1, [r4, #4]
   1114c:	eb00007f 	bl	11350 <CPageTable::CPageTable(unsigned int)>
   11150:	e1a00004 	mov	r0, r4
   11154:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11158:	eb000040 	bl	11260 <CMemorySystem::EnableMMU()>
   1115c:	eaffffeb 	b	11110 <CMemorySystem::CMemorySystem(bool)+0xd0>
   11160:	e59f1014 	ldr	r1, [pc, #20]	; 1117c <CMemorySystem::CMemorySystem(bool)+0x13c>
   11164:	e3a0204e 	mov	r2, #78, 0	; 0x4e
   11168:	e281000c 	add	r0, r1, #12, 0
   1116c:	eb000265 	bl	11b08 <assertion_failed>
   11170:	0001a300 	.word	0x0001a300
   11174:	0001cc88 	.word	0x0001cc88
   11178:	00010005 	.word	0x00010005
   1117c:	0001a308 	.word	0x0001a308

00011180 <CMemorySystem::~CMemorySystem()>:
   11180:	e59f3044 	ldr	r3, [pc, #68]	; 111cc <CMemorySystem::~CMemorySystem()+0x4c>
   11184:	e92d4010 	push	{r4, lr}
   11188:	e5932000 	ldr	r2, [r3]
   1118c:	e1a04000 	mov	r4, r0
   11190:	e1500002 	cmp	r0, r2
   11194:	0a000005 	beq	111b0 <CMemorySystem::~CMemorySystem()+0x30>
   11198:	e28400c8 	add	r0, r4, #200, 0	; 0xc8
   1119c:	eb000a04 	bl	139b4 <CPageAllocator::~CPageAllocator()>
   111a0:	e284000c 	add	r0, r4, #12, 0
   111a4:	ebfffd9a 	bl	10814 <CHeapAllocator::~CHeapAllocator()>
   111a8:	e1a00004 	mov	r0, r4
   111ac:	e8bd8010 	pop	{r4, pc}
   111b0:	e3a01000 	mov	r1, #0, 0
   111b4:	e5d02000 	ldrb	r2, [r0]
   111b8:	e5831000 	str	r1, [r3]
   111bc:	e1520001 	cmp	r2, r1
   111c0:	0afffff4 	beq	11198 <CMemorySystem::~CMemorySystem()+0x18>
   111c4:	eb000056 	bl	11324 <CMemorySystem::Destructor() [clone .part.0]>
   111c8:	eafffff2 	b	11198 <CMemorySystem::~CMemorySystem()+0x18>
   111cc:	0001cc88 	.word	0x0001cc88

000111d0 <CMemorySystem::Destructor()>:
   111d0:	e59f3020 	ldr	r3, [pc, #32]	; 111f8 <CMemorySystem::Destructor()+0x28>
   111d4:	e5932000 	ldr	r2, [r3]
   111d8:	e1520000 	cmp	r2, r0
   111dc:	112fff1e 	bxne	lr
   111e0:	e3a01000 	mov	r1, #0, 0
   111e4:	e5d22000 	ldrb	r2, [r2]
   111e8:	e5831000 	str	r1, [r3]
   111ec:	e1520001 	cmp	r2, r1
   111f0:	012fff1e 	bxeq	lr
   111f4:	ea00004a 	b	11324 <CMemorySystem::Destructor() [clone .part.0]>
   111f8:	0001cc88 	.word	0x0001cc88

000111fc <CMemorySystem::GetMemSize() const>:
   111fc:	e59f3028 	ldr	r3, [pc, #40]	; 1122c <CMemorySystem::GetMemSize() const+0x30>
   11200:	e5933000 	ldr	r3, [r3]
   11204:	e3530000 	cmp	r3, #0, 0
   11208:	0a000002 	beq	11218 <CMemorySystem::GetMemSize() const+0x1c>
   1120c:	e9930009 	ldmib	r3, {r0, r3}
   11210:	e0800003 	add	r0, r0, r3
   11214:	e12fff1e 	bx	lr
   11218:	e59f1010 	ldr	r1, [pc, #16]	; 11230 <CMemorySystem::GetMemSize() const+0x34>
   1121c:	e3a020a0 	mov	r2, #160, 0	; 0xa0
   11220:	e92d4010 	push	{r4, lr}
   11224:	e2810028 	add	r0, r1, #40, 0	; 0x28
   11228:	eb000236 	bl	11b08 <assertion_failed>
   1122c:	0001cc88 	.word	0x0001cc88
   11230:	0001a308 	.word	0x0001a308

00011234 <CMemorySystem::Get()>:
   11234:	e59f301c 	ldr	r3, [pc, #28]	; 11258 <CMemorySystem::Get()+0x24>
   11238:	e5930000 	ldr	r0, [r3]
   1123c:	e3500000 	cmp	r0, #0, 0
   11240:	112fff1e 	bxne	lr
   11244:	e59f1010 	ldr	r1, [pc, #16]	; 1125c <CMemorySystem::Get()+0x28>
   11248:	e3a020a6 	mov	r2, #166, 0	; 0xa6
   1124c:	e92d4010 	push	{r4, lr}
   11250:	e2810028 	add	r0, r1, #40, 0	; 0x28
   11254:	eb00022b 	bl	11b08 <assertion_failed>
   11258:	0001cc88 	.word	0x0001cc88
   1125c:	0001a308 	.word	0x0001a308

00011260 <CMemorySystem::EnableMMU()>:
   11260:	e5d03000 	ldrb	r3, [r0]
   11264:	e92d4010 	push	{r4, lr}
   11268:	e3530000 	cmp	r3, #0, 0
   1126c:	0a00001b 	beq	112e0 <CMemorySystem::EnableMMU()+0x80>
   11270:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   11274:	e3833040 	orr	r3, r3, #64, 0	; 0x40
   11278:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   1127c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   11280:	e3130001 	tst	r3, #1, 0
   11284:	1a000019 	bne	112f0 <CMemorySystem::EnableMMU()+0x90>
   11288:	e3a04000 	mov	r4, #0, 0
   1128c:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   11290:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   11294:	e1500004 	cmp	r0, r4
   11298:	0a000018 	beq	11300 <CMemorySystem::EnableMMU()+0xa0>
   1129c:	eb000054 	bl	113f4 <CPageTable::GetBaseAddress() const>
   112a0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   112a4:	e3a03001 	mov	r3, #1, 0
   112a8:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   112ac:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   112b0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   112b4:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   112b8:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   112bc:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   112c0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   112c4:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   112c8:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   112cc:	e59f303c 	ldr	r3, [pc, #60]	; 11310 <CMemorySystem::EnableMMU()+0xb0>
   112d0:	e3c22002 	bic	r2, r2, #2, 0
   112d4:	e1823003 	orr	r3, r2, r3
   112d8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   112dc:	e8bd8010 	pop	{r4, pc}
   112e0:	e59f102c 	ldr	r1, [pc, #44]	; 11314 <CMemorySystem::EnableMMU()+0xb4>
   112e4:	e3a020ac 	mov	r2, #172, 0	; 0xac
   112e8:	e2810038 	add	r0, r1, #56, 0	; 0x38
   112ec:	eb000205 	bl	11b08 <assertion_failed>
   112f0:	e59f101c 	ldr	r1, [pc, #28]	; 11314 <CMemorySystem::EnableMMU()+0xb4>
   112f4:	e3a020ba 	mov	r2, #186, 0	; 0xba
   112f8:	e2810048 	add	r0, r1, #72, 0	; 0x48
   112fc:	eb000201 	bl	11b08 <assertion_failed>
   11300:	e59f100c 	ldr	r1, [pc, #12]	; 11314 <CMemorySystem::EnableMMU()+0xb4>
   11304:	e3a020c0 	mov	r2, #192, 0	; 0xc0
   11308:	e2810074 	add	r0, r1, #116, 0	; 0x74
   1130c:	eb0001fd 	bl	11b08 <assertion_failed>
   11310:	00c01805 	.word	0x00c01805
   11314:	0001a308 	.word	0x0001a308

00011318 <CMemorySystem::GetCoherentPage(unsigned int)>:
   11318:	e1a00600 	lsl	r0, r0, #12
   1131c:	e2800612 	add	r0, r0, #18874368	; 0x1200000
   11320:	e12fff1e 	bx	lr

00011324 <CMemorySystem::Destructor() [clone .part.0]>:
   11324:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11328:	e3c33005 	bic	r3, r3, #5, 0
   1132c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11330:	e3a03000 	mov	r3, #0, 0
   11334:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   11338:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1133c:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   11340:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11344:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   11348:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1134c:	e12fff1e 	bx	lr

00011350 <CPageTable::CPageTable(unsigned int)>:
   11350:	e59fc080 	ldr	ip, [pc, #128]	; 113d8 <CPageTable::CPageTable(unsigned int)+0x88>
   11354:	e59f2080 	ldr	r2, [pc, #128]	; 113dc <CPageTable::CPageTable(unsigned int)+0x8c>
   11358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1135c:	e3a03000 	mov	r3, #0, 0
   11360:	e1a04002 	mov	r4, r2
   11364:	e3e064df 	mvn	r6, #-553648128	; 0xdf000000
   11368:	e59fe070 	ldr	lr, [pc, #112]	; 113e0 <CPageTable::CPageTable(unsigned int)+0x90>
   1136c:	e59f8070 	ldr	r8, [pc, #112]	; 113e4 <CPageTable::CPageTable(unsigned int)+0x94>
   11370:	e59f7070 	ldr	r7, [pc, #112]	; 113e8 <CPageTable::CPageTable(unsigned int)+0x98>
   11374:	e59f5070 	ldr	r5, [pc, #112]	; 113ec <CPageTable::CPageTable(unsigned int)+0x9c>
   11378:	e580c000 	str	ip, [r0]
   1137c:	ea00000c 	b	113b4 <CPageTable::CPageTable(unsigned int)+0x64>
   11380:	e153000e 	cmp	r3, lr
   11384:	31a02004 	movcc	r2, r4
   11388:	3a000008 	bcc	113b0 <CPageTable::CPageTable(unsigned int)+0x60>
   1138c:	e3530612 	cmp	r3, #18874368	; 0x1200000
   11390:	01a02008 	moveq	r2, r8
   11394:	0a000005 	beq	113b0 <CPageTable::CPageTable(unsigned int)+0x60>
   11398:	e1530001 	cmp	r3, r1
   1139c:	31a02007 	movcc	r2, r7
   113a0:	3a000002 	bcc	113b0 <CPageTable::CPageTable(unsigned int)+0x60>
   113a4:	e1530006 	cmp	r3, r6
   113a8:	31a02005 	movcc	r2, r5
   113ac:	23a02000 	movcs	r2, #0, 0
   113b0:	e28cc004 	add	ip, ip, #4, 0
   113b4:	e1822003 	orr	r2, r2, r3
   113b8:	e3730601 	cmn	r3, #1048576	; 0x100000
   113bc:	e58c2000 	str	r2, [ip]
   113c0:	e2833601 	add	r3, r3, #1048576	; 0x100000
   113c4:	1affffed 	bne	11380 <CPageTable::CPageTable(unsigned int)+0x30>
   113c8:	e3a03000 	mov	r3, #0, 0
   113cc:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   113d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   113d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   113d8:	01030000 	.word	0x01030000
   113dc:	0000040e 	.word	0x0000040e
   113e0:	0001964c 	.word	0x0001964c
   113e4:	00010412 	.word	0x00010412
   113e8:	0000041e 	.word	0x0000041e
   113ec:	00010416 	.word	0x00010416

000113f0 <CPageTable::~CPageTable()>:
   113f0:	e12fff1e 	bx	lr

000113f4 <CPageTable::GetBaseAddress() const>:
   113f4:	e5900000 	ldr	r0, [r0]
   113f8:	e3800001 	orr	r0, r0, #1, 0
   113fc:	e12fff1e 	bx	lr

00011400 <CurrentExecutionLevel>:
   11400:	e10f0000 	mrs	r0, CPSR
   11404:	e3100040 	tst	r0, #64, 0	; 0x40
   11408:	01a003a0 	lsreq	r0, r0, #7
   1140c:	02000001 	andeq	r0, r0, #1, 0
   11410:	13a00002 	movne	r0, #2, 0
   11414:	e12fff1e 	bx	lr

00011418 <EnterCritical>:
   11418:	e2403001 	sub	r3, r0, #1, 0
   1141c:	e3530001 	cmp	r3, #1, 0
   11420:	e92d4010 	push	{r4, lr}
   11424:	8a000012 	bhi	11474 <EnterCritical+0x5c>
   11428:	e10f1000 	mrs	r1, CPSR
   1142c:	e3500002 	cmp	r0, #2, 0
   11430:	1a000013 	bne	11484 <EnterCritical+0x6c>
   11434:	f10c00c0 	cpsid	if
   11438:	e59f306c 	ldr	r3, [pc, #108]	; 114ac <EnterCritical+0x94>
   1143c:	e5932000 	ldr	r2, [r3]
   11440:	e3520013 	cmp	r2, #19, 0
   11444:	8a000014 	bhi	1149c <EnterCritical+0x84>
   11448:	e5932000 	ldr	r2, [r3]
   1144c:	e3500001 	cmp	r0, #1, 0
   11450:	e2820001 	add	r0, r2, #1, 0
   11454:	e0832102 	add	r2, r3, r2, lsl #2
   11458:	e5830000 	str	r0, [r3]
   1145c:	e5821004 	str	r1, [r2, #4]
   11460:	1a000000 	bne	11468 <EnterCritical+0x50>
   11464:	f1080040 	cpsie	f
   11468:	e3a03000 	mov	r3, #0, 0
   1146c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11470:	e8bd8010 	pop	{r4, pc}
   11474:	e3a02064 	mov	r2, #100, 0	; 0x64
   11478:	e59f1030 	ldr	r1, [pc, #48]	; 114b0 <EnterCritical+0x98>
   1147c:	e59f0030 	ldr	r0, [pc, #48]	; 114b4 <EnterCritical+0x9c>
   11480:	eb0001a0 	bl	11b08 <assertion_failed>
   11484:	e3110040 	tst	r1, #64, 0	; 0x40
   11488:	0affffe9 	beq	11434 <EnterCritical+0x1c>
   1148c:	e3a0206a 	mov	r2, #106, 0	; 0x6a
   11490:	e59f1018 	ldr	r1, [pc, #24]	; 114b0 <EnterCritical+0x98>
   11494:	e59f001c 	ldr	r0, [pc, #28]	; 114b8 <EnterCritical+0xa0>
   11498:	eb00019a 	bl	11b08 <assertion_failed>
   1149c:	e3a0206e 	mov	r2, #110, 0	; 0x6e
   114a0:	e59f1008 	ldr	r1, [pc, #8]	; 114b0 <EnterCritical+0x98>
   114a4:	e59f0010 	ldr	r0, [pc, #16]	; 114bc <EnterCritical+0xa4>
   114a8:	eb000196 	bl	11b08 <assertion_failed>
   114ac:	0001cc8c 	.word	0x0001cc8c
   114b0:	0001a390 	.word	0x0001a390
   114b4:	0001a3a0 	.word	0x0001a3a0
   114b8:	0001a3d8 	.word	0x0001a3d8
   114bc:	0001a408 	.word	0x0001a408

000114c0 <LeaveCritical>:
   114c0:	e3a03000 	mov	r3, #0, 0
   114c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   114c8:	f10c0040 	cpsid	f
   114cc:	e59f3038 	ldr	r3, [pc, #56]	; 1150c <LeaveCritical+0x4c>
   114d0:	e5932000 	ldr	r2, [r3]
   114d4:	e3520000 	cmp	r2, #0, 0
   114d8:	0a000006 	beq	114f8 <LeaveCritical+0x38>
   114dc:	e5932000 	ldr	r2, [r3]
   114e0:	e2422001 	sub	r2, r2, #1, 0
   114e4:	e5832000 	str	r2, [r3]
   114e8:	e0833102 	add	r3, r3, r2, lsl #2
   114ec:	e5933004 	ldr	r3, [r3, #4]
   114f0:	e121f003 	msr	CPSR_c, r3
   114f4:	e12fff1e 	bx	lr
   114f8:	e3a0207f 	mov	r2, #127, 0	; 0x7f
   114fc:	e92d4010 	push	{r4, lr}
   11500:	e59f1008 	ldr	r1, [pc, #8]	; 11510 <LeaveCritical+0x50>
   11504:	e59f0008 	ldr	r0, [pc, #8]	; 11514 <LeaveCritical+0x54>
   11508:	eb00017e 	bl	11b08 <assertion_failed>
   1150c:	0001cc8c 	.word	0x0001cc8c
   11510:	0001a390 	.word	0x0001a390
   11514:	0001a430 	.word	0x0001a430

00011518 <CleanAndInvalidateDataCacheRange>:
   11518:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   1151c:	e2813020 	add	r3, r1, #32, 0
   11520:	e353001f 	cmp	r3, #31, 0
   11524:	9a000007 	bls	11548 <CleanAndInvalidateDataCacheRange+0x30>
   11528:	e2800020 	add	r0, r0, #32, 0
   1152c:	e3c1101f 	bic	r1, r1, #31, 0
   11530:	e0803001 	add	r3, r0, r1
   11534:	ea000000 	b	1153c <CleanAndInvalidateDataCacheRange+0x24>
   11538:	e2800020 	add	r0, r0, #32, 0
   1153c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11540:	e1530000 	cmp	r3, r0
   11544:	1afffffb 	bne	11538 <CleanAndInvalidateDataCacheRange+0x20>
   11548:	e3a03000 	mov	r3, #0, 0
   1154c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11550:	e12fff1e 	bx	lr

00011554 <SyncDataAndInstructionCache>:
   11554:	e3a03000 	mov	r3, #0, 0
   11558:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   1155c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11560:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11564:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11568:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1156c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   11570:	e12fff1e 	bx	lr

00011574 <CInterruptSystem::CInterruptSystem()>:
   11574:	e3a02000 	mov	r2, #0, 0
   11578:	e2403004 	sub	r3, r0, #4, 0
   1157c:	e2801f47 	add	r1, r0, #284	; 0x11c
   11580:	e5a32004 	str	r2, [r3, #4]!
   11584:	e1530001 	cmp	r3, r1
   11588:	e5832120 	str	r2, [r3, #288]	; 0x120
   1158c:	1afffffb 	bne	11580 <CInterruptSystem::CInterruptSystem()+0xc>
   11590:	e59f3004 	ldr	r3, [pc, #4]	; 1159c <CInterruptSystem::CInterruptSystem()+0x28>
   11594:	e5830000 	str	r0, [r3]
   11598:	e12fff1e 	bx	lr
   1159c:	0001cce0 	.word	0x0001cce0

000115a0 <CInterruptSystem::~CInterruptSystem()>:
   115a0:	f10c0080 	cpsid	i
   115a4:	e3a03000 	mov	r3, #0, 0
   115a8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   115ac:	e3e01000 	mvn	r1, #0, 0
   115b0:	e59f201c 	ldr	r2, [pc, #28]	; 115d4 <CInterruptSystem::~CInterruptSystem()+0x34>
   115b4:	e582320c 	str	r3, [r2, #524]	; 0x20c
   115b8:	e582121c 	str	r1, [r2, #540]	; 0x21c
   115bc:	e5821220 	str	r1, [r2, #544]	; 0x220
   115c0:	e5821224 	str	r1, [r2, #548]	; 0x224
   115c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   115c8:	e59f2008 	ldr	r2, [pc, #8]	; 115d8 <CInterruptSystem::~CInterruptSystem()+0x38>
   115cc:	e5823000 	str	r3, [r2]
   115d0:	e12fff1e 	bx	lr
   115d4:	2000b000 	.word	0x2000b000
   115d8:	0001cce0 	.word	0x0001cce0

000115dc <CInterruptSystem::Initialize()>:
   115dc:	e92d4010 	push	{r4, lr}
   115e0:	e3a04000 	mov	r4, #0, 0
   115e4:	e59f2054 	ldr	r2, [pc, #84]	; 11640 <CInterruptSystem::Initialize()+0x64>
   115e8:	e59f3054 	ldr	r3, [pc, #84]	; 11644 <CInterruptSystem::Initialize()+0x68>
   115ec:	e2422018 	sub	r2, r2, #24, 0
   115f0:	e243301c 	sub	r3, r3, #28, 0
   115f4:	e1a02142 	asr	r2, r2, #2
   115f8:	e1a03143 	asr	r3, r3, #2
   115fc:	e2422002 	sub	r2, r2, #2, 0
   11600:	e2433002 	sub	r3, r3, #2, 0
   11604:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11608:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1160c:	e1c421f8 	strd	r2, [r4, #24]
   11610:	ebffffcf 	bl	11554 <SyncDataAndInstructionCache>
   11614:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   11618:	e3e02000 	mvn	r2, #0, 0
   1161c:	e59f3024 	ldr	r3, [pc, #36]	; 11648 <CInterruptSystem::Initialize()+0x6c>
   11620:	e583420c 	str	r4, [r3, #524]	; 0x20c
   11624:	e583221c 	str	r2, [r3, #540]	; 0x21c
   11628:	e5832220 	str	r2, [r3, #544]	; 0x220
   1162c:	e5832224 	str	r2, [r3, #548]	; 0x224
   11630:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   11634:	f1080080 	cpsie	i
   11638:	e3a00001 	mov	r0, #1, 0
   1163c:	e8bd8010 	pop	{r4, pc}
   11640:	00010fc4 	.word	0x00010fc4
   11644:	00010fdc 	.word	0x00010fdc
   11648:	2000b000 	.word	0x2000b000

0001164c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   1164c:	e3510047 	cmp	r1, #71, 0	; 0x47
   11650:	e92d4010 	push	{r4, lr}
   11654:	8a00001e 	bhi	116d4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   11658:	e3520000 	cmp	r2, #0, 0
   1165c:	0a000020 	beq	116e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   11660:	e59f009c 	ldr	r0, [pc, #156]	; 11704 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   11664:	e5d0e001 	ldrb	lr, [r0, #1]
   11668:	e5d0c000 	ldrb	ip, [r0]
   1166c:	e5d04002 	ldrb	r4, [r0, #2]
   11670:	e18cc40e 	orr	ip, ip, lr, lsl #8
   11674:	e5d0e003 	ldrb	lr, [r0, #3]
   11678:	e18cc804 	orr	ip, ip, r4, lsl #16
   1167c:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   11680:	1a00001b 	bne	116f4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   11684:	e1a04422 	lsr	r4, r2, #8
   11688:	e1a0e822 	lsr	lr, r2, #16
   1168c:	e5c02000 	strb	r2, [r0]
   11690:	e5c03004 	strb	r3, [r0, #4]
   11694:	e1a02c22 	lsr	r2, r2, #24
   11698:	e5c04001 	strb	r4, [r0, #1]
   1169c:	e5c0e002 	strb	lr, [r0, #2]
   116a0:	e1a04423 	lsr	r4, r3, #8
   116a4:	e1a0e823 	lsr	lr, r3, #16
   116a8:	e1a03c23 	lsr	r3, r3, #24
   116ac:	e5c02003 	strb	r2, [r0, #3]
   116b0:	e5c04005 	strb	r4, [r0, #5]
   116b4:	e5c0e006 	strb	lr, [r0, #6]
   116b8:	e5c03007 	strb	r3, [r0, #7]
   116bc:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   116c0:	e59f3040 	ldr	r3, [pc, #64]	; 11708 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   116c4:	e3811080 	orr	r1, r1, #128, 0	; 0x80
   116c8:	e583120c 	str	r1, [r3, #524]	; 0x20c
   116cc:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   116d0:	e8bd8010 	pop	{r4, pc}
   116d4:	e3a0208f 	mov	r2, #143, 0	; 0x8f
   116d8:	e59f102c 	ldr	r1, [pc, #44]	; 1170c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   116dc:	e59f002c 	ldr	r0, [pc, #44]	; 11710 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   116e0:	eb000108 	bl	11b08 <assertion_failed>
   116e4:	e3a02090 	mov	r2, #144, 0	; 0x90
   116e8:	e59f101c 	ldr	r1, [pc, #28]	; 1170c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   116ec:	e59f0020 	ldr	r0, [pc, #32]	; 11714 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   116f0:	eb000104 	bl	11b08 <assertion_failed>
   116f4:	e3a02091 	mov	r2, #145, 0	; 0x91
   116f8:	e59f100c 	ldr	r1, [pc, #12]	; 1170c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   116fc:	e59f0014 	ldr	r0, [pc, #20]	; 11718 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   11700:	eb000100 	bl	11b08 <assertion_failed>
   11704:	0001cb9c 	.word	0x0001cb9c
   11708:	2000b000 	.word	0x2000b000
   1170c:	0001a448 	.word	0x0001a448
   11710:	0001a458 	.word	0x0001a458
   11714:	0001a48c 	.word	0x0001a48c
   11718:	0001a46c 	.word	0x0001a46c

0001171c <CInterruptSystem::DisconnectFIQ()>:
   1171c:	e59f3068 	ldr	r3, [pc, #104]	; 1178c <CInterruptSystem::DisconnectFIQ()+0x70>
   11720:	e5d31001 	ldrb	r1, [r3, #1]
   11724:	e5d32000 	ldrb	r2, [r3]
   11728:	e5d30002 	ldrb	r0, [r3, #2]
   1172c:	e1822401 	orr	r2, r2, r1, lsl #8
   11730:	e5d31003 	ldrb	r1, [r3, #3]
   11734:	e1822800 	orr	r2, r2, r0, lsl #16
   11738:	e1922c01 	orrs	r2, r2, r1, lsl #24
   1173c:	0a00000d 	beq	11778 <CInterruptSystem::DisconnectFIQ()+0x5c>
   11740:	e3a02000 	mov	r2, #0, 0
   11744:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   11748:	e59f1040 	ldr	r1, [pc, #64]	; 11790 <CInterruptSystem::DisconnectFIQ()+0x74>
   1174c:	e581220c 	str	r2, [r1, #524]	; 0x20c
   11750:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   11754:	e5c32000 	strb	r2, [r3]
   11758:	e5c32001 	strb	r2, [r3, #1]
   1175c:	e5c32002 	strb	r2, [r3, #2]
   11760:	e5c32003 	strb	r2, [r3, #3]
   11764:	e5c32004 	strb	r2, [r3, #4]
   11768:	e5c32005 	strb	r2, [r3, #5]
   1176c:	e5c32006 	strb	r2, [r3, #6]
   11770:	e5c32007 	strb	r2, [r3, #7]
   11774:	e12fff1e 	bx	lr
   11778:	e3a0209b 	mov	r2, #155, 0	; 0x9b
   1177c:	e92d4010 	push	{r4, lr}
   11780:	e59f100c 	ldr	r1, [pc, #12]	; 11794 <CInterruptSystem::DisconnectFIQ()+0x78>
   11784:	e59f000c 	ldr	r0, [pc, #12]	; 11798 <CInterruptSystem::DisconnectFIQ()+0x7c>
   11788:	eb0000de 	bl	11b08 <assertion_failed>
   1178c:	0001cb9c 	.word	0x0001cb9c
   11790:	2000b000 	.word	0x2000b000
   11794:	0001a448 	.word	0x0001a448
   11798:	0001a484 	.word	0x0001a484

0001179c <CInterruptSystem::EnableIRQ(unsigned int)>:
   1179c:	e3a03000 	mov	r3, #0, 0
   117a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   117a4:	e3500047 	cmp	r0, #71, 0	; 0x47
   117a8:	8a00000e 	bhi	117e8 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   117ac:	e350001f 	cmp	r0, #31, 0
   117b0:	8a000007 	bhi	117d4 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   117b4:	e59f2040 	ldr	r2, [pc, #64]	; 117fc <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   117b8:	e3a03001 	mov	r3, #1, 0
   117bc:	e200001f 	and	r0, r0, #31, 0
   117c0:	e1a00013 	lsl	r0, r3, r0
   117c4:	e5820000 	str	r0, [r2]
   117c8:	e3a03000 	mov	r3, #0, 0
   117cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   117d0:	e12fff1e 	bx	lr
   117d4:	e59f3024 	ldr	r3, [pc, #36]	; 11800 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   117d8:	e350003f 	cmp	r0, #63, 0	; 0x3f
   117dc:	e59f2020 	ldr	r2, [pc, #32]	; 11804 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   117e0:	81a02003 	movhi	r2, r3
   117e4:	eafffff3 	b	117b8 <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   117e8:	e3a020a7 	mov	r2, #167, 0	; 0xa7
   117ec:	e92d4010 	push	{r4, lr}
   117f0:	e59f1010 	ldr	r1, [pc, #16]	; 11808 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   117f4:	e59f0010 	ldr	r0, [pc, #16]	; 1180c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   117f8:	eb0000c2 	bl	11b08 <assertion_failed>
   117fc:	2000b210 	.word	0x2000b210
   11800:	2000b218 	.word	0x2000b218
   11804:	2000b214 	.word	0x2000b214
   11808:	0001a448 	.word	0x0001a448
   1180c:	0001a49c 	.word	0x0001a49c

00011810 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11810:	e3510047 	cmp	r1, #71, 0	; 0x47
   11814:	e92d4010 	push	{r4, lr}
   11818:	8a000008 	bhi	11840 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   1181c:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   11820:	e080e101 	add	lr, r0, r1, lsl #2
   11824:	e35c0000 	cmp	ip, #0, 0
   11828:	1a000008 	bne	11850 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   1182c:	e7802101 	str	r2, [r0, r1, lsl #2]
   11830:	e58e3120 	str	r3, [lr, #288]	; 0x120
   11834:	e1a00001 	mov	r0, r1
   11838:	e8bd4010 	pop	{r4, lr}
   1183c:	eaffffd6 	b	1179c <CInterruptSystem::EnableIRQ(unsigned int)>
   11840:	e3a02076 	mov	r2, #118, 0	; 0x76
   11844:	e59f1014 	ldr	r1, [pc, #20]	; 11860 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   11848:	e59f0014 	ldr	r0, [pc, #20]	; 11864 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   1184c:	eb0000ad 	bl	11b08 <assertion_failed>
   11850:	e3a02077 	mov	r2, #119, 0	; 0x77
   11854:	e59f1004 	ldr	r1, [pc, #4]	; 11860 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   11858:	e59f0008 	ldr	r0, [pc, #8]	; 11868 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   1185c:	eb0000a9 	bl	11b08 <assertion_failed>
   11860:	0001a448 	.word	0x0001a448
   11864:	0001a49c 	.word	0x0001a49c
   11868:	0001a4b0 	.word	0x0001a4b0

0001186c <CInterruptSystem::DisableIRQ(unsigned int)>:
   1186c:	e3a03000 	mov	r3, #0, 0
   11870:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11874:	e3500047 	cmp	r0, #71, 0	; 0x47
   11878:	8a00000e 	bhi	118b8 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   1187c:	e350001f 	cmp	r0, #31, 0
   11880:	8a000007 	bhi	118a4 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   11884:	e59f2040 	ldr	r2, [pc, #64]	; 118cc <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   11888:	e3a03001 	mov	r3, #1, 0
   1188c:	e200001f 	and	r0, r0, #31, 0
   11890:	e1a00013 	lsl	r0, r3, r0
   11894:	e5820000 	str	r0, [r2]
   11898:	e3a03000 	mov	r3, #0, 0
   1189c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   118a0:	e12fff1e 	bx	lr
   118a4:	e59f3024 	ldr	r3, [pc, #36]	; 118d0 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   118a8:	e350003f 	cmp	r0, #63, 0	; 0x3f
   118ac:	e59f2020 	ldr	r2, [pc, #32]	; 118d4 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   118b0:	81a02003 	movhi	r2, r3
   118b4:	eafffff3 	b	11888 <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   118b8:	e3a020bf 	mov	r2, #191, 0	; 0xbf
   118bc:	e92d4010 	push	{r4, lr}
   118c0:	e59f1010 	ldr	r1, [pc, #16]	; 118d8 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   118c4:	e59f0010 	ldr	r0, [pc, #16]	; 118dc <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   118c8:	eb00008e 	bl	11b08 <assertion_failed>
   118cc:	2000b21c 	.word	0x2000b21c
   118d0:	2000b224 	.word	0x2000b224
   118d4:	2000b220 	.word	0x2000b220
   118d8:	0001a448 	.word	0x0001a448
   118dc:	0001a49c 	.word	0x0001a49c

000118e0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   118e0:	e3510047 	cmp	r1, #71, 0	; 0x47
   118e4:	e92d4070 	push	{r4, r5, r6, lr}
   118e8:	8a00000b 	bhi	1191c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   118ec:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   118f0:	e1a04001 	mov	r4, r1
   118f4:	e3530000 	cmp	r3, #0, 0
   118f8:	e1a05000 	mov	r5, r0
   118fc:	e0806101 	add	r6, r0, r1, lsl #2
   11900:	0a000009 	beq	1192c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   11904:	e1a00001 	mov	r0, r1
   11908:	ebffffd7 	bl	1186c <CInterruptSystem::DisableIRQ(unsigned int)>
   1190c:	e3a03000 	mov	r3, #0, 0
   11910:	e7853104 	str	r3, [r5, r4, lsl #2]
   11914:	e5863120 	str	r3, [r6, #288]	; 0x120
   11918:	e8bd8070 	pop	{r4, r5, r6, pc}
   1191c:	e3a02081 	mov	r2, #129, 0	; 0x81
   11920:	e59f1014 	ldr	r1, [pc, #20]	; 1193c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   11924:	e59f0014 	ldr	r0, [pc, #20]	; 11940 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   11928:	eb000076 	bl	11b08 <assertion_failed>
   1192c:	e3a02082 	mov	r2, #130, 0	; 0x82
   11930:	e59f1004 	ldr	r1, [pc, #4]	; 1193c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   11934:	e59f0008 	ldr	r0, [pc, #8]	; 11944 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   11938:	eb000072 	bl	11b08 <assertion_failed>
   1193c:	0001a448 	.word	0x0001a448
   11940:	0001a49c 	.word	0x0001a49c
   11944:	0001a4cc 	.word	0x0001a4cc

00011948 <CInterruptSystem::EnableFIQ(unsigned int)>:
   11948:	e3a03000 	mov	r3, #0, 0
   1194c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11950:	e3500047 	cmp	r0, #71, 0	; 0x47
   11954:	8a000004 	bhi	1196c <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   11958:	e59f2020 	ldr	r2, [pc, #32]	; 11980 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   1195c:	e3800080 	orr	r0, r0, #128, 0	; 0x80
   11960:	e582020c 	str	r0, [r2, #524]	; 0x20c
   11964:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11968:	e12fff1e 	bx	lr
   1196c:	e3a020d7 	mov	r2, #215, 0	; 0xd7
   11970:	e92d4010 	push	{r4, lr}
   11974:	e59f1008 	ldr	r1, [pc, #8]	; 11984 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   11978:	e59f0008 	ldr	r0, [pc, #8]	; 11988 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   1197c:	eb000061 	bl	11b08 <assertion_failed>
   11980:	2000b000 	.word	0x2000b000
   11984:	0001a448 	.word	0x0001a448
   11988:	0001a458 	.word	0x0001a458

0001198c <CInterruptSystem::DisableFIQ()>:
   1198c:	e3a03000 	mov	r3, #0, 0
   11990:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11994:	e59f2008 	ldr	r2, [pc, #8]	; 119a4 <CInterruptSystem::DisableFIQ()+0x18>
   11998:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1199c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   119a0:	e12fff1e 	bx	lr
   119a4:	2000b000 	.word	0x2000b000

000119a8 <CInterruptSystem::Get()>:
   119a8:	e59f301c 	ldr	r3, [pc, #28]	; 119cc <CInterruptSystem::Get()+0x24>
   119ac:	e5930000 	ldr	r0, [r3]
   119b0:	e3500000 	cmp	r0, #0, 0
   119b4:	112fff1e 	bxne	lr
   119b8:	e3a020e9 	mov	r2, #233, 0	; 0xe9
   119bc:	e92d4010 	push	{r4, lr}
   119c0:	e59f1008 	ldr	r1, [pc, #8]	; 119d0 <CInterruptSystem::Get()+0x28>
   119c4:	e59f0008 	ldr	r0, [pc, #8]	; 119d4 <CInterruptSystem::Get()+0x2c>
   119c8:	eb00004e 	bl	11b08 <assertion_failed>
   119cc:	0001cce0 	.word	0x0001cce0
   119d0:	0001a448 	.word	0x0001a448
   119d4:	0001a118 	.word	0x0001a118

000119d8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   119d8:	e3510047 	cmp	r1, #71, 0	; 0x47
   119dc:	e92d4010 	push	{r4, lr}
   119e0:	8a00000b 	bhi	11a14 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   119e4:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   119e8:	e0803101 	add	r3, r0, r1, lsl #2
   119ec:	e3540000 	cmp	r4, #0, 0
   119f0:	0a000003 	beq	11a04 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   119f4:	e5930120 	ldr	r0, [r3, #288]	; 0x120
   119f8:	e12fff34 	blx	r4
   119fc:	e3a00001 	mov	r0, #1, 0
   11a00:	e8bd8010 	pop	{r4, pc}
   11a04:	e1a00001 	mov	r0, r1
   11a08:	ebffff97 	bl	1186c <CInterruptSystem::DisableIRQ(unsigned int)>
   11a0c:	e1a00004 	mov	r0, r4
   11a10:	e8bd8010 	pop	{r4, pc}
   11a14:	e3a020ef 	mov	r2, #239, 0	; 0xef
   11a18:	e59f1004 	ldr	r1, [pc, #4]	; 11a24 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   11a1c:	e59f0004 	ldr	r0, [pc, #4]	; 11a28 <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   11a20:	eb000038 	bl	11b08 <assertion_failed>
   11a24:	0001a448 	.word	0x0001a448
   11a28:	0001a49c 	.word	0x0001a49c

00011a2c <CInterruptSystem::InterruptHandler()>:
   11a2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11a30:	e59f80a4 	ldr	r8, [pc, #164]	; 11adc <CInterruptSystem::InterruptHandler()+0xb0>
   11a34:	e24dd010 	sub	sp, sp, #16, 0
   11a38:	e5983000 	ldr	r3, [r8]
   11a3c:	e3530000 	cmp	r3, #0, 0
   11a40:	0a000021 	beq	11acc <CInterruptSystem::InterruptHandler()+0xa0>
   11a44:	e3a06000 	mov	r6, #0, 0
   11a48:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   11a4c:	e59f308c 	ldr	r3, [pc, #140]	; 11ae0 <CInterruptSystem::InterruptHandler()+0xb4>
   11a50:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   11a54:	e58d2004 	str	r2, [sp, #4]
   11a58:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   11a5c:	e58d2008 	str	r2, [sp, #8]
   11a60:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   11a64:	e6ef3073 	uxtb	r3, r3
   11a68:	e58d300c 	str	r3, [sp, #12]
   11a6c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   11a70:	e28d7004 	add	r7, sp, #4, 0
   11a74:	e4974004 	ldr	r4, [r7], #4
   11a78:	e3540000 	cmp	r4, #0, 0
   11a7c:	1a000004 	bne	11a94 <CInterruptSystem::InterruptHandler()+0x68>
   11a80:	e2866001 	add	r6, r6, #1, 0
   11a84:	e3560003 	cmp	r6, #3, 0
   11a88:	1afffff9 	bne	11a74 <CInterruptSystem::InterruptHandler()+0x48>
   11a8c:	e28dd010 	add	sp, sp, #16, 0
   11a90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11a94:	e1a05286 	lsl	r5, r6, #5
   11a98:	ea000002 	b	11aa8 <CInterruptSystem::InterruptHandler()+0x7c>
   11a9c:	e1b040a4 	lsrs	r4, r4, #1
   11aa0:	e2855001 	add	r5, r5, #1, 0
   11aa4:	0afffff5 	beq	11a80 <CInterruptSystem::InterruptHandler()+0x54>
   11aa8:	e3140001 	tst	r4, #1, 0
   11aac:	0afffffa 	beq	11a9c <CInterruptSystem::InterruptHandler()+0x70>
   11ab0:	e1a01005 	mov	r1, r5
   11ab4:	e5980000 	ldr	r0, [r8]
   11ab8:	ebffffc6 	bl	119d8 <CInterruptSystem::CallIRQHandler(unsigned int)>
   11abc:	e3500000 	cmp	r0, #0, 0
   11ac0:	0afffff5 	beq	11a9c <CInterruptSystem::InterruptHandler()+0x70>
   11ac4:	e28dd010 	add	sp, sp, #16, 0
   11ac8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11acc:	e59f2010 	ldr	r2, [pc, #16]	; 11ae4 <CInterruptSystem::InterruptHandler()+0xb8>
   11ad0:	e59f1010 	ldr	r1, [pc, #16]	; 11ae8 <CInterruptSystem::InterruptHandler()+0xbc>
   11ad4:	e59f0010 	ldr	r0, [pc, #16]	; 11aec <CInterruptSystem::InterruptHandler()+0xc0>
   11ad8:	eb00000a 	bl	11b08 <assertion_failed>
   11adc:	0001cce0 	.word	0x0001cce0
   11ae0:	2000b000 	.word	0x2000b000
   11ae4:	00000102 	.word	0x00000102
   11ae8:	0001a448 	.word	0x0001a448
   11aec:	0001a118 	.word	0x0001a118

00011af0 <InterruptHandler>:
   11af0:	e92d4010 	push	{r4, lr}
   11af4:	e3a04000 	mov	r4, #0, 0
   11af8:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   11afc:	ebffffca 	bl	11a2c <CInterruptSystem::InterruptHandler()>
   11b00:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   11b04:	e8bd8010 	pop	{r4, pc}

00011b08 <assertion_failed>:
   11b08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11b0c:	e24dd024 	sub	sp, sp, #36, 0	; 0x24
   11b10:	e1a05000 	mov	r5, r0
   11b14:	e1a04001 	mov	r4, r1
   11b18:	e58d200c 	str	r2, [sp, #12]
   11b1c:	e1a0600d 	mov	r6, sp
   11b20:	ebffff99 	bl	1198c <CInterruptSystem::DisableFIQ()>
   11b24:	f1080040 	cpsie	f
   11b28:	e28d0010 	add	r0, sp, #16, 0
   11b2c:	ebffeeba 	bl	d61c <CString::CString()>
   11b30:	e1a02004 	mov	r2, r4
   11b34:	e59d300c 	ldr	r3, [sp, #12]
   11b38:	e59f1044 	ldr	r1, [pc, #68]	; 11b84 <assertion_failed+0x7c>
   11b3c:	e28d0010 	add	r0, sp, #16, 0
   11b40:	ebfff3fb 	bl	eb34 <CString::Format(char const*, ...)>
   11b44:	e28d0010 	add	r0, sp, #16, 0
   11b48:	ebffeecb 	bl	d67c <CString::operator char const*() const>
   11b4c:	e1a01000 	mov	r1, r0
   11b50:	e1a00006 	mov	r0, r6
   11b54:	eb000240 	bl	1245c <debug_stacktrace(unsigned int const*, char const*)>
   11b58:	ebffe310 	bl	a7a0 <CLogger::Get()>
   11b5c:	e1a04000 	mov	r4, r0
   11b60:	e28d0010 	add	r0, sp, #16, 0
   11b64:	ebffeec4 	bl	d67c <CString::operator char const*() const>
   11b68:	e3a02000 	mov	r2, #0, 0
   11b6c:	e1a01000 	mov	r1, r0
   11b70:	e59f3010 	ldr	r3, [pc, #16]	; 11b88 <assertion_failed+0x80>
   11b74:	e1a00004 	mov	r0, r4
   11b78:	e58d5000 	str	r5, [sp]
   11b7c:	ebffe249 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b80:	eafffffe 	b	11b80 <assertion_failed+0x78>
   11b84:	0001a4e8 	.word	0x0001a4e8
   11b88:	0001a4f0 	.word	0x0001a4f0

00011b8c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   11b8c:	e3a01000 	mov	r1, #0, 0
   11b90:	e3a02001 	mov	r2, #1, 0
   11b94:	e92d4030 	push	{r4, r5, lr}
   11b98:	e1a05000 	mov	r5, r0
   11b9c:	e5903020 	ldr	r3, [r0, #32]
   11ba0:	e24dd014 	sub	sp, sp, #20, 0
   11ba4:	e5c32011 	strb	r2, [r3, #17]
   11ba8:	e5c3100c 	strb	r1, [r3, #12]
   11bac:	e5c3100d 	strb	r1, [r3, #13]
   11bb0:	e5c3100e 	strb	r1, [r3, #14]
   11bb4:	e5c3100f 	strb	r1, [r3, #15]
   11bb8:	e5c31010 	strb	r1, [r3, #16]
   11bbc:	e5c31012 	strb	r1, [r3, #18]
   11bc0:	e5c31013 	strb	r1, [r3, #19]
   11bc4:	e28d0008 	add	r0, sp, #8, 0
   11bc8:	eb00012b 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11bcc:	e59f306c 	ldr	r3, [pc, #108]	; 11c40 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   11bd0:	e5952020 	ldr	r2, [r5, #32]
   11bd4:	e59f1068 	ldr	r1, [pc, #104]	; 11c44 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   11bd8:	e58d3000 	str	r3, [sp]
   11bdc:	e28d0008 	add	r0, sp, #8, 0
   11be0:	e283300c 	add	r3, r3, #12, 0
   11be4:	eb000130 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11be8:	e2504000 	subs	r4, r0, #0, 0
   11bec:	0a000008 	beq	11c14 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   11bf0:	e5952020 	ldr	r2, [r5, #32]
   11bf4:	e5d2300c 	ldrb	r3, [r2, #12]
   11bf8:	e5d2000d 	ldrb	r0, [r2, #13]
   11bfc:	e5d2100e 	ldrb	r1, [r2, #14]
   11c00:	e1833400 	orr	r3, r3, r0, lsl #8
   11c04:	e5d2200f 	ldrb	r2, [r2, #15]
   11c08:	e1833801 	orr	r3, r3, r1, lsl #16
   11c0c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   11c10:	0a000005 	beq	11c2c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   11c14:	e3a04000 	mov	r4, #0, 0
   11c18:	e28d0008 	add	r0, sp, #8, 0
   11c1c:	eb00011d 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   11c20:	e1a00004 	mov	r0, r4
   11c24:	e28dd014 	add	sp, sp, #20, 0
   11c28:	e8bd8030 	pop	{r4, r5, pc}
   11c2c:	e28d0008 	add	r0, sp, #8, 0
   11c30:	eb000118 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   11c34:	e1a00004 	mov	r0, r4
   11c38:	e28dd014 	add	sp, sp, #20, 0
   11c3c:	e8bd8030 	pop	{r4, r5, pc}
   11c40:	00000408 	.word	0x00000408
   11c44:	0004800b 	.word	0x0004800b

00011c48 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   11c48:	e92d4030 	push	{r4, r5, lr}
   11c4c:	e1a04000 	mov	r4, r0
   11c50:	e3a05000 	mov	r5, #0, 0
   11c54:	e3520000 	cmp	r2, #0, 0
   11c58:	13510000 	cmpne	r1, #0, 0
   11c5c:	e24dd02c 	sub	sp, sp, #44, 0	; 0x2c
   11c60:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   11c64:	e5841000 	str	r1, [r4]
   11c68:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   11c6c:	e5842004 	str	r2, [r4, #4]
   11c70:	e5843010 	str	r3, [r4, #16]
   11c74:	e584000c 	str	r0, [r4, #12]
   11c78:	e5841008 	str	r1, [r4, #8]
   11c7c:	e5845014 	str	r5, [r4, #20]
   11c80:	e5845018 	str	r5, [r4, #24]
   11c84:	e584501c 	str	r5, [r4, #28]
   11c88:	e5845020 	str	r5, [r4, #32]
   11c8c:	1a000011 	bne	11cd8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   11c90:	e1a01005 	mov	r1, r5
   11c94:	e28d000c 	add	r0, sp, #12, 0
   11c98:	eb0000f7 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11c9c:	e3a03014 	mov	r3, #20, 0
   11ca0:	e59f10dc 	ldr	r1, [pc, #220]	; 11d84 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   11ca4:	e58d5000 	str	r5, [sp]
   11ca8:	e28d000c 	add	r0, sp, #12, 0
   11cac:	e08d2003 	add	r2, sp, r3
   11cb0:	eb0000fd 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11cb4:	e1500005 	cmp	r0, r5
   11cb8:	1a000029 	bne	11d64 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x11c>
   11cbc:	e3a02d0a 	mov	r2, #640	; 0x280
   11cc0:	e3a03e1e 	mov	r3, #480	; 0x1e0
   11cc4:	e1c420f0 	strd	r2, [r4]
   11cc8:	e28d000c 	add	r0, sp, #12, 0
   11ccc:	eb0000f1 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   11cd0:	e5941008 	ldr	r1, [r4, #8]
   11cd4:	e5943010 	ldr	r3, [r4, #16]
   11cd8:	e3510000 	cmp	r1, #0, 0
   11cdc:	0a000013 	beq	11d30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   11ce0:	e594200c 	ldr	r2, [r4, #12]
   11ce4:	e3520000 	cmp	r2, #0, 0
   11ce8:	0a000010 	beq	11d30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   11cec:	e3530008 	cmp	r3, #8, 0
   11cf0:	9a000013 	bls	11d44 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   11cf4:	e3a02070 	mov	r2, #112, 0	; 0x70
   11cf8:	e59f1088 	ldr	r1, [pc, #136]	; 11d88 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x140>
   11cfc:	e2840024 	add	r0, r4, #36, 0	; 0x24
   11d00:	ebfff98a 	bl	10330 <memcpy>
   11d04:	e1c400d4 	ldrd	r0, [r4, #4]
   11d08:	e1c420dc 	ldrd	r2, [r4, #12]
   11d0c:	e5840034 	str	r0, [r4, #52]	; 0x34
   11d10:	e1a00004 	mov	r0, r4
   11d14:	e594c000 	ldr	ip, [r4]
   11d18:	e5841044 	str	r1, [r4, #68]	; 0x44
   11d1c:	e584c030 	str	ip, [r4, #48]	; 0x30
   11d20:	e5842048 	str	r2, [r4, #72]	; 0x48
   11d24:	e5843058 	str	r3, [r4, #88]	; 0x58
   11d28:	e28dd02c 	add	sp, sp, #44, 0	; 0x2c
   11d2c:	e8bd8030 	pop	{r4, r5, pc}
   11d30:	e3530008 	cmp	r3, #8, 0
   11d34:	e8940006 	ldm	r4, {r1, r2}
   11d38:	e5841008 	str	r1, [r4, #8]
   11d3c:	e584200c 	str	r2, [r4, #12]
   11d40:	8affffeb 	bhi	11cf4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   11d44:	e59f0040 	ldr	r0, [pc, #64]	; 11d8c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x144>
   11d48:	ebfffa8a 	bl	10778 <operator new[](unsigned int)>
   11d4c:	e3a02b01 	mov	r2, #1024	; 0x400
   11d50:	e5840020 	str	r0, [r4, #32]
   11d54:	e3a01000 	mov	r1, #0, 0
   11d58:	e2800014 	add	r0, r0, #20, 0
   11d5c:	ebfff72a 	bl	fa0c <memset>
   11d60:	eaffffe3 	b	11cf4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   11d64:	e1cd22d0 	ldrd	r2, [sp, #32]
   11d68:	e2420d0a 	sub	r0, r2, #640	; 0x280
   11d6c:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   11d70:	e3510f96 	cmp	r1, #600	; 0x258
   11d74:	93500c05 	cmpls	r0, #1280	; 0x500
   11d78:	e1c420f0 	strd	r2, [r4]
   11d7c:	8affffce 	bhi	11cbc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   11d80:	eaffffd0 	b	11cc8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>
   11d84:	00040003 	.word	0x00040003
   11d88:	0001cbac 	.word	0x0001cbac
   11d8c:	00000414 	.word	0x00000414

00011d90 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   11d90:	e92d4010 	push	{r4, lr}
   11d94:	e1a04000 	mov	r4, r0
   11d98:	e5900020 	ldr	r0, [r0, #32]
   11d9c:	e3500000 	cmp	r0, #0, 0
   11da0:	0a000001 	beq	11dac <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   11da4:	e3a01014 	mov	r1, #20, 0
   11da8:	ebfffa7a 	bl	10798 <operator delete(void*, unsigned int)>
   11dac:	e1a00004 	mov	r0, r4
   11db0:	e8bd8010 	pop	{r4, pc}

00011db4 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   11db4:	e5903010 	ldr	r3, [r0, #16]
   11db8:	e3530008 	cmp	r3, #8, 0
   11dbc:	812fff1e 	bxhi	lr
   11dc0:	e1a0c982 	lsl	ip, r2, #19
   11dc4:	e1a035a2 	lsr	r3, r2, #11
   11dc8:	e20cc73e 	and	ip, ip, #16252928	; 0xf80000
   11dcc:	e1a02282 	lsl	r2, r2, #5
   11dd0:	e18cc183 	orr	ip, ip, r3, lsl #3
   11dd4:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   11dd8:	e5903020 	ldr	r3, [r0, #32]
   11ddc:	e182200c 	orr	r2, r2, ip
   11de0:	e38204ff 	orr	r0, r2, #-16777216	; 0xff000000
   11de4:	e2811004 	add	r1, r1, #4, 0
   11de8:	e0831101 	add	r1, r3, r1, lsl #2
   11dec:	e1a0c420 	lsr	ip, r0, #8
   11df0:	e1a03820 	lsr	r3, r0, #16
   11df4:	e1a00c20 	lsr	r0, r0, #24
   11df8:	e5c12004 	strb	r2, [r1, #4]
   11dfc:	e5c1c005 	strb	ip, [r1, #5]
   11e00:	e5c13006 	strb	r3, [r1, #6]
   11e04:	e5c10007 	strb	r0, [r1, #7]
   11e08:	e12fff1e 	bx	lr

00011e0c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   11e0c:	e5903010 	ldr	r3, [r0, #16]
   11e10:	e3530008 	cmp	r3, #8, 0
   11e14:	812fff1e 	bxhi	lr
   11e18:	e5903020 	ldr	r3, [r0, #32]
   11e1c:	e2811004 	add	r1, r1, #4, 0
   11e20:	e0831101 	add	r1, r3, r1, lsl #2
   11e24:	e1a0c422 	lsr	ip, r2, #8
   11e28:	e1a00822 	lsr	r0, r2, #16
   11e2c:	e1a03c22 	lsr	r3, r2, #24
   11e30:	e5c12004 	strb	r2, [r1, #4]
   11e34:	e5c1c005 	strb	ip, [r1, #5]
   11e38:	e5c10006 	strb	r0, [r1, #6]
   11e3c:	e5c13007 	strb	r3, [r1, #7]
   11e40:	e12fff1e 	bx	lr

00011e44 <CBcmFrameBuffer::Initialize()>:
   11e44:	e92d4030 	push	{r4, r5, lr}
   11e48:	e1a04000 	mov	r4, r0
   11e4c:	e24dd00c 	sub	sp, sp, #12, 0
   11e50:	e3a01000 	mov	r1, #0, 0
   11e54:	e1a0000d 	mov	r0, sp
   11e58:	eb000087 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11e5c:	e1a0000d 	mov	r0, sp
   11e60:	e3a02070 	mov	r2, #112, 0	; 0x70
   11e64:	e2841024 	add	r1, r4, #36, 0	; 0x24
   11e68:	eb0000cc 	bl	121a0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   11e6c:	e2505000 	subs	r5, r0, #0, 0
   11e70:	0a00001f 	beq	11ef4 <CBcmFrameBuffer::Initialize()+0xb0>
   11e74:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   11e78:	e3530000 	cmp	r3, #0, 0
   11e7c:	0a00001b 	beq	11ef0 <CBcmFrameBuffer::Initialize()+0xac>
   11e80:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   11e84:	e3530000 	cmp	r3, #0, 0
   11e88:	0a000018 	beq	11ef0 <CBcmFrameBuffer::Initialize()+0xac>
   11e8c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   11e90:	e3530000 	cmp	r3, #0, 0
   11e94:	0a000015 	beq	11ef0 <CBcmFrameBuffer::Initialize()+0xac>
   11e98:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   11e9c:	e3530000 	cmp	r3, #0, 0
   11ea0:	0a000012 	beq	11ef0 <CBcmFrameBuffer::Initialize()+0xac>
   11ea4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   11ea8:	e3530000 	cmp	r3, #0, 0
   11eac:	0a00000f 	beq	11ef0 <CBcmFrameBuffer::Initialize()+0xac>
   11eb0:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   11eb4:	e3530000 	cmp	r3, #0, 0
   11eb8:	0a00000c 	beq	11ef0 <CBcmFrameBuffer::Initialize()+0xac>
   11ebc:	e5942010 	ldr	r2, [r4, #16]
   11ec0:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   11ec4:	e3520008 	cmp	r2, #8, 0
   11ec8:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   11ecc:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   11ed0:	e5843014 	str	r3, [r4, #20]
   11ed4:	e5841018 	str	r1, [r4, #24]
   11ed8:	e584201c 	str	r2, [r4, #28]
   11edc:	8a000004 	bhi	11ef4 <CBcmFrameBuffer::Initialize()+0xb0>
   11ee0:	e1a00004 	mov	r0, r4
   11ee4:	ebffff28 	bl	11b8c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   11ee8:	e1a05000 	mov	r5, r0
   11eec:	ea000000 	b	11ef4 <CBcmFrameBuffer::Initialize()+0xb0>
   11ef0:	e1a05003 	mov	r5, r3
   11ef4:	e1a0000d 	mov	r0, sp
   11ef8:	eb000066 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   11efc:	e1a00005 	mov	r0, r5
   11f00:	e28dd00c 	add	sp, sp, #12, 0
   11f04:	e8bd8030 	pop	{r4, r5, pc}

00011f08 <CBcmFrameBuffer::GetWidth() const>:
   11f08:	e5900000 	ldr	r0, [r0]
   11f0c:	e12fff1e 	bx	lr

00011f10 <CBcmFrameBuffer::GetHeight() const>:
   11f10:	e5900004 	ldr	r0, [r0, #4]
   11f14:	e12fff1e 	bx	lr

00011f18 <CBcmFrameBuffer::GetVirtWidth() const>:
   11f18:	e5900008 	ldr	r0, [r0, #8]
   11f1c:	e12fff1e 	bx	lr

00011f20 <CBcmFrameBuffer::GetVirtHeight() const>:
   11f20:	e590000c 	ldr	r0, [r0, #12]
   11f24:	e12fff1e 	bx	lr

00011f28 <CBcmFrameBuffer::GetPitch() const>:
   11f28:	e590001c 	ldr	r0, [r0, #28]
   11f2c:	e12fff1e 	bx	lr

00011f30 <CBcmFrameBuffer::GetDepth() const>:
   11f30:	e5900010 	ldr	r0, [r0, #16]
   11f34:	e12fff1e 	bx	lr

00011f38 <CBcmFrameBuffer::GetBuffer() const>:
   11f38:	e5900014 	ldr	r0, [r0, #20]
   11f3c:	e12fff1e 	bx	lr

00011f40 <CBcmFrameBuffer::GetSize() const>:
   11f40:	e5900018 	ldr	r0, [r0, #24]
   11f44:	e12fff1e 	bx	lr

00011f48 <CBcmFrameBuffer::UpdatePalette()>:
   11f48:	e5903010 	ldr	r3, [r0, #16]
   11f4c:	e3530008 	cmp	r3, #8, 0
   11f50:	9a000001 	bls	11f5c <CBcmFrameBuffer::UpdatePalette()+0x14>
   11f54:	e3a00001 	mov	r0, #1, 0
   11f58:	e12fff1e 	bx	lr
   11f5c:	eaffff0a 	b	11b8c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00011f60 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   11f60:	e92d4070 	push	{r4, r5, r6, lr}
   11f64:	e24dd028 	sub	sp, sp, #40, 0	; 0x28
   11f68:	e1a05001 	mov	r5, r1
   11f6c:	e28d000c 	add	r0, sp, #12, 0
   11f70:	e3a01000 	mov	r1, #0, 0
   11f74:	e1a06002 	mov	r6, r2
   11f78:	eb00003f 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11f7c:	e3a03008 	mov	r3, #8, 0
   11f80:	e58d3000 	str	r3, [sp]
   11f84:	e3a03014 	mov	r3, #20, 0
   11f88:	e59f1048 	ldr	r1, [pc, #72]	; 11fd8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   11f8c:	e28d000c 	add	r0, sp, #12, 0
   11f90:	e08d2003 	add	r2, sp, r3
   11f94:	e58d5020 	str	r5, [sp, #32]
   11f98:	e58d6024 	str	r6, [sp, #36]	; 0x24
   11f9c:	eb000042 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11fa0:	e2504000 	subs	r4, r0, #0, 0
   11fa4:	0a000006 	beq	11fc4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   11fa8:	e59d3020 	ldr	r3, [sp, #32]
   11fac:	e1530005 	cmp	r3, r5
   11fb0:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   11fb4:	13a04000 	movne	r4, #0, 0
   11fb8:	00404006 	subeq	r4, r0, r6
   11fbc:	016f4f14 	clzeq	r4, r4
   11fc0:	01a042a4 	lsreq	r4, r4, #5
   11fc4:	e28d000c 	add	r0, sp, #12, 0
   11fc8:	eb000032 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   11fcc:	e1a00004 	mov	r0, r4
   11fd0:	e28dd028 	add	sp, sp, #40, 0	; 0x28
   11fd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fd8:	00048009 	.word	0x00048009

00011fdc <CBcmFrameBuffer::WaitForVerticalSync()>:
   11fdc:	e92d4010 	push	{r4, lr}
   11fe0:	e24dd020 	sub	sp, sp, #32, 0
   11fe4:	e3a01000 	mov	r1, #0, 0
   11fe8:	e28d0008 	add	r0, sp, #8, 0
   11fec:	eb000022 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11ff0:	e3a03000 	mov	r3, #0, 0
   11ff4:	e58d3000 	str	r3, [sp]
   11ff8:	e3a03010 	mov	r3, #16, 0
   11ffc:	e59f1020 	ldr	r1, [pc, #32]	; 12024 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   12000:	e08d2003 	add	r2, sp, r3
   12004:	e28d0008 	add	r0, sp, #8, 0
   12008:	eb000027 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1200c:	e1a04000 	mov	r4, r0
   12010:	e28d0008 	add	r0, sp, #8, 0
   12014:	eb00001f 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   12018:	e1a00004 	mov	r0, r4
   1201c:	e28dd020 	add	sp, sp, #32, 0
   12020:	e8bd8010 	pop	{r4, pc}
   12024:	0004800e 	.word	0x0004800e

00012028 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   12028:	e92d4010 	push	{r4, lr}
   1202c:	e24dd020 	sub	sp, sp, #32, 0
   12030:	e1a04001 	mov	r4, r1
   12034:	e28d0008 	add	r0, sp, #8, 0
   12038:	e3a01000 	mov	r1, #0, 0
   1203c:	eb00000e 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12040:	e3a03004 	mov	r3, #4, 0
   12044:	e58d3000 	str	r3, [sp]
   12048:	e3a03010 	mov	r3, #16, 0
   1204c:	e59f1024 	ldr	r1, [pc, #36]	; 12078 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   12050:	e08d2003 	add	r2, sp, r3
   12054:	e28d0008 	add	r0, sp, #8, 0
   12058:	e58d401c 	str	r4, [sp, #28]
   1205c:	eb000012 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12060:	e1a04000 	mov	r4, r0
   12064:	e28d0008 	add	r0, sp, #8, 0
   12068:	eb00000a 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   1206c:	e1a00004 	mov	r0, r4
   12070:	e28dd020 	add	sp, sp, #32, 0
   12074:	e8bd8010 	pop	{r4, pc}
   12078:	0004800f 	.word	0x0004800f

0001207c <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   1207c:	e92d4010 	push	{r4, lr}
   12080:	e1a04000 	mov	r4, r0
   12084:	e1a02001 	mov	r2, r1
   12088:	e3a01008 	mov	r1, #8, 0
   1208c:	eb0006ac 	bl	13b44 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   12090:	e1a00004 	mov	r0, r4
   12094:	e8bd8010 	pop	{r4, pc}

00012098 <CBcmPropertyTags::~CBcmPropertyTags()>:
   12098:	e92d4010 	push	{r4, lr}
   1209c:	e1a04000 	mov	r4, r0
   120a0:	eb0006aa 	bl	13b50 <CBcmMailBox::~CBcmMailBox()>
   120a4:	e1a00004 	mov	r0, r4
   120a8:	e8bd8010 	pop	{r4, pc}

000120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   120ac:	e92d4070 	push	{r4, r5, r6, lr}
   120b0:	e2524000 	subs	r4, r2, #0, 0
   120b4:	e59de010 	ldr	lr, [sp, #16]
   120b8:	0a00002f 	beq	1217c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   120bc:	e353000f 	cmp	r3, #15, 0
   120c0:	9a000031 	bls	1218c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   120c4:	e3ce2102 	bic	r2, lr, #-2147483648	; 0x80000000
   120c8:	e5c4e008 	strb	lr, [r4, #8]
   120cc:	e1a0e422 	lsr	lr, r2, #8
   120d0:	e243c00c 	sub	ip, r3, #12, 0
   120d4:	e5c4e009 	strb	lr, [r4, #9]
   120d8:	e1a0e822 	lsr	lr, r2, #16
   120dc:	e5c4e00a 	strb	lr, [r4, #10]
   120e0:	e1a02c22 	lsr	r2, r2, #24
   120e4:	e1a0e42c 	lsr	lr, ip, #8
   120e8:	e5c41000 	strb	r1, [r4]
   120ec:	e5c4200b 	strb	r2, [r4, #11]
   120f0:	e1a0582c 	lsr	r5, ip, #16
   120f4:	e1a02003 	mov	r2, r3
   120f8:	e5c4c004 	strb	ip, [r4, #4]
   120fc:	e1a03821 	lsr	r3, r1, #16
   12100:	e1a0cc2c 	lsr	ip, ip, #24
   12104:	e5c4e005 	strb	lr, [r4, #5]
   12108:	e1a0e421 	lsr	lr, r1, #8
   1210c:	e1a01c21 	lsr	r1, r1, #24
   12110:	e5c41003 	strb	r1, [r4, #3]
   12114:	e5c45006 	strb	r5, [r4, #6]
   12118:	e1a01004 	mov	r1, r4
   1211c:	e5c4c007 	strb	ip, [r4, #7]
   12120:	e5c4e001 	strb	lr, [r4, #1]
   12124:	e5c43002 	strb	r3, [r4, #2]
   12128:	eb00001c 	bl	121a0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1212c:	e3500000 	cmp	r0, #0, 0
   12130:	08bd8070 	popeq	{r4, r5, r6, pc}
   12134:	e5d42009 	ldrb	r2, [r4, #9]
   12138:	e5d43008 	ldrb	r3, [r4, #8]
   1213c:	e5d4100a 	ldrb	r1, [r4, #10]
   12140:	e1833402 	orr	r3, r3, r2, lsl #8
   12144:	e5d4200b 	ldrb	r2, [r4, #11]
   12148:	e1833801 	orr	r3, r3, r1, lsl #16
   1214c:	e1833c02 	orr	r3, r3, r2, lsl #24
   12150:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
   12154:	e2520000 	subs	r0, r2, #0, 0
   12158:	e1a0c422 	lsr	ip, r2, #8
   1215c:	e1a01822 	lsr	r1, r2, #16
   12160:	e1a02c22 	lsr	r2, r2, #24
   12164:	13a00001 	movne	r0, #1, 0
   12168:	e5c43008 	strb	r3, [r4, #8]
   1216c:	e5c4c009 	strb	ip, [r4, #9]
   12170:	e5c4100a 	strb	r1, [r4, #10]
   12174:	e5c4200b 	strb	r2, [r4, #11]
   12178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1217c:	e59f1018 	ldr	r1, [pc, #24]	; 1219c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   12180:	e3a02033 	mov	r2, #51, 0	; 0x33
   12184:	e2810014 	add	r0, r1, #20, 0
   12188:	ebfffe5e 	bl	11b08 <assertion_failed>
   1218c:	e59f1008 	ldr	r1, [pc, #8]	; 1219c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   12190:	e3a02034 	mov	r2, #52, 0	; 0x34
   12194:	e2810020 	add	r0, r1, #32, 0
   12198:	ebfffe5a 	bl	11b08 <assertion_failed>
   1219c:	0001a508 	.word	0x0001a508

000121a0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   121a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   121a4:	e2519000 	subs	r9, r1, #0, 0
   121a8:	0a000034 	beq	12280 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   121ac:	e352000f 	cmp	r2, #15, 0
   121b0:	e1a05002 	mov	r5, r2
   121b4:	9a000035 	bls	12290 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   121b8:	e2126003 	ands	r6, r2, #3, 0
   121bc:	e282800c 	add	r8, r2, #12, 0
   121c0:	1a000036 	bne	122a0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   121c4:	e1a07000 	mov	r7, r0
   121c8:	e1a00006 	mov	r0, r6
   121cc:	ebfffc51 	bl	11318 <CMemorySystem::GetCoherentPage(unsigned int)>
   121d0:	e1a01428 	lsr	r1, r8, #8
   121d4:	e1a02828 	lsr	r2, r8, #16
   121d8:	e1a03c28 	lsr	r3, r8, #24
   121dc:	e280a008 	add	sl, r0, #8, 0
   121e0:	e5c08000 	strb	r8, [r0]
   121e4:	e5c06004 	strb	r6, [r0, #4]
   121e8:	e5c06005 	strb	r6, [r0, #5]
   121ec:	e5c06006 	strb	r6, [r0, #6]
   121f0:	e5c06007 	strb	r6, [r0, #7]
   121f4:	e5c01001 	strb	r1, [r0, #1]
   121f8:	e5c02002 	strb	r2, [r0, #2]
   121fc:	e5c03003 	strb	r3, [r0, #3]
   12200:	e1a04000 	mov	r4, r0
   12204:	e1a02005 	mov	r2, r5
   12208:	e1a0000a 	mov	r0, sl
   1220c:	e1a01009 	mov	r1, r9
   12210:	ebfff846 	bl	10330 <memcpy>
   12214:	e78a6005 	str	r6, [sl, r5]
   12218:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1221c:	e3c48103 	bic	r8, r4, #-1073741824	; 0xc0000000
   12220:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
   12224:	e1a00007 	mov	r0, r7
   12228:	e1a01008 	mov	r1, r8
   1222c:	eb000648 	bl	13b54 <CBcmMailBox::WriteRead(unsigned int)>
   12230:	e1500008 	cmp	r0, r8
   12234:	0a000001 	beq	12240 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   12238:	e3a00000 	mov	r0, #0, 0
   1223c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12240:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   12244:	e5d42005 	ldrb	r2, [r4, #5]
   12248:	e5d43004 	ldrb	r3, [r4, #4]
   1224c:	e5d41006 	ldrb	r1, [r4, #6]
   12250:	e1833402 	orr	r3, r3, r2, lsl #8
   12254:	e5d42007 	ldrb	r2, [r4, #7]
   12258:	e1833801 	orr	r3, r3, r1, lsl #16
   1225c:	e1833c02 	orr	r3, r3, r2, lsl #24
   12260:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   12264:	1afffff3 	bne	12238 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   12268:	e1a02005 	mov	r2, r5
   1226c:	e1a0100a 	mov	r1, sl
   12270:	e1a00009 	mov	r0, r9
   12274:	ebfff82d 	bl	10330 <memcpy>
   12278:	e3a00001 	mov	r0, #1, 0
   1227c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12280:	e59f1028 	ldr	r1, [pc, #40]	; 122b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   12284:	e3a0204b 	mov	r2, #75, 0	; 0x4b
   12288:	e2810048 	add	r0, r1, #72, 0	; 0x48
   1228c:	ebfffe1d 	bl	11b08 <assertion_failed>
   12290:	e59f1018 	ldr	r1, [pc, #24]	; 122b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   12294:	e3a0204c 	mov	r2, #76, 0	; 0x4c
   12298:	e2810054 	add	r0, r1, #84, 0	; 0x54
   1229c:	ebfffe19 	bl	11b08 <assertion_failed>
   122a0:	e59f1008 	ldr	r1, [pc, #8]	; 122b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   122a4:	e3a0204e 	mov	r2, #78, 0	; 0x4e
   122a8:	e2810080 	add	r0, r1, #128, 0	; 0x80
   122ac:	ebfffe15 	bl	11b08 <assertion_failed>
   122b0:	0001a508 	.word	0x0001a508

000122b4 <CCharGenerator::CCharGenerator()>:
   122b4:	e3a03008 	mov	r3, #8, 0
   122b8:	e5803000 	str	r3, [r0]
   122bc:	e12fff1e 	bx	lr

000122c0 <CCharGenerator::~CCharGenerator()>:
   122c0:	e12fff1e 	bx	lr

000122c4 <CCharGenerator::GetCharWidth() const>:
   122c4:	e5900000 	ldr	r0, [r0]
   122c8:	e12fff1e 	bx	lr

000122cc <CCharGenerator::GetCharHeight() const>:
   122cc:	e3a00013 	mov	r0, #19, 0
   122d0:	e12fff1e 	bx	lr

000122d4 <CCharGenerator::GetUnderline() const>:
   122d4:	e3a00010 	mov	r0, #16, 0
   122d8:	e12fff1e 	bx	lr

000122dc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   122dc:	e6ef1071 	uxtb	r1, r1
   122e0:	e2411021 	sub	r1, r1, #33, 0	; 0x21
   122e4:	e35100de 	cmp	r1, #222, 0	; 0xde
   122e8:	8a00000c 	bhi	12320 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   122ec:	e5900000 	ldr	r0, [r0]
   122f0:	e1500002 	cmp	r0, r2
   122f4:	9a00000b 	bls	12328 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x4c>
   122f8:	e353000f 	cmp	r3, #15, 0
   122fc:	8a000007 	bhi	12320 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   12300:	e3a0c080 	mov	ip, #128, 0	; 0x80
   12304:	e59f0030 	ldr	r0, [pc, #48]	; 1233c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x60>
   12308:	e0801201 	add	r1, r0, r1, lsl #4
   1230c:	e7d13003 	ldrb	r3, [r1, r3]
   12310:	e013325c 	ands	r3, r3, ip, asr r2
   12314:	13a00001 	movne	r0, #1, 0
   12318:	03a00000 	moveq	r0, #0, 0
   1231c:	e12fff1e 	bx	lr
   12320:	e3a00000 	mov	r0, #0, 0
   12324:	e12fff1e 	bx	lr
   12328:	e3a0204e 	mov	r2, #78, 0	; 0x4e
   1232c:	e92d4010 	push	{r4, lr}
   12330:	e59f1008 	ldr	r1, [pc, #8]	; 12340 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x64>
   12334:	e59f0008 	ldr	r0, [pc, #8]	; 12344 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x68>
   12338:	ebfffdf2 	bl	11b08 <assertion_failed>
   1233c:	0001a5cc 	.word	0x0001a5cc
   12340:	0001a5a0 	.word	0x0001a5a0
   12344:	0001a5b4 	.word	0x0001a5b4

00012348 <debug_hexdump(void const*, unsigned int, char const*)>:
   12348:	e3520000 	cmp	r2, #0, 0
   1234c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12350:	e1a06001 	mov	r6, r1
   12354:	e1a07000 	mov	r7, r0
   12358:	e59f80f0 	ldr	r8, [pc, #240]	; 12450 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   1235c:	11a08002 	movne	r8, r2
   12360:	e24dd04c 	sub	sp, sp, #76, 0	; 0x4c
   12364:	ebffe10d 	bl	a7a0 <CLogger::Get()>
   12368:	e1a01008 	mov	r1, r8
   1236c:	e3a02004 	mov	r2, #4, 0
   12370:	e1cd60f0 	strd	r6, [sp]
   12374:	e59f30d8 	ldr	r3, [pc, #216]	; 12454 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   12378:	ebffe04a 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1237c:	e3560000 	cmp	r6, #0, 0
   12380:	0a000030 	beq	12448 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   12384:	e3c6000f 	bic	r0, r6, #15, 0
   12388:	e1a04007 	mov	r4, r7
   1238c:	e0876006 	add	r6, r7, r6
   12390:	e59f90c0 	ldr	r9, [pc, #192]	; 12458 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   12394:	e0877000 	add	r7, r7, r0
   12398:	ea000001 	b	123a4 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   1239c:	e1540006 	cmp	r4, r6
   123a0:	0a000028 	beq	12448 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   123a4:	ebffe0fd 	bl	a7a0 <CLogger::Get()>
   123a8:	e5d4300f 	ldrb	r3, [r4, #15]
   123ac:	e5d45000 	ldrb	r5, [r4]
   123b0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   123b4:	e5d4300e 	ldrb	r3, [r4, #14]
   123b8:	e6ffc074 	uxth	ip, r4
   123bc:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   123c0:	e5d4200d 	ldrb	r2, [r4, #13]
   123c4:	e1a03009 	mov	r3, r9
   123c8:	e58d2038 	str	r2, [sp, #56]	; 0x38
   123cc:	e5d4100c 	ldrb	r1, [r4, #12]
   123d0:	e3a02004 	mov	r2, #4, 0
   123d4:	e58d1034 	str	r1, [sp, #52]	; 0x34
   123d8:	e5d4e00b 	ldrb	lr, [r4, #11]
   123dc:	e1a01008 	mov	r1, r8
   123e0:	e58de030 	str	lr, [sp, #48]	; 0x30
   123e4:	e5d4e00a 	ldrb	lr, [r4, #10]
   123e8:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   123ec:	e5d4e009 	ldrb	lr, [r4, #9]
   123f0:	e58de028 	str	lr, [sp, #40]	; 0x28
   123f4:	e5d4e008 	ldrb	lr, [r4, #8]
   123f8:	e58de024 	str	lr, [sp, #36]	; 0x24
   123fc:	e5d4e007 	ldrb	lr, [r4, #7]
   12400:	e58de020 	str	lr, [sp, #32]
   12404:	e5d4e006 	ldrb	lr, [r4, #6]
   12408:	e58de01c 	str	lr, [sp, #28]
   1240c:	e5d4e005 	ldrb	lr, [r4, #5]
   12410:	e58de018 	str	lr, [sp, #24]
   12414:	e5d4e004 	ldrb	lr, [r4, #4]
   12418:	e58de014 	str	lr, [sp, #20]
   1241c:	e5d4e003 	ldrb	lr, [r4, #3]
   12420:	e58de010 	str	lr, [sp, #16]
   12424:	e5d4e002 	ldrb	lr, [r4, #2]
   12428:	e58de00c 	str	lr, [sp, #12]
   1242c:	e5d4e001 	ldrb	lr, [r4, #1]
   12430:	e98d4020 	stmib	sp, {r5, lr}
   12434:	e58dc000 	str	ip, [sp]
   12438:	ebffe01a 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1243c:	e1540007 	cmp	r4, r7
   12440:	e2844010 	add	r4, r4, #16, 0
   12444:	1affffd4 	bne	1239c <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   12448:	e28dd04c 	add	sp, sp, #76, 0	; 0x4c
   1244c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12450:	0001b450 	.word	0x0001b450
   12454:	0001b3bc 	.word	0x0001b3bc
   12458:	0001b3e4 	.word	0x0001b3e4

0001245c <debug_stacktrace(unsigned int const*, char const*)>:
   1245c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12460:	e3510000 	cmp	r1, #0, 0
   12464:	e59f7074 	ldr	r7, [pc, #116]	; 124e0 <debug_stacktrace(unsigned int const*, char const*)+0x84>
   12468:	e3a04000 	mov	r4, #0, 0
   1246c:	11a07001 	movne	r7, r1
   12470:	e59f606c 	ldr	r6, [pc, #108]	; 124e4 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   12474:	e59f806c 	ldr	r8, [pc, #108]	; 124e8 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   12478:	e24dd008 	sub	sp, sp, #8, 0
   1247c:	e2405004 	sub	r5, r0, #4, 0
   12480:	ea000002 	b	12490 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12484:	e2844001 	add	r4, r4, #1, 0
   12488:	e3540040 	cmp	r4, #64, 0	; 0x40
   1248c:	0a000011 	beq	124d8 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
   12490:	e5b53004 	ldr	r3, [r5, #4]!
   12494:	e3530902 	cmp	r3, #32768	; 0x8000
   12498:	3afffff9 	bcc	12484 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   1249c:	e1530006 	cmp	r3, r6
   124a0:	2afffff7 	bcs	12484 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   124a4:	e3130003 	tst	r3, #3, 0
   124a8:	1afffff5 	bne	12484 <debug_stacktrace(unsigned int const*, char const*)+0x28>
   124ac:	ebffe0bb 	bl	a7a0 <CLogger::Get()>
   124b0:	e5952000 	ldr	r2, [r5]
   124b4:	e1a03008 	mov	r3, r8
   124b8:	e58d2004 	str	r2, [sp, #4]
   124bc:	e58d4000 	str	r4, [sp]
   124c0:	e3a02004 	mov	r2, #4, 0
   124c4:	e1a01007 	mov	r1, r7
   124c8:	e2844001 	add	r4, r4, #1, 0
   124cc:	ebffdff5 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   124d0:	e3540040 	cmp	r4, #64, 0	; 0x40
   124d4:	1affffed 	bne	12490 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   124d8:	e28dd008 	add	sp, sp, #8, 0
   124dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   124e0:	0001b450 	.word	0x0001b450
   124e4:	0001964c 	.word	0x0001964c
   124e8:	0001b43c 	.word	0x0001b43c
   124ec:	00000000 	.word	0x00000000

000124f0 <DelayLoop>:
   124f0:	e1a01001 	mov	r1, r1
   124f4:	e1a02002 	mov	r2, r2
   124f8:	e2500001 	subs	r0, r0, #1, 0
   124fc:	8afffffb 	bhi	124f0 <DelayLoop>
   12500:	e1a0f00e 	mov	pc, lr

00012504 <CDevice::~CDevice()>:
   12504:	e12fff1e 	bx	lr

00012508 <CDevice::Read(void*, unsigned int)>:
   12508:	e3e00000 	mvn	r0, #0, 0
   1250c:	e12fff1e 	bx	lr

00012510 <CDevice::Seek(unsigned long long)>:
   12510:	e3e00000 	mvn	r0, #0, 0
   12514:	e3e01000 	mvn	r1, #0, 0
   12518:	e12fff1e 	bx	lr

0001251c <CDevice::RemoveDevice()>:
   1251c:	e3a00000 	mov	r0, #0, 0
   12520:	e12fff1e 	bx	lr

00012524 <CDevice::~CDevice()>:
   12524:	e92d4010 	push	{r4, lr}
   12528:	e1a04000 	mov	r4, r0
   1252c:	e3a01004 	mov	r1, #4, 0
   12530:	ebfff898 	bl	10798 <operator delete(void*, unsigned int)>
   12534:	e1a00004 	mov	r0, r4
   12538:	e8bd8010 	pop	{r4, pc}

0001253c <CDevice::CDevice()>:
   1253c:	e59f3004 	ldr	r3, [pc, #4]	; 12548 <CDevice::CDevice()+0xc>
   12540:	e5803000 	str	r3, [r0]
   12544:	e12fff1e 	bx	lr
   12548:	0001b460 	.word	0x0001b460

0001254c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   1254c:	e92d4070 	push	{r4, r5, r6, lr}
   12550:	e24dd008 	sub	sp, sp, #8, 0
   12554:	e1a04000 	mov	r4, r0
   12558:	e1a06002 	mov	r6, r2
   1255c:	e58d1004 	str	r1, [sp, #4]
   12560:	ebffe393 	bl	b3b4 <CMachineInfo::Get()>
   12564:	e59d1004 	ldr	r1, [sp, #4]
   12568:	ebffe33b 	bl	b25c <CMachineInfo::AllocateDMAChannel(unsigned int)>
   1256c:	e3a05000 	mov	r5, #0, 0
   12570:	e5840000 	str	r0, [r4]
   12574:	e584600c 	str	r6, [r4, #12]
   12578:	e5845004 	str	r5, [r4, #4]
   1257c:	e5845008 	str	r5, [r4, #8]
   12580:	e5c45010 	strb	r5, [r4, #16]
   12584:	e5845014 	str	r5, [r4, #20]
   12588:	e5845018 	str	r5, [r4, #24]
   1258c:	e5c4501c 	strb	r5, [r4, #28]
   12590:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   12594:	e5943000 	ldr	r3, [r4]
   12598:	e3530080 	cmp	r3, #128, 0	; 0x80
   1259c:	0a000023 	beq	12630 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xe4>
   125a0:	e353000c 	cmp	r3, #12, 0
   125a4:	8a000025 	bhi	12640 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xf4>
   125a8:	e1a01005 	mov	r1, r5
   125ac:	e3a0003f 	mov	r0, #63, 0	; 0x3f
   125b0:	ebfff869 	bl	1075c <operator new[](unsigned int, int)>
   125b4:	e3a0c001 	mov	ip, #1, 0
   125b8:	e280301f 	add	r3, r0, #31, 0
   125bc:	e59f208c 	ldr	r2, [pc, #140]	; 12650 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x104>
   125c0:	e3c3301f 	bic	r3, r3, #31, 0
   125c4:	e9840009 	stmib	r4, {r0, r3}
   125c8:	e5835018 	str	r5, [r3, #24]
   125cc:	e583501c 	str	r5, [r3, #28]
   125d0:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   125d4:	e5941000 	ldr	r1, [r4]
   125d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   125dc:	e183311c 	orr	r3, r3, ip, lsl r1
   125e0:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   125e4:	ebfff4ce 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   125e8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   125ec:	e5943000 	ldr	r3, [r4]
   125f0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   125f4:	e2833070 	add	r3, r3, #112, 0	; 0x70
   125f8:	e1a03403 	lsl	r3, r3, #8
   125fc:	e5832000 	str	r2, [r3]
   12600:	e5942000 	ldr	r2, [r4]
   12604:	e2822602 	add	r2, r2, #2097152	; 0x200000
   12608:	e2822070 	add	r2, r2, #112, 0	; 0x70
   1260c:	e1a02402 	lsl	r2, r2, #8
   12610:	e5923000 	ldr	r3, [r2]
   12614:	e3530000 	cmp	r3, #0, 0
   12618:	bafffffc 	blt	12610 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc4>
   1261c:	e3a03000 	mov	r3, #0, 0
   12620:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12624:	e1a00004 	mov	r0, r4
   12628:	e28dd008 	add	sp, sp, #8, 0
   1262c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12630:	e59f101c 	ldr	r1, [pc, #28]	; 12654 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x108>
   12634:	e3a02056 	mov	r2, #86, 0	; 0x56
   12638:	e2810010 	add	r0, r1, #16, 0
   1263c:	ebfffd31 	bl	11b08 <assertion_failed>
   12640:	e59f100c 	ldr	r1, [pc, #12]	; 12654 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x108>
   12644:	e3a02057 	mov	r2, #87, 0	; 0x57
   12648:	e2810030 	add	r0, r1, #48, 0	; 0x30
   1264c:	ebfffd2d 	bl	11b08 <assertion_failed>
   12650:	20007000 	.word	0x20007000
   12654:	0001b478 	.word	0x0001b478

00012658 <CDMAChannel::~CDMAChannel()>:
   12658:	e3a03000 	mov	r3, #0, 0
   1265c:	e92d4010 	push	{r4, lr}
   12660:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12664:	e5903000 	ldr	r3, [r0]
   12668:	e353000c 	cmp	r3, #12, 0
   1266c:	8a00002c 	bhi	12724 <CDMAChannel::~CDMAChannel()+0xcc>
   12670:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   12674:	e2833602 	add	r3, r3, #2097152	; 0x200000
   12678:	e2833070 	add	r3, r3, #112, 0	; 0x70
   1267c:	e1a03403 	lsl	r3, r3, #8
   12680:	e5832000 	str	r2, [r3]
   12684:	e1a04000 	mov	r4, r0
   12688:	e5900000 	ldr	r0, [r0]
   1268c:	e2802602 	add	r2, r0, #2097152	; 0x200000
   12690:	e2822070 	add	r2, r2, #112, 0	; 0x70
   12694:	e1a02402 	lsl	r2, r2, #8
   12698:	e5923000 	ldr	r3, [r2]
   1269c:	e3530000 	cmp	r3, #0, 0
   126a0:	bafffffc 	blt	12698 <CDMAChannel::~CDMAChannel()+0x40>
   126a4:	e3a0c001 	mov	ip, #1, 0
   126a8:	e59f1094 	ldr	r1, [pc, #148]	; 12744 <CDMAChannel::~CDMAChannel()+0xec>
   126ac:	e3a02000 	mov	r2, #0, 0
   126b0:	e5913ff0 	ldr	r3, [r1, #4080]	; 0xff0
   126b4:	e1c3301c 	bic	r3, r3, ip, lsl r0
   126b8:	e5813ff0 	str	r3, [r1, #4080]	; 0xff0
   126bc:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   126c0:	e594000c 	ldr	r0, [r4, #12]
   126c4:	e5842014 	str	r2, [r4, #20]
   126c8:	e1500002 	cmp	r0, r2
   126cc:	0a000009 	beq	126f8 <CDMAChannel::~CDMAChannel()+0xa0>
   126d0:	e5d43010 	ldrb	r3, [r4, #16]
   126d4:	e1530002 	cmp	r3, r2
   126d8:	0a000004 	beq	126f0 <CDMAChannel::~CDMAChannel()+0x98>
   126dc:	e5941000 	ldr	r1, [r4]
   126e0:	e351000c 	cmp	r1, #12, 0
   126e4:	8a000012 	bhi	12734 <CDMAChannel::~CDMAChannel()+0xdc>
   126e8:	e2811010 	add	r1, r1, #16, 0
   126ec:	ebfffc7b 	bl	118e0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   126f0:	e3a03000 	mov	r3, #0, 0
   126f4:	e584300c 	str	r3, [r4, #12]
   126f8:	ebffe32d 	bl	b3b4 <CMachineInfo::Get()>
   126fc:	e5941000 	ldr	r1, [r4]
   12700:	ebffe307 	bl	b324 <CMachineInfo::FreeDMAChannel(unsigned int)>
   12704:	e3a03000 	mov	r3, #0, 0
   12708:	e5940004 	ldr	r0, [r4, #4]
   1270c:	e5843008 	str	r3, [r4, #8]
   12710:	e1500003 	cmp	r0, r3
   12714:	0a000000 	beq	1271c <CDMAChannel::~CDMAChannel()+0xc4>
   12718:	ebfff81d 	bl	10794 <operator delete[](void*)>
   1271c:	e1a00004 	mov	r0, r4
   12720:	e8bd8010 	pop	{r4, pc}
   12724:	e59f101c 	ldr	r1, [pc, #28]	; 12748 <CDMAChannel::~CDMAChannel()+0xf0>
   12728:	e3a02071 	mov	r2, #113, 0	; 0x71
   1272c:	e2810030 	add	r0, r1, #48, 0	; 0x30
   12730:	ebfffcf4 	bl	11b08 <assertion_failed>
   12734:	e59f100c 	ldr	r1, [pc, #12]	; 12748 <CDMAChannel::~CDMAChannel()+0xf0>
   12738:	e3a02083 	mov	r2, #131, 0	; 0x83
   1273c:	e281004c 	add	r0, r1, #76, 0	; 0x4c
   12740:	ebfffcf0 	bl	11b08 <assertion_failed>
   12744:	20007000 	.word	0x20007000
   12748:	0001b478 	.word	0x0001b478

0001274c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   1274c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12750:	e2514000 	subs	r4, r1, #0, 0
   12754:	e59de018 	ldr	lr, [sp, #24]
   12758:	e5dd501c 	ldrb	r5, [sp, #28]
   1275c:	0a000050 	beq	128a4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x158>
   12760:	e3520000 	cmp	r2, #0, 0
   12764:	0a000052 	beq	128b4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x168>
   12768:	e3530000 	cmp	r3, #0, 0
   1276c:	e1a08003 	mov	r8, r3
   12770:	0a000053 	beq	128c4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x178>
   12774:	e35e000f 	cmp	lr, #15, 0
   12778:	8a000055 	bhi	128d4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x188>
   1277c:	e590c008 	ldr	ip, [r0, #8]
   12780:	e35c0000 	cmp	ip, #0, 0
   12784:	0a000056 	beq	128e4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x198>
   12788:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   1278c:	8a000058 	bhi	128f4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a8>
   12790:	e5901000 	ldr	r1, [r0]
   12794:	e2811602 	add	r1, r1, #2097152	; 0x200000
   12798:	e2811070 	add	r1, r1, #112, 0	; 0x70
   1279c:	e1a01401 	lsl	r1, r1, #8
   127a0:	e5911020 	ldr	r1, [r1, #32]
   127a4:	e1a01e21 	lsr	r1, r1, #28
   127a8:	e2211001 	eor	r1, r1, #1, 0
   127ac:	e3530801 	cmp	r3, #65536	; 0x10000
   127b0:	33811001 	orrcc	r1, r1, #1, 0
   127b4:	e3110001 	tst	r1, #1, 0
   127b8:	0a000051 	beq	12904 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b8>
   127bc:	e3a01000 	mov	r1, #0, 0
   127c0:	e3a06030 	mov	r6, #48, 0	; 0x30
   127c4:	e1a0e60e 	lsl	lr, lr, #12
   127c8:	e38eee33 	orr	lr, lr, #816	; 0x330
   127cc:	e1a0742e 	lsr	r7, lr, #8
   127d0:	e5cc7001 	strb	r7, [ip, #1]
   127d4:	e1a0782e 	lsr	r7, lr, #16
   127d8:	e5cc7002 	strb	r7, [ip, #2]
   127dc:	e1a0ec2e 	lsr	lr, lr, #24
   127e0:	e3c27103 	bic	r7, r2, #-1073741824	; 0xc0000000
   127e4:	e5cce003 	strb	lr, [ip, #3]
   127e8:	e387e101 	orr	lr, r7, #1073741824	; 0x40000000
   127ec:	e5cc7004 	strb	r7, [ip, #4]
   127f0:	e1a0742e 	lsr	r7, lr, #8
   127f4:	e5cc7005 	strb	r7, [ip, #5]
   127f8:	e1a0782e 	lsr	r7, lr, #16
   127fc:	e5cc7006 	strb	r7, [ip, #6]
   12800:	e1a0ec2e 	lsr	lr, lr, #24
   12804:	e3c47103 	bic	r7, r4, #-1073741824	; 0xc0000000
   12808:	e5cce007 	strb	lr, [ip, #7]
   1280c:	e387e101 	orr	lr, r7, #1073741824	; 0x40000000
   12810:	e5cc7008 	strb	r7, [ip, #8]
   12814:	e1a0742e 	lsr	r7, lr, #8
   12818:	e5cc7009 	strb	r7, [ip, #9]
   1281c:	e1a0782e 	lsr	r7, lr, #16
   12820:	e1a0ec2e 	lsr	lr, lr, #24
   12824:	e1550001 	cmp	r5, r1
   12828:	e5cc700a 	strb	r7, [ip, #10]
   1282c:	e5cce00b 	strb	lr, [ip, #11]
   12830:	e1a07423 	lsr	r7, r3, #8
   12834:	e1a0e823 	lsr	lr, r3, #16
   12838:	e5cc1010 	strb	r1, [ip, #16]
   1283c:	e5cc1011 	strb	r1, [ip, #17]
   12840:	e5cc1012 	strb	r1, [ip, #18]
   12844:	e5cc1013 	strb	r1, [ip, #19]
   12848:	e5cc1014 	strb	r1, [ip, #20]
   1284c:	e5cc1015 	strb	r1, [ip, #21]
   12850:	e5cc1016 	strb	r1, [ip, #22]
   12854:	e5cc1017 	strb	r1, [ip, #23]
   12858:	e1a01c23 	lsr	r1, r3, #24
   1285c:	e5cc6000 	strb	r6, [ip]
   12860:	e5cc300c 	strb	r3, [ip, #12]
   12864:	e1a06007 	mov	r6, r7
   12868:	e5cc700d 	strb	r7, [ip, #13]
   1286c:	e5cce00e 	strb	lr, [ip, #14]
   12870:	e5cc100f 	strb	r1, [ip, #15]
   12874:	1a000001 	bne	12880 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x134>
   12878:	e5805020 	str	r5, [r0, #32]
   1287c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12880:	e5804020 	str	r4, [r0, #32]
   12884:	e1a01003 	mov	r1, r3
   12888:	e5803024 	str	r3, [r0, #36]	; 0x24
   1288c:	e1a00002 	mov	r0, r2
   12890:	ebfffb20 	bl	11518 <CleanAndInvalidateDataCacheRange>
   12894:	e1a01008 	mov	r1, r8
   12898:	e1a00004 	mov	r0, r4
   1289c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   128a0:	eafffb1c 	b	11518 <CleanAndInvalidateDataCacheRange>
   128a4:	e59f1068 	ldr	r1, [pc, #104]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   128a8:	e3a02095 	mov	r2, #149, 0	; 0x95
   128ac:	e2810060 	add	r0, r1, #96, 0	; 0x60
   128b0:	ebfffc94 	bl	11b08 <assertion_failed>
   128b4:	e59f1058 	ldr	r1, [pc, #88]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   128b8:	e3a02096 	mov	r2, #150, 0	; 0x96
   128bc:	e2810074 	add	r0, r1, #116, 0	; 0x74
   128c0:	ebfffc90 	bl	11b08 <assertion_failed>
   128c4:	e59f1048 	ldr	r1, [pc, #72]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   128c8:	e3a02097 	mov	r2, #151, 0	; 0x97
   128cc:	e2810084 	add	r0, r1, #132, 0	; 0x84
   128d0:	ebfffc8c 	bl	11b08 <assertion_failed>
   128d4:	e59f1038 	ldr	r1, [pc, #56]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   128d8:	e3a02098 	mov	r2, #152, 0	; 0x98
   128dc:	e2810090 	add	r0, r1, #144, 0	; 0x90
   128e0:	ebfffc88 	bl	11b08 <assertion_failed>
   128e4:	e59f1028 	ldr	r1, [pc, #40]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   128e8:	e3a0209a 	mov	r2, #154, 0	; 0x9a
   128ec:	e28100a4 	add	r0, r1, #164, 0	; 0xa4
   128f0:	ebfffc84 	bl	11b08 <assertion_failed>
   128f4:	e59f1018 	ldr	r1, [pc, #24]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   128f8:	e3a0209b 	mov	r2, #155, 0	; 0x9b
   128fc:	e28100bc 	add	r0, r1, #188, 0	; 0xbc
   12900:	ebfffc80 	bl	11b08 <assertion_failed>
   12904:	e59f1008 	ldr	r1, [pc, #8]	; 12914 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   12908:	e3a0209c 	mov	r2, #156, 0	; 0x9c
   1290c:	e28100d4 	add	r0, r1, #212, 0	; 0xd4
   12910:	ebfffc7c 	bl	11b08 <assertion_failed>
   12914:	0001b478 	.word	0x0001b478

00012918 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   12918:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1291c:	e251e000 	subs	lr, r1, #0, 0
   12920:	e5dd1018 	ldrb	r1, [sp, #24]
   12924:	0a000040 	beq	12a2c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x114>
   12928:	e3530000 	cmp	r3, #0, 0
   1292c:	0a000042 	beq	12a3c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x124>
   12930:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   12934:	8a000044 	bhi	12a4c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x134>
   12938:	e590c000 	ldr	ip, [r0]
   1293c:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   12940:	e28cc070 	add	ip, ip, #112, 0	; 0x70
   12944:	e1a0c40c 	lsl	ip, ip, #8
   12948:	e59cc020 	ldr	ip, [ip, #32]
   1294c:	e1a0ce2c 	lsr	ip, ip, #28
   12950:	e22cc001 	eor	ip, ip, #1, 0
   12954:	e3530801 	cmp	r3, #65536	; 0x10000
   12958:	338cc001 	orrcc	ip, ip, #1, 0
   1295c:	e31c0001 	tst	ip, #1, 0
   12960:	0a000045 	beq	12a7c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x164>
   12964:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   12968:	0a00003b 	beq	12a5c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x144>
   1296c:	e590c008 	ldr	ip, [r0, #8]
   12970:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   12974:	e35c0000 	cmp	ip, #0, 0
   12978:	0a00003b 	beq	12a6c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x154>
   1297c:	e3a04000 	mov	r4, #0, 0
   12980:	e3ce5103 	bic	r5, lr, #-1073741824	; 0xc0000000
   12984:	e5cc1002 	strb	r1, [ip, #2]
   12988:	e3851101 	orr	r1, r5, #1073741824	; 0x40000000
   1298c:	e5cc5008 	strb	r5, [ip, #8]
   12990:	e1a05421 	lsr	r5, r1, #8
   12994:	e5cc5009 	strb	r5, [ip, #9]
   12998:	e1a05821 	lsr	r5, r1, #16
   1299c:	e5cc500a 	strb	r5, [ip, #10]
   129a0:	e59f50e4 	ldr	r5, [pc, #228]	; 12a8c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x174>
   129a4:	e1a01c21 	lsr	r1, r1, #24
   129a8:	e5cc100b 	strb	r1, [ip, #11]
   129ac:	e5cc5000 	strb	r5, [ip]
   129b0:	e1a01822 	lsr	r1, r2, #16
   129b4:	e1a05425 	lsr	r5, r5, #8
   129b8:	e5cc2004 	strb	r2, [ip, #4]
   129bc:	e5cc5001 	strb	r5, [ip, #1]
   129c0:	e1a07422 	lsr	r7, r2, #8
   129c4:	e5cc4010 	strb	r4, [ip, #16]
   129c8:	e5cc4011 	strb	r4, [ip, #17]
   129cc:	e5cc4012 	strb	r4, [ip, #18]
   129d0:	e5cc4013 	strb	r4, [ip, #19]
   129d4:	e5cc4014 	strb	r4, [ip, #20]
   129d8:	e5cc4015 	strb	r4, [ip, #21]
   129dc:	e5cc4016 	strb	r4, [ip, #22]
   129e0:	e5cc4017 	strb	r4, [ip, #23]
   129e4:	e5cc4003 	strb	r4, [ip, #3]
   129e8:	e5cc1006 	strb	r1, [ip, #6]
   129ec:	e1a05423 	lsr	r5, r3, #8
   129f0:	e1a04823 	lsr	r4, r3, #16
   129f4:	e1a01c23 	lsr	r1, r3, #24
   129f8:	e1a02c22 	lsr	r2, r2, #24
   129fc:	e5cc7005 	strb	r7, [ip, #5]
   12a00:	e5cc500d 	strb	r5, [ip, #13]
   12a04:	e5cc400e 	strb	r4, [ip, #14]
   12a08:	e5cc100f 	strb	r1, [ip, #15]
   12a0c:	e5cc300c 	strb	r3, [ip, #12]
   12a10:	e5cc2007 	strb	r2, [ip, #7]
   12a14:	e1a01003 	mov	r1, r3
   12a18:	e580e020 	str	lr, [r0, #32]
   12a1c:	e5803024 	str	r3, [r0, #36]	; 0x24
   12a20:	e1a0000e 	mov	r0, lr
   12a24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12a28:	eafffaba 	b	11518 <CleanAndInvalidateDataCacheRange>
   12a2c:	e59f105c 	ldr	r1, [pc, #92]	; 12a90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   12a30:	e3a020ba 	mov	r2, #186, 0	; 0xba
   12a34:	e2810060 	add	r0, r1, #96, 0	; 0x60
   12a38:	ebfffc32 	bl	11b08 <assertion_failed>
   12a3c:	e59f104c 	ldr	r1, [pc, #76]	; 12a90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   12a40:	e3a020bb 	mov	r2, #187, 0	; 0xbb
   12a44:	e2810084 	add	r0, r1, #132, 0	; 0x84
   12a48:	ebfffc2e 	bl	11b08 <assertion_failed>
   12a4c:	e3a020bc 	mov	r2, #188, 0	; 0xbc
   12a50:	e59f1038 	ldr	r1, [pc, #56]	; 12a90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   12a54:	e0810002 	add	r0, r1, r2
   12a58:	ebfffc2a 	bl	11b08 <assertion_failed>
   12a5c:	e59f102c 	ldr	r1, [pc, #44]	; 12a90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   12a60:	e3a020c1 	mov	r2, #193, 0	; 0xc1
   12a64:	e2810f4b 	add	r0, r1, #300	; 0x12c
   12a68:	ebfffc26 	bl	11b08 <assertion_failed>
   12a6c:	e59f101c 	ldr	r1, [pc, #28]	; 12a90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   12a70:	e3a020c4 	mov	r2, #196, 0	; 0xc4
   12a74:	e28100a4 	add	r0, r1, #164, 0	; 0xa4
   12a78:	ebfffc22 	bl	11b08 <assertion_failed>
   12a7c:	e59f100c 	ldr	r1, [pc, #12]	; 12a90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   12a80:	e3a020bd 	mov	r2, #189, 0	; 0xbd
   12a84:	e28100d4 	add	r0, r1, #212, 0	; 0xd4
   12a88:	ebfffc1e 	bl	11b08 <assertion_failed>
   12a8c:	00000438 	.word	0x00000438
   12a90:	0001b478 	.word	0x0001b478

00012a94 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   12a94:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a98:	e3520000 	cmp	r2, #0, 0
   12a9c:	e1a04000 	mov	r4, r0
   12aa0:	e5dd0020 	ldrb	r0, [sp, #32]
   12aa4:	0a00003f 	beq	12ba8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x114>
   12aa8:	e3530000 	cmp	r3, #0, 0
   12aac:	0a000041 	beq	12bb8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x124>
   12ab0:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   12ab4:	8a000043 	bhi	12bc8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x134>
   12ab8:	e594c000 	ldr	ip, [r4]
   12abc:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   12ac0:	e28cc070 	add	ip, ip, #112, 0	; 0x70
   12ac4:	e1a0c40c 	lsl	ip, ip, #8
   12ac8:	e59cc020 	ldr	ip, [ip, #32]
   12acc:	e1a0ce2c 	lsr	ip, ip, #28
   12ad0:	e22cc001 	eor	ip, ip, #1, 0
   12ad4:	e3530801 	cmp	r3, #65536	; 0x10000
   12ad8:	338cc001 	orrcc	ip, ip, #1, 0
   12adc:	e31c0001 	tst	ip, #1, 0
   12ae0:	0a000044 	beq	12bf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x164>
   12ae4:	e3d114ff 	bics	r1, r1, #-16777216	; 0xff000000
   12ae8:	0a00003a 	beq	12bd8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x144>
   12aec:	e594c008 	ldr	ip, [r4, #8]
   12af0:	e281e47e 	add	lr, r1, #2113929216	; 0x7e000000
   12af4:	e35c0000 	cmp	ip, #0, 0
   12af8:	0a00003a 	beq	12be8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x154>
   12afc:	e3a05000 	mov	r5, #0, 0
   12b00:	e3a09048 	mov	r9, #72, 0	; 0x48
   12b04:	e3a08003 	mov	r8, #3, 0
   12b08:	e3c26103 	bic	r6, r2, #-1073741824	; 0xc0000000
   12b0c:	e3861101 	orr	r1, r6, #1073741824	; 0x40000000
   12b10:	e5cc0002 	strb	r0, [ip, #2]
   12b14:	e5cc6004 	strb	r6, [ip, #4]
   12b18:	e1a00002 	mov	r0, r2
   12b1c:	e1a06421 	lsr	r6, r1, #8
   12b20:	e1a02821 	lsr	r2, r1, #16
   12b24:	e1a01c21 	lsr	r1, r1, #24
   12b28:	e5cc2006 	strb	r2, [ip, #6]
   12b2c:	e5cc1007 	strb	r1, [ip, #7]
   12b30:	e1a0282e 	lsr	r2, lr, #16
   12b34:	e1a0142e 	lsr	r1, lr, #8
   12b38:	e5cce008 	strb	lr, [ip, #8]
   12b3c:	e5cc6005 	strb	r6, [ip, #5]
   12b40:	e5cc1009 	strb	r1, [ip, #9]
   12b44:	e5cc200a 	strb	r2, [ip, #10]
   12b48:	e1a0ec2e 	lsr	lr, lr, #24
   12b4c:	e1a06423 	lsr	r6, r3, #8
   12b50:	e1a01823 	lsr	r1, r3, #16
   12b54:	e1a02c23 	lsr	r2, r3, #24
   12b58:	e5cc100e 	strb	r1, [ip, #14]
   12b5c:	e5cc300c 	strb	r3, [ip, #12]
   12b60:	e5cc9000 	strb	r9, [ip]
   12b64:	e5cc5010 	strb	r5, [ip, #16]
   12b68:	e5cc5011 	strb	r5, [ip, #17]
   12b6c:	e5cc5012 	strb	r5, [ip, #18]
   12b70:	e5cc5013 	strb	r5, [ip, #19]
   12b74:	e5cc5014 	strb	r5, [ip, #20]
   12b78:	e5cc5015 	strb	r5, [ip, #21]
   12b7c:	e5cc5016 	strb	r5, [ip, #22]
   12b80:	e5cc5017 	strb	r5, [ip, #23]
   12b84:	e5cc8001 	strb	r8, [ip, #1]
   12b88:	e5cc5003 	strb	r5, [ip, #3]
   12b8c:	e5cce00b 	strb	lr, [ip, #11]
   12b90:	e5cc600d 	strb	r6, [ip, #13]
   12b94:	e5cc200f 	strb	r2, [ip, #15]
   12b98:	e1a01003 	mov	r1, r3
   12b9c:	e5845020 	str	r5, [r4, #32]
   12ba0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ba4:	eafffa5b 	b	11518 <CleanAndInvalidateDataCacheRange>
   12ba8:	e59f1058 	ldr	r1, [pc, #88]	; 12c08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   12bac:	e3a020d9 	mov	r2, #217, 0	; 0xd9
   12bb0:	e2810074 	add	r0, r1, #116, 0	; 0x74
   12bb4:	ebfffbd3 	bl	11b08 <assertion_failed>
   12bb8:	e59f1048 	ldr	r1, [pc, #72]	; 12c08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   12bbc:	e3a020da 	mov	r2, #218, 0	; 0xda
   12bc0:	e2810084 	add	r0, r1, #132, 0	; 0x84
   12bc4:	ebfffbcf 	bl	11b08 <assertion_failed>
   12bc8:	e59f1038 	ldr	r1, [pc, #56]	; 12c08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   12bcc:	e3a020db 	mov	r2, #219, 0	; 0xdb
   12bd0:	e28100bc 	add	r0, r1, #188, 0	; 0xbc
   12bd4:	ebfffbcb 	bl	11b08 <assertion_failed>
   12bd8:	e59f1028 	ldr	r1, [pc, #40]	; 12c08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   12bdc:	e3a020e0 	mov	r2, #224, 0	; 0xe0
   12be0:	e2810f4b 	add	r0, r1, #300	; 0x12c
   12be4:	ebfffbc7 	bl	11b08 <assertion_failed>
   12be8:	e59f1018 	ldr	r1, [pc, #24]	; 12c08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   12bec:	e3a020e3 	mov	r2, #227, 0	; 0xe3
   12bf0:	e28100a4 	add	r0, r1, #164, 0	; 0xa4
   12bf4:	ebfffbc3 	bl	11b08 <assertion_failed>
   12bf8:	e59f1008 	ldr	r1, [pc, #8]	; 12c08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   12bfc:	e3a020dc 	mov	r2, #220, 0	; 0xdc
   12c00:	e28100d4 	add	r0, r1, #212, 0	; 0xd4
   12c04:	ebfffbbf 	bl	11b08 <assertion_failed>
   12c08:	0001b478 	.word	0x0001b478

00012c0c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   12c0c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c10:	e251e000 	subs	lr, r1, #0, 0
   12c14:	e1a04000 	mov	r4, r0
   12c18:	e59d9020 	ldr	r9, [sp, #32]
   12c1c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   12c20:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   12c24:	0a00004f 	beq	12d68 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   12c28:	e3520000 	cmp	r2, #0, 0
   12c2c:	0a000051 	beq	12d78 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x16c>
   12c30:	e3530000 	cmp	r3, #0, 0
   12c34:	0a000053 	beq	12d88 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x17c>
   12c38:	e3530801 	cmp	r3, #65536	; 0x10000
   12c3c:	2a000055 	bcs	12d98 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x18c>
   12c40:	e3590000 	cmp	r9, #0, 0
   12c44:	0a000057 	beq	12da8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x19c>
   12c48:	e3590901 	cmp	r9, #16384	; 0x4000
   12c4c:	2a000059 	bcs	12db8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ac>
   12c50:	e3550801 	cmp	r5, #65536	; 0x10000
   12c54:	2a00003f 	bcs	12d58 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   12c58:	e350000f 	cmp	r0, #15, 0
   12c5c:	8a000059 	bhi	12dc8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1bc>
   12c60:	e594c000 	ldr	ip, [r4]
   12c64:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   12c68:	e28cc070 	add	ip, ip, #112, 0	; 0x70
   12c6c:	e1a0c40c 	lsl	ip, ip, #8
   12c70:	e59c1020 	ldr	r1, [ip, #32]
   12c74:	e3110201 	tst	r1, #268435456	; 0x10000000
   12c78:	1a000056 	bne	12dd8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1cc>
   12c7c:	e594c008 	ldr	ip, [r4, #8]
   12c80:	e35c0000 	cmp	ip, #0, 0
   12c84:	0a000057 	beq	12de8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1dc>
   12c88:	e3a06000 	mov	r6, #0, 0
   12c8c:	e3cee103 	bic	lr, lr, #-1073741824	; 0xc0000000
   12c90:	e5cce008 	strb	lr, [ip, #8]
   12c94:	e38ee101 	orr	lr, lr, #1073741824	; 0x40000000
   12c98:	e1a0142e 	lsr	r1, lr, #8
   12c9c:	e5cc1009 	strb	r1, [ip, #9]
   12ca0:	e1a0182e 	lsr	r1, lr, #16
   12ca4:	e5cc100a 	strb	r1, [ip, #10]
   12ca8:	e59f1148 	ldr	r1, [pc, #328]	; 12df8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ec>
   12cac:	e1a0ec2e 	lsr	lr, lr, #24
   12cb0:	e1810600 	orr	r0, r1, r0, lsl #12
   12cb4:	e5cc1000 	strb	r1, [ip]
   12cb8:	e1a01420 	lsr	r1, r0, #8
   12cbc:	e5cce00b 	strb	lr, [ip, #11]
   12cc0:	e5cc1001 	strb	r1, [ip, #1]
   12cc4:	e3c2e103 	bic	lr, r2, #-1073741824	; 0xc0000000
   12cc8:	e1a01820 	lsr	r1, r0, #16
   12ccc:	e5cc1002 	strb	r1, [ip, #2]
   12cd0:	e1a00c20 	lsr	r0, r0, #24
   12cd4:	e38e1101 	orr	r1, lr, #1073741824	; 0x40000000
   12cd8:	e5cc0003 	strb	r0, [ip, #3]
   12cdc:	e1a00002 	mov	r0, r2
   12ce0:	e1a02821 	lsr	r2, r1, #16
   12ce4:	e5cc2006 	strb	r2, [ip, #6]
   12ce8:	e2492001 	sub	r2, r9, #1, 0
   12cec:	e5cce004 	strb	lr, [ip, #4]
   12cf0:	e1832802 	orr	r2, r3, r2, lsl #16
   12cf4:	e1a0e421 	lsr	lr, r1, #8
   12cf8:	e1a01c21 	lsr	r1, r1, #24
   12cfc:	e5cc300c 	strb	r3, [ip, #12]
   12d00:	e5cc5012 	strb	r5, [ip, #18]
   12d04:	e5cc1007 	strb	r1, [ip, #7]
   12d08:	e1a05805 	lsl	r5, r5, #16
   12d0c:	e0010399 	mul	r1, r9, r3
   12d10:	e1a03422 	lsr	r3, r2, #8
   12d14:	e5cc300d 	strb	r3, [ip, #13]
   12d18:	e1a05c25 	lsr	r5, r5, #24
   12d1c:	e1a03822 	lsr	r3, r2, #16
   12d20:	e1a02c22 	lsr	r2, r2, #24
   12d24:	e5cc5013 	strb	r5, [ip, #19]
   12d28:	e5cce005 	strb	lr, [ip, #5]
   12d2c:	e5cc300e 	strb	r3, [ip, #14]
   12d30:	e5cc200f 	strb	r2, [ip, #15]
   12d34:	e5cc6014 	strb	r6, [ip, #20]
   12d38:	e5cc6015 	strb	r6, [ip, #21]
   12d3c:	e5cc6016 	strb	r6, [ip, #22]
   12d40:	e5cc6017 	strb	r6, [ip, #23]
   12d44:	e5cc6010 	strb	r6, [ip, #16]
   12d48:	e5cc6011 	strb	r6, [ip, #17]
   12d4c:	e5846020 	str	r6, [r4, #32]
   12d50:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d54:	eafff9ef 	b	11518 <CleanAndInvalidateDataCacheRange>
   12d58:	e59f109c 	ldr	r1, [pc, #156]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12d5c:	e3a020ff 	mov	r2, #255, 0	; 0xff
   12d60:	e2810e19 	add	r0, r1, #400	; 0x190
   12d64:	ebfffb67 	bl	11b08 <assertion_failed>
   12d68:	e59f108c 	ldr	r1, [pc, #140]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12d6c:	e3a020f9 	mov	r2, #249, 0	; 0xf9
   12d70:	e2810060 	add	r0, r1, #96, 0	; 0x60
   12d74:	ebfffb63 	bl	11b08 <assertion_failed>
   12d78:	e59f107c 	ldr	r1, [pc, #124]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12d7c:	e3a020fa 	mov	r2, #250, 0	; 0xfa
   12d80:	e2810074 	add	r0, r1, #116, 0	; 0x74
   12d84:	ebfffb5f 	bl	11b08 <assertion_failed>
   12d88:	e59f106c 	ldr	r1, [pc, #108]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12d8c:	e3a020fb 	mov	r2, #251, 0	; 0xfb
   12d90:	e2810f4f 	add	r0, r1, #316	; 0x13c
   12d94:	ebfffb5b 	bl	11b08 <assertion_failed>
   12d98:	e59f105c 	ldr	r1, [pc, #92]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12d9c:	e3a020fc 	mov	r2, #252, 0	; 0xfc
   12da0:	e2810e15 	add	r0, r1, #336	; 0x150
   12da4:	ebfffb57 	bl	11b08 <assertion_failed>
   12da8:	e59f104c 	ldr	r1, [pc, #76]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12dac:	e3a020fd 	mov	r2, #253, 0	; 0xfd
   12db0:	e2810f5a 	add	r0, r1, #360	; 0x168
   12db4:	ebfffb53 	bl	11b08 <assertion_failed>
   12db8:	e59f103c 	ldr	r1, [pc, #60]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12dbc:	e3a020fe 	mov	r2, #254, 0	; 0xfe
   12dc0:	e2810f5e 	add	r0, r1, #376	; 0x178
   12dc4:	ebfffb4f 	bl	11b08 <assertion_failed>
   12dc8:	e59f102c 	ldr	r1, [pc, #44]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12dcc:	e3a02c01 	mov	r2, #256	; 0x100
   12dd0:	e2810090 	add	r0, r1, #144, 0	; 0x90
   12dd4:	ebfffb4b 	bl	11b08 <assertion_failed>
   12dd8:	e59f101c 	ldr	r1, [pc, #28]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12ddc:	e59f201c 	ldr	r2, [pc, #28]	; 12e00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f4>
   12de0:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   12de4:	ebfffb47 	bl	11b08 <assertion_failed>
   12de8:	e59f100c 	ldr	r1, [pc, #12]	; 12dfc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   12dec:	e3a02f41 	mov	r2, #260	; 0x104
   12df0:	e28100a4 	add	r0, r1, #164, 0	; 0xa4
   12df4:	ebfffb43 	bl	11b08 <assertion_failed>
   12df8:	00000332 	.word	0x00000332
   12dfc:	0001b478 	.word	0x0001b478
   12e00:	00000102 	.word	0x00000102

00012e04 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   12e04:	e5903000 	ldr	r3, [r0]
   12e08:	e92d4070 	push	{r4, r5, r6, lr}
   12e0c:	e353000c 	cmp	r3, #12, 0
   12e10:	8a000014 	bhi	12e68 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x64>
   12e14:	e1a04000 	mov	r4, r0
   12e18:	e590000c 	ldr	r0, [r0, #12]
   12e1c:	e3500000 	cmp	r0, #0, 0
   12e20:	0a000014 	beq	12e78 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x74>
   12e24:	e1a06002 	mov	r6, r2
   12e28:	e5d42010 	ldrb	r2, [r4, #16]
   12e2c:	e1a05001 	mov	r5, r1
   12e30:	e3520000 	cmp	r2, #0, 0
   12e34:	0a000004 	beq	12e4c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   12e38:	e3550000 	cmp	r5, #0, 0
   12e3c:	e5845014 	str	r5, [r4, #20]
   12e40:	0a000010 	beq	12e88 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x84>
   12e44:	e5846018 	str	r6, [r4, #24]
   12e48:	e8bd8070 	pop	{r4, r5, r6, pc}
   12e4c:	e2831010 	add	r1, r3, #16, 0
   12e50:	e59f2040 	ldr	r2, [pc, #64]	; 12e98 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x94>
   12e54:	e1a03004 	mov	r3, r4
   12e58:	ebfffa6c 	bl	11810 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   12e5c:	e3a03001 	mov	r3, #1, 0
   12e60:	e5c43010 	strb	r3, [r4, #16]
   12e64:	eafffff3 	b	12e38 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   12e68:	e59f102c 	ldr	r1, [pc, #44]	; 12e9c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   12e6c:	e59f202c 	ldr	r2, [pc, #44]	; 12ea0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x9c>
   12e70:	e281004c 	add	r0, r1, #76, 0	; 0x4c
   12e74:	ebfffb23 	bl	11b08 <assertion_failed>
   12e78:	e59f101c 	ldr	r1, [pc, #28]	; 12e9c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   12e7c:	e59f2020 	ldr	r2, [pc, #32]	; 12ea4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa0>
   12e80:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   12e84:	ebfffb1f 	bl	11b08 <assertion_failed>
   12e88:	e59f100c 	ldr	r1, [pc, #12]	; 12e9c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   12e8c:	e59f2014 	ldr	r2, [pc, #20]	; 12ea8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa4>
   12e90:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   12e94:	ebfffb1b 	bl	11b08 <assertion_failed>
   12e98:	0001322c 	.word	0x0001322c
   12e9c:	0001b478 	.word	0x0001b478
   12ea0:	0000011a 	.word	0x0000011a
   12ea4:	0000011b 	.word	0x0000011b
   12ea8:	00000125 	.word	0x00000125

00012eac <CDMAChannel::Start()>:
   12eac:	e5903000 	ldr	r3, [r0]
   12eb0:	e92d4070 	push	{r4, r5, r6, lr}
   12eb4:	e353000c 	cmp	r3, #12, 0
   12eb8:	8a00003b 	bhi	12fac <CDMAChannel::Start()+0x100>
   12ebc:	e5902008 	ldr	r2, [r0, #8]
   12ec0:	e1a04000 	mov	r4, r0
   12ec4:	e3520000 	cmp	r2, #0, 0
   12ec8:	0a00003b 	beq	12fbc <CDMAChannel::Start()+0x110>
   12ecc:	e5903014 	ldr	r3, [r0, #20]
   12ed0:	e3530000 	cmp	r3, #0, 0
   12ed4:	0a000014 	beq	12f2c <CDMAChannel::Start()+0x80>
   12ed8:	e590300c 	ldr	r3, [r0, #12]
   12edc:	e3530000 	cmp	r3, #0, 0
   12ee0:	0a000041 	beq	12fec <CDMAChannel::Start()+0x140>
   12ee4:	e5d03010 	ldrb	r3, [r0, #16]
   12ee8:	e3530000 	cmp	r3, #0, 0
   12eec:	0a00002a 	beq	12f9c <CDMAChannel::Start()+0xf0>
   12ef0:	e5d21001 	ldrb	r1, [r2, #1]
   12ef4:	e5d23000 	ldrb	r3, [r2]
   12ef8:	e5d20002 	ldrb	r0, [r2, #2]
   12efc:	e1833401 	orr	r3, r3, r1, lsl #8
   12f00:	e5d21003 	ldrb	r1, [r2, #3]
   12f04:	e1833800 	orr	r3, r3, r0, lsl #16
   12f08:	e1833c01 	orr	r3, r3, r1, lsl #24
   12f0c:	e3833001 	orr	r3, r3, #1, 0
   12f10:	e1a0c423 	lsr	ip, r3, #8
   12f14:	e1a00823 	lsr	r0, r3, #16
   12f18:	e1a01c23 	lsr	r1, r3, #24
   12f1c:	e5c23000 	strb	r3, [r2]
   12f20:	e5c2c001 	strb	ip, [r2, #1]
   12f24:	e5c20002 	strb	r0, [r2, #2]
   12f28:	e5c21003 	strb	r1, [r2, #3]
   12f2c:	e3a03000 	mov	r3, #0, 0
   12f30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12f34:	e5945000 	ldr	r5, [r4]
   12f38:	e2853602 	add	r3, r5, #2097152	; 0x200000
   12f3c:	e2833070 	add	r3, r3, #112, 0	; 0x70
   12f40:	e1a03403 	lsl	r3, r3, #8
   12f44:	e5932000 	ldr	r2, [r3]
   12f48:	e3120004 	tst	r2, #4, 0
   12f4c:	1a00001e 	bne	12fcc <CDMAChannel::Start()+0x120>
   12f50:	e3a01001 	mov	r1, #1, 0
   12f54:	e59f20a0 	ldr	r2, [pc, #160]	; 12ffc <CDMAChannel::Start()+0x150>
   12f58:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   12f5c:	e0125511 	ands	r5, r2, r1, lsl r5
   12f60:	1a00001d 	bne	12fdc <CDMAChannel::Start()+0x130>
   12f64:	e5940008 	ldr	r0, [r4, #8]
   12f68:	e3a01020 	mov	r1, #32, 0
   12f6c:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
   12f70:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   12f74:	e5832004 	str	r2, [r3, #4]
   12f78:	ebfff966 	bl	11518 <CleanAndInvalidateDataCacheRange>
   12f7c:	e5943000 	ldr	r3, [r4]
   12f80:	e59f2078 	ldr	r2, [pc, #120]	; 13000 <CDMAChannel::Start()+0x154>
   12f84:	e2833602 	add	r3, r3, #2097152	; 0x200000
   12f88:	e2833070 	add	r3, r3, #112, 0	; 0x70
   12f8c:	e1a03403 	lsl	r3, r3, #8
   12f90:	e5832000 	str	r2, [r3]
   12f94:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   12f98:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f9c:	e59f1060 	ldr	r1, [pc, #96]	; 13004 <CDMAChannel::Start()+0x158>
   12fa0:	e59f2060 	ldr	r2, [pc, #96]	; 13008 <CDMAChannel::Start()+0x15c>
   12fa4:	e2810f85 	add	r0, r1, #532	; 0x214
   12fa8:	ebfffad6 	bl	11b08 <assertion_failed>
   12fac:	e59f1050 	ldr	r1, [pc, #80]	; 13004 <CDMAChannel::Start()+0x158>
   12fb0:	e3a02f4b 	mov	r2, #300	; 0x12c
   12fb4:	e2810030 	add	r0, r1, #48, 0	; 0x30
   12fb8:	ebfffad2 	bl	11b08 <assertion_failed>
   12fbc:	e59f1040 	ldr	r1, [pc, #64]	; 13004 <CDMAChannel::Start()+0x158>
   12fc0:	e59f2044 	ldr	r2, [pc, #68]	; 1300c <CDMAChannel::Start()+0x160>
   12fc4:	e28100a4 	add	r0, r1, #164, 0	; 0xa4
   12fc8:	ebffface 	bl	11b08 <assertion_failed>
   12fcc:	e59f1030 	ldr	r1, [pc, #48]	; 13004 <CDMAChannel::Start()+0x158>
   12fd0:	e3a02f4e 	mov	r2, #312	; 0x138
   12fd4:	e2810f89 	add	r0, r1, #548	; 0x224
   12fd8:	ebfffaca 	bl	11b08 <assertion_failed>
   12fdc:	e59f1020 	ldr	r1, [pc, #32]	; 13004 <CDMAChannel::Start()+0x158>
   12fe0:	e59f2028 	ldr	r2, [pc, #40]	; 13010 <CDMAChannel::Start()+0x164>
   12fe4:	e2810f96 	add	r0, r1, #600	; 0x258
   12fe8:	ebfffac6 	bl	11b08 <assertion_failed>
   12fec:	e59f1010 	ldr	r1, [pc, #16]	; 13004 <CDMAChannel::Start()+0x158>
   12ff0:	e59f201c 	ldr	r2, [pc, #28]	; 13014 <CDMAChannel::Start()+0x168>
   12ff4:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   12ff8:	ebfffac2 	bl	11b08 <assertion_failed>
   12ffc:	20007000 	.word	0x20007000
   13000:	10f10001 	.word	0x10f10001
   13004:	0001b478 	.word	0x0001b478
   13008:	00000132 	.word	0x00000132
   1300c:	0000012d 	.word	0x0000012d
   13010:	00000139 	.word	0x00000139
   13014:	00000131 	.word	0x00000131

00013018 <CDMAChannel::Wait()>:
   13018:	e5903000 	ldr	r3, [r0]
   1301c:	e92d4010 	push	{r4, lr}
   13020:	e353000c 	cmp	r3, #12, 0
   13024:	8a000019 	bhi	13090 <CDMAChannel::Wait()+0x78>
   13028:	e5903014 	ldr	r3, [r0, #20]
   1302c:	e1a04000 	mov	r4, r0
   13030:	e3530000 	cmp	r3, #0, 0
   13034:	1a000019 	bne	130a0 <CDMAChannel::Wait()+0x88>
   13038:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1303c:	e5902000 	ldr	r2, [r0]
   13040:	e2822602 	add	r2, r2, #2097152	; 0x200000
   13044:	e2822070 	add	r2, r2, #112, 0	; 0x70
   13048:	e1a02402 	lsl	r2, r2, #8
   1304c:	e5923000 	ldr	r3, [r2]
   13050:	e3130001 	tst	r3, #1, 0
   13054:	1afffffc 	bne	1304c <CDMAChannel::Wait()+0x34>
   13058:	e5940020 	ldr	r0, [r4, #32]
   1305c:	e1a03423 	lsr	r3, r3, #8
   13060:	e2233001 	eor	r3, r3, #1, 0
   13064:	e2033001 	and	r3, r3, #1, 0
   13068:	e3500000 	cmp	r0, #0, 0
   1306c:	e5c4301c 	strb	r3, [r4, #28]
   13070:	1a000003 	bne	13084 <CDMAChannel::Wait()+0x6c>
   13074:	e3a03000 	mov	r3, #0, 0
   13078:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1307c:	e5d4001c 	ldrb	r0, [r4, #28]
   13080:	e8bd8010 	pop	{r4, pc}
   13084:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13088:	ebfff922 	bl	11518 <CleanAndInvalidateDataCacheRange>
   1308c:	eafffff8 	b	13074 <CDMAChannel::Wait()+0x5c>
   13090:	e59f1018 	ldr	r1, [pc, #24]	; 130b0 <CDMAChannel::Wait()+0x98>
   13094:	e59f2018 	ldr	r2, [pc, #24]	; 130b4 <CDMAChannel::Wait()+0x9c>
   13098:	e2810030 	add	r0, r1, #48, 0	; 0x30
   1309c:	ebfffa99 	bl	11b08 <assertion_failed>
   130a0:	e59f1008 	ldr	r1, [pc, #8]	; 130b0 <CDMAChannel::Wait()+0x98>
   130a4:	e59f200c 	ldr	r2, [pc, #12]	; 130b8 <CDMAChannel::Wait()+0xa0>
   130a8:	e2810fa3 	add	r0, r1, #652	; 0x28c
   130ac:	ebfffa95 	bl	11b08 <assertion_failed>
   130b0:	0001b478 	.word	0x0001b478
   130b4:	00000149 	.word	0x00000149
   130b8:	0000014a 	.word	0x0000014a

000130bc <CDMAChannel::GetStatus()>:
   130bc:	e5903000 	ldr	r3, [r0]
   130c0:	e92d4010 	push	{r4, lr}
   130c4:	e353000c 	cmp	r3, #12, 0
   130c8:	8a000007 	bhi	130ec <CDMAChannel::GetStatus()+0x30>
   130cc:	e2833602 	add	r3, r3, #2097152	; 0x200000
   130d0:	e2833070 	add	r3, r3, #112, 0	; 0x70
   130d4:	e1a03403 	lsl	r3, r3, #8
   130d8:	e5933000 	ldr	r3, [r3]
   130dc:	e3130001 	tst	r3, #1, 0
   130e0:	1a000005 	bne	130fc <CDMAChannel::GetStatus()+0x40>
   130e4:	e5d0001c 	ldrb	r0, [r0, #28]
   130e8:	e8bd8010 	pop	{r4, pc}
   130ec:	e59f1018 	ldr	r1, [pc, #24]	; 1310c <CDMAChannel::GetStatus()+0x50>
   130f0:	e59f2018 	ldr	r2, [pc, #24]	; 13110 <CDMAChannel::GetStatus()+0x54>
   130f4:	e2810030 	add	r0, r1, #48, 0	; 0x30
   130f8:	ebfffa82 	bl	11b08 <assertion_failed>
   130fc:	e59f1008 	ldr	r1, [pc, #8]	; 1310c <CDMAChannel::GetStatus()+0x50>
   13100:	e59f200c 	ldr	r2, [pc, #12]	; 13114 <CDMAChannel::GetStatus()+0x58>
   13104:	e2810faa 	add	r0, r1, #680	; 0x2a8
   13108:	ebfffa7e 	bl	11b08 <assertion_failed>
   1310c:	0001b478 	.word	0x0001b478
   13110:	00000162 	.word	0x00000162
   13114:	00000163 	.word	0x00000163

00013118 <CDMAChannel::InterruptHandler()>:
   13118:	e92d4010 	push	{r4, lr}
   1311c:	e1a04000 	mov	r4, r0
   13120:	e5900020 	ldr	r0, [r0, #32]
   13124:	e3500000 	cmp	r0, #0, 0
   13128:	1a000022 	bne	131b8 <CDMAChannel::InterruptHandler()+0xa0>
   1312c:	e3a00000 	mov	r0, #0, 0
   13130:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
   13134:	e5942000 	ldr	r2, [r4]
   13138:	e352000c 	cmp	r2, #12, 0
   1313c:	8a000020 	bhi	131c4 <CDMAChannel::InterruptHandler()+0xac>
   13140:	e3a03001 	mov	r3, #1, 0
   13144:	e59f10c8 	ldr	r1, [pc, #200]	; 13214 <CDMAChannel::InterruptHandler()+0xfc>
   13148:	e1a03213 	lsl	r3, r3, r2
   1314c:	e5912fe0 	ldr	r2, [r1, #4064]	; 0xfe0
   13150:	e1130002 	tst	r3, r2
   13154:	0a00001e 	beq	131d4 <CDMAChannel::InterruptHandler()+0xbc>
   13158:	e5813fe0 	str	r3, [r1, #4064]	; 0xfe0
   1315c:	e5943000 	ldr	r3, [r4]
   13160:	e2833602 	add	r3, r3, #2097152	; 0x200000
   13164:	e2833070 	add	r3, r3, #112, 0	; 0x70
   13168:	e1a03403 	lsl	r3, r3, #8
   1316c:	e5931000 	ldr	r1, [r3]
   13170:	e3110004 	tst	r1, #4, 0
   13174:	0a00001a 	beq	131e4 <CDMAChannel::InterruptHandler()+0xcc>
   13178:	e3110001 	tst	r1, #1, 0
   1317c:	1a00001c 	bne	131f4 <CDMAChannel::InterruptHandler()+0xdc>
   13180:	e3a02004 	mov	r2, #4, 0
   13184:	e5832000 	str	r2, [r3]
   13188:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   1318c:	e5943014 	ldr	r3, [r4, #20]
   13190:	e1a01421 	lsr	r1, r1, #8
   13194:	e2211001 	eor	r1, r1, #1, 0
   13198:	e2011001 	and	r1, r1, #1, 0
   1319c:	e3530000 	cmp	r3, #0, 0
   131a0:	e5c4101c 	strb	r1, [r4, #28]
   131a4:	0a000016 	beq	13204 <CDMAChannel::InterruptHandler()+0xec>
   131a8:	e5942018 	ldr	r2, [r4, #24]
   131ac:	e5940000 	ldr	r0, [r4]
   131b0:	e8bd4010 	pop	{r4, lr}
   131b4:	e12fff13 	bx	r3
   131b8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   131bc:	ebfff8d5 	bl	11518 <CleanAndInvalidateDataCacheRange>
   131c0:	eaffffd9 	b	1312c <CDMAChannel::InterruptHandler()+0x14>
   131c4:	e59f104c 	ldr	r1, [pc, #76]	; 13218 <CDMAChannel::InterruptHandler()+0x100>
   131c8:	e59f204c 	ldr	r2, [pc, #76]	; 1321c <CDMAChannel::InterruptHandler()+0x104>
   131cc:	e2810030 	add	r0, r1, #48, 0	; 0x30
   131d0:	ebfffa4c 	bl	11b08 <assertion_failed>
   131d4:	e59f103c 	ldr	r1, [pc, #60]	; 13218 <CDMAChannel::InterruptHandler()+0x100>
   131d8:	e59f2040 	ldr	r2, [pc, #64]	; 13220 <CDMAChannel::InterruptHandler()+0x108>
   131dc:	e2810fb7 	add	r0, r1, #732	; 0x2dc
   131e0:	ebfffa48 	bl	11b08 <assertion_failed>
   131e4:	e59f102c 	ldr	r1, [pc, #44]	; 13218 <CDMAChannel::InterruptHandler()+0x100>
   131e8:	e59f2034 	ldr	r2, [pc, #52]	; 13224 <CDMAChannel::InterruptHandler()+0x10c>
   131ec:	e2810fbd 	add	r0, r1, #756	; 0x2f4
   131f0:	ebfffa44 	bl	11b08 <assertion_failed>
   131f4:	e59f101c 	ldr	r1, [pc, #28]	; 13218 <CDMAChannel::InterruptHandler()+0x100>
   131f8:	e3a02f5f 	mov	r2, #380	; 0x17c
   131fc:	e2810fc1 	add	r0, r1, #772	; 0x304
   13200:	ebfffa40 	bl	11b08 <assertion_failed>
   13204:	e59f100c 	ldr	r1, [pc, #12]	; 13218 <CDMAChannel::InterruptHandler()+0x100>
   13208:	e59f2018 	ldr	r2, [pc, #24]	; 13228 <CDMAChannel::InterruptHandler()+0x110>
   1320c:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   13210:	ebfffa3c 	bl	11b08 <assertion_failed>
   13214:	20007000 	.word	0x20007000
   13218:	0001b478 	.word	0x0001b478
   1321c:	00000171 	.word	0x00000171
   13220:	00000177 	.word	0x00000177
   13224:	0000017b 	.word	0x0000017b
   13228:	00000183 	.word	0x00000183

0001322c <CDMAChannel::InterruptStub(void*)>:
   1322c:	e3500000 	cmp	r0, #0, 0
   13230:	0a000000 	beq	13238 <CDMAChannel::InterruptStub(void*)+0xc>
   13234:	eaffffb7 	b	13118 <CDMAChannel::InterruptHandler()>
   13238:	e59f100c 	ldr	r1, [pc, #12]	; 1324c <CDMAChannel::InterruptStub(void*)+0x20>
   1323c:	e92d4010 	push	{r4, lr}
   13240:	e59f2008 	ldr	r2, [pc, #8]	; 13250 <CDMAChannel::InterruptStub(void*)+0x24>
   13244:	e2810fc6 	add	r0, r1, #792	; 0x318
   13248:	ebfffa2e 	bl	11b08 <assertion_failed>
   1324c:	0001b478 	.word	0x0001b478
   13250:	0000018a 	.word	0x0000018a

00013254 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   13254:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13258:	e3a0e000 	mov	lr, #0, 0
   1325c:	e1a03000 	mov	r3, r0
   13260:	e1a0c00e 	mov	ip, lr
   13264:	e5801000 	str	r1, [r0]
   13268:	e28020dc 	add	r2, r0, #220, 0	; 0xdc
   1326c:	e5e3e004 	strb	lr, [r3, #4]!
   13270:	e5a3c004 	str	ip, [r3, #4]!
   13274:	e1530002 	cmp	r3, r2
   13278:	1afffffc 	bne	13270 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   1327c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00013280 <CGPIOManager::~CGPIOManager()>:
   13280:	e92d4010 	push	{r4, lr}
   13284:	e2803004 	add	r3, r0, #4, 0
   13288:	e1a04000 	mov	r4, r0
   1328c:	e28010dc 	add	r1, r0, #220, 0	; 0xdc
   13290:	ea000001 	b	1329c <CGPIOManager::~CGPIOManager()+0x1c>
   13294:	e1530001 	cmp	r3, r1
   13298:	0a000006 	beq	132b8 <CGPIOManager::~CGPIOManager()+0x38>
   1329c:	e5b32004 	ldr	r2, [r3, #4]!
   132a0:	e3520000 	cmp	r2, #0, 0
   132a4:	0afffffa 	beq	13294 <CGPIOManager::~CGPIOManager()+0x14>
   132a8:	e3a0202c 	mov	r2, #44, 0	; 0x2c
   132ac:	e59f103c 	ldr	r1, [pc, #60]	; 132f0 <CGPIOManager::~CGPIOManager()+0x70>
   132b0:	e59f003c 	ldr	r0, [pc, #60]	; 132f4 <CGPIOManager::~CGPIOManager()+0x74>
   132b4:	ebfffa13 	bl	11b08 <assertion_failed>
   132b8:	e5d43004 	ldrb	r3, [r4, #4]
   132bc:	e3530000 	cmp	r3, #0, 0
   132c0:	0a000004 	beq	132d8 <CGPIOManager::~CGPIOManager()+0x58>
   132c4:	e5940000 	ldr	r0, [r4]
   132c8:	e3500000 	cmp	r0, #0, 0
   132cc:	0a000003 	beq	132e0 <CGPIOManager::~CGPIOManager()+0x60>
   132d0:	e3a01034 	mov	r1, #52, 0	; 0x34
   132d4:	ebfff981 	bl	118e0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   132d8:	e1a00004 	mov	r0, r4
   132dc:	e8bd8010 	pop	{r4, pc}
   132e0:	e3a02032 	mov	r2, #50, 0	; 0x32
   132e4:	e59f1004 	ldr	r1, [pc, #4]	; 132f0 <CGPIOManager::~CGPIOManager()+0x70>
   132e8:	e59f0008 	ldr	r0, [pc, #8]	; 132f8 <CGPIOManager::~CGPIOManager()+0x78>
   132ec:	ebfffa05 	bl	11b08 <assertion_failed>
   132f0:	0001b79c 	.word	0x0001b79c
   132f4:	0001b7ac 	.word	0x0001b7ac
   132f8:	0001b7c0 	.word	0x0001b7c0

000132fc <CGPIOManager::Initialize()>:
   132fc:	e5d03004 	ldrb	r3, [r0, #4]
   13300:	e92d4010 	push	{r4, lr}
   13304:	e3530000 	cmp	r3, #0, 0
   13308:	1a00000a 	bne	13338 <CGPIOManager::Initialize()+0x3c>
   1330c:	e1a04000 	mov	r4, r0
   13310:	e5900000 	ldr	r0, [r0]
   13314:	e3500000 	cmp	r0, #0, 0
   13318:	0a00000a 	beq	13348 <CGPIOManager::Initialize()+0x4c>
   1331c:	e1a03004 	mov	r3, r4
   13320:	e3a01034 	mov	r1, #52, 0	; 0x34
   13324:	e59f202c 	ldr	r2, [pc, #44]	; 13358 <CGPIOManager::Initialize()+0x5c>
   13328:	ebfff938 	bl	11810 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1332c:	e3a00001 	mov	r0, #1, 0
   13330:	e5c40004 	strb	r0, [r4, #4]
   13334:	e8bd8010 	pop	{r4, pc}
   13338:	e3a0203b 	mov	r2, #59, 0	; 0x3b
   1333c:	e59f1018 	ldr	r1, [pc, #24]	; 1335c <CGPIOManager::Initialize()+0x60>
   13340:	e59f0018 	ldr	r0, [pc, #24]	; 13360 <CGPIOManager::Initialize()+0x64>
   13344:	ebfff9ef 	bl	11b08 <assertion_failed>
   13348:	e3a0203c 	mov	r2, #60, 0	; 0x3c
   1334c:	e59f1008 	ldr	r1, [pc, #8]	; 1335c <CGPIOManager::Initialize()+0x60>
   13350:	e59f000c 	ldr	r0, [pc, #12]	; 13364 <CGPIOManager::Initialize()+0x68>
   13354:	ebfff9eb 	bl	11b08 <assertion_failed>
   13358:	00013558 	.word	0x00013558
   1335c:	0001b79c 	.word	0x0001b79c
   13360:	0001b7d4 	.word	0x0001b7d4
   13364:	0001b7c0 	.word	0x0001b7c0

00013368 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   13368:	e5d03004 	ldrb	r3, [r0, #4]
   1336c:	e92d4010 	push	{r4, lr}
   13370:	e3530000 	cmp	r3, #0, 0
   13374:	0a00000a 	beq	133a4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   13378:	e3510000 	cmp	r1, #0, 0
   1337c:	0a00000c 	beq	133b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   13380:	e5913004 	ldr	r3, [r1, #4]
   13384:	e3530035 	cmp	r3, #53, 0	; 0x35
   13388:	8a00000d 	bhi	133c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   1338c:	e0800103 	add	r0, r0, r3, lsl #2
   13390:	e5903008 	ldr	r3, [r0, #8]
   13394:	e3530000 	cmp	r3, #0, 0
   13398:	1a00000d 	bne	133d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   1339c:	e5801008 	str	r1, [r0, #8]
   133a0:	e8bd8010 	pop	{r4, pc}
   133a4:	e3a02045 	mov	r2, #69, 0	; 0x45
   133a8:	e59f1034 	ldr	r1, [pc, #52]	; 133e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   133ac:	e59f0034 	ldr	r0, [pc, #52]	; 133e8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   133b0:	ebfff9d4 	bl	11b08 <assertion_failed>
   133b4:	e3a02047 	mov	r2, #71, 0	; 0x47
   133b8:	e59f1024 	ldr	r1, [pc, #36]	; 133e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   133bc:	e59f0028 	ldr	r0, [pc, #40]	; 133ec <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   133c0:	ebfff9d0 	bl	11b08 <assertion_failed>
   133c4:	e3a02049 	mov	r2, #73, 0	; 0x49
   133c8:	e59f1014 	ldr	r1, [pc, #20]	; 133e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   133cc:	e59f001c 	ldr	r0, [pc, #28]	; 133f0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   133d0:	ebfff9cc 	bl	11b08 <assertion_failed>
   133d4:	e3a0204b 	mov	r2, #75, 0	; 0x4b
   133d8:	e59f1004 	ldr	r1, [pc, #4]	; 133e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   133dc:	e59f0010 	ldr	r0, [pc, #16]	; 133f4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   133e0:	ebfff9c8 	bl	11b08 <assertion_failed>
   133e4:	0001b79c 	.word	0x0001b79c
   133e8:	0001b7e8 	.word	0x0001b7e8
   133ec:	0001b7f8 	.word	0x0001b7f8
   133f0:	0001b804 	.word	0x0001b804
   133f4:	0001b7ac 	.word	0x0001b7ac

000133f8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   133f8:	e5d03004 	ldrb	r3, [r0, #4]
   133fc:	e92d4010 	push	{r4, lr}
   13400:	e3530000 	cmp	r3, #0, 0
   13404:	0a00000b 	beq	13438 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   13408:	e3510000 	cmp	r1, #0, 0
   1340c:	0a00000d 	beq	13448 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   13410:	e5913004 	ldr	r3, [r1, #4]
   13414:	e3530035 	cmp	r3, #53, 0	; 0x35
   13418:	8a00000e 	bhi	13458 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   1341c:	e0800103 	add	r0, r0, r3, lsl #2
   13420:	e5903008 	ldr	r3, [r0, #8]
   13424:	e3530000 	cmp	r3, #0, 0
   13428:	0a00000e 	beq	13468 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   1342c:	e3a03000 	mov	r3, #0, 0
   13430:	e5803008 	str	r3, [r0, #8]
   13434:	e8bd8010 	pop	{r4, pc}
   13438:	e3a02052 	mov	r2, #82, 0	; 0x52
   1343c:	e59f1034 	ldr	r1, [pc, #52]	; 13478 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   13440:	e59f0034 	ldr	r0, [pc, #52]	; 1347c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   13444:	ebfff9af 	bl	11b08 <assertion_failed>
   13448:	e3a02054 	mov	r2, #84, 0	; 0x54
   1344c:	e59f1024 	ldr	r1, [pc, #36]	; 13478 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   13450:	e59f0028 	ldr	r0, [pc, #40]	; 13480 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   13454:	ebfff9ab 	bl	11b08 <assertion_failed>
   13458:	e3a02056 	mov	r2, #86, 0	; 0x56
   1345c:	e59f1014 	ldr	r1, [pc, #20]	; 13478 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   13460:	e59f001c 	ldr	r0, [pc, #28]	; 13484 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   13464:	ebfff9a7 	bl	11b08 <assertion_failed>
   13468:	e3a02058 	mov	r2, #88, 0	; 0x58
   1346c:	e59f1004 	ldr	r1, [pc, #4]	; 13478 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   13470:	e59f0010 	ldr	r0, [pc, #16]	; 13488 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   13474:	ebfff9a3 	bl	11b08 <assertion_failed>
   13478:	0001b79c 	.word	0x0001b79c
   1347c:	0001b7e8 	.word	0x0001b7e8
   13480:	0001b7f8 	.word	0x0001b7f8
   13484:	0001b804 	.word	0x0001b804
   13488:	0001b818 	.word	0x0001b818

0001348c <CGPIOManager::InterruptHandler()>:
   1348c:	e5d03004 	ldrb	r3, [r0, #4]
   13490:	e92d4070 	push	{r4, r5, r6, lr}
   13494:	e3530000 	cmp	r3, #0, 0
   13498:	0a000025 	beq	13534 <CGPIOManager::InterruptHandler()+0xa8>
   1349c:	e3a04000 	mov	r4, #0, 0
   134a0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   134a4:	e59f2098 	ldr	r2, [pc, #152]	; 13544 <CGPIOManager::InterruptHandler()+0xb8>
   134a8:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   134ac:	ea000005 	b	134c8 <CGPIOManager::InterruptHandler()+0x3c>
   134b0:	e2844001 	add	r4, r4, #1, 0
   134b4:	e314001f 	tst	r4, #31, 0
   134b8:	11a030a3 	lsrne	r3, r3, #1
   134bc:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   134c0:	e3540036 	cmp	r4, #54, 0	; 0x36
   134c4:	0a00000d 	beq	13500 <CGPIOManager::InterruptHandler()+0x74>
   134c8:	e3130001 	tst	r3, #1, 0
   134cc:	0afffff7 	beq	134b0 <CGPIOManager::InterruptHandler()+0x24>
   134d0:	e2843002 	add	r3, r4, #2, 0
   134d4:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   134d8:	e3550000 	cmp	r5, #0, 0
   134dc:	0a00000a 	beq	1350c <CGPIOManager::InterruptHandler()+0x80>
   134e0:	e1a00005 	mov	r0, r5
   134e4:	ebffd9e5 	bl	9c80 <CGPIOPin::InterruptHandler()>
   134e8:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   134ec:	e3530000 	cmp	r3, #0, 0
   134f0:	1595100c 	ldrne	r1, [r5, #12]
   134f4:	15952008 	ldrne	r2, [r5, #8]
   134f8:	159f3048 	ldrne	r3, [pc, #72]	; 13548 <CGPIOManager::InterruptHandler()+0xbc>
   134fc:	17821003 	strne	r1, [r2, r3]
   13500:	e3a03000 	mov	r3, #0, 0
   13504:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13508:	e8bd8070 	pop	{r4, r5, r6, pc}
   1350c:	e1a00004 	mov	r0, r4
   13510:	ebffd9fb 	bl	9d04 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   13514:	e3a02001 	mov	r2, #1, 0
   13518:	e59f302c 	ldr	r3, [pc, #44]	; 1354c <CGPIOManager::InterruptHandler()+0xc0>
   1351c:	e204101f 	and	r1, r4, #31, 0
   13520:	e08332a4 	add	r3, r3, r4, lsr #5
   13524:	e1a03103 	lsl	r3, r3, #2
   13528:	e1a02112 	lsl	r2, r2, r1
   1352c:	e5832000 	str	r2, [r3]
   13530:	eafffff2 	b	13500 <CGPIOManager::InterruptHandler()+0x74>
   13534:	e3a0205e 	mov	r2, #94, 0	; 0x5e
   13538:	e59f1010 	ldr	r1, [pc, #16]	; 13550 <CGPIOManager::InterruptHandler()+0xc4>
   1353c:	e59f0010 	ldr	r0, [pc, #16]	; 13554 <CGPIOManager::InterruptHandler()+0xc8>
   13540:	ebfff970 	bl	11b08 <assertion_failed>
   13544:	20200000 	.word	0x20200000
   13548:	20200040 	.word	0x20200040
   1354c:	08080010 	.word	0x08080010
   13550:	0001b79c 	.word	0x0001b79c
   13554:	0001b7e8 	.word	0x0001b7e8

00013558 <CGPIOManager::InterruptStub(void*)>:
   13558:	e3500000 	cmp	r0, #0, 0
   1355c:	0a000000 	beq	13564 <CGPIOManager::InterruptStub(void*)+0xc>
   13560:	eaffffc9 	b	1348c <CGPIOManager::InterruptHandler()>
   13564:	e3a0208e 	mov	r2, #142, 0	; 0x8e
   13568:	e92d4010 	push	{r4, lr}
   1356c:	e59f1004 	ldr	r1, [pc, #4]	; 13578 <CGPIOManager::InterruptStub(void*)+0x20>
   13570:	e59f0004 	ldr	r0, [pc, #4]	; 1357c <CGPIOManager::InterruptStub(void*)+0x24>
   13574:	ebfff963 	bl	11b08 <assertion_failed>
   13578:	0001b79c 	.word	0x0001b79c
   1357c:	0001b82c 	.word	0x0001b82c

00013580 <CPtrList::CPtrList()>:
   13580:	e3a02000 	mov	r2, #0, 0
   13584:	e5802000 	str	r2, [r0]
   13588:	e12fff1e 	bx	lr

0001358c <CPtrList::~CPtrList()>:
   1358c:	e5903000 	ldr	r3, [r0]
   13590:	e3530000 	cmp	r3, #0, 0
   13594:	012fff1e 	bxeq	lr
   13598:	e3a0202a 	mov	r2, #42, 0	; 0x2a
   1359c:	e92d4010 	push	{r4, lr}
   135a0:	e59f1004 	ldr	r1, [pc, #4]	; 135ac <CPtrList::~CPtrList()+0x20>
   135a4:	e59f0004 	ldr	r0, [pc, #4]	; 135b0 <CPtrList::~CPtrList()+0x24>
   135a8:	ebfff956 	bl	11b08 <assertion_failed>
   135ac:	0001b838 	.word	0x0001b838
   135b0:	0001b844 	.word	0x0001b844

000135b4 <CPtrList::GetFirst()>:
   135b4:	e5900000 	ldr	r0, [r0]
   135b8:	e12fff1e 	bx	lr

000135bc <CPtrList::GetNext(TPtrListElement*)>:
   135bc:	e3510000 	cmp	r1, #0, 0
   135c0:	e92d4010 	push	{r4, lr}
   135c4:	0a000005 	beq	135e0 <CPtrList::GetNext(TPtrListElement*)+0x24>
   135c8:	e59f3030 	ldr	r3, [pc, #48]	; 13600 <CPtrList::GetNext(TPtrListElement*)+0x44>
   135cc:	e5912000 	ldr	r2, [r1]
   135d0:	e1520003 	cmp	r2, r3
   135d4:	1a000005 	bne	135f0 <CPtrList::GetNext(TPtrListElement*)+0x34>
   135d8:	e5910008 	ldr	r0, [r1, #8]
   135dc:	e8bd8010 	pop	{r4, pc}
   135e0:	e3a02034 	mov	r2, #52, 0	; 0x34
   135e4:	e59f1018 	ldr	r1, [pc, #24]	; 13604 <CPtrList::GetNext(TPtrListElement*)+0x48>
   135e8:	e59f0018 	ldr	r0, [pc, #24]	; 13608 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   135ec:	ebfff945 	bl	11b08 <assertion_failed>
   135f0:	e3a02035 	mov	r2, #53, 0	; 0x35
   135f4:	e59f1008 	ldr	r1, [pc, #8]	; 13604 <CPtrList::GetNext(TPtrListElement*)+0x48>
   135f8:	e59f000c 	ldr	r0, [pc, #12]	; 1360c <CPtrList::GetNext(TPtrListElement*)+0x50>
   135fc:	ebfff941 	bl	11b08 <assertion_failed>
   13600:	504c4d43 	.word	0x504c4d43
   13604:	0001b838 	.word	0x0001b838
   13608:	0001b854 	.word	0x0001b854
   1360c:	0001b864 	.word	0x0001b864

00013610 <CPtrList::GetPtr(TPtrListElement*)>:
   13610:	e3510000 	cmp	r1, #0, 0
   13614:	e92d4010 	push	{r4, lr}
   13618:	0a000005 	beq	13634 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   1361c:	e59f3030 	ldr	r3, [pc, #48]	; 13654 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   13620:	e5912000 	ldr	r2, [r1]
   13624:	e1520003 	cmp	r2, r3
   13628:	1a000005 	bne	13644 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   1362c:	e591000c 	ldr	r0, [r1, #12]
   13630:	e8bd8010 	pop	{r4, pc}
   13634:	e3a0203c 	mov	r2, #60, 0	; 0x3c
   13638:	e59f1018 	ldr	r1, [pc, #24]	; 13658 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   1363c:	e59f0018 	ldr	r0, [pc, #24]	; 1365c <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   13640:	ebfff930 	bl	11b08 <assertion_failed>
   13644:	e3a0203d 	mov	r2, #61, 0	; 0x3d
   13648:	e59f1008 	ldr	r1, [pc, #8]	; 13658 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   1364c:	e59f000c 	ldr	r0, [pc, #12]	; 13660 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   13650:	ebfff92c 	bl	11b08 <assertion_failed>
   13654:	504c4d43 	.word	0x504c4d43
   13658:	0001b838 	.word	0x0001b838
   1365c:	0001b854 	.word	0x0001b854
   13660:	0001b864 	.word	0x0001b864

00013664 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13664:	e92d4070 	push	{r4, r5, r6, lr}
   13668:	e1a05000 	mov	r5, r0
   1366c:	e3a00010 	mov	r0, #16, 0
   13670:	e1a06002 	mov	r6, r2
   13674:	e1a04001 	mov	r4, r1
   13678:	ebfff438 	bl	10760 <operator new(unsigned int)>
   1367c:	e5953000 	ldr	r3, [r5]
   13680:	e59f20ac 	ldr	r2, [pc, #172]	; 13734 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   13684:	e3530000 	cmp	r3, #0, 0
   13688:	e580600c 	str	r6, [r0, #12]
   1368c:	e5802000 	str	r2, [r0]
   13690:	0a000017 	beq	136f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   13694:	e3540000 	cmp	r4, #0, 0
   13698:	0a000019 	beq	13704 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   1369c:	e5941000 	ldr	r1, [r4]
   136a0:	e1510002 	cmp	r1, r2
   136a4:	1a00001a 	bne	13714 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   136a8:	e1530004 	cmp	r3, r4
   136ac:	0a00000a 	beq	136dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   136b0:	e5943004 	ldr	r3, [r4, #4]
   136b4:	e5804008 	str	r4, [r0, #8]
   136b8:	e3530000 	cmp	r3, #0, 0
   136bc:	e5803004 	str	r3, [r0, #4]
   136c0:	0a000003 	beq	136d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   136c4:	e5932000 	ldr	r2, [r3]
   136c8:	e1520001 	cmp	r2, r1
   136cc:	05830008 	streq	r0, [r3, #8]
   136d0:	1a000013 	bne	13724 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   136d4:	e5840004 	str	r0, [r4, #4]
   136d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   136dc:	e3a02000 	mov	r2, #0, 0
   136e0:	e5830004 	str	r0, [r3, #4]
   136e4:	e5803008 	str	r3, [r0, #8]
   136e8:	e5850000 	str	r0, [r5]
   136ec:	e5802004 	str	r2, [r0, #4]
   136f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   136f4:	e3a0204c 	mov	r2, #76, 0	; 0x4c
   136f8:	e59f1038 	ldr	r1, [pc, #56]	; 13738 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   136fc:	e59f0038 	ldr	r0, [pc, #56]	; 1373c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   13700:	ebfff900 	bl	11b08 <assertion_failed>
   13704:	e3a0204d 	mov	r2, #77, 0	; 0x4d
   13708:	e59f1028 	ldr	r1, [pc, #40]	; 13738 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   1370c:	e59f002c 	ldr	r0, [pc, #44]	; 13740 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   13710:	ebfff8fc 	bl	11b08 <assertion_failed>
   13714:	e3a0204e 	mov	r2, #78, 0	; 0x4e
   13718:	e59f1018 	ldr	r1, [pc, #24]	; 13738 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   1371c:	e59f0020 	ldr	r0, [pc, #32]	; 13744 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   13720:	ebfff8f8 	bl	11b08 <assertion_failed>
   13724:	e3a02060 	mov	r2, #96, 0	; 0x60
   13728:	e59f1008 	ldr	r1, [pc, #8]	; 13738 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   1372c:	e59f0014 	ldr	r0, [pc, #20]	; 13748 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   13730:	ebfff8f4 	bl	11b08 <assertion_failed>
   13734:	504c4d43 	.word	0x504c4d43
   13738:	0001b838 	.word	0x0001b838
   1373c:	0001b888 	.word	0x0001b888
   13740:	0001b898 	.word	0x0001b898
   13744:	0001b8a4 	.word	0x0001b8a4
   13748:	0001b8c8 	.word	0x0001b8c8

0001374c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   1374c:	e92d4070 	push	{r4, r5, r6, lr}
   13750:	e1a04001 	mov	r4, r1
   13754:	e1a05000 	mov	r5, r0
   13758:	e3a00010 	mov	r0, #16, 0
   1375c:	e1a06002 	mov	r6, r2
   13760:	ebfff3fe 	bl	10760 <operator new(unsigned int)>
   13764:	e59f30ac 	ldr	r3, [pc, #172]	; 13818 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   13768:	e3540000 	cmp	r4, #0, 0
   1376c:	e580600c 	str	r6, [r0, #12]
   13770:	e5803000 	str	r3, [r0]
   13774:	0a000010 	beq	137bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   13778:	e5952000 	ldr	r2, [r5]
   1377c:	e3520000 	cmp	r2, #0, 0
   13780:	0a000014 	beq	137d8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   13784:	e5942000 	ldr	r2, [r4]
   13788:	e1520003 	cmp	r2, r3
   1378c:	1a000015 	bne	137e8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   13790:	e5943008 	ldr	r3, [r4, #8]
   13794:	e5804004 	str	r4, [r0, #4]
   13798:	e3530000 	cmp	r3, #0, 0
   1379c:	e5803008 	str	r3, [r0, #8]
   137a0:	0a000003 	beq	137b4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   137a4:	e5931000 	ldr	r1, [r3]
   137a8:	e1510002 	cmp	r1, r2
   137ac:	05830004 	streq	r0, [r3, #4]
   137b0:	1a000010 	bne	137f8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   137b4:	e5840008 	str	r0, [r4, #8]
   137b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   137bc:	e5953000 	ldr	r3, [r5]
   137c0:	e3530000 	cmp	r3, #0, 0
   137c4:	1a00000f 	bne	13808 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   137c8:	e5803004 	str	r3, [r0, #4]
   137cc:	e5803008 	str	r3, [r0, #8]
   137d0:	e5850000 	str	r0, [r5]
   137d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   137d8:	e3a0207d 	mov	r2, #125, 0	; 0x7d
   137dc:	e59f1038 	ldr	r1, [pc, #56]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   137e0:	e59f0038 	ldr	r0, [pc, #56]	; 13820 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   137e4:	ebfff8c7 	bl	11b08 <assertion_failed>
   137e8:	e3a0207e 	mov	r2, #126, 0	; 0x7e
   137ec:	e59f1028 	ldr	r1, [pc, #40]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   137f0:	e59f002c 	ldr	r0, [pc, #44]	; 13824 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   137f4:	ebfff8c3 	bl	11b08 <assertion_failed>
   137f8:	e3a02085 	mov	r2, #133, 0	; 0x85
   137fc:	e59f1018 	ldr	r1, [pc, #24]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   13800:	e59f0020 	ldr	r0, [pc, #32]	; 13828 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   13804:	ebfff8bf 	bl	11b08 <assertion_failed>
   13808:	e3a02074 	mov	r2, #116, 0	; 0x74
   1380c:	e59f1008 	ldr	r1, [pc, #8]	; 1381c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   13810:	e59f0014 	ldr	r0, [pc, #20]	; 1382c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   13814:	ebfff8bb 	bl	11b08 <assertion_failed>
   13818:	504c4d43 	.word	0x504c4d43
   1381c:	0001b838 	.word	0x0001b838
   13820:	0001b888 	.word	0x0001b888
   13824:	0001b8f0 	.word	0x0001b8f0
   13828:	0001b914 	.word	0x0001b914
   1382c:	0001b844 	.word	0x0001b844

00013830 <CPtrList::Remove(TPtrListElement*)>:
   13830:	e3510000 	cmp	r1, #0, 0
   13834:	e92d4010 	push	{r4, lr}
   13838:	0a000029 	beq	138e4 <CPtrList::Remove(TPtrListElement*)+0xb4>
   1383c:	e59f20e0 	ldr	r2, [pc, #224]	; 13924 <CPtrList::Remove(TPtrListElement*)+0xf4>
   13840:	e5913000 	ldr	r3, [r1]
   13844:	e1530002 	cmp	r3, r2
   13848:	1a000029 	bne	138f4 <CPtrList::Remove(TPtrListElement*)+0xc4>
   1384c:	e5902000 	ldr	r2, [r0]
   13850:	e1520001 	cmp	r2, r1
   13854:	0a000011 	beq	138a0 <CPtrList::Remove(TPtrListElement*)+0x70>
   13858:	e5912004 	ldr	r2, [r1, #4]
   1385c:	e3520000 	cmp	r2, #0, 0
   13860:	0a000027 	beq	13904 <CPtrList::Remove(TPtrListElement*)+0xd4>
   13864:	e5920000 	ldr	r0, [r2]
   13868:	e1500003 	cmp	r0, r3
   1386c:	1a000018 	bne	138d4 <CPtrList::Remove(TPtrListElement*)+0xa4>
   13870:	e5913008 	ldr	r3, [r1, #8]
   13874:	e3530000 	cmp	r3, #0, 0
   13878:	e5823008 	str	r3, [r2, #8]
   1387c:	0a000003 	beq	13890 <CPtrList::Remove(TPtrListElement*)+0x60>
   13880:	e593c000 	ldr	ip, [r3]
   13884:	e15c0000 	cmp	ip, r0
   13888:	05832004 	streq	r2, [r3, #4]
   1388c:	1a000020 	bne	13914 <CPtrList::Remove(TPtrListElement*)+0xe4>
   13890:	e8bd4010 	pop	{r4, lr}
   13894:	e1a00001 	mov	r0, r1
   13898:	e3a01010 	mov	r1, #16, 0
   1389c:	eafff3bd 	b	10798 <operator delete(void*, unsigned int)>
   138a0:	e5922008 	ldr	r2, [r2, #8]
   138a4:	e3520000 	cmp	r2, #0, 0
   138a8:	e5802000 	str	r2, [r0]
   138ac:	0afffff7 	beq	13890 <CPtrList::Remove(TPtrListElement*)+0x60>
   138b0:	e5920000 	ldr	r0, [r2]
   138b4:	e1500003 	cmp	r0, r3
   138b8:	03a03000 	moveq	r3, #0, 0
   138bc:	05823004 	streq	r3, [r2, #4]
   138c0:	0afffff2 	beq	13890 <CPtrList::Remove(TPtrListElement*)+0x60>
   138c4:	e3a02098 	mov	r2, #152, 0	; 0x98
   138c8:	e59f1058 	ldr	r1, [pc, #88]	; 13928 <CPtrList::Remove(TPtrListElement*)+0xf8>
   138cc:	e59f0058 	ldr	r0, [pc, #88]	; 1392c <CPtrList::Remove(TPtrListElement*)+0xfc>
   138d0:	ebfff88c 	bl	11b08 <assertion_failed>
   138d4:	e3a0209f 	mov	r2, #159, 0	; 0x9f
   138d8:	e59f1048 	ldr	r1, [pc, #72]	; 13928 <CPtrList::Remove(TPtrListElement*)+0xf8>
   138dc:	e59f004c 	ldr	r0, [pc, #76]	; 13930 <CPtrList::Remove(TPtrListElement*)+0x100>
   138e0:	ebfff888 	bl	11b08 <assertion_failed>
   138e4:	e3a0208f 	mov	r2, #143, 0	; 0x8f
   138e8:	e59f1038 	ldr	r1, [pc, #56]	; 13928 <CPtrList::Remove(TPtrListElement*)+0xf8>
   138ec:	e59f0040 	ldr	r0, [pc, #64]	; 13934 <CPtrList::Remove(TPtrListElement*)+0x104>
   138f0:	ebfff884 	bl	11b08 <assertion_failed>
   138f4:	e3a02090 	mov	r2, #144, 0	; 0x90
   138f8:	e59f1028 	ldr	r1, [pc, #40]	; 13928 <CPtrList::Remove(TPtrListElement*)+0xf8>
   138fc:	e59f0034 	ldr	r0, [pc, #52]	; 13938 <CPtrList::Remove(TPtrListElement*)+0x108>
   13900:	ebfff880 	bl	11b08 <assertion_failed>
   13904:	e3a0209e 	mov	r2, #158, 0	; 0x9e
   13908:	e59f1018 	ldr	r1, [pc, #24]	; 13928 <CPtrList::Remove(TPtrListElement*)+0xf8>
   1390c:	e59f0028 	ldr	r0, [pc, #40]	; 1393c <CPtrList::Remove(TPtrListElement*)+0x10c>
   13910:	ebfff87c 	bl	11b08 <assertion_failed>
   13914:	e3a020a4 	mov	r2, #164, 0	; 0xa4
   13918:	e59f1008 	ldr	r1, [pc, #8]	; 13928 <CPtrList::Remove(TPtrListElement*)+0xf8>
   1391c:	e59f0008 	ldr	r0, [pc, #8]	; 1392c <CPtrList::Remove(TPtrListElement*)+0xfc>
   13920:	ebfff878 	bl	11b08 <assertion_failed>
   13924:	504c4d43 	.word	0x504c4d43
   13928:	0001b838 	.word	0x0001b838
   1392c:	0001b940 	.word	0x0001b940
   13930:	0001b984 	.word	0x0001b984
   13934:	0001b854 	.word	0x0001b854
   13938:	0001b864 	.word	0x0001b864
   1393c:	0001b96c 	.word	0x0001b96c

00013940 <CPtrList::Find(void*)>:
   13940:	e5900000 	ldr	r0, [r0]
   13944:	e3500000 	cmp	r0, #0, 0
   13948:	012fff1e 	bxeq	lr
   1394c:	e59f2038 	ldr	r2, [pc, #56]	; 1398c <CPtrList::Find(void*)+0x4c>
   13950:	ea000005 	b	1396c <CPtrList::Find(void*)+0x2c>
   13954:	e590300c 	ldr	r3, [r0, #12]
   13958:	e1530001 	cmp	r3, r1
   1395c:	012fff1e 	bxeq	lr
   13960:	e5900008 	ldr	r0, [r0, #8]
   13964:	e3500000 	cmp	r0, #0, 0
   13968:	012fff1e 	bxeq	lr
   1396c:	e5903000 	ldr	r3, [r0]
   13970:	e1530002 	cmp	r3, r2
   13974:	0afffff6 	beq	13954 <CPtrList::Find(void*)+0x14>
   13978:	e3a020b3 	mov	r2, #179, 0	; 0xb3
   1397c:	e92d4010 	push	{r4, lr}
   13980:	e59f1008 	ldr	r1, [pc, #8]	; 13990 <CPtrList::Find(void*)+0x50>
   13984:	e59f0008 	ldr	r0, [pc, #8]	; 13994 <CPtrList::Find(void*)+0x54>
   13988:	ebfff85e 	bl	11b08 <assertion_failed>
   1398c:	504c4d43 	.word	0x504c4d43
   13990:	0001b838 	.word	0x0001b838
   13994:	0001b864 	.word	0x0001b864

00013998 <CPageAllocator::CPageAllocator()>:
   13998:	e3a02000 	mov	r2, #0, 0
   1399c:	e3a01001 	mov	r1, #1, 0
   139a0:	e5802000 	str	r2, [r0]
   139a4:	e580100c 	str	r1, [r0, #12]
   139a8:	e5802004 	str	r2, [r0, #4]
   139ac:	e5802008 	str	r2, [r0, #8]
   139b0:	e12fff1e 	bx	lr

000139b4 <CPageAllocator::~CPageAllocator()>:
   139b4:	e12fff1e 	bx	lr

000139b8 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   139b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   139bc:	e28db000 	add	fp, sp, #0, 0
   139c0:	e24dd014 	sub	sp, sp, #20, 0
   139c4:	e50b0008 	str	r0, [fp, #-8]
   139c8:	e50b100c 	str	r1, [fp, #-12]
   139cc:	e50b2010 	str	r2, [fp, #-16]
   139d0:	e51b300c 	ldr	r3, [fp, #-12]
   139d4:	e2833eff 	add	r3, r3, #4080	; 0xff0
   139d8:	e283300f 	add	r3, r3, #15, 0
   139dc:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   139e0:	e3c3300f 	bic	r3, r3, #15, 0
   139e4:	e1a02003 	mov	r2, r3
   139e8:	e51b3008 	ldr	r3, [fp, #-8]
   139ec:	e5832000 	str	r2, [r3]
   139f0:	e51b200c 	ldr	r2, [fp, #-12]
   139f4:	e51b3010 	ldr	r3, [fp, #-16]
   139f8:	e0823003 	add	r3, r2, r3
   139fc:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   13a00:	e3c3300f 	bic	r3, r3, #15, 0
   13a04:	e1a02003 	mov	r2, r3
   13a08:	e51b3008 	ldr	r3, [fp, #-8]
   13a0c:	e5832004 	str	r2, [r3, #4]
   13a10:	e320f000 	nop	{0}
   13a14:	e28bd000 	add	sp, fp, #0, 0
   13a18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a1c:	e12fff1e 	bx	lr

00013a20 <CPageAllocator::GetFreeSpace() const>:
   13a20:	e8900005 	ldm	r0, {r0, r2}
   13a24:	e0420000 	sub	r0, r2, r0
   13a28:	e12fff1e 	bx	lr

00013a2c <CPageAllocator::Allocate()>:
   13a2c:	e5903000 	ldr	r3, [r0]
   13a30:	e92d4070 	push	{r4, r5, r6, lr}
   13a34:	e3530000 	cmp	r3, #0, 0
   13a38:	0a000023 	beq	13acc <CPageAllocator::Allocate()+0xa0>
   13a3c:	e1a04000 	mov	r4, r0
   13a40:	e590000c 	ldr	r0, [r0, #12]
   13a44:	e3500000 	cmp	r0, #0, 0
   13a48:	1a00000f 	bne	13a8c <CPageAllocator::Allocate()+0x60>
   13a4c:	e5945008 	ldr	r5, [r4, #8]
   13a50:	e3550000 	cmp	r5, #0, 0
   13a54:	0a000010 	beq	13a9c <CPageAllocator::Allocate()+0x70>
   13a58:	e59f308c 	ldr	r3, [pc, #140]	; 13aec <CPageAllocator::Allocate()+0xc0>
   13a5c:	e5952000 	ldr	r2, [r5]
   13a60:	e1520003 	cmp	r2, r3
   13a64:	1a00001c 	bne	13adc <CPageAllocator::Allocate()+0xb0>
   13a68:	e3a03000 	mov	r3, #0, 0
   13a6c:	e5952004 	ldr	r2, [r5, #4]
   13a70:	e5842008 	str	r2, [r4, #8]
   13a74:	e5853000 	str	r3, [r5]
   13a78:	e594300c 	ldr	r3, [r4, #12]
   13a7c:	e3530000 	cmp	r3, #0, 0
   13a80:	1a00000e 	bne	13ac0 <CPageAllocator::Allocate()+0x94>
   13a84:	e1a00005 	mov	r0, r5
   13a88:	e8bd8070 	pop	{r4, r5, r6, pc}
   13a8c:	ebfff661 	bl	11418 <EnterCritical>
   13a90:	e5945008 	ldr	r5, [r4, #8]
   13a94:	e3550000 	cmp	r5, #0, 0
   13a98:	1affffee 	bne	13a58 <CPageAllocator::Allocate()+0x2c>
   13a9c:	e5942000 	ldr	r2, [r4]
   13aa0:	e5941004 	ldr	r1, [r4, #4]
   13aa4:	e2823a01 	add	r3, r2, #4096	; 0x1000
   13aa8:	e1530001 	cmp	r3, r1
   13aac:	e5843000 	str	r3, [r4]
   13ab0:	e594300c 	ldr	r3, [r4, #12]
   13ab4:	91a05002 	movls	r5, r2
   13ab8:	e3530000 	cmp	r3, #0, 0
   13abc:	0afffff0 	beq	13a84 <CPageAllocator::Allocate()+0x58>
   13ac0:	ebfff67e 	bl	114c0 <LeaveCritical>
   13ac4:	e1a00005 	mov	r0, r5
   13ac8:	e8bd8070 	pop	{r4, r5, r6, pc}
   13acc:	e59f101c 	ldr	r1, [pc, #28]	; 13af0 <CPageAllocator::Allocate()+0xc4>
   13ad0:	e3a02036 	mov	r2, #54, 0	; 0x36
   13ad4:	e2810014 	add	r0, r1, #20, 0
   13ad8:	ebfff80a 	bl	11b08 <assertion_failed>
   13adc:	e59f100c 	ldr	r1, [pc, #12]	; 13af0 <CPageAllocator::Allocate()+0xc4>
   13ae0:	e3a02044 	mov	r2, #68, 0	; 0x44
   13ae4:	e2810024 	add	r0, r1, #36, 0	; 0x24
   13ae8:	ebfff806 	bl	11b08 <assertion_failed>
   13aec:	50474d43 	.word	0x50474d43
   13af0:	0001b9b0 	.word	0x0001b9b0

00013af4 <CPageAllocator::Free(void*)>:
   13af4:	e92d4070 	push	{r4, r5, r6, lr}
   13af8:	e2514000 	subs	r4, r1, #0, 0
   13afc:	08bd8070 	popeq	{r4, r5, r6, pc}
   13b00:	e1a05000 	mov	r5, r0
   13b04:	e590000c 	ldr	r0, [r0, #12]
   13b08:	e3500000 	cmp	r0, #0, 0
   13b0c:	1a000009 	bne	13b38 <CPageAllocator::Free(void*)+0x44>
   13b10:	e59f3028 	ldr	r3, [pc, #40]	; 13b40 <CPageAllocator::Free(void*)+0x4c>
   13b14:	e5952008 	ldr	r2, [r5, #8]
   13b18:	e5843000 	str	r3, [r4]
   13b1c:	e595300c 	ldr	r3, [r5, #12]
   13b20:	e5842004 	str	r2, [r4, #4]
   13b24:	e3530000 	cmp	r3, #0, 0
   13b28:	e5854008 	str	r4, [r5, #8]
   13b2c:	08bd8070 	popeq	{r4, r5, r6, pc}
   13b30:	e8bd4070 	pop	{r4, r5, r6, lr}
   13b34:	eafff661 	b	114c0 <LeaveCritical>
   13b38:	ebfff636 	bl	11418 <EnterCritical>
   13b3c:	eafffff3 	b	13b10 <CPageAllocator::Free(void*)+0x1c>
   13b40:	50474d43 	.word	0x50474d43

00013b44 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   13b44:	e5801000 	str	r1, [r0]
   13b48:	e5c02004 	strb	r2, [r0, #4]
   13b4c:	e12fff1e 	bx	lr

00013b50 <CBcmMailBox::~CBcmMailBox()>:
   13b50:	e12fff1e 	bx	lr

00013b54 <CBcmMailBox::WriteRead(unsigned int)>:
   13b54:	e92d4070 	push	{r4, r5, r6, lr}
   13b58:	e3a03000 	mov	r3, #0, 0
   13b5c:	e1a05000 	mov	r5, r0
   13b60:	e1a06001 	mov	r6, r1
   13b64:	e24dd008 	sub	sp, sp, #8, 0
   13b68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13b6c:	e5d03004 	ldrb	r3, [r0, #4]
   13b70:	e3530000 	cmp	r3, #0, 0
   13b74:	1a000003 	bne	13b88 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   13b78:	e59f30dc 	ldr	r3, [pc, #220]	; 13c5c <CBcmMailBox::WriteRead(unsigned int)+0x108>
   13b7c:	e5930000 	ldr	r0, [r3]
   13b80:	e3500000 	cmp	r0, #0, 0
   13b84:	1a000027 	bne	13c28 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   13b88:	e59f40d0 	ldr	r4, [pc, #208]	; 13c60 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   13b8c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13b90:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13b94:	1a000005 	bne	13bb0 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   13b98:	e3a00014 	mov	r0, #20, 0
   13b9c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   13ba0:	ebffef58 	bl	f908 <CTimer::SimpleMsDelay(unsigned int)>
   13ba4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13ba8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13bac:	0afffff9 	beq	13b98 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   13bb0:	e59f00a8 	ldr	r0, [pc, #168]	; 13c60 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   13bb4:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   13bb8:	e3530000 	cmp	r3, #0, 0
   13bbc:	bafffffc 	blt	13bb4 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   13bc0:	e316000f 	tst	r6, #15, 0
   13bc4:	1a000020 	bne	13c4c <CBcmMailBox::WriteRead(unsigned int)+0xf8>
   13bc8:	e5953000 	ldr	r3, [r5]
   13bcc:	e59f208c 	ldr	r2, [pc, #140]	; 13c60 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   13bd0:	e1866003 	orr	r6, r6, r3
   13bd4:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   13bd8:	e5950000 	ldr	r0, [r5]
   13bdc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   13be0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13be4:	1afffffc 	bne	13bdc <CBcmMailBox::WriteRead(unsigned int)+0x88>
   13be8:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   13bec:	e203100f 	and	r1, r3, #15, 0
   13bf0:	e1510000 	cmp	r1, r0
   13bf4:	1afffff8 	bne	13bdc <CBcmMailBox::WriteRead(unsigned int)+0x88>
   13bf8:	e5d52004 	ldrb	r2, [r5, #4]
   13bfc:	e3c3000f 	bic	r0, r3, #15, 0
   13c00:	e3520000 	cmp	r2, #0, 0
   13c04:	1a000003 	bne	13c18 <CBcmMailBox::WriteRead(unsigned int)+0xc4>
   13c08:	e59f304c 	ldr	r3, [pc, #76]	; 13c5c <CBcmMailBox::WriteRead(unsigned int)+0x108>
   13c0c:	e5933000 	ldr	r3, [r3]
   13c10:	e3530000 	cmp	r3, #0, 0
   13c14:	1a000005 	bne	13c30 <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   13c18:	e3a03000 	mov	r3, #0, 0
   13c1c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13c20:	e28dd008 	add	sp, sp, #8, 0
   13c24:	e8bd8070 	pop	{r4, r5, r6, pc}
   13c28:	ebfff5fa 	bl	11418 <EnterCritical>
   13c2c:	eaffffd5 	b	13b88 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   13c30:	e58d0004 	str	r0, [sp, #4]
   13c34:	ebfff621 	bl	114c0 <LeaveCritical>
   13c38:	e3a03000 	mov	r3, #0, 0
   13c3c:	e59d0004 	ldr	r0, [sp, #4]
   13c40:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13c44:	e28dd008 	add	sp, sp, #8, 0
   13c48:	e8bd8070 	pop	{r4, r5, r6, pc}
   13c4c:	e3a02062 	mov	r2, #98, 0	; 0x62
   13c50:	e59f100c 	ldr	r1, [pc, #12]	; 13c64 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   13c54:	e59f000c 	ldr	r0, [pc, #12]	; 13c68 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   13c58:	ebfff7aa 	bl	11b08 <assertion_failed>
   13c5c:	0001cce4 	.word	0x0001cce4
   13c60:	2000b000 	.word	0x2000b000
   13c64:	0001b9f8 	.word	0x0001b9f8
   13c68:	0001ba08 	.word	0x0001ba08

00013c6c <CBcmMailBox::Flush()>:
   13c6c:	e92d4010 	push	{r4, lr}
   13c70:	e59f4024 	ldr	r4, [pc, #36]	; 13c9c <CBcmMailBox::Flush()+0x30>
   13c74:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13c78:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13c7c:	18bd8010 	popne	{r4, pc}
   13c80:	e3a00014 	mov	r0, #20, 0
   13c84:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   13c88:	ebffef1e 	bl	f908 <CTimer::SimpleMsDelay(unsigned int)>
   13c8c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13c90:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13c94:	0afffff9 	beq	13c80 <CBcmMailBox::Flush()+0x14>
   13c98:	e8bd8010 	pop	{r4, pc}
   13c9c:	2000b000 	.word	0x2000b000

00013ca0 <CBcmMailBox::Read()>:
   13ca0:	e59f2024 	ldr	r2, [pc, #36]	; 13ccc <CBcmMailBox::Read()+0x2c>
   13ca4:	e5901000 	ldr	r1, [r0]
   13ca8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   13cac:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13cb0:	1afffffc 	bne	13ca8 <CBcmMailBox::Read()+0x8>
   13cb4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   13cb8:	e200300f 	and	r3, r0, #15, 0
   13cbc:	e1530001 	cmp	r3, r1
   13cc0:	1afffff8 	bne	13ca8 <CBcmMailBox::Read()+0x8>
   13cc4:	e3c0000f 	bic	r0, r0, #15, 0
   13cc8:	e12fff1e 	bx	lr
   13ccc:	2000b000 	.word	0x2000b000

00013cd0 <CBcmMailBox::Write(unsigned int)>:
   13cd0:	e59f2034 	ldr	r2, [pc, #52]	; 13d0c <CBcmMailBox::Write(unsigned int)+0x3c>
   13cd4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   13cd8:	e3530000 	cmp	r3, #0, 0
   13cdc:	bafffffc 	blt	13cd4 <CBcmMailBox::Write(unsigned int)+0x4>
   13ce0:	e311000f 	tst	r1, #15, 0
   13ce4:	1a000003 	bne	13cf8 <CBcmMailBox::Write(unsigned int)+0x28>
   13ce8:	e5903000 	ldr	r3, [r0]
   13cec:	e1811003 	orr	r1, r1, r3
   13cf0:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   13cf4:	e12fff1e 	bx	lr
   13cf8:	e3a02062 	mov	r2, #98, 0	; 0x62
   13cfc:	e92d4010 	push	{r4, lr}
   13d00:	e59f1008 	ldr	r1, [pc, #8]	; 13d10 <CBcmMailBox::Write(unsigned int)+0x40>
   13d04:	e59f0008 	ldr	r0, [pc, #8]	; 13d14 <CBcmMailBox::Write(unsigned int)+0x44>
   13d08:	ebfff77e 	bl	11b08 <assertion_failed>
   13d0c:	2000b000 	.word	0x2000b000
   13d10:	0001b9f8 	.word	0x0001b9f8
   13d14:	0001ba08 	.word	0x0001ba08

00013d18 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   13d18:	e3a02000 	mov	r2, #0, 0
   13d1c:	e59f3004 	ldr	r3, [pc, #4]	; 13d28 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   13d20:	e5832000 	str	r2, [r3]
   13d24:	e12fff1e 	bx	lr
   13d28:	0001cce4 	.word	0x0001cce4

00013d2c <CFATFileSystem::CFATFileSystem()>:
   13d2c:	e92d4070 	push	{r4, r5, r6, lr}
   13d30:	e1a04000 	mov	r4, r0
   13d34:	e2805018 	add	r5, r0, #24, 0
   13d38:	e2846064 	add	r6, r4, #100, 0	; 0x64
   13d3c:	eb0002da 	bl	148ac <CFATCache::CFATCache()>
   13d40:	e1a01004 	mov	r1, r4
   13d44:	e1a00005 	mov	r0, r5
   13d48:	eb0004e0 	bl	150d0 <CFATInfo::CFATInfo(CFATCache*)>
   13d4c:	e1a02005 	mov	r2, r5
   13d50:	e1a01004 	mov	r1, r4
   13d54:	e1a00006 	mov	r0, r6
   13d58:	eb000738 	bl	15a40 <CFAT::CFAT(CFATCache*, CFATInfo*)>
   13d5c:	e1a03006 	mov	r3, r6
   13d60:	e1a02005 	mov	r2, r5
   13d64:	e1a01004 	mov	r1, r4
   13d68:	e2840070 	add	r0, r4, #112, 0	; 0x70
   13d6c:	eb000926 	bl	1620c <CFATDirectory::CFATDirectory(CFATCache*, CFATInfo*, CFAT*)>
   13d70:	e3a01000 	mov	r1, #0, 0
   13d74:	e3a02e6e 	mov	r2, #1760	; 0x6e0
   13d78:	e2840084 	add	r0, r4, #132, 0	; 0x84
   13d7c:	e5841764 	str	r1, [r4, #1892]	; 0x764
   13d80:	ebffef21 	bl	fa0c <memset>
   13d84:	e1a00004 	mov	r0, r4
   13d88:	e8bd8070 	pop	{r4, r5, r6, pc}

00013d8c <CFATFileSystem::~CFATFileSystem()>:
   13d8c:	e92d4010 	push	{r4, lr}
   13d90:	e1a04000 	mov	r4, r0
   13d94:	e2800070 	add	r0, r0, #112, 0	; 0x70
   13d98:	eb000920 	bl	16220 <CFATDirectory::~CFATDirectory()>
   13d9c:	e2840064 	add	r0, r4, #100, 0	; 0x64
   13da0:	eb000729 	bl	15a4c <CFAT::~CFAT()>
   13da4:	e2840018 	add	r0, r4, #24, 0
   13da8:	eb0004ce 	bl	150e8 <CFATInfo::~CFATInfo()>
   13dac:	e1a00004 	mov	r0, r4
   13db0:	eb0002c3 	bl	148c4 <CFATCache::~CFATCache()>
   13db4:	e1a00004 	mov	r0, r4
   13db8:	e8bd8010 	pop	{r4, pc}

00013dbc <CFATFileSystem::Mount(CDevice*)>:
   13dbc:	e92d4070 	push	{r4, r5, r6, lr}
   13dc0:	e1a05000 	mov	r5, r0
   13dc4:	eb0002bf 	bl	148c8 <CFATCache::Open(CDevice*)>
   13dc8:	e3500000 	cmp	r0, #0, 0
   13dcc:	08bd8070 	popeq	{r4, r5, r6, pc}
   13dd0:	e2850018 	add	r0, r5, #24, 0
   13dd4:	eb0004c4 	bl	150ec <CFATInfo::Initialize()>
   13dd8:	e2504000 	subs	r4, r0, #0, 0
   13ddc:	0a000001 	beq	13de8 <CFATFileSystem::Mount(CDevice*)+0x2c>
   13de0:	e3a00001 	mov	r0, #1, 0
   13de4:	e8bd8070 	pop	{r4, r5, r6, pc}
   13de8:	e1a00005 	mov	r0, r5
   13dec:	eb0003d1 	bl	14d38 <CFATCache::Close()>
   13df0:	e1a00004 	mov	r0, r4
   13df4:	e8bd8070 	pop	{r4, r5, r6, pc}

00013df8 <CFATFileSystem::UnMount()>:
   13df8:	e92d4010 	push	{r4, lr}
   13dfc:	e1a04000 	mov	r4, r0
   13e00:	e2800018 	add	r0, r0, #24, 0
   13e04:	eb000650 	bl	1574c <CFATInfo::UpdateFSInfo()>
   13e08:	e1a00004 	mov	r0, r4
   13e0c:	e8bd4010 	pop	{r4, lr}
   13e10:	ea0003c8 	b	14d38 <CFATCache::Close()>

00013e14 <CFATFileSystem::Synchronize()>:
   13e14:	e92d4010 	push	{r4, lr}
   13e18:	e1a04000 	mov	r4, r0
   13e1c:	e2800018 	add	r0, r0, #24, 0
   13e20:	eb000649 	bl	1574c <CFATInfo::UpdateFSInfo()>
   13e24:	e1a00004 	mov	r0, r4
   13e28:	e8bd4010 	pop	{r4, lr}
   13e2c:	ea00037b 	b	14c20 <CFATCache::Flush()>

00013e30 <CFATFileSystem::RootFindFirst(TDirentry*, TFindCurrentEntry*)>:
   13e30:	e92d4010 	push	{r4, lr}
   13e34:	e2800070 	add	r0, r0, #112, 0	; 0x70
   13e38:	eb000c29 	bl	16ee4 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)>
   13e3c:	e8bd8010 	pop	{r4, pc}

00013e40 <CFATFileSystem::RootFindNext(TDirentry*, TFindCurrentEntry*)>:
   13e40:	e92d4010 	push	{r4, lr}
   13e44:	e2800070 	add	r0, r0, #112, 0	; 0x70
   13e48:	eb000b59 	bl	16bb4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)>
   13e4c:	e8bd8010 	pop	{r4, pc}

00013e50 <CFATFileSystem::FileOpen(char const*)>:
   13e50:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e54:	e1a07000 	mov	r7, r0
   13e58:	e5900764 	ldr	r0, [r0, #1892]	; 0x764
   13e5c:	e1a09001 	mov	r9, r1
   13e60:	e3500000 	cmp	r0, #0, 0
   13e64:	1a000041 	bne	13f70 <CFATFileSystem::FileOpen(char const*)+0x120>
   13e68:	e1a03007 	mov	r3, r7
   13e6c:	e3a04001 	mov	r4, #1, 0
   13e70:	ea000003 	b	13e84 <CFATFileSystem::FileOpen(char const*)+0x34>
   13e74:	e2844001 	add	r4, r4, #1, 0
   13e78:	e3540029 	cmp	r4, #41, 0	; 0x29
   13e7c:	e283302c 	add	r3, r3, #44, 0	; 0x2c
   13e80:	0a000032 	beq	13f50 <CFATFileSystem::FileOpen(char const*)+0x100>
   13e84:	e5935084 	ldr	r5, [r3, #132]	; 0x84
   13e88:	e2446001 	sub	r6, r4, #1, 0
   13e8c:	e3550000 	cmp	r5, #0, 0
   13e90:	1afffff7 	bne	13e74 <CFATFileSystem::FileOpen(char const*)+0x24>
   13e94:	e3590000 	cmp	r9, #0, 0
   13e98:	0a000039 	beq	13f84 <CFATFileSystem::FileOpen(char const*)+0x134>
   13e9c:	e287b070 	add	fp, r7, #112, 0	; 0x70
   13ea0:	e1a0000b 	mov	r0, fp
   13ea4:	e1a01009 	mov	r1, r9
   13ea8:	eb000986 	bl	164c8 <CFATDirectory::GetEntry(char const*)>
   13eac:	e2508000 	subs	r8, r0, #0, 0
   13eb0:	0a000026 	beq	13f50 <CFATFileSystem::FileOpen(char const*)+0x100>
   13eb4:	e3a03001 	mov	r3, #1, 0
   13eb8:	e0860106 	add	r0, r6, r6, lsl #2
   13ebc:	e0866310 	add	r6, r6, r0, lsl r3
   13ec0:	e087a106 	add	sl, r7, r6, lsl #2
   13ec4:	e1a01009 	mov	r1, r9
   13ec8:	e3a0200c 	mov	r2, #12, 0
   13ecc:	e58a3084 	str	r3, [sl, #132]	; 0x84
   13ed0:	e28a0088 	add	r0, sl, #136, 0	; 0x88
   13ed4:	ebffefc9 	bl	fe00 <strncpy>
   13ed8:	e5ca5094 	strb	r5, [sl, #148]	; 0x94
   13edc:	e5d8201d 	ldrb	r2, [r8, #29]
   13ee0:	e5d8301c 	ldrb	r3, [r8, #28]
   13ee4:	e5d8101e 	ldrb	r1, [r8, #30]
   13ee8:	e1833402 	orr	r3, r3, r2, lsl #8
   13eec:	e5d8201f 	ldrb	r2, [r8, #31]
   13ef0:	e1833801 	orr	r3, r3, r1, lsl #16
   13ef4:	e1833c02 	orr	r3, r3, r2, lsl #24
   13ef8:	e58a3098 	str	r3, [sl, #152]	; 0x98
   13efc:	e58a509c 	str	r5, [sl, #156]	; 0x9c
   13f00:	e5d80015 	ldrb	r0, [r8, #21]
   13f04:	e5d8101b 	ldrb	r1, [r8, #27]
   13f08:	e5d82014 	ldrb	r2, [r8, #20]
   13f0c:	e5d8301a 	ldrb	r3, [r8, #26]
   13f10:	e1822400 	orr	r2, r2, r0, lsl #8
   13f14:	e1833401 	orr	r3, r3, r1, lsl #8
   13f18:	e1833802 	orr	r3, r3, r2, lsl #16
   13f1c:	e58a30a0 	str	r3, [sl, #160]	; 0xa0
   13f20:	e1a0000b 	mov	r0, fp
   13f24:	e1a01005 	mov	r1, r5
   13f28:	e58a50a4 	str	r5, [sl, #164]	; 0xa4
   13f2c:	e58a50a8 	str	r5, [sl, #168]	; 0xa8
   13f30:	e5ca50ac 	strb	r5, [sl, #172]	; 0xac
   13f34:	eb0008ba 	bl	16224 <CFATDirectory::FreeEntry(bool)>
   13f38:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   13f3c:	e1a0600a 	mov	r6, sl
   13f40:	e3530000 	cmp	r3, #0, 0
   13f44:	1a00000b 	bne	13f78 <CFATFileSystem::FileOpen(char const*)+0x128>
   13f48:	e1a00004 	mov	r0, r4
   13f4c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f50:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   13f54:	e3530000 	cmp	r3, #0, 0
   13f58:	03a04000 	moveq	r4, #0, 0
   13f5c:	0afffff9 	beq	13f48 <CFATFileSystem::FileOpen(char const*)+0xf8>
   13f60:	e3a04000 	mov	r4, #0, 0
   13f64:	ebfff555 	bl	114c0 <LeaveCritical>
   13f68:	e1a00004 	mov	r0, r4
   13f6c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f70:	ebfff528 	bl	11418 <EnterCritical>
   13f74:	eaffffbb 	b	13e68 <CFATFileSystem::FileOpen(char const*)+0x18>
   13f78:	ebfff550 	bl	114c0 <LeaveCritical>
   13f7c:	e1a00004 	mov	r0, r4
   13f80:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f84:	e3a02062 	mov	r2, #98, 0	; 0x62
   13f88:	e59f1004 	ldr	r1, [pc, #4]	; 13f94 <CFATFileSystem::FileOpen(char const*)+0x144>
   13f8c:	e59f0004 	ldr	r0, [pc, #4]	; 13f98 <CFATFileSystem::FileOpen(char const*)+0x148>
   13f90:	ebfff6dc 	bl	11b08 <assertion_failed>
   13f94:	0001ba1c 	.word	0x0001ba1c
   13f98:	0001ba28 	.word	0x0001ba28

00013f9c <CFATFileSystem::FileClose(unsigned int)>:
   13f9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13fa0:	e2414001 	sub	r4, r1, #1, 0
   13fa4:	e3540027 	cmp	r4, #39, 0	; 0x27
   13fa8:	e24dd00c 	sub	sp, sp, #12, 0
   13fac:	8a000038 	bhi	14094 <CFATFileSystem::FileClose(unsigned int)+0xf8>
   13fb0:	e1a05000 	mov	r5, r0
   13fb4:	e5900764 	ldr	r0, [r0, #1892]	; 0x764
   13fb8:	e3500000 	cmp	r0, #0, 0
   13fbc:	1a000025 	bne	14058 <CFATFileSystem::FileClose(unsigned int)+0xbc>
   13fc0:	e0843104 	add	r3, r4, r4, lsl #2
   13fc4:	e0843083 	add	r3, r4, r3, lsl #1
   13fc8:	e0853103 	add	r3, r5, r3, lsl #2
   13fcc:	e5930084 	ldr	r0, [r3, #132]	; 0x84
   13fd0:	e1a06104 	lsl	r6, r4, #2
   13fd4:	e3500000 	cmp	r0, #0, 0
   13fd8:	0a00002d 	beq	14094 <CFATFileSystem::FileClose(unsigned int)+0xf8>
   13fdc:	e3500001 	cmp	r0, #1, 0
   13fe0:	8a00002e 	bhi	140a0 <CFATFileSystem::FileClose(unsigned int)+0x104>
   13fe4:	e0867004 	add	r7, r6, r4
   13fe8:	e0847087 	add	r7, r4, r7, lsl #1
   13fec:	e0857107 	add	r7, r5, r7, lsl #2
   13ff0:	e59710a8 	ldr	r1, [r7, #168]	; 0xa8
   13ff4:	e3510000 	cmp	r1, #0, 0
   13ff8:	0a000004 	beq	14010 <CFATFileSystem::FileClose(unsigned int)+0x74>
   13ffc:	e3a02000 	mov	r2, #0, 0
   14000:	e1a00005 	mov	r0, r5
   14004:	eb000278 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   14008:	e3a03000 	mov	r3, #0, 0
   1400c:	e58730a8 	str	r3, [r7, #168]	; 0xa8
   14010:	e0861004 	add	r1, r6, r4
   14014:	e0841081 	add	r1, r4, r1, lsl #1
   14018:	e0858101 	add	r8, r5, r1, lsl #2
   1401c:	e5d830ac 	ldrb	r3, [r8, #172]	; 0xac
   14020:	e1a01101 	lsl	r1, r1, #2
   14024:	e3530000 	cmp	r3, #0, 0
   14028:	1a000026 	bne	140c8 <CFATFileSystem::FileClose(unsigned int)+0x12c>
   1402c:	e3a03000 	mov	r3, #0, 0
   14030:	e0866004 	add	r6, r6, r4
   14034:	e0844086 	add	r4, r4, r6, lsl #1
   14038:	e0854104 	add	r4, r5, r4, lsl #2
   1403c:	e5843084 	str	r3, [r4, #132]	; 0x84
   14040:	e5953764 	ldr	r3, [r5, #1892]	; 0x764
   14044:	e3530000 	cmp	r3, #0, 0
   14048:	1a00001c 	bne	140c0 <CFATFileSystem::FileClose(unsigned int)+0x124>
   1404c:	e3a00001 	mov	r0, #1, 0
   14050:	e28dd00c 	add	sp, sp, #12, 0
   14054:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14058:	ebfff4ee 	bl	11418 <EnterCritical>
   1405c:	e0843104 	add	r3, r4, r4, lsl #2
   14060:	e0843083 	add	r3, r4, r3, lsl #1
   14064:	e0853103 	add	r3, r5, r3, lsl #2
   14068:	e5930084 	ldr	r0, [r3, #132]	; 0x84
   1406c:	e1a06104 	lsl	r6, r4, #2
   14070:	e3500000 	cmp	r0, #0, 0
   14074:	1affffd8 	bne	13fdc <CFATFileSystem::FileClose(unsigned int)+0x40>
   14078:	e5953764 	ldr	r3, [r5, #1892]	; 0x764
   1407c:	e58d0004 	str	r0, [sp, #4]
   14080:	e3530000 	cmp	r3, #0, 0
   14084:	0a000002 	beq	14094 <CFATFileSystem::FileClose(unsigned int)+0xf8>
   14088:	ebfff50c 	bl	114c0 <LeaveCritical>
   1408c:	e59d0004 	ldr	r0, [sp, #4]
   14090:	eaffffee 	b	14050 <CFATFileSystem::FileClose(unsigned int)+0xb4>
   14094:	e3a00000 	mov	r0, #0, 0
   14098:	e28dd00c 	add	sp, sp, #12, 0
   1409c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   140a0:	e0866004 	add	r6, r6, r4
   140a4:	e0844086 	add	r4, r4, r6, lsl #1
   140a8:	e0854104 	add	r4, r5, r4, lsl #2
   140ac:	e2400001 	sub	r0, r0, #1, 0
   140b0:	e5840084 	str	r0, [r4, #132]	; 0x84
   140b4:	e5953764 	ldr	r3, [r5, #1892]	; 0x764
   140b8:	e3530000 	cmp	r3, #0, 0
   140bc:	0affffe2 	beq	1404c <CFATFileSystem::FileClose(unsigned int)+0xb0>
   140c0:	ebfff4fe 	bl	114c0 <LeaveCritical>
   140c4:	eaffffe0 	b	1404c <CFATFileSystem::FileClose(unsigned int)+0xb0>
   140c8:	e2811088 	add	r1, r1, #136, 0	; 0x88
   140cc:	e2859070 	add	r9, r5, #112, 0	; 0x70
   140d0:	e1a00009 	mov	r0, r9
   140d4:	e0851001 	add	r1, r5, r1
   140d8:	eb0008fa 	bl	164c8 <CFATDirectory::GetEntry(char const*)>
   140dc:	e2507000 	subs	r7, r0, #0, 0
   140e0:	0a000020 	beq	14168 <CFATFileSystem::FileClose(unsigned int)+0x1cc>
   140e4:	e5d7300b 	ldrb	r3, [r7, #11]
   140e8:	e3833020 	orr	r3, r3, #32, 0
   140ec:	e5c7300b 	strb	r3, [r7, #11]
   140f0:	e1d83ab6 	ldrh	r3, [r8, #166]	; 0xa6
   140f4:	e1a02423 	lsr	r2, r3, #8
   140f8:	e5c72015 	strb	r2, [r7, #21]
   140fc:	e5c73014 	strb	r3, [r7, #20]
   14100:	e1d83ab4 	ldrh	r3, [r8, #164]	; 0xa4
   14104:	e1a02423 	lsr	r2, r3, #8
   14108:	e5c7201b 	strb	r2, [r7, #27]
   1410c:	e5c7301a 	strb	r3, [r7, #26]
   14110:	e5983098 	ldr	r3, [r8, #152]	; 0x98
   14114:	e1a01423 	lsr	r1, r3, #8
   14118:	e1a02823 	lsr	r2, r3, #16
   1411c:	e5c7301c 	strb	r3, [r7, #28]
   14120:	e1a03c23 	lsr	r3, r3, #24
   14124:	e5c7101d 	strb	r1, [r7, #29]
   14128:	e5c7201e 	strb	r2, [r7, #30]
   1412c:	e5c7301f 	strb	r3, [r7, #31]
   14130:	ebffee29 	bl	f9dc <CTimer::Get()>
   14134:	ebffeb7a 	bl	ef24 <CTimer::GetTime() const>
   14138:	eb00085f 	bl	162bc <CFATDirectory::Time2FAT(unsigned int)>
   1413c:	e1a02820 	lsr	r2, r0, #16
   14140:	e6ff3070 	uxth	r3, r0
   14144:	e1a01422 	lsr	r1, r2, #8
   14148:	e1a03423 	lsr	r3, r3, #8
   1414c:	e5c70016 	strb	r0, [r7, #22]
   14150:	e5c71019 	strb	r1, [r7, #25]
   14154:	e1a00009 	mov	r0, r9
   14158:	e3a01001 	mov	r1, #1, 0
   1415c:	e5c73017 	strb	r3, [r7, #23]
   14160:	e5c72018 	strb	r2, [r7, #24]
   14164:	eb00082e 	bl	16224 <CFATDirectory::FreeEntry(bool)>
   14168:	e2850018 	add	r0, r5, #24, 0
   1416c:	eb000576 	bl	1574c <CFATInfo::UpdateFSInfo()>
   14170:	e1a00005 	mov	r0, r5
   14174:	eb0002a9 	bl	14c20 <CFATCache::Flush()>
   14178:	eaffffab 	b	1402c <CFATFileSystem::FileClose(unsigned int)+0x90>

0001417c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)>:
   1417c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14180:	ed2d8b02 	vpush	{d8}
   14184:	e2414001 	sub	r4, r1, #1, 0
   14188:	e3540027 	cmp	r4, #39, 0	; 0x27
   1418c:	e24dd00c 	sub	sp, sp, #12, 0
   14190:	8a000058 	bhi	142f8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x17c>
   14194:	e1a08000 	mov	r8, r0
   14198:	e5900764 	ldr	r0, [r0, #1892]	; 0x764
   1419c:	e1a07002 	mov	r7, r2
   141a0:	e3500000 	cmp	r0, #0, 0
   141a4:	e1a06003 	mov	r6, r3
   141a8:	1a000041 	bne	142b4 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x138>
   141ac:	e0843104 	add	r3, r4, r4, lsl #2
   141b0:	e0843083 	add	r3, r4, r3, lsl #1
   141b4:	e0883103 	add	r3, r8, r3, lsl #2
   141b8:	e5932084 	ldr	r2, [r3, #132]	; 0x84
   141bc:	e1a05104 	lsl	r5, r4, #2
   141c0:	e3520000 	cmp	r2, #0, 0
   141c4:	0a00004b 	beq	142f8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x17c>
   141c8:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   141cc:	e3560000 	cmp	r6, #0, 0
   141d0:	03833001 	orreq	r3, r3, #1, 0
   141d4:	e3530000 	cmp	r3, #0, 0
   141d8:	1a000046 	bne	142f8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x17c>
   141dc:	e2883018 	add	r3, r8, #24, 0
   141e0:	e3a0b000 	mov	fp, #0, 0
   141e4:	ee083a10 	vmov	s16, r3
   141e8:	e0855004 	add	r5, r5, r4
   141ec:	e0845085 	add	r5, r4, r5, lsl #1
   141f0:	e59f91e0 	ldr	r9, [pc, #480]	; 143d8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x25c>
   141f4:	e0885105 	add	r5, r8, r5, lsl #2
   141f8:	e5954098 	ldr	r4, [r5, #152]	; 0x98
   141fc:	e595a09c 	ldr	sl, [r5, #156]	; 0x9c
   14200:	e154000a 	cmp	r4, sl
   14204:	3a000056 	bcc	14364 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1e8>
   14208:	e054400a 	subs	r4, r4, sl
   1420c:	0a000023 	beq	142a0 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x124>
   14210:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   14214:	e3520000 	cmp	r2, #0, 0
   14218:	0a00003b 	beq	1430c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x190>
   1421c:	e3540c02 	cmp	r4, #512	; 0x200
   14220:	23a04c02 	movcs	r4, #512	; 0x200
   14224:	e1540006 	cmp	r4, r6
   14228:	21a04006 	movcs	r4, r6
   1422c:	e00aa009 	and	sl, sl, r9
   14230:	e26a2c02 	rsb	r2, sl, #512	; 0x200
   14234:	e1520004 	cmp	r2, r4
   14238:	31a04002 	movcc	r4, r2
   1423c:	e3570000 	cmp	r7, #0, 0
   14240:	0a00004b 	beq	14374 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1f8>
   14244:	e59510a8 	ldr	r1, [r5, #168]	; 0xa8
   14248:	e28aa018 	add	sl, sl, #24, 0
   1424c:	e081100a 	add	r1, r1, sl
   14250:	e1a00007 	mov	r0, r7
   14254:	e1a02004 	mov	r2, r4
   14258:	ebfff034 	bl	10330 <memcpy>
   1425c:	e595109c 	ldr	r1, [r5, #156]	; 0x9c
   14260:	e0466004 	sub	r6, r6, r4
   14264:	e0841001 	add	r1, r4, r1
   14268:	e011a009 	ands	sl, r1, r9
   1426c:	e08bb004 	add	fp, fp, r4
   14270:	e0877004 	add	r7, r7, r4
   14274:	e585109c 	str	r1, [r5, #156]	; 0x9c
   14278:	1a000006 	bne	14298 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x11c>
   1427c:	e59510a8 	ldr	r1, [r5, #168]	; 0xa8
   14280:	e3510000 	cmp	r1, #0, 0
   14284:	0a00003e 	beq	14384 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x208>
   14288:	e1a0200a 	mov	r2, sl
   1428c:	e1a00008 	mov	r0, r8
   14290:	eb0001d5 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   14294:	e585a0a8 	str	sl, [r5, #168]	; 0xa8
   14298:	e3560000 	cmp	r6, #0, 0
   1429c:	1affffd5 	bne	141f8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x7c>
   142a0:	e5982764 	ldr	r2, [r8, #1892]	; 0x764
   142a4:	e3520000 	cmp	r2, #0, 0
   142a8:	0a000013 	beq	142fc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x180>
   142ac:	ebfff483 	bl	114c0 <LeaveCritical>
   142b0:	ea000011 	b	142fc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x180>
   142b4:	ebfff457 	bl	11418 <EnterCritical>
   142b8:	e0843104 	add	r3, r4, r4, lsl #2
   142bc:	e0843083 	add	r3, r4, r3, lsl #1
   142c0:	e0883103 	add	r3, r8, r3, lsl #2
   142c4:	e5932084 	ldr	r2, [r3, #132]	; 0x84
   142c8:	e1a05104 	lsl	r5, r4, #2
   142cc:	e3520000 	cmp	r2, #0, 0
   142d0:	0a000004 	beq	142e8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x16c>
   142d4:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   142d8:	e3560000 	cmp	r6, #0, 0
   142dc:	03833001 	orreq	r3, r3, #1, 0
   142e0:	e3530000 	cmp	r3, #0, 0
   142e4:	0affffbc 	beq	141dc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x60>
   142e8:	e5983764 	ldr	r3, [r8, #1892]	; 0x764
   142ec:	e3530000 	cmp	r3, #0, 0
   142f0:	0a000000 	beq	142f8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x17c>
   142f4:	ebfff471 	bl	114c0 <LeaveCritical>
   142f8:	e3e0b000 	mvn	fp, #0, 0
   142fc:	e1a0000b 	mov	r0, fp
   14300:	e28dd00c 	add	sp, sp, #12, 0
   14304:	ecbd8b02 	vpop	{d8}
   14308:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430c:	ee180a10 	vmov	r0, s16
   14310:	eb00049f 	bl	15594 <CFATInfo::GetSectorsPerCluster() const>
   14314:	e1a01000 	mov	r1, r0
   14318:	e1a004aa 	lsr	r0, sl, #9
   1431c:	eb0011f5 	bl	18af8 <__aeabi_uidivmod>
   14320:	e251a000 	subs	sl, r1, #0, 0
   14324:	1a000002 	bne	14334 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1b8>
   14328:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
   1432c:	e3520000 	cmp	r2, #0, 0
   14330:	1a000017 	bne	14394 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x218>
   14334:	e59510a0 	ldr	r1, [r5, #160]	; 0xa0
   14338:	ee180a10 	vmov	r0, s16
   1433c:	eb0004f2 	bl	1570c <CFATInfo::GetFirstSector(unsigned int) const>
   14340:	e3a02000 	mov	r2, #0, 0
   14344:	e080100a 	add	r1, r0, sl
   14348:	e1a00008 	mov	r0, r8
   1434c:	eb00028b 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   14350:	e3500000 	cmp	r0, #0, 0
   14354:	e58500a8 	str	r0, [r5, #168]	; 0xa8
   14358:	0a00001a 	beq	143c8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x24c>
   1435c:	e595a09c 	ldr	sl, [r5, #156]	; 0x9c
   14360:	eaffffad 	b	1421c <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0xa0>
   14364:	e3a02f43 	mov	r2, #268	; 0x10c
   14368:	e59f106c 	ldr	r1, [pc, #108]	; 143dc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x260>
   1436c:	e59f006c 	ldr	r0, [pc, #108]	; 143e0 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x264>
   14370:	ebfff5e4 	bl	11b08 <assertion_failed>
   14374:	e3a02f4f 	mov	r2, #316	; 0x13c
   14378:	e59f105c 	ldr	r1, [pc, #92]	; 143dc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x260>
   1437c:	e59f0060 	ldr	r0, [pc, #96]	; 143e4 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x268>
   14380:	ebfff5e0 	bl	11b08 <assertion_failed>
   14384:	e59f205c 	ldr	r2, [pc, #92]	; 143e8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x26c>
   14388:	e59f104c 	ldr	r1, [pc, #76]	; 143dc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x260>
   1438c:	e59f0058 	ldr	r0, [pc, #88]	; 143ec <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x270>
   14390:	ebfff5dc 	bl	11b08 <assertion_failed>
   14394:	e2882064 	add	r2, r8, #100, 0	; 0x64
   14398:	e1a00002 	mov	r0, r2
   1439c:	e59510a0 	ldr	r1, [r5, #160]	; 0xa0
   143a0:	e58d2004 	str	r2, [sp, #4]
   143a4:	eb00063a 	bl	15c94 <CFAT::GetClusterEntry(unsigned int)>
   143a8:	e1a01000 	mov	r1, r0
   143ac:	e59d2004 	ldr	r2, [sp, #4]
   143b0:	e58510a0 	str	r1, [r5, #160]	; 0xa0
   143b4:	e1a00002 	mov	r0, r2
   143b8:	eb0005a4 	bl	15a50 <CFAT::IsEOC(unsigned int) const>
   143bc:	e3500000 	cmp	r0, #0, 0
   143c0:	0affffdb 	beq	14334 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x1b8>
   143c4:	eaffffc7 	b	142e8 <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x16c>
   143c8:	e3a02f4a 	mov	r2, #296	; 0x128
   143cc:	e59f1008 	ldr	r1, [pc, #8]	; 143dc <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x260>
   143d0:	e59f0014 	ldr	r0, [pc, #20]	; 143ec <CFATFileSystem::FileRead(unsigned int, void*, unsigned int)+0x270>
   143d4:	ebfff5cb 	bl	11b08 <assertion_failed>
   143d8:	000001ff 	.word	0x000001ff
   143dc:	0001ba1c 	.word	0x0001ba1c
   143e0:	0001ba34 	.word	0x0001ba34
   143e4:	0001ba68 	.word	0x0001ba68
   143e8:	00000149 	.word	0x00000149
   143ec:	0001ba54 	.word	0x0001ba54

000143f0 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)>:
   143f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143f4:	e2415001 	sub	r5, r1, #1, 0
   143f8:	e3550027 	cmp	r5, #39, 0	; 0x27
   143fc:	e24dd00c 	sub	sp, sp, #12, 0
   14400:	8a000064 	bhi	14598 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1a8>
   14404:	e1a07000 	mov	r7, r0
   14408:	e5900764 	ldr	r0, [r0, #1892]	; 0x764
   1440c:	e1a08002 	mov	r8, r2
   14410:	e3500000 	cmp	r0, #0, 0
   14414:	e1a06003 	mov	r6, r3
   14418:	1a00004c 	bne	14550 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x160>
   1441c:	e0853105 	add	r3, r5, r5, lsl #2
   14420:	e0853083 	add	r3, r5, r3, lsl #1
   14424:	e0873103 	add	r3, r7, r3, lsl #2
   14428:	e5932084 	ldr	r2, [r3, #132]	; 0x84
   1442c:	e1a04105 	lsl	r4, r5, #2
   14430:	e3520000 	cmp	r2, #0, 0
   14434:	0a000057 	beq	14598 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1a8>
   14438:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   1443c:	e2233001 	eor	r3, r3, #1, 0
   14440:	e3560000 	cmp	r6, #0, 0
   14444:	03833001 	orreq	r3, r3, #1, 0
   14448:	e3530000 	cmp	r3, #0, 0
   1444c:	1a000051 	bne	14598 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1a8>
   14450:	e3a0b000 	mov	fp, #0, 0
   14454:	e0844005 	add	r4, r4, r5
   14458:	e0854084 	add	r4, r5, r4, lsl #1
   1445c:	e59f9250 	ldr	r9, [pc, #592]	; 146b4 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2c4>
   14460:	e0874104 	add	r4, r7, r4, lsl #2
   14464:	e287a018 	add	sl, r7, #24, 0
   14468:	e5942098 	ldr	r2, [r4, #152]	; 0x98
   1446c:	e1f05002 	mvns	r5, r2
   14470:	0a000031 	beq	1453c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x14c>
   14474:	e59420a8 	ldr	r2, [r4, #168]	; 0xa8
   14478:	e3520000 	cmp	r2, #0, 0
   1447c:	0a000049 	beq	145a8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1b8>
   14480:	e3550c02 	cmp	r5, #512	; 0x200
   14484:	31a02005 	movcc	r2, r5
   14488:	23a02c02 	movcs	r2, #512	; 0x200
   1448c:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   14490:	e0033009 	and	r3, r3, r9
   14494:	e2635c02 	rsb	r5, r3, #512	; 0x200
   14498:	e1550002 	cmp	r5, r2
   1449c:	31a02005 	movcc	r2, r5
   144a0:	e1520006 	cmp	r2, r6
   144a4:	31a05002 	movcc	r5, r2
   144a8:	21a05006 	movcs	r5, r6
   144ac:	e3580000 	cmp	r8, #0, 0
   144b0:	0a000058 	beq	14618 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x228>
   144b4:	e59400a8 	ldr	r0, [r4, #168]	; 0xa8
   144b8:	e2833018 	add	r3, r3, #24, 0
   144bc:	e1a01008 	mov	r1, r8
   144c0:	e0800003 	add	r0, r0, r3
   144c4:	e1a02005 	mov	r2, r5
   144c8:	ebffef98 	bl	10330 <memcpy>
   144cc:	e1a00007 	mov	r0, r7
   144d0:	e59410a8 	ldr	r1, [r4, #168]	; 0xa8
   144d4:	eb00017f 	bl	14ad8 <CFATCache::MarkDirty(TFATBuffer*)>
   144d8:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   144dc:	e0888005 	add	r8, r8, r5
   144e0:	e0853003 	add	r3, r5, r3
   144e4:	e3730001 	cmn	r3, #1, 0
   144e8:	e584309c 	str	r3, [r4, #156]	; 0x9c
   144ec:	0a00004d 	beq	14628 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x238>
   144f0:	e1c429d8 	ldrd	r2, [r4, #152]	; 0x98
   144f4:	e0852002 	add	r2, r5, r2
   144f8:	e1520003 	cmp	r2, r3
   144fc:	e5842098 	str	r2, [r4, #152]	; 0x98
   14500:	1a000059 	bne	1466c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x27c>
   14504:	e0122009 	ands	r2, r2, r9
   14508:	e0466005 	sub	r6, r6, r5
   1450c:	e08bb005 	add	fp, fp, r5
   14510:	1a000007 	bne	14534 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x144>
   14514:	e59410a8 	ldr	r1, [r4, #168]	; 0xa8
   14518:	e3510000 	cmp	r1, #0, 0
   1451c:	0a000056 	beq	1467c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x28c>
   14520:	e1a00007 	mov	r0, r7
   14524:	e58d2000 	str	r2, [sp]
   14528:	eb00012f 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   1452c:	e59d2000 	ldr	r2, [sp]
   14530:	e58420a8 	str	r2, [r4, #168]	; 0xa8
   14534:	e3560000 	cmp	r6, #0, 0
   14538:	1affffca 	bne	14468 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x78>
   1453c:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   14540:	e3530000 	cmp	r3, #0, 0
   14544:	0a000014 	beq	1459c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1ac>
   14548:	ebfff3dc 	bl	114c0 <LeaveCritical>
   1454c:	ea000012 	b	1459c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1ac>
   14550:	ebfff3b0 	bl	11418 <EnterCritical>
   14554:	e0853105 	add	r3, r5, r5, lsl #2
   14558:	e0853083 	add	r3, r5, r3, lsl #1
   1455c:	e0873103 	add	r3, r7, r3, lsl #2
   14560:	e5932084 	ldr	r2, [r3, #132]	; 0x84
   14564:	e1a04105 	lsl	r4, r5, #2
   14568:	e3520000 	cmp	r2, #0, 0
   1456c:	0a000005 	beq	14588 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x198>
   14570:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   14574:	e2233001 	eor	r3, r3, #1, 0
   14578:	e3560000 	cmp	r6, #0, 0
   1457c:	03833001 	orreq	r3, r3, #1, 0
   14580:	e3530000 	cmp	r3, #0, 0
   14584:	0affffb1 	beq	14450 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x60>
   14588:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   1458c:	e3530000 	cmp	r3, #0, 0
   14590:	0a000000 	beq	14598 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1a8>
   14594:	ebfff3c9 	bl	114c0 <LeaveCritical>
   14598:	e3e0b000 	mvn	fp, #0, 0
   1459c:	e1a0000b 	mov	r0, fp
   145a0:	e28dd00c 	add	sp, sp, #12, 0
   145a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
   145ac:	e1a0000a 	mov	r0, sl
   145b0:	e1a034a3 	lsr	r3, r3, #9
   145b4:	e58d3000 	str	r3, [sp]
   145b8:	eb0003f5 	bl	15594 <CFATInfo::GetSectorsPerCluster() const>
   145bc:	e59d3000 	ldr	r3, [sp]
   145c0:	e1a01000 	mov	r1, r0
   145c4:	e1a00003 	mov	r0, r3
   145c8:	eb00114a 	bl	18af8 <__aeabi_uidivmod>
   145cc:	e2513000 	subs	r3, r1, #0, 0
   145d0:	e58d3000 	str	r3, [sp]
   145d4:	0a000017 	beq	14638 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x248>
   145d8:	e59420a0 	ldr	r2, [r4, #160]	; 0xa0
   145dc:	e1a01002 	mov	r1, r2
   145e0:	e1a0000a 	mov	r0, sl
   145e4:	eb000448 	bl	1570c <CFATInfo::GetFirstSector(unsigned int) const>
   145e8:	e59d3000 	ldr	r3, [sp]
   145ec:	e3a02001 	mov	r2, #1, 0
   145f0:	e0801003 	add	r1, r0, r3
   145f4:	e1a00007 	mov	r0, r7
   145f8:	eb0001e0 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   145fc:	e3500000 	cmp	r0, #0, 0
   14600:	e58400a8 	str	r0, [r4, #168]	; 0xa8
   14604:	1affff9d 	bne	14480 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x90>
   14608:	e3a02f65 	mov	r2, #404	; 0x194
   1460c:	e59f10a4 	ldr	r1, [pc, #164]	; 146b8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2c8>
   14610:	e59f00a4 	ldr	r0, [pc, #164]	; 146bc <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2cc>
   14614:	ebfff53b 	bl	11b08 <assertion_failed>
   14618:	e3a02f6a 	mov	r2, #424	; 0x1a8
   1461c:	e59f1094 	ldr	r1, [pc, #148]	; 146b8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2c8>
   14620:	e59f0098 	ldr	r0, [pc, #152]	; 146c0 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2d0>
   14624:	ebfff537 	bl	11b08 <assertion_failed>
   14628:	e59f2094 	ldr	r2, [pc, #148]	; 146c4 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2d4>
   1462c:	e59f1084 	ldr	r1, [pc, #132]	; 146b8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2c8>
   14630:	e59f0090 	ldr	r0, [pc, #144]	; 146c8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2d8>
   14634:	ebfff533 	bl	11b08 <assertion_failed>
   14638:	e2871064 	add	r1, r7, #100, 0	; 0x64
   1463c:	e1a00001 	mov	r0, r1
   14640:	e58d1004 	str	r1, [sp, #4]
   14644:	eb000671 	bl	16010 <CFAT::AllocateCluster()>
   14648:	e2502000 	subs	r2, r0, #0, 0
   1464c:	e59d1004 	ldr	r1, [sp, #4]
   14650:	0a000013 	beq	146a4 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2b4>
   14654:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   14658:	e3500000 	cmp	r0, #0, 0
   1465c:	058420a4 	streq	r2, [r4, #164]	; 0xa4
   14660:	1a000009 	bne	1468c <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x29c>
   14664:	e58420a0 	str	r2, [r4, #160]	; 0xa0
   14668:	eaffffdb 	b	145dc <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1ec>
   1466c:	e59f2058 	ldr	r2, [pc, #88]	; 146cc <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2dc>
   14670:	e59f1040 	ldr	r1, [pc, #64]	; 146b8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2c8>
   14674:	e59f0054 	ldr	r0, [pc, #84]	; 146d0 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2e0>
   14678:	ebfff522 	bl	11b08 <assertion_failed>
   1467c:	e59f2050 	ldr	r2, [pc, #80]	; 146d4 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2e4>
   14680:	e59f1030 	ldr	r1, [pc, #48]	; 146b8 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2c8>
   14684:	e59f0030 	ldr	r0, [pc, #48]	; 146bc <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x2cc>
   14688:	ebfff51e 	bl	11b08 <assertion_failed>
   1468c:	e1a00001 	mov	r0, r1
   14690:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
   14694:	e58d2004 	str	r2, [sp, #4]
   14698:	eb0005f8 	bl	15e80 <CFAT::SetClusterEntry(unsigned int, unsigned int)>
   1469c:	e59d2004 	ldr	r2, [sp, #4]
   146a0:	eaffffef 	b	14664 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x274>
   146a4:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   146a8:	e3530000 	cmp	r3, #0, 0
   146ac:	0affffb9 	beq	14598 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1a8>
   146b0:	eaffffb7 	b	14594 <CFATFileSystem::FileWrite(unsigned int, void const*, unsigned int)+0x1a4>
   146b4:	000001ff 	.word	0x000001ff
   146b8:	0001ba1c 	.word	0x0001ba1c
   146bc:	0001ba54 	.word	0x0001ba54
   146c0:	0001ba68 	.word	0x0001ba68
   146c4:	000001b1 	.word	0x000001b1
   146c8:	0001ba78 	.word	0x0001ba78
   146cc:	000001b3 	.word	0x000001b3
   146d0:	0001ba9c 	.word	0x0001ba9c
   146d4:	000001ba 	.word	0x000001ba

000146d8 <CFATFileSystem::FileDelete(char const*)>:
   146d8:	e3510000 	cmp	r1, #0, 0
   146dc:	e92d4070 	push	{r4, r5, r6, lr}
   146e0:	0a000021 	beq	1476c <CFATFileSystem::FileDelete(char const*)+0x94>
   146e4:	e2806070 	add	r6, r0, #112, 0	; 0x70
   146e8:	e1a05000 	mov	r5, r0
   146ec:	e1a00006 	mov	r0, r6
   146f0:	eb000774 	bl	164c8 <CFATDirectory::GetEntry(char const*)>
   146f4:	e2504000 	subs	r4, r0, #0, 0
   146f8:	0a000014 	beq	14750 <CFATFileSystem::FileDelete(char const*)+0x78>
   146fc:	e5d4300b 	ldrb	r3, [r4, #11]
   14700:	e3130001 	tst	r3, #1, 0
   14704:	1a000013 	bne	14758 <CFATFileSystem::FileDelete(char const*)+0x80>
   14708:	e5d43014 	ldrb	r3, [r4, #20]
   1470c:	e5d40015 	ldrb	r0, [r4, #21]
   14710:	e5d4101a 	ldrb	r1, [r4, #26]
   14714:	e5d4201b 	ldrb	r2, [r4, #27]
   14718:	e1833400 	orr	r3, r3, r0, lsl #8
   1471c:	e1811402 	orr	r1, r1, r2, lsl #8
   14720:	e1911803 	orrs	r1, r1, r3, lsl #16
   14724:	1a000006 	bne	14744 <CFATFileSystem::FileDelete(char const*)+0x6c>
   14728:	e3e0301a 	mvn	r3, #26, 0
   1472c:	e1a00006 	mov	r0, r6
   14730:	e3a01001 	mov	r1, #1, 0
   14734:	e5c43000 	strb	r3, [r4]
   14738:	eb0006b9 	bl	16224 <CFATDirectory::FreeEntry(bool)>
   1473c:	e3a00001 	mov	r0, #1, 0
   14740:	e8bd8070 	pop	{r4, r5, r6, pc}
   14744:	e2850064 	add	r0, r5, #100, 0	; 0x64
   14748:	eb000613 	bl	15f9c <CFAT::FreeClusterChain(unsigned int)>
   1474c:	eafffff5 	b	14728 <CFATFileSystem::FileDelete(char const*)+0x50>
   14750:	e1a00004 	mov	r0, r4
   14754:	e8bd8070 	pop	{r4, r5, r6, pc}
   14758:	e1a00006 	mov	r0, r6
   1475c:	e3a01001 	mov	r1, #1, 0
   14760:	eb0006af 	bl	16224 <CFATDirectory::FreeEntry(bool)>
   14764:	e3e00000 	mvn	r0, #0, 0
   14768:	e8bd8070 	pop	{r4, r5, r6, pc}
   1476c:	e59f2008 	ldr	r2, [pc, #8]	; 1477c <CFATFileSystem::FileDelete(char const*)+0xa4>
   14770:	e59f1008 	ldr	r1, [pc, #8]	; 14780 <CFATFileSystem::FileDelete(char const*)+0xa8>
   14774:	e59f0008 	ldr	r0, [pc, #8]	; 14784 <CFATFileSystem::FileDelete(char const*)+0xac>
   14778:	ebfff4e2 	bl	11b08 <assertion_failed>
   1477c:	000001c7 	.word	0x000001c7
   14780:	0001ba1c 	.word	0x0001ba1c
   14784:	0001ba28 	.word	0x0001ba28

00014788 <CFATFileSystem::FileCreate(char const*)>:
   14788:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1478c:	e1a07000 	mov	r7, r0
   14790:	e5900764 	ldr	r0, [r0, #1892]	; 0x764
   14794:	e1a08001 	mov	r8, r1
   14798:	e3500000 	cmp	r0, #0, 0
   1479c:	1a000038 	bne	14884 <CFATFileSystem::FileCreate(char const*)+0xfc>
   147a0:	e1a03007 	mov	r3, r7
   147a4:	e3a04001 	mov	r4, #1, 0
   147a8:	ea000003 	b	147bc <CFATFileSystem::FileCreate(char const*)+0x34>
   147ac:	e2844001 	add	r4, r4, #1, 0
   147b0:	e3540029 	cmp	r4, #41, 0	; 0x29
   147b4:	e283302c 	add	r3, r3, #44, 0	; 0x2c
   147b8:	0a000029 	beq	14864 <CFATFileSystem::FileCreate(char const*)+0xdc>
   147bc:	e5935084 	ldr	r5, [r3, #132]	; 0x84
   147c0:	e2446001 	sub	r6, r4, #1, 0
   147c4:	e3550000 	cmp	r5, #0, 0
   147c8:	1afffff7 	bne	147ac <CFATFileSystem::FileCreate(char const*)+0x24>
   147cc:	e3580000 	cmp	r8, #0, 0
   147d0:	0a00002f 	beq	14894 <CFATFileSystem::FileCreate(char const*)+0x10c>
   147d4:	e1a01008 	mov	r1, r8
   147d8:	e1a00007 	mov	r0, r7
   147dc:	ebffffbd 	bl	146d8 <CFATFileSystem::FileDelete(char const*)>
   147e0:	e3500000 	cmp	r0, #0, 0
   147e4:	ba00001e 	blt	14864 <CFATFileSystem::FileCreate(char const*)+0xdc>
   147e8:	e2879070 	add	r9, r7, #112, 0	; 0x70
   147ec:	e1a00009 	mov	r0, r9
   147f0:	e1a01008 	mov	r1, r8
   147f4:	eb0007d1 	bl	16740 <CFATDirectory::CreateEntry(char const*)>
   147f8:	e3500000 	cmp	r0, #0, 0
   147fc:	0a000018 	beq	14864 <CFATFileSystem::FileCreate(char const*)+0xdc>
   14800:	e3a0a001 	mov	sl, #1, 0
   14804:	e1a00009 	mov	r0, r9
   14808:	e1a0100a 	mov	r1, sl
   1480c:	eb000684 	bl	16224 <CFATDirectory::FreeEntry(bool)>
   14810:	e0860106 	add	r0, r6, r6, lsl #2
   14814:	e0866a10 	add	r6, r6, r0, lsl sl
   14818:	e0879106 	add	r9, r7, r6, lsl #2
   1481c:	e1a01008 	mov	r1, r8
   14820:	e3a0200c 	mov	r2, #12, 0
   14824:	e2890088 	add	r0, r9, #136, 0	; 0x88
   14828:	e589a084 	str	sl, [r9, #132]	; 0x84
   1482c:	ebffed73 	bl	fe00 <strncpy>
   14830:	e5c95094 	strb	r5, [r9, #148]	; 0x94
   14834:	e5895098 	str	r5, [r9, #152]	; 0x98
   14838:	e589509c 	str	r5, [r9, #156]	; 0x9c
   1483c:	e58950a0 	str	r5, [r9, #160]	; 0xa0
   14840:	e58950a4 	str	r5, [r9, #164]	; 0xa4
   14844:	e58950a8 	str	r5, [r9, #168]	; 0xa8
   14848:	e5c9a0ac 	strb	sl, [r9, #172]	; 0xac
   1484c:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   14850:	e1a06009 	mov	r6, r9
   14854:	e3530000 	cmp	r3, #0, 0
   14858:	1a00000b 	bne	1488c <CFATFileSystem::FileCreate(char const*)+0x104>
   1485c:	e1a00004 	mov	r0, r4
   14860:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14864:	e5973764 	ldr	r3, [r7, #1892]	; 0x764
   14868:	e3530000 	cmp	r3, #0, 0
   1486c:	03a04000 	moveq	r4, #0, 0
   14870:	0afffff9 	beq	1485c <CFATFileSystem::FileCreate(char const*)+0xd4>
   14874:	e3a04000 	mov	r4, #0, 0
   14878:	ebfff310 	bl	114c0 <LeaveCritical>
   1487c:	e1a00004 	mov	r0, r4
   14880:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14884:	ebfff2e3 	bl	11418 <EnterCritical>
   14888:	eaffffc4 	b	147a0 <CFATFileSystem::FileCreate(char const*)+0x18>
   1488c:	ebfff30b 	bl	114c0 <LeaveCritical>
   14890:	eafffff1 	b	1485c <CFATFileSystem::FileCreate(char const*)+0xd4>
   14894:	e3a02092 	mov	r2, #146, 0	; 0x92
   14898:	e59f1004 	ldr	r1, [pc, #4]	; 148a4 <CFATFileSystem::FileCreate(char const*)+0x11c>
   1489c:	e59f0004 	ldr	r0, [pc, #4]	; 148a8 <CFATFileSystem::FileCreate(char const*)+0x120>
   148a0:	ebfff498 	bl	11b08 <assertion_failed>
   148a4:	0001ba1c 	.word	0x0001ba1c
   148a8:	0001ba28 	.word	0x0001ba28

000148ac <CFATCache::CFATCache()>:
   148ac:	e3a02000 	mov	r2, #0, 0
   148b0:	e5802000 	str	r2, [r0]
   148b4:	e5802004 	str	r2, [r0, #4]
   148b8:	e5802010 	str	r2, [r0, #16]
   148bc:	e5802014 	str	r2, [r0, #20]
   148c0:	e12fff1e 	bx	lr

000148c4 <CFATCache::~CFATCache()>:
   148c4:	e12fff1e 	bx	lr

000148c8 <CFATCache::Open(CDevice*)>:
   148c8:	e5903000 	ldr	r3, [r0]
   148cc:	e92d4070 	push	{r4, r5, r6, lr}
   148d0:	e3530000 	cmp	r3, #0, 0
   148d4:	1a000030 	bne	1499c <CFATCache::Open(CDevice*)+0xd4>
   148d8:	e3510000 	cmp	r1, #0, 0
   148dc:	e1a05000 	mov	r5, r0
   148e0:	e5801000 	str	r1, [r0]
   148e4:	0a000030 	beq	149ac <CFATCache::Open(CDevice*)+0xe4>
   148e8:	e5904004 	ldr	r4, [r0, #4]
   148ec:	e3540000 	cmp	r4, #0, 0
   148f0:	1a000031 	bne	149bc <CFATCache::Open(CDevice*)+0xf4>
   148f4:	e59f00d8 	ldr	r0, [pc, #216]	; 149d4 <CFATCache::Open(CDevice*)+0x10c>
   148f8:	eb0011a7 	bl	18f9c <malloc>
   148fc:	e3500000 	cmp	r0, #0, 0
   14900:	e5850004 	str	r0, [r5, #4]
   14904:	e1a03000 	mov	r3, r0
   14908:	08bd8070 	popeq	{r4, r5, r6, pc}
   1490c:	e1a0c004 	mov	ip, r4
   14910:	e3a02001 	mov	r2, #1, 0
   14914:	e3e0e000 	mvn	lr, #0, 0
   14918:	e59f00b8 	ldr	r0, [pc, #184]	; 149d8 <CFATCache::Open(CDevice*)+0x110>
   1491c:	e2833f86 	add	r3, r3, #536	; 0x218
   14920:	ea00000a 	b	14950 <CFATCache::Open(CDevice*)+0x88>
   14924:	e3520001 	cmp	r2, #1, 0
   14928:	e5033214 	str	r3, [r3, #-532]	; 0xfffffdec
   1492c:	0a000015 	beq	14988 <CFATCache::Open(CDevice*)+0xc0>
   14930:	e2431e43 	sub	r1, r3, #1072	; 0x430
   14934:	e3520064 	cmp	r2, #100, 0	; 0x64
   14938:	e503e20c 	str	lr, [r3, #-524]	; 0xfffffdf4
   1493c:	e503c208 	str	ip, [r3, #-520]	; 0xfffffdf8
   14940:	e5031210 	str	r1, [r3, #-528]	; 0xfffffdf0
   14944:	0a000020 	beq	149cc <CFATCache::Open(CDevice*)+0x104>
   14948:	e2822001 	add	r2, r2, #1, 0
   1494c:	e2833f86 	add	r3, r3, #536	; 0x218
   14950:	e3520064 	cmp	r2, #100, 0	; 0x64
   14954:	e5030218 	str	r0, [r3, #-536]	; 0xfffffde8
   14958:	e2431f86 	sub	r1, r3, #536	; 0x218
   1495c:	1afffff0 	bne	14924 <CFATCache::Open(CDevice*)+0x5c>
   14960:	e3a02000 	mov	r2, #0, 0
   14964:	e3e0c000 	mvn	ip, #0, 0
   14968:	e2430e43 	sub	r0, r3, #1072	; 0x430
   1496c:	e5030210 	str	r0, [r3, #-528]	; 0xfffffdf0
   14970:	e5032214 	str	r2, [r3, #-532]	; 0xfffffdec
   14974:	e5032208 	str	r2, [r3, #-520]	; 0xfffffdf8
   14978:	e503c20c 	str	ip, [r3, #-524]	; 0xfffffdf4
   1497c:	e3a00001 	mov	r0, #1, 0
   14980:	e585100c 	str	r1, [r5, #12]
   14984:	e8bd8070 	pop	{r4, r5, r6, pc}
   14988:	e503c210 	str	ip, [r3, #-528]	; 0xfffffdf0
   1498c:	e503e20c 	str	lr, [r3, #-524]	; 0xfffffdf4
   14990:	e503c208 	str	ip, [r3, #-520]	; 0xfffffdf8
   14994:	e5851008 	str	r1, [r5, #8]
   14998:	eaffffea 	b	14948 <CFATCache::Open(CDevice*)+0x80>
   1499c:	e3a02031 	mov	r2, #49, 0	; 0x31
   149a0:	e59f1034 	ldr	r1, [pc, #52]	; 149dc <CFATCache::Open(CDevice*)+0x114>
   149a4:	e59f0034 	ldr	r0, [pc, #52]	; 149e0 <CFATCache::Open(CDevice*)+0x118>
   149a8:	ebfff456 	bl	11b08 <assertion_failed>
   149ac:	e3a02033 	mov	r2, #51, 0	; 0x33
   149b0:	e59f1024 	ldr	r1, [pc, #36]	; 149dc <CFATCache::Open(CDevice*)+0x114>
   149b4:	e59f0028 	ldr	r0, [pc, #40]	; 149e4 <CFATCache::Open(CDevice*)+0x11c>
   149b8:	ebfff452 	bl	11b08 <assertion_failed>
   149bc:	e3a02035 	mov	r2, #53, 0	; 0x35
   149c0:	e59f1014 	ldr	r1, [pc, #20]	; 149dc <CFATCache::Open(CDevice*)+0x114>
   149c4:	e59f001c 	ldr	r0, [pc, #28]	; 149e8 <CFATCache::Open(CDevice*)+0x120>
   149c8:	ebfff44e 	bl	11b08 <assertion_failed>
   149cc:	e3a00001 	mov	r0, #1, 0
   149d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   149d4:	0000d160 	.word	0x0000d160
   149d8:	4641544d 	.word	0x4641544d
   149dc:	0001babc 	.word	0x0001babc
   149e0:	0001bacc 	.word	0x0001bacc
   149e4:	0001bae0 	.word	0x0001bae0
   149e8:	0001baf4 	.word	0x0001baf4

000149ec <CFATCache::FreeSector(TFATBuffer*, int)>:
   149ec:	e92d4010 	push	{r4, lr}
   149f0:	e591c000 	ldr	ip, [r1]
   149f4:	e59f30cc 	ldr	r3, [pc, #204]	; 14ac8 <CFATCache::FreeSector(TFATBuffer*, int)+0xdc>
   149f8:	e24dd008 	sub	sp, sp, #8, 0
   149fc:	e15c0003 	cmp	ip, r3
   14a00:	1a000028 	bne	14aa8 <CFATCache::FreeSector(TFATBuffer*, int)+0xbc>
   14a04:	e5913010 	ldr	r3, [r1, #16]
   14a08:	e3530000 	cmp	r3, #0, 0
   14a0c:	0a000029 	beq	14ab8 <CFATCache::FreeSector(TFATBuffer*, int)+0xcc>
   14a10:	e2433001 	sub	r3, r3, #1, 0
   14a14:	e1932002 	orrs	r2, r3, r2
   14a18:	e5813010 	str	r3, [r1, #16]
   14a1c:	0a000001 	beq	14a28 <CFATCache::FreeSector(TFATBuffer*, int)+0x3c>
   14a20:	e28dd008 	add	sp, sp, #8, 0
   14a24:	e8bd8010 	pop	{r4, pc}
   14a28:	e1a04000 	mov	r4, r0
   14a2c:	e5900010 	ldr	r0, [r0, #16]
   14a30:	e3500000 	cmp	r0, #0, 0
   14a34:	1a000013 	bne	14a88 <CFATCache::FreeSector(TFATBuffer*, int)+0x9c>
   14a38:	e594300c 	ldr	r3, [r4, #12]
   14a3c:	e1510003 	cmp	r1, r3
   14a40:	0afffff6 	beq	14a20 <CFATCache::FreeSector(TFATBuffer*, int)+0x34>
   14a44:	e1c120d4 	ldrd	r2, [r1, #4]
   14a48:	e3530000 	cmp	r3, #0, 0
   14a4c:	e5823008 	str	r3, [r2, #8]
   14a50:	15832004 	strne	r2, [r3, #4]
   14a54:	e3a03000 	mov	r3, #0, 0
   14a58:	05842008 	streq	r2, [r4, #8]
   14a5c:	e594200c 	ldr	r2, [r4, #12]
   14a60:	e5821004 	str	r1, [r2, #4]
   14a64:	e594200c 	ldr	r2, [r4, #12]
   14a68:	e5812008 	str	r2, [r1, #8]
   14a6c:	e584100c 	str	r1, [r4, #12]
   14a70:	e5813004 	str	r3, [r1, #4]
   14a74:	e3500000 	cmp	r0, #0, 0
   14a78:	0affffe8 	beq	14a20 <CFATCache::FreeSector(TFATBuffer*, int)+0x34>
   14a7c:	e28dd008 	add	sp, sp, #8, 0
   14a80:	e8bd4010 	pop	{r4, lr}
   14a84:	eafff28d 	b	114c0 <LeaveCritical>
   14a88:	e58d1004 	str	r1, [sp, #4]
   14a8c:	ebfff261 	bl	11418 <EnterCritical>
   14a90:	e594300c 	ldr	r3, [r4, #12]
   14a94:	e59d1004 	ldr	r1, [sp, #4]
   14a98:	e5940010 	ldr	r0, [r4, #16]
   14a9c:	e1510003 	cmp	r1, r3
   14aa0:	1affffe7 	bne	14a44 <CFATCache::FreeSector(TFATBuffer*, int)+0x58>
   14aa4:	eafffff2 	b	14a74 <CFATCache::FreeSector(TFATBuffer*, int)+0x88>
   14aa8:	e3a020eb 	mov	r2, #235, 0	; 0xeb
   14aac:	e59f1018 	ldr	r1, [pc, #24]	; 14acc <CFATCache::FreeSector(TFATBuffer*, int)+0xe0>
   14ab0:	e59f0018 	ldr	r0, [pc, #24]	; 14ad0 <CFATCache::FreeSector(TFATBuffer*, int)+0xe4>
   14ab4:	ebfff413 	bl	11b08 <assertion_failed>
   14ab8:	e3a020ec 	mov	r2, #236, 0	; 0xec
   14abc:	e59f1008 	ldr	r1, [pc, #8]	; 14acc <CFATCache::FreeSector(TFATBuffer*, int)+0xe0>
   14ac0:	e59f000c 	ldr	r0, [pc, #12]	; 14ad4 <CFATCache::FreeSector(TFATBuffer*, int)+0xe8>
   14ac4:	ebfff40f 	bl	11b08 <assertion_failed>
   14ac8:	4641544d 	.word	0x4641544d
   14acc:	0001babc 	.word	0x0001babc
   14ad0:	0001bb08 	.word	0x0001bb08
   14ad4:	0001bb28 	.word	0x0001bb28

00014ad8 <CFATCache::MarkDirty(TFATBuffer*)>:
   14ad8:	e59f3044 	ldr	r3, [pc, #68]	; 14b24 <CFATCache::MarkDirty(TFATBuffer*)+0x4c>
   14adc:	e5912000 	ldr	r2, [r1]
   14ae0:	e92d4010 	push	{r4, lr}
   14ae4:	e1520003 	cmp	r2, r3
   14ae8:	1a000005 	bne	14b04 <CFATCache::MarkDirty(TFATBuffer*)+0x2c>
   14aec:	e5913010 	ldr	r3, [r1, #16]
   14af0:	e3530000 	cmp	r3, #0, 0
   14af4:	0a000006 	beq	14b14 <CFATCache::MarkDirty(TFATBuffer*)+0x3c>
   14af8:	e3a03001 	mov	r3, #1, 0
   14afc:	e5813014 	str	r3, [r1, #20]
   14b00:	e8bd8010 	pop	{r4, pc}
   14b04:	e3a02e11 	mov	r2, #272	; 0x110
   14b08:	e59f1018 	ldr	r1, [pc, #24]	; 14b28 <CFATCache::MarkDirty(TFATBuffer*)+0x50>
   14b0c:	e59f0018 	ldr	r0, [pc, #24]	; 14b2c <CFATCache::MarkDirty(TFATBuffer*)+0x54>
   14b10:	ebfff3fc 	bl	11b08 <assertion_failed>
   14b14:	e59f2014 	ldr	r2, [pc, #20]	; 14b30 <CFATCache::MarkDirty(TFATBuffer*)+0x58>
   14b18:	e59f1008 	ldr	r1, [pc, #8]	; 14b28 <CFATCache::MarkDirty(TFATBuffer*)+0x50>
   14b1c:	e59f0010 	ldr	r0, [pc, #16]	; 14b34 <CFATCache::MarkDirty(TFATBuffer*)+0x5c>
   14b20:	ebfff3f8 	bl	11b08 <assertion_failed>
   14b24:	4641544d 	.word	0x4641544d
   14b28:	0001babc 	.word	0x0001babc
   14b2c:	0001bb08 	.word	0x0001bb08
   14b30:	00000111 	.word	0x00000111
   14b34:	0001bb28 	.word	0x0001bb28

00014b38 <CFATCache::MoveBufferFirst(TFATBuffer*)>:
   14b38:	e5903008 	ldr	r3, [r0, #8]
   14b3c:	e1530001 	cmp	r3, r1
   14b40:	012fff1e 	bxeq	lr
   14b44:	e5913004 	ldr	r3, [r1, #4]
   14b48:	e5912008 	ldr	r2, [r1, #8]
   14b4c:	e3530000 	cmp	r3, #0, 0
   14b50:	e5823004 	str	r3, [r2, #4]
   14b54:	15832008 	strne	r2, [r3, #8]
   14b58:	e3a03000 	mov	r3, #0, 0
   14b5c:	0580200c 	streq	r2, [r0, #12]
   14b60:	e5902008 	ldr	r2, [r0, #8]
   14b64:	e5821008 	str	r1, [r2, #8]
   14b68:	e5902008 	ldr	r2, [r0, #8]
   14b6c:	e5812004 	str	r2, [r1, #4]
   14b70:	e5801008 	str	r1, [r0, #8]
   14b74:	e5813008 	str	r3, [r1, #8]
   14b78:	e12fff1e 	bx	lr

00014b7c <CFATCache::MoveBufferLast(TFATBuffer*)>:
   14b7c:	e590300c 	ldr	r3, [r0, #12]
   14b80:	e1530001 	cmp	r3, r1
   14b84:	012fff1e 	bxeq	lr
   14b88:	e1c120d4 	ldrd	r2, [r1, #4]
   14b8c:	e3530000 	cmp	r3, #0, 0
   14b90:	e5823008 	str	r3, [r2, #8]
   14b94:	15832004 	strne	r2, [r3, #4]
   14b98:	e3a03000 	mov	r3, #0, 0
   14b9c:	05802008 	streq	r2, [r0, #8]
   14ba0:	e590200c 	ldr	r2, [r0, #12]
   14ba4:	e5821004 	str	r1, [r2, #4]
   14ba8:	e590200c 	ldr	r2, [r0, #12]
   14bac:	e5812008 	str	r2, [r1, #8]
   14bb0:	e580100c 	str	r1, [r0, #12]
   14bb4:	e5813004 	str	r3, [r1, #4]
   14bb8:	e12fff1e 	bx	lr

00014bbc <CFATCache::Fault(unsigned int)>:
   14bbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   14bc0:	e2411c15 	sub	r1, r1, #5376	; 0x1500
   14bc4:	e2411001 	sub	r1, r1, #1, 0
   14bc8:	e3510002 	cmp	r1, #2, 0
   14bcc:	e24dd00c 	sub	sp, sp, #12, 0
   14bd0:	8a000009 	bhi	14bfc <CFATCache::Fault(unsigned int)+0x40>
   14bd4:	e59f3030 	ldr	r3, [pc, #48]	; 14c0c <CFATCache::Fault(unsigned int)+0x50>
   14bd8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
   14bdc:	e58d3004 	str	r3, [sp, #4]
   14be0:	ebffd6ee 	bl	a7a0 <CLogger::Get()>
   14be4:	e3a02000 	mov	r2, #0, 0
   14be8:	e59d3004 	ldr	r3, [sp, #4]
   14bec:	e59f101c 	ldr	r1, [pc, #28]	; 14c10 <CFATCache::Fault(unsigned int)+0x54>
   14bf0:	e28dd00c 	add	sp, sp, #12, 0
   14bf4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   14bf8:	eaffd62a 	b	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bfc:	e59f2010 	ldr	r2, [pc, #16]	; 14c14 <CFATCache::Fault(unsigned int)+0x58>
   14c00:	e59f1010 	ldr	r1, [pc, #16]	; 14c18 <CFATCache::Fault(unsigned int)+0x5c>
   14c04:	e59f0010 	ldr	r0, [pc, #16]	; 14c1c <CFATCache::Fault(unsigned int)+0x60>
   14c08:	ebfff3be 	bl	11b08 <assertion_failed>
   14c0c:	0001bb8c 	.word	0x0001bb8c
   14c10:	0001bb40 	.word	0x0001bb40
   14c14:	0000015a 	.word	0x0000015a
   14c18:	0001babc 	.word	0x0001babc
   14c1c:	0001a4e4 	.word	0x0001a4e4

00014c20 <CFATCache::Flush()>:
   14c20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14c24:	e1a05000 	mov	r5, r0
   14c28:	e5900010 	ldr	r0, [r0, #16]
   14c2c:	e3500000 	cmp	r0, #0, 0
   14c30:	1a000033 	bne	14d04 <CFATCache::Flush()+0xe4>
   14c34:	e5954008 	ldr	r4, [r5, #8]
   14c38:	e3540000 	cmp	r4, #0, 0
   14c3c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   14c40:	e3a07000 	mov	r7, #0, 0
   14c44:	e59f60dc 	ldr	r6, [pc, #220]	; 14d28 <CFATCache::Flush()+0x108>
   14c48:	e59f80dc 	ldr	r8, [pc, #220]	; 14d2c <CFATCache::Flush()+0x10c>
   14c4c:	ea000020 	b	14cd4 <CFATCache::Flush()+0xb4>
   14c50:	e594200c 	ldr	r2, [r4, #12]
   14c54:	e3720001 	cmn	r2, #1, 0
   14c58:	0a00001a 	beq	14cc8 <CFATCache::Flush()+0xa8>
   14c5c:	e5943014 	ldr	r3, [r4, #20]
   14c60:	e3530000 	cmp	r3, #0, 0
   14c64:	0a000017 	beq	14cc8 <CFATCache::Flush()+0xa8>
   14c68:	e5950014 	ldr	r0, [r5, #20]
   14c6c:	e3500000 	cmp	r0, #0, 0
   14c70:	1a00001e 	bne	14cf0 <CFATCache::Flush()+0xd0>
   14c74:	e5950000 	ldr	r0, [r5]
   14c78:	e1a02482 	lsl	r2, r2, #9
   14c7c:	e5903000 	ldr	r3, [r0]
   14c80:	e5931010 	ldr	r1, [r3, #16]
   14c84:	e3a03000 	mov	r3, #0, 0
   14c88:	e12fff31 	blx	r1
   14c8c:	e5950000 	ldr	r0, [r5]
   14c90:	e3a02c02 	mov	r2, #512	; 0x200
   14c94:	e5903000 	ldr	r3, [r0]
   14c98:	e2841018 	add	r1, r4, #24, 0
   14c9c:	e593300c 	ldr	r3, [r3, #12]
   14ca0:	e12fff33 	blx	r3
   14ca4:	e3500c02 	cmp	r0, #512	; 0x200
   14ca8:	0a000002 	beq	14cb8 <CFATCache::Flush()+0x98>
   14cac:	e1a01008 	mov	r1, r8
   14cb0:	e1a00005 	mov	r0, r5
   14cb4:	ebffffc0 	bl	14bbc <CFATCache::Fault(unsigned int)>
   14cb8:	e5953014 	ldr	r3, [r5, #20]
   14cbc:	e3530000 	cmp	r3, #0, 0
   14cc0:	1a00000d 	bne	14cfc <CFATCache::Flush()+0xdc>
   14cc4:	e5847014 	str	r7, [r4, #20]
   14cc8:	e5944004 	ldr	r4, [r4, #4]
   14ccc:	e3540000 	cmp	r4, #0, 0
   14cd0:	0a00000f 	beq	14d14 <CFATCache::Flush()+0xf4>
   14cd4:	e5943000 	ldr	r3, [r4]
   14cd8:	e1530006 	cmp	r3, r6
   14cdc:	0affffdb 	beq	14c50 <CFATCache::Flush()+0x30>
   14ce0:	e3a02065 	mov	r2, #101, 0	; 0x65
   14ce4:	e59f1044 	ldr	r1, [pc, #68]	; 14d30 <CFATCache::Flush()+0x110>
   14ce8:	e59f0044 	ldr	r0, [pc, #68]	; 14d34 <CFATCache::Flush()+0x114>
   14cec:	ebfff385 	bl	11b08 <assertion_failed>
   14cf0:	ebfff1c8 	bl	11418 <EnterCritical>
   14cf4:	e594200c 	ldr	r2, [r4, #12]
   14cf8:	eaffffdd 	b	14c74 <CFATCache::Flush()+0x54>
   14cfc:	ebfff1ef 	bl	114c0 <LeaveCritical>
   14d00:	eaffffef 	b	14cc4 <CFATCache::Flush()+0xa4>
   14d04:	ebfff1c3 	bl	11418 <EnterCritical>
   14d08:	e5954008 	ldr	r4, [r5, #8]
   14d0c:	e3540000 	cmp	r4, #0, 0
   14d10:	1affffca 	bne	14c40 <CFATCache::Flush()+0x20>
   14d14:	e5953010 	ldr	r3, [r5, #16]
   14d18:	e3530000 	cmp	r3, #0, 0
   14d1c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   14d20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   14d24:	eafff1e5 	b	114c0 <LeaveCritical>
   14d28:	4641544d 	.word	0x4641544d
   14d2c:	00001503 	.word	0x00001503
   14d30:	0001babc 	.word	0x0001babc
   14d34:	0001bb08 	.word	0x0001bb08

00014d38 <CFATCache::Close()>:
   14d38:	e92d4070 	push	{r4, r5, r6, lr}
   14d3c:	e1a04000 	mov	r4, r0
   14d40:	e3a05000 	mov	r5, #0, 0
   14d44:	ebffffb5 	bl	14c20 <CFATCache::Flush()>
   14d48:	e5940004 	ldr	r0, [r4, #4]
   14d4c:	e5845008 	str	r5, [r4, #8]
   14d50:	e1500005 	cmp	r0, r5
   14d54:	e584500c 	str	r5, [r4, #12]
   14d58:	0a000002 	beq	14d68 <CFATCache::Close()+0x30>
   14d5c:	eb001094 	bl	18fb4 <free>
   14d60:	e5845004 	str	r5, [r4, #4]
   14d64:	e8bd8070 	pop	{r4, r5, r6, pc}
   14d68:	e3a02058 	mov	r2, #88, 0	; 0x58
   14d6c:	e59f1004 	ldr	r1, [pc, #4]	; 14d78 <CFATCache::Close()+0x40>
   14d70:	e59f0004 	ldr	r0, [pc, #4]	; 14d7c <CFATCache::Close()+0x44>
   14d74:	ebfff363 	bl	11b08 <assertion_failed>
   14d78:	0001babc 	.word	0x0001babc
   14d7c:	0001bb4c 	.word	0x0001bb4c

00014d80 <CFATCache::GetSector(unsigned int, int)>:
   14d80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14d84:	e1a06000 	mov	r6, r0
   14d88:	e5900010 	ldr	r0, [r0, #16]
   14d8c:	e1a05001 	mov	r5, r1
   14d90:	e3500000 	cmp	r0, #0, 0
   14d94:	e1a07002 	mov	r7, r2
   14d98:	1a000012 	bne	14de8 <CFATCache::GetSector(unsigned int, int)+0x68>
   14d9c:	e5960008 	ldr	r0, [r6, #8]
   14da0:	e3500000 	cmp	r0, #0, 0
   14da4:	0a000059 	beq	14f10 <CFATCache::GetSector(unsigned int, int)+0x190>
   14da8:	e1a04000 	mov	r4, r0
   14dac:	e59f1300 	ldr	r1, [pc, #768]	; 150b4 <CFATCache::GetSector(unsigned int, int)+0x334>
   14db0:	ea000005 	b	14dcc <CFATCache::GetSector(unsigned int, int)+0x4c>
   14db4:	e594300c 	ldr	r3, [r4, #12]
   14db8:	e1530005 	cmp	r3, r5
   14dbc:	0a00000b 	beq	14df0 <CFATCache::GetSector(unsigned int, int)+0x70>
   14dc0:	e5944004 	ldr	r4, [r4, #4]
   14dc4:	e3540000 	cmp	r4, #0, 0
   14dc8:	0a000050 	beq	14f10 <CFATCache::GetSector(unsigned int, int)+0x190>
   14dcc:	e5943000 	ldr	r3, [r4]
   14dd0:	e1530001 	cmp	r3, r1
   14dd4:	0afffff6 	beq	14db4 <CFATCache::GetSector(unsigned int, int)+0x34>
   14dd8:	e3a02085 	mov	r2, #133, 0	; 0x85
   14ddc:	e59f12d4 	ldr	r1, [pc, #724]	; 150b8 <CFATCache::GetSector(unsigned int, int)+0x338>
   14de0:	e59f02d4 	ldr	r0, [pc, #724]	; 150bc <CFATCache::GetSector(unsigned int, int)+0x33c>
   14de4:	ebfff347 	bl	11b08 <assertion_failed>
   14de8:	ebfff18a 	bl	11418 <EnterCritical>
   14dec:	eaffffea 	b	14d9c <CFATCache::GetSector(unsigned int, int)+0x1c>
   14df0:	e1500004 	cmp	r0, r4
   14df4:	0a00000c 	beq	14e2c <CFATCache::GetSector(unsigned int, int)+0xac>
   14df8:	e5943004 	ldr	r3, [r4, #4]
   14dfc:	e5942008 	ldr	r2, [r4, #8]
   14e00:	e3530000 	cmp	r3, #0, 0
   14e04:	e5823004 	str	r3, [r2, #4]
   14e08:	15832008 	strne	r2, [r3, #8]
   14e0c:	e3a03000 	mov	r3, #0, 0
   14e10:	0586200c 	streq	r2, [r6, #12]
   14e14:	e5962008 	ldr	r2, [r6, #8]
   14e18:	e5824008 	str	r4, [r2, #8]
   14e1c:	e5962008 	ldr	r2, [r6, #8]
   14e20:	e5842004 	str	r2, [r4, #4]
   14e24:	e5864008 	str	r4, [r6, #8]
   14e28:	e5843008 	str	r3, [r4, #8]
   14e2c:	e5943010 	ldr	r3, [r4, #16]
   14e30:	e2833001 	add	r3, r3, #1, 0
   14e34:	e5843010 	str	r3, [r4, #16]
   14e38:	e5963010 	ldr	r3, [r6, #16]
   14e3c:	e3530000 	cmp	r3, #0, 0
   14e40:	1a000030 	bne	14f08 <CFATCache::GetSector(unsigned int, int)+0x188>
   14e44:	e1a00004 	mov	r0, r4
   14e48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14e4c:	e3a03001 	mov	r3, #1, 0
   14e50:	e5843010 	str	r3, [r4, #16]
   14e54:	e3a03000 	mov	r3, #0, 0
   14e58:	e1570003 	cmp	r7, r3
   14e5c:	e584500c 	str	r5, [r4, #12]
   14e60:	e5843014 	str	r3, [r4, #20]
   14e64:	1a000014 	bne	14ebc <CFATCache::GetSector(unsigned int, int)+0x13c>
   14e68:	e5960014 	ldr	r0, [r6, #20]
   14e6c:	e1500003 	cmp	r0, r3
   14e70:	1a000048 	bne	14f98 <CFATCache::GetSector(unsigned int, int)+0x218>
   14e74:	e5960000 	ldr	r0, [r6]
   14e78:	e1a02485 	lsl	r2, r5, #9
   14e7c:	e5903000 	ldr	r3, [r0]
   14e80:	e5931010 	ldr	r1, [r3, #16]
   14e84:	e3a03000 	mov	r3, #0, 0
   14e88:	e12fff31 	blx	r1
   14e8c:	e5960000 	ldr	r0, [r6]
   14e90:	e3a02c02 	mov	r2, #512	; 0x200
   14e94:	e5903000 	ldr	r3, [r0]
   14e98:	e2841018 	add	r1, r4, #24, 0
   14e9c:	e5933008 	ldr	r3, [r3, #8]
   14ea0:	e12fff33 	blx	r3
   14ea4:	e3500c02 	cmp	r0, #512	; 0x200
   14ea8:	1a00005e 	bne	15028 <CFATCache::GetSector(unsigned int, int)+0x2a8>
   14eac:	e5963014 	ldr	r3, [r6, #20]
   14eb0:	e3530000 	cmp	r3, #0, 0
   14eb4:	0a000000 	beq	14ebc <CFATCache::GetSector(unsigned int, int)+0x13c>
   14eb8:	ebfff180 	bl	114c0 <LeaveCritical>
   14ebc:	e5963008 	ldr	r3, [r6, #8]
   14ec0:	e1540003 	cmp	r4, r3
   14ec4:	0a00000c 	beq	14efc <CFATCache::GetSector(unsigned int, int)+0x17c>
   14ec8:	e5943004 	ldr	r3, [r4, #4]
   14ecc:	e5942008 	ldr	r2, [r4, #8]
   14ed0:	e3530000 	cmp	r3, #0, 0
   14ed4:	e5823004 	str	r3, [r2, #4]
   14ed8:	15832008 	strne	r2, [r3, #8]
   14edc:	e3a03000 	mov	r3, #0, 0
   14ee0:	0586200c 	streq	r2, [r6, #12]
   14ee4:	e5962008 	ldr	r2, [r6, #8]
   14ee8:	e5824008 	str	r4, [r2, #8]
   14eec:	e5962008 	ldr	r2, [r6, #8]
   14ef0:	e5842004 	str	r2, [r4, #4]
   14ef4:	e5864008 	str	r4, [r6, #8]
   14ef8:	e5843008 	str	r3, [r4, #8]
   14efc:	e5963010 	ldr	r3, [r6, #16]
   14f00:	e3530000 	cmp	r3, #0, 0
   14f04:	0affffce 	beq	14e44 <CFATCache::GetSector(unsigned int, int)+0xc4>
   14f08:	ebfff16c 	bl	114c0 <LeaveCritical>
   14f0c:	eaffffcc 	b	14e44 <CFATCache::GetSector(unsigned int, int)+0xc4>
   14f10:	e596800c 	ldr	r8, [r6, #12]
   14f14:	e3580000 	cmp	r8, #0, 0
   14f18:	0a00005d 	beq	15094 <CFATCache::GetSector(unsigned int, int)+0x314>
   14f1c:	e1a04008 	mov	r4, r8
   14f20:	e59f218c 	ldr	r2, [pc, #396]	; 150b4 <CFATCache::GetSector(unsigned int, int)+0x334>
   14f24:	ea000005 	b	14f40 <CFATCache::GetSector(unsigned int, int)+0x1c0>
   14f28:	e594300c 	ldr	r3, [r4, #12]
   14f2c:	e3730001 	cmn	r3, #1, 0
   14f30:	0affffc5 	beq	14e4c <CFATCache::GetSector(unsigned int, int)+0xcc>
   14f34:	e5944008 	ldr	r4, [r4, #8]
   14f38:	e3540000 	cmp	r4, #0, 0
   14f3c:	0a000006 	beq	14f5c <CFATCache::GetSector(unsigned int, int)+0x1dc>
   14f40:	e5943000 	ldr	r3, [r4]
   14f44:	e1530002 	cmp	r3, r2
   14f48:	0afffff6 	beq	14f28 <CFATCache::GetSector(unsigned int, int)+0x1a8>
   14f4c:	e3a0209b 	mov	r2, #155, 0	; 0x9b
   14f50:	e59f1160 	ldr	r1, [pc, #352]	; 150b8 <CFATCache::GetSector(unsigned int, int)+0x338>
   14f54:	e59f0160 	ldr	r0, [pc, #352]	; 150bc <CFATCache::GetSector(unsigned int, int)+0x33c>
   14f58:	ebfff2ea 	bl	11b08 <assertion_failed>
   14f5c:	e59f2150 	ldr	r2, [pc, #336]	; 150b4 <CFATCache::GetSector(unsigned int, int)+0x334>
   14f60:	ea000005 	b	14f7c <CFATCache::GetSector(unsigned int, int)+0x1fc>
   14f64:	e5983010 	ldr	r3, [r8, #16]
   14f68:	e3530000 	cmp	r3, #0, 0
   14f6c:	0a00000b 	beq	14fa0 <CFATCache::GetSector(unsigned int, int)+0x220>
   14f70:	e5988008 	ldr	r8, [r8, #8]
   14f74:	e3580000 	cmp	r8, #0, 0
   14f78:	0a000045 	beq	15094 <CFATCache::GetSector(unsigned int, int)+0x314>
   14f7c:	e5983000 	ldr	r3, [r8]
   14f80:	e1530002 	cmp	r3, r2
   14f84:	0afffff6 	beq	14f64 <CFATCache::GetSector(unsigned int, int)+0x1e4>
   14f88:	e3a020a7 	mov	r2, #167, 0	; 0xa7
   14f8c:	e59f1124 	ldr	r1, [pc, #292]	; 150b8 <CFATCache::GetSector(unsigned int, int)+0x338>
   14f90:	e59f0124 	ldr	r0, [pc, #292]	; 150bc <CFATCache::GetSector(unsigned int, int)+0x33c>
   14f94:	ebfff2db 	bl	11b08 <assertion_failed>
   14f98:	ebfff11e 	bl	11418 <EnterCritical>
   14f9c:	eaffffb4 	b	14e74 <CFATCache::GetSector(unsigned int, int)+0xf4>
   14fa0:	e5983014 	ldr	r3, [r8, #20]
   14fa4:	e3530000 	cmp	r3, #0, 0
   14fa8:	0a000030 	beq	15070 <CFATCache::GetSector(unsigned int, int)+0x2f0>
   14fac:	e5960014 	ldr	r0, [r6, #20]
   14fb0:	e3500000 	cmp	r0, #0, 0
   14fb4:	1a000030 	bne	1507c <CFATCache::GetSector(unsigned int, int)+0x2fc>
   14fb8:	e5960000 	ldr	r0, [r6]
   14fbc:	e598200c 	ldr	r2, [r8, #12]
   14fc0:	e5903000 	ldr	r3, [r0]
   14fc4:	e1a02482 	lsl	r2, r2, #9
   14fc8:	e5931010 	ldr	r1, [r3, #16]
   14fcc:	e3a03000 	mov	r3, #0, 0
   14fd0:	e12fff31 	blx	r1
   14fd4:	e5960000 	ldr	r0, [r6]
   14fd8:	e2881018 	add	r1, r8, #24, 0
   14fdc:	e5903000 	ldr	r3, [r0]
   14fe0:	e3a02c02 	mov	r2, #512	; 0x200
   14fe4:	e593300c 	ldr	r3, [r3, #12]
   14fe8:	e12fff33 	blx	r3
   14fec:	e3500c02 	cmp	r0, #512	; 0x200
   14ff0:	159f10c8 	ldrne	r1, [pc, #200]	; 150c0 <CFATCache::GetSector(unsigned int, int)+0x340>
   14ff4:	1a000011 	bne	15040 <CFATCache::GetSector(unsigned int, int)+0x2c0>
   14ff8:	e5963014 	ldr	r3, [r6, #20]
   14ffc:	e3530000 	cmp	r3, #0, 0
   15000:	1a000021 	bne	1508c <CFATCache::GetSector(unsigned int, int)+0x30c>
   15004:	e3e02000 	mvn	r2, #0, 0
   15008:	e5983010 	ldr	r3, [r8, #16]
   1500c:	e588200c 	str	r2, [r8, #12]
   15010:	e3530000 	cmp	r3, #0, 0
   15014:	1a000022 	bne	150a4 <CFATCache::GetSector(unsigned int, int)+0x324>
   15018:	e3a03001 	mov	r3, #1, 0
   1501c:	e1a04008 	mov	r4, r8
   15020:	e5883010 	str	r3, [r8, #16]
   15024:	eaffff8a 	b	14e54 <CFATCache::GetSector(unsigned int, int)+0xd4>
   15028:	e3e02000 	mvn	r2, #0, 0
   1502c:	e5943010 	ldr	r3, [r4, #16]
   15030:	e59f108c 	ldr	r1, [pc, #140]	; 150c4 <CFATCache::GetSector(unsigned int, int)+0x344>
   15034:	e0833002 	add	r3, r3, r2
   15038:	e584200c 	str	r2, [r4, #12]
   1503c:	e5843010 	str	r3, [r4, #16]
   15040:	e1a00006 	mov	r0, r6
   15044:	ebfffedc 	bl	14bbc <CFATCache::Fault(unsigned int)>
   15048:	e5963014 	ldr	r3, [r6, #20]
   1504c:	e3530000 	cmp	r3, #0, 0
   15050:	1a00000b 	bne	15084 <CFATCache::GetSector(unsigned int, int)+0x304>
   15054:	e5963010 	ldr	r3, [r6, #16]
   15058:	e3530000 	cmp	r3, #0, 0
   1505c:	03a04000 	moveq	r4, #0, 0
   15060:	0affff77 	beq	14e44 <CFATCache::GetSector(unsigned int, int)+0xc4>
   15064:	ebfff115 	bl	114c0 <LeaveCritical>
   15068:	e3a04000 	mov	r4, #0, 0
   1506c:	eaffff74 	b	14e44 <CFATCache::GetSector(unsigned int, int)+0xc4>
   15070:	e3e03000 	mvn	r3, #0, 0
   15074:	e588300c 	str	r3, [r8, #12]
   15078:	eaffffe6 	b	15018 <CFATCache::GetSector(unsigned int, int)+0x298>
   1507c:	ebfff0e5 	bl	11418 <EnterCritical>
   15080:	eaffffcc 	b	14fb8 <CFATCache::GetSector(unsigned int, int)+0x238>
   15084:	ebfff10d 	bl	114c0 <LeaveCritical>
   15088:	eafffff1 	b	15054 <CFATCache::GetSector(unsigned int, int)+0x2d4>
   1508c:	ebfff10b 	bl	114c0 <LeaveCritical>
   15090:	eaffffdb 	b	15004 <CFATCache::GetSector(unsigned int, int)+0x284>
   15094:	e1a00006 	mov	r0, r6
   15098:	e59f1028 	ldr	r1, [pc, #40]	; 150c8 <CFATCache::GetSector(unsigned int, int)+0x348>
   1509c:	ebfffec6 	bl	14bbc <CFATCache::Fault(unsigned int)>
   150a0:	eaffffeb 	b	15054 <CFATCache::GetSector(unsigned int, int)+0x2d4>
   150a4:	e3a020c7 	mov	r2, #199, 0	; 0xc7
   150a8:	e59f1008 	ldr	r1, [pc, #8]	; 150b8 <CFATCache::GetSector(unsigned int, int)+0x338>
   150ac:	e59f0018 	ldr	r0, [pc, #24]	; 150cc <CFATCache::GetSector(unsigned int, int)+0x34c>
   150b0:	ebfff294 	bl	11b08 <assertion_failed>
   150b4:	4641544d 	.word	0x4641544d
   150b8:	0001babc 	.word	0x0001babc
   150bc:	0001bb08 	.word	0x0001bb08
   150c0:	00001503 	.word	0x00001503
   150c4:	00001502 	.word	0x00001502
   150c8:	00001501 	.word	0x00001501
   150cc:	0001bb60 	.word	0x0001bb60

000150d0 <CFATInfo::CFATInfo(CFATCache*)>:
   150d0:	e3a0c002 	mov	ip, #2, 0
   150d4:	e3a02000 	mov	r2, #0, 0
   150d8:	e5801000 	str	r1, [r0]
   150dc:	e5c0c004 	strb	ip, [r0, #4]
   150e0:	e5802048 	str	r2, [r0, #72]	; 0x48
   150e4:	e12fff1e 	bx	lr

000150e8 <CFATInfo::~CFATInfo()>:
   150e8:	e12fff1e 	bx	lr

000150ec <CFATInfo::Initialize()>:
   150ec:	e92d4070 	push	{r4, r5, r6, lr}
   150f0:	e1a04000 	mov	r4, r0
   150f4:	e5900000 	ldr	r0, [r0]
   150f8:	e24dd010 	sub	sp, sp, #16, 0
   150fc:	e3500000 	cmp	r0, #0, 0
   15100:	0a00007f 	beq	15304 <CFATInfo::Initialize()+0x218>
   15104:	e3a02000 	mov	r2, #0, 0
   15108:	e1a01002 	mov	r1, r2
   1510c:	ebffff1b 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   15110:	e2501000 	subs	r1, r0, #0, 0
   15114:	0a00007e 	beq	15314 <CFATInfo::Initialize()+0x228>
   15118:	e5d13216 	ldrb	r3, [r1, #534]	; 0x216
   1511c:	e5d10217 	ldrb	r0, [r1, #535]	; 0x217
   15120:	e59f2418 	ldr	r2, [pc, #1048]	; 15540 <CFATInfo::Initialize()+0x454>
   15124:	e1833400 	orr	r3, r3, r0, lsl #8
   15128:	e1530002 	cmp	r3, r2
   1512c:	1a000004 	bne	15144 <CFATInfo::Initialize()+0x58>
   15130:	e5d13023 	ldrb	r3, [r1, #35]	; 0x23
   15134:	e5d12024 	ldrb	r2, [r1, #36]	; 0x24
   15138:	e1833402 	orr	r3, r3, r2, lsl #8
   1513c:	e3530c02 	cmp	r3, #512	; 0x200
   15140:	0a000006 	beq	15160 <CFATInfo::Initialize()+0x74>
   15144:	e3a02000 	mov	r2, #0, 0
   15148:	e5940000 	ldr	r0, [r4]
   1514c:	ebfffe26 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   15150:	e3a05000 	mov	r5, #0, 0
   15154:	e1a00005 	mov	r0, r5
   15158:	e28dd010 	add	sp, sp, #16, 0
   1515c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15160:	e5d1302d 	ldrb	r3, [r1, #45]	; 0x2d
   15164:	e20330f0 	and	r3, r3, #240, 0	; 0xf0
   15168:	e35300f0 	cmp	r3, #240, 0	; 0xf0
   1516c:	1afffff4 	bne	15144 <CFATInfo::Initialize()+0x58>
   15170:	e5d13025 	ldrb	r3, [r1, #37]	; 0x25
   15174:	e5843008 	str	r3, [r4, #8]
   15178:	e5d12027 	ldrb	r2, [r1, #39]	; 0x27
   1517c:	e5d13026 	ldrb	r3, [r1, #38]	; 0x26
   15180:	e1833402 	orr	r3, r3, r2, lsl #8
   15184:	e584300c 	str	r3, [r4, #12]
   15188:	e5d10028 	ldrb	r0, [r1, #40]	; 0x28
   1518c:	e5840010 	str	r0, [r4, #16]
   15190:	e5d1302a 	ldrb	r3, [r1, #42]	; 0x2a
   15194:	e5d12029 	ldrb	r2, [r1, #41]	; 0x29
   15198:	e1822403 	orr	r2, r2, r3, lsl #8
   1519c:	e5842014 	str	r2, [r4, #20]
   151a0:	e5d1302e 	ldrb	r3, [r1, #46]	; 0x2e
   151a4:	e5d1c02f 	ldrb	ip, [r1, #47]	; 0x2f
   151a8:	e183340c 	orr	r3, r3, ip, lsl #8
   151ac:	e3530000 	cmp	r3, #0, 0
   151b0:	e5843018 	str	r3, [r4, #24]
   151b4:	0a00005a 	beq	15324 <CFATInfo::Initialize()+0x238>
   151b8:	e3a02000 	mov	r2, #0, 0
   151bc:	e3a03001 	mov	r3, #1, 0
   151c0:	e5c42004 	strb	r2, [r4, #4]
   151c4:	e5c43020 	strb	r3, [r4, #32]
   151c8:	e5d1302b 	ldrb	r3, [r1, #43]	; 0x2b
   151cc:	e5d1202c 	ldrb	r2, [r1, #44]	; 0x2c
   151d0:	e1833402 	orr	r3, r3, r2, lsl #8
   151d4:	e3530000 	cmp	r3, #0, 0
   151d8:	e584301c 	str	r3, [r4, #28]
   151dc:	0a00007a 	beq	153cc <CFATInfo::Initialize()+0x2e0>
   151e0:	e3a02000 	mov	r2, #0, 0
   151e4:	e5940000 	ldr	r0, [r4]
   151e8:	ebfffdff 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   151ec:	e594500c 	ldr	r5, [r4, #12]
   151f0:	e3550000 	cmp	r5, #0, 0
   151f4:	0a000040 	beq	152fc <CFATInfo::Initialize()+0x210>
   151f8:	e5942018 	ldr	r2, [r4, #24]
   151fc:	e3520000 	cmp	r2, #0, 0
   15200:	0a00003d 	beq	152fc <CFATInfo::Initialize()+0x210>
   15204:	e5941010 	ldr	r1, [r4, #16]
   15208:	e5943014 	ldr	r3, [r4, #20]
   1520c:	e0225291 	mla	r2, r1, r2, r5
   15210:	e1a03283 	lsl	r3, r3, #5
   15214:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   15218:	e2833003 	add	r3, r3, #3, 0
   1521c:	e1a034a3 	lsr	r3, r3, #9
   15220:	e594601c 	ldr	r6, [r4, #28]
   15224:	e0822003 	add	r2, r2, r3
   15228:	e0460002 	sub	r0, r6, r2
   1522c:	e5843030 	str	r3, [r4, #48]	; 0x30
   15230:	e5941008 	ldr	r1, [r4, #8]
   15234:	e5842034 	str	r2, [r4, #52]	; 0x34
   15238:	e5840038 	str	r0, [r4, #56]	; 0x38
   1523c:	eb000db2 	bl	1890c <__udivsi3>
   15240:	e59f32fc 	ldr	r3, [pc, #764]	; 15544 <CFATInfo::Initialize()+0x458>
   15244:	e584003c 	str	r0, [r4, #60]	; 0x3c
   15248:	e1500003 	cmp	r0, r3
   1524c:	9a00002a 	bls	152fc <CFATInfo::Initialize()+0x210>
   15250:	e2833a0f 	add	r3, r3, #61440	; 0xf000
   15254:	e1500003 	cmp	r0, r3
   15258:	e5d43004 	ldrb	r3, [r4, #4]
   1525c:	8a000063 	bhi	153f0 <CFATInfo::Initialize()+0x304>
   15260:	e3530000 	cmp	r3, #0, 0
   15264:	1a000024 	bne	152fc <CFATInfo::Initialize()+0x210>
   15268:	e3e02000 	mvn	r2, #0, 0
   1526c:	e3a03002 	mov	r3, #2, 0
   15270:	e1c424f0 	strd	r2, [r4, #64]	; 0x40
   15274:	e2461001 	sub	r1, r6, #1, 0
   15278:	e3a02000 	mov	r2, #0, 0
   1527c:	e5940000 	ldr	r0, [r4]
   15280:	ebfffebe 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   15284:	e2501000 	subs	r1, r0, #0, 0
   15288:	0a000087 	beq	154ac <CFATInfo::Initialize()+0x3c0>
   1528c:	e3a02000 	mov	r2, #0, 0
   15290:	e5940000 	ldr	r0, [r4]
   15294:	ebfffdd4 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   15298:	e5946008 	ldr	r6, [r4, #8]
   1529c:	ebffd53f 	bl	a7a0 <CLogger::Get()>
   152a0:	e5d42004 	ldrb	r2, [r4, #4]
   152a4:	e3a05001 	mov	r5, #1, 0
   152a8:	e3520000 	cmp	r2, #0, 0
   152ac:	03a02010 	moveq	r2, #16, 0
   152b0:	13a02020 	movne	r2, #32, 0
   152b4:	e0866106 	add	r6, r6, r6, lsl #2
   152b8:	e59f3288 	ldr	r3, [pc, #648]	; 15548 <CFATInfo::Initialize()+0x45c>
   152bc:	e3c664ff 	bic	r6, r6, #-16777216	; 0xff000000
   152c0:	e3c66503 	bic	r6, r6, #12582912	; 0xc00000
   152c4:	e0831693 	umull	r1, r3, r3, r6
   152c8:	e1a031a3 	lsr	r3, r3, #3
   152cc:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
   152d0:	e58d3008 	str	r3, [sp, #8]
   152d4:	e0833103 	add	r3, r3, r3, lsl #2
   152d8:	e0466513 	sub	r6, r6, r3, lsl r5
   152dc:	e58d1004 	str	r1, [sp, #4]
   152e0:	e58d2000 	str	r2, [sp]
   152e4:	e59f3260 	ldr	r3, [pc, #608]	; 1554c <CFATInfo::Initialize()+0x460>
   152e8:	e3a02004 	mov	r2, #4, 0
   152ec:	e59f125c 	ldr	r1, [pc, #604]	; 15550 <CFATInfo::Initialize()+0x464>
   152f0:	e58d600c 	str	r6, [sp, #12]
   152f4:	ebffd46b 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   152f8:	eaffff95 	b	15154 <CFATInfo::Initialize()+0x68>
   152fc:	e3a05000 	mov	r5, #0, 0
   15300:	eaffff93 	b	15154 <CFATInfo::Initialize()+0x68>
   15304:	e3a0202a 	mov	r2, #42, 0	; 0x2a
   15308:	e59f1244 	ldr	r1, [pc, #580]	; 15554 <CFATInfo::Initialize()+0x468>
   1530c:	e59f0244 	ldr	r0, [pc, #580]	; 15558 <CFATInfo::Initialize()+0x46c>
   15310:	ebfff1fc 	bl	11b08 <assertion_failed>
   15314:	e3a0202c 	mov	r2, #44, 0	; 0x2c
   15318:	e59f1234 	ldr	r1, [pc, #564]	; 15554 <CFATInfo::Initialize()+0x468>
   1531c:	e59f0238 	ldr	r0, [pc, #568]	; 1555c <CFATInfo::Initialize()+0x470>
   15320:	ebfff1f8 	bl	11b08 <assertion_failed>
   15324:	e3a03001 	mov	r3, #1, 0
   15328:	e5c43004 	strb	r3, [r4, #4]
   1532c:	e5d1305a 	ldrb	r3, [r1, #90]	; 0x5a
   15330:	e3530029 	cmp	r3, #41, 0	; 0x29
   15334:	1affff82 	bne	15144 <CFATInfo::Initialize()+0x58>
   15338:	e5d13042 	ldrb	r3, [r1, #66]	; 0x42
   1533c:	e5d1c043 	ldrb	ip, [r1, #67]	; 0x43
   15340:	e183340c 	orr	r3, r3, ip, lsl #8
   15344:	e1923003 	orrs	r3, r2, r3
   15348:	1affff7d 	bne	15144 <CFATInfo::Initialize()+0x58>
   1534c:	e5d1203d 	ldrb	r2, [r1, #61]	; 0x3d
   15350:	e5d1303c 	ldrb	r3, [r1, #60]	; 0x3c
   15354:	e5d1c03e 	ldrb	ip, [r1, #62]	; 0x3e
   15358:	e1833402 	orr	r3, r3, r2, lsl #8
   1535c:	e5d1203f 	ldrb	r2, [r1, #63]	; 0x3f
   15360:	e183380c 	orr	r3, r3, ip, lsl #16
   15364:	e1833c02 	orr	r3, r3, r2, lsl #24
   15368:	e5843018 	str	r3, [r4, #24]
   1536c:	e1d134d0 	ldrsb	r3, [r1, #64]	; 0x40
   15370:	e1e02003 	mvn	r2, r3
   15374:	e3530000 	cmp	r3, #0, 0
   15378:	e1a02fa2 	lsr	r2, r2, #31
   1537c:	e5c42020 	strb	r2, [r4, #32]
   15380:	ba000004 	blt	15398 <CFATInfo::Initialize()+0x2ac>
   15384:	e5d13040 	ldrb	r3, [r1, #64]	; 0x40
   15388:	e203300f 	and	r3, r3, #15, 0
   1538c:	e1500003 	cmp	r0, r3
   15390:	e5843024 	str	r3, [r4, #36]	; 0x24
   15394:	9affff6a 	bls	15144 <CFATInfo::Initialize()+0x58>
   15398:	e5d12045 	ldrb	r2, [r1, #69]	; 0x45
   1539c:	e5d13044 	ldrb	r3, [r1, #68]	; 0x44
   153a0:	e5d10046 	ldrb	r0, [r1, #70]	; 0x46
   153a4:	e1833402 	orr	r3, r3, r2, lsl #8
   153a8:	e5d12047 	ldrb	r2, [r1, #71]	; 0x47
   153ac:	e1833800 	orr	r3, r3, r0, lsl #16
   153b0:	e1833c02 	orr	r3, r3, r2, lsl #24
   153b4:	e5843028 	str	r3, [r4, #40]	; 0x28
   153b8:	e5d13048 	ldrb	r3, [r1, #72]	; 0x48
   153bc:	e5d12049 	ldrb	r2, [r1, #73]	; 0x49
   153c0:	e1833402 	orr	r3, r3, r2, lsl #8
   153c4:	e584302c 	str	r3, [r4, #44]	; 0x2c
   153c8:	eaffff7e 	b	151c8 <CFATInfo::Initialize()+0xdc>
   153cc:	e5d12039 	ldrb	r2, [r1, #57]	; 0x39
   153d0:	e5d13038 	ldrb	r3, [r1, #56]	; 0x38
   153d4:	e5d1003a 	ldrb	r0, [r1, #58]	; 0x3a
   153d8:	e1833402 	orr	r3, r3, r2, lsl #8
   153dc:	e5d1203b 	ldrb	r2, [r1, #59]	; 0x3b
   153e0:	e1833800 	orr	r3, r3, r0, lsl #16
   153e4:	e1833c02 	orr	r3, r3, r2, lsl #24
   153e8:	e584301c 	str	r3, [r4, #28]
   153ec:	eaffff7b 	b	151e0 <CFATInfo::Initialize()+0xf4>
   153f0:	e3530001 	cmp	r3, #1, 0
   153f4:	1affffc0 	bne	152fc <CFATInfo::Initialize()+0x210>
   153f8:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   153fc:	e3510000 	cmp	r1, #0, 0
   15400:	11550001 	cmpne	r5, r1
   15404:	93a05001 	movls	r5, #1, 0
   15408:	83a05000 	movhi	r5, #0, 0
   1540c:	9affffba 	bls	152fc <CFATInfo::Initialize()+0x210>
   15410:	e1a02005 	mov	r2, r5
   15414:	e5940000 	ldr	r0, [r4]
   15418:	ebfffe58 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   1541c:	e2501000 	subs	r1, r0, #0, 0
   15420:	0a000025 	beq	154bc <CFATInfo::Initialize()+0x3d0>
   15424:	e5d10019 	ldrb	r0, [r1, #25]
   15428:	e5d13018 	ldrb	r3, [r1, #24]
   1542c:	e5d1201a 	ldrb	r2, [r1, #26]
   15430:	e1833400 	orr	r3, r3, r0, lsl #8
   15434:	e5d1001b 	ldrb	r0, [r1, #27]
   15438:	e1833802 	orr	r3, r3, r2, lsl #16
   1543c:	e59f211c 	ldr	r2, [pc, #284]	; 15560 <CFATInfo::Initialize()+0x474>
   15440:	e1833c00 	orr	r3, r3, r0, lsl #24
   15444:	e1530002 	cmp	r3, r2
   15448:	1a000013 	bne	1549c <CFATInfo::Initialize()+0x3b0>
   1544c:	e5d101fd 	ldrb	r0, [r1, #509]	; 0x1fd
   15450:	e5d131fc 	ldrb	r3, [r1, #508]	; 0x1fc
   15454:	e5d121fe 	ldrb	r2, [r1, #510]	; 0x1fe
   15458:	e1833400 	orr	r3, r3, r0, lsl #8
   1545c:	e5d101ff 	ldrb	r0, [r1, #511]	; 0x1ff
   15460:	e1833802 	orr	r3, r3, r2, lsl #16
   15464:	e59f20f8 	ldr	r2, [pc, #248]	; 15564 <CFATInfo::Initialize()+0x478>
   15468:	e1833c00 	orr	r3, r3, r0, lsl #24
   1546c:	e1530002 	cmp	r3, r2
   15470:	1a000009 	bne	1549c <CFATInfo::Initialize()+0x3b0>
   15474:	e5d10215 	ldrb	r0, [r1, #533]	; 0x215
   15478:	e5d13214 	ldrb	r3, [r1, #532]	; 0x214
   1547c:	e5d12216 	ldrb	r2, [r1, #534]	; 0x216
   15480:	e1833400 	orr	r3, r3, r0, lsl #8
   15484:	e5d10217 	ldrb	r0, [r1, #535]	; 0x217
   15488:	e1833802 	orr	r3, r3, r2, lsl #16
   1548c:	e59f20d4 	ldr	r2, [pc, #212]	; 15568 <CFATInfo::Initialize()+0x47c>
   15490:	e1833c00 	orr	r3, r3, r0, lsl #24
   15494:	e1530002 	cmp	r3, r2
   15498:	0a00000b 	beq	154cc <CFATInfo::Initialize()+0x3e0>
   1549c:	e3a02000 	mov	r2, #0, 0
   154a0:	e5940000 	ldr	r0, [r4]
   154a4:	ebfffd50 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   154a8:	eaffff29 	b	15154 <CFATInfo::Initialize()+0x68>
   154ac:	e3a020b7 	mov	r2, #183, 0	; 0xb7
   154b0:	e59f109c 	ldr	r1, [pc, #156]	; 15554 <CFATInfo::Initialize()+0x468>
   154b4:	e59f00a0 	ldr	r0, [pc, #160]	; 1555c <CFATInfo::Initialize()+0x470>
   154b8:	ebfff192 	bl	11b08 <assertion_failed>
   154bc:	e3a02095 	mov	r2, #149, 0	; 0x95
   154c0:	e59f108c 	ldr	r1, [pc, #140]	; 15554 <CFATInfo::Initialize()+0x468>
   154c4:	e59f0090 	ldr	r0, [pc, #144]	; 1555c <CFATInfo::Initialize()+0x470>
   154c8:	ebfff18e 	bl	11b08 <assertion_failed>
   154cc:	e5d12201 	ldrb	r2, [r1, #513]	; 0x201
   154d0:	e5d13200 	ldrb	r3, [r1, #512]	; 0x200
   154d4:	e5d10202 	ldrb	r0, [r1, #514]	; 0x202
   154d8:	e1833402 	orr	r3, r3, r2, lsl #8
   154dc:	e5d12203 	ldrb	r2, [r1, #515]	; 0x203
   154e0:	e1833800 	orr	r3, r3, r0, lsl #16
   154e4:	e1833c02 	orr	r3, r3, r2, lsl #24
   154e8:	e5843040 	str	r3, [r4, #64]	; 0x40
   154ec:	e5d12205 	ldrb	r2, [r1, #517]	; 0x205
   154f0:	e5d13204 	ldrb	r3, [r1, #516]	; 0x204
   154f4:	e5d10206 	ldrb	r0, [r1, #518]	; 0x206
   154f8:	e1833402 	orr	r3, r3, r2, lsl #8
   154fc:	e5d12207 	ldrb	r2, [r1, #519]	; 0x207
   15500:	e1833800 	orr	r3, r3, r0, lsl #16
   15504:	e1833c02 	orr	r3, r3, r2, lsl #24
   15508:	e5843044 	str	r3, [r4, #68]	; 0x44
   1550c:	e3a02000 	mov	r2, #0, 0
   15510:	e5940000 	ldr	r0, [r4]
   15514:	ebfffd34 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   15518:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   1551c:	e3730001 	cmn	r3, #1, 0
   15520:	03a02002 	moveq	r2, #2, 0
   15524:	15946034 	ldrne	r6, [r4, #52]	; 0x34
   15528:	15943038 	ldrne	r3, [r4, #56]	; 0x38
   1552c:	05946034 	ldreq	r6, [r4, #52]	; 0x34
   15530:	05943038 	ldreq	r3, [r4, #56]	; 0x38
   15534:	05842044 	streq	r2, [r4, #68]	; 0x44
   15538:	e0866003 	add	r6, r6, r3
   1553c:	eaffff4c 	b	15274 <CFATInfo::Initialize()+0x188>
   15540:	0000aa55 	.word	0x0000aa55
   15544:	00000ff4 	.word	0x00000ff4
   15548:	cccccccd 	.word	0xcccccccd
   1554c:	0001bbb4 	.word	0x0001bbb4
   15550:	0001bcac 	.word	0x0001bcac
   15554:	0001bb98 	.word	0x0001bb98
   15558:	0001bba4 	.word	0x0001bba4
   1555c:	0001ba68 	.word	0x0001ba68
   15560:	41615252 	.word	0x41615252
   15564:	61417272 	.word	0x61417272
   15568:	aa550000 	.word	0xaa550000

0001556c <CFATInfo::GetFATType() const>:
   1556c:	e5d00004 	ldrb	r0, [r0, #4]
   15570:	e3500002 	cmp	r0, #2, 0
   15574:	112fff1e 	bxne	lr
   15578:	e3a020c5 	mov	r2, #197, 0	; 0xc5
   1557c:	e92d4010 	push	{r4, lr}
   15580:	e59f1004 	ldr	r1, [pc, #4]	; 1558c <CFATInfo::GetFATType() const+0x20>
   15584:	e59f0004 	ldr	r0, [pc, #4]	; 15590 <CFATInfo::GetFATType() const+0x24>
   15588:	ebfff15e 	bl	11b08 <assertion_failed>
   1558c:	0001bb98 	.word	0x0001bb98
   15590:	0001bbd4 	.word	0x0001bbd4

00015594 <CFATInfo::GetSectorsPerCluster() const>:
   15594:	e5900008 	ldr	r0, [r0, #8]
   15598:	e12fff1e 	bx	lr

0001559c <CFATInfo::GetReservedSectors() const>:
   1559c:	e590000c 	ldr	r0, [r0, #12]
   155a0:	e12fff1e 	bx	lr

000155a4 <CFATInfo::GetClusterCount() const>:
   155a4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
   155a8:	e12fff1e 	bx	lr

000155ac <CFATInfo::GetReadFAT() const>:
   155ac:	e5d03004 	ldrb	r3, [r0, #4]
   155b0:	e3530001 	cmp	r3, #1, 0
   155b4:	0a000001 	beq	155c0 <CFATInfo::GetReadFAT() const+0x14>
   155b8:	e3a00000 	mov	r0, #0, 0
   155bc:	e12fff1e 	bx	lr
   155c0:	e5d03020 	ldrb	r3, [r0, #32]
   155c4:	e3530000 	cmp	r3, #0, 0
   155c8:	1afffffa 	bne	155b8 <CFATInfo::GetReadFAT() const+0xc>
   155cc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   155d0:	e12fff1e 	bx	lr

000155d4 <CFATInfo::GetFirstWriteFAT() const>:
   155d4:	eafffff4 	b	155ac <CFATInfo::GetReadFAT() const>

000155d8 <CFATInfo::GetLastWriteFAT() const>:
   155d8:	e5d03004 	ldrb	r3, [r0, #4]
   155dc:	e3530001 	cmp	r3, #1, 0
   155e0:	0a000004 	beq	155f8 <CFATInfo::GetLastWriteFAT() const+0x20>
   155e4:	e5900010 	ldr	r0, [r0, #16]
   155e8:	e3500000 	cmp	r0, #0, 0
   155ec:	0a000006 	beq	1560c <CFATInfo::GetLastWriteFAT() const+0x34>
   155f0:	e2400001 	sub	r0, r0, #1, 0
   155f4:	e12fff1e 	bx	lr
   155f8:	e5d03020 	ldrb	r3, [r0, #32]
   155fc:	e3530000 	cmp	r3, #0, 0
   15600:	1afffff7 	bne	155e4 <CFATInfo::GetLastWriteFAT() const+0xc>
   15604:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   15608:	e12fff1e 	bx	lr
   1560c:	e3a020f6 	mov	r2, #246, 0	; 0xf6
   15610:	e92d4010 	push	{r4, lr}
   15614:	e59f1004 	ldr	r1, [pc, #4]	; 15620 <CFATInfo::GetLastWriteFAT() const+0x48>
   15618:	e59f0004 	ldr	r0, [pc, #4]	; 15624 <CFATInfo::GetLastWriteFAT() const+0x4c>
   1561c:	ebfff139 	bl	11b08 <assertion_failed>
   15620:	0001bb98 	.word	0x0001bb98
   15624:	0001bbec 	.word	0x0001bbec

00015628 <CFATInfo::GetFATSize() const>:
   15628:	e5900018 	ldr	r0, [r0, #24]
   1562c:	e12fff1e 	bx	lr

00015630 <CFATInfo::GetFirstRootSector() const>:
   15630:	e5d03004 	ldrb	r3, [r0, #4]
   15634:	e3530000 	cmp	r3, #0, 0
   15638:	1a000004 	bne	15650 <CFATInfo::GetFirstRootSector() const+0x20>
   1563c:	e5902010 	ldr	r2, [r0, #16]
   15640:	e5901018 	ldr	r1, [r0, #24]
   15644:	e590000c 	ldr	r0, [r0, #12]
   15648:	e0200291 	mla	r0, r1, r2, r0
   1564c:	e12fff1e 	bx	lr
   15650:	e92d4010 	push	{r4, lr}
   15654:	e59f2008 	ldr	r2, [pc, #8]	; 15664 <CFATInfo::GetFirstRootSector() const+0x34>
   15658:	e59f1008 	ldr	r1, [pc, #8]	; 15668 <CFATInfo::GetFirstRootSector() const+0x38>
   1565c:	e59f0008 	ldr	r0, [pc, #8]	; 1566c <CFATInfo::GetFirstRootSector() const+0x3c>
   15660:	ebfff128 	bl	11b08 <assertion_failed>
   15664:	00000101 	.word	0x00000101
   15668:	0001bb98 	.word	0x0001bb98
   1566c:	0001bc00 	.word	0x0001bc00

00015670 <CFATInfo::GetRootSectorCount() const>:
   15670:	e5d03004 	ldrb	r3, [r0, #4]
   15674:	e3530000 	cmp	r3, #0, 0
   15678:	1a000001 	bne	15684 <CFATInfo::GetRootSectorCount() const+0x14>
   1567c:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   15680:	e12fff1e 	bx	lr
   15684:	e92d4010 	push	{r4, lr}
   15688:	e59f2008 	ldr	r2, [pc, #8]	; 15698 <CFATInfo::GetRootSectorCount() const+0x28>
   1568c:	e59f1008 	ldr	r1, [pc, #8]	; 1569c <CFATInfo::GetRootSectorCount() const+0x2c>
   15690:	e59f0008 	ldr	r0, [pc, #8]	; 156a0 <CFATInfo::GetRootSectorCount() const+0x30>
   15694:	ebfff11b 	bl	11b08 <assertion_failed>
   15698:	00000107 	.word	0x00000107
   1569c:	0001bb98 	.word	0x0001bb98
   156a0:	0001bc00 	.word	0x0001bc00

000156a4 <CFATInfo::GetRootEntries() const>:
   156a4:	e5d03004 	ldrb	r3, [r0, #4]
   156a8:	e3530000 	cmp	r3, #0, 0
   156ac:	1a000001 	bne	156b8 <CFATInfo::GetRootEntries() const+0x14>
   156b0:	e5900014 	ldr	r0, [r0, #20]
   156b4:	e12fff1e 	bx	lr
   156b8:	e92d4010 	push	{r4, lr}
   156bc:	e59f2008 	ldr	r2, [pc, #8]	; 156cc <CFATInfo::GetRootEntries() const+0x28>
   156c0:	e59f1008 	ldr	r1, [pc, #8]	; 156d0 <CFATInfo::GetRootEntries() const+0x2c>
   156c4:	e59f0008 	ldr	r0, [pc, #8]	; 156d4 <CFATInfo::GetRootEntries() const+0x30>
   156c8:	ebfff10e 	bl	11b08 <assertion_failed>
   156cc:	0000010d 	.word	0x0000010d
   156d0:	0001bb98 	.word	0x0001bb98
   156d4:	0001bc00 	.word	0x0001bc00

000156d8 <CFATInfo::GetRootCluster() const>:
   156d8:	e5d03004 	ldrb	r3, [r0, #4]
   156dc:	e3530001 	cmp	r3, #1, 0
   156e0:	1a000001 	bne	156ec <CFATInfo::GetRootCluster() const+0x14>
   156e4:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   156e8:	e12fff1e 	bx	lr
   156ec:	e92d4010 	push	{r4, lr}
   156f0:	e59f2008 	ldr	r2, [pc, #8]	; 15700 <CFATInfo::GetRootCluster() const+0x28>
   156f4:	e59f1008 	ldr	r1, [pc, #8]	; 15704 <CFATInfo::GetRootCluster() const+0x2c>
   156f8:	e59f0008 	ldr	r0, [pc, #8]	; 15708 <CFATInfo::GetRootCluster() const+0x30>
   156fc:	ebfff101 	bl	11b08 <assertion_failed>
   15700:	00000113 	.word	0x00000113
   15704:	0001bb98 	.word	0x0001bb98
   15708:	0001bc14 	.word	0x0001bc14

0001570c <CFATInfo::GetFirstSector(unsigned int) const>:
   1570c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   15710:	e2411002 	sub	r1, r1, #2, 0
   15714:	e1530001 	cmp	r3, r1
   15718:	9a000003 	bls	1572c <CFATInfo::GetFirstSector(unsigned int) const+0x20>
   1571c:	e5902008 	ldr	r2, [r0, #8]
   15720:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   15724:	e0200192 	mla	r0, r2, r1, r0
   15728:	e12fff1e 	bx	lr
   1572c:	e92d4010 	push	{r4, lr}
   15730:	e59f2008 	ldr	r2, [pc, #8]	; 15740 <CFATInfo::GetFirstSector(unsigned int) const+0x34>
   15734:	e59f1008 	ldr	r1, [pc, #8]	; 15744 <CFATInfo::GetFirstSector(unsigned int) const+0x38>
   15738:	e59f0008 	ldr	r0, [pc, #8]	; 15748 <CFATInfo::GetFirstSector(unsigned int) const+0x3c>
   1573c:	ebfff0f1 	bl	11b08 <assertion_failed>
   15740:	0000011a 	.word	0x0000011a
   15744:	0001bb98 	.word	0x0001bb98
   15748:	0001bc28 	.word	0x0001bc28

0001574c <CFATInfo::UpdateFSInfo()>:
   1574c:	e5d03004 	ldrb	r3, [r0, #4]
   15750:	e3530001 	cmp	r3, #1, 0
   15754:	112fff1e 	bxne	lr
   15758:	e92d4010 	push	{r4, lr}
   1575c:	e1a04000 	mov	r4, r0
   15760:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   15764:	e24dd008 	sub	sp, sp, #8, 0
   15768:	e3500000 	cmp	r0, #0, 0
   1576c:	1a000023 	bne	15800 <CFATInfo::UpdateFSInfo()+0xb4>
   15770:	e5940000 	ldr	r0, [r4]
   15774:	e3500000 	cmp	r0, #0, 0
   15778:	0a000044 	beq	15890 <CFATInfo::UpdateFSInfo()+0x144>
   1577c:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   15780:	e3a02000 	mov	r2, #0, 0
   15784:	ebfffd7d 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   15788:	e2501000 	subs	r1, r0, #0, 0
   1578c:	0a000046 	beq	158ac <CFATInfo::UpdateFSInfo()+0x160>
   15790:	e5d10019 	ldrb	r0, [r1, #25]
   15794:	e5d13018 	ldrb	r3, [r1, #24]
   15798:	e5d1201a 	ldrb	r2, [r1, #26]
   1579c:	e1833400 	orr	r3, r3, r0, lsl #8
   157a0:	e5d1001b 	ldrb	r0, [r1, #27]
   157a4:	e1833802 	orr	r3, r3, r2, lsl #16
   157a8:	e59f210c 	ldr	r2, [pc, #268]	; 158bc <CFATInfo::UpdateFSInfo()+0x170>
   157ac:	e1833c00 	orr	r3, r3, r0, lsl #24
   157b0:	e1530002 	cmp	r3, r2
   157b4:	1a000009 	bne	157e0 <CFATInfo::UpdateFSInfo()+0x94>
   157b8:	e5d101fd 	ldrb	r0, [r1, #509]	; 0x1fd
   157bc:	e5d131fc 	ldrb	r3, [r1, #508]	; 0x1fc
   157c0:	e5d121fe 	ldrb	r2, [r1, #510]	; 0x1fe
   157c4:	e1833400 	orr	r3, r3, r0, lsl #8
   157c8:	e5d101ff 	ldrb	r0, [r1, #511]	; 0x1ff
   157cc:	e1833802 	orr	r3, r3, r2, lsl #16
   157d0:	e59f20e8 	ldr	r2, [pc, #232]	; 158c0 <CFATInfo::UpdateFSInfo()+0x174>
   157d4:	e1833c00 	orr	r3, r3, r0, lsl #24
   157d8:	e1530002 	cmp	r3, r2
   157dc:	0a00000c 	beq	15814 <CFATInfo::UpdateFSInfo()+0xc8>
   157e0:	e3a02001 	mov	r2, #1, 0
   157e4:	e5940000 	ldr	r0, [r4]
   157e8:	ebfffc7f 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   157ec:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   157f0:	e3530000 	cmp	r3, #0, 0
   157f4:	1a000029 	bne	158a0 <CFATInfo::UpdateFSInfo()+0x154>
   157f8:	e28dd008 	add	sp, sp, #8, 0
   157fc:	e8bd8010 	pop	{r4, pc}
   15800:	ebffef04 	bl	11418 <EnterCritical>
   15804:	e5940000 	ldr	r0, [r4]
   15808:	e3500000 	cmp	r0, #0, 0
   1580c:	1affffda 	bne	1577c <CFATInfo::UpdateFSInfo()+0x30>
   15810:	ea00001e 	b	15890 <CFATInfo::UpdateFSInfo()+0x144>
   15814:	e5d10215 	ldrb	r0, [r1, #533]	; 0x215
   15818:	e5d13214 	ldrb	r3, [r1, #532]	; 0x214
   1581c:	e5d12216 	ldrb	r2, [r1, #534]	; 0x216
   15820:	e1833400 	orr	r3, r3, r0, lsl #8
   15824:	e5d10217 	ldrb	r0, [r1, #535]	; 0x217
   15828:	e1833802 	orr	r3, r3, r2, lsl #16
   1582c:	e59f2090 	ldr	r2, [pc, #144]	; 158c4 <CFATInfo::UpdateFSInfo()+0x178>
   15830:	e1833c00 	orr	r3, r3, r0, lsl #24
   15834:	e1530002 	cmp	r3, r2
   15838:	1affffe8 	bne	157e0 <CFATInfo::UpdateFSInfo()+0x94>
   1583c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   15840:	e58d1004 	str	r1, [sp, #4]
   15844:	e5c13200 	strb	r3, [r1, #512]	; 0x200
   15848:	e1a00423 	lsr	r0, r3, #8
   1584c:	e1a02823 	lsr	r2, r3, #16
   15850:	e1a03c23 	lsr	r3, r3, #24
   15854:	e5c10201 	strb	r0, [r1, #513]	; 0x201
   15858:	e5c12202 	strb	r2, [r1, #514]	; 0x202
   1585c:	e5c13203 	strb	r3, [r1, #515]	; 0x203
   15860:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   15864:	e5940000 	ldr	r0, [r4]
   15868:	e1a02423 	lsr	r2, r3, #8
   1586c:	e5c13204 	strb	r3, [r1, #516]	; 0x204
   15870:	e5c12205 	strb	r2, [r1, #517]	; 0x205
   15874:	e1a02823 	lsr	r2, r3, #16
   15878:	e1a03c23 	lsr	r3, r3, #24
   1587c:	e5c12206 	strb	r2, [r1, #518]	; 0x206
   15880:	e5c13207 	strb	r3, [r1, #519]	; 0x207
   15884:	ebfffc93 	bl	14ad8 <CFATCache::MarkDirty(TFATBuffer*)>
   15888:	e59d1004 	ldr	r1, [sp, #4]
   1588c:	eaffffd3 	b	157e0 <CFATInfo::UpdateFSInfo()+0x94>
   15890:	e3a02f4a 	mov	r2, #296	; 0x128
   15894:	e59f102c 	ldr	r1, [pc, #44]	; 158c8 <CFATInfo::UpdateFSInfo()+0x17c>
   15898:	e59f002c 	ldr	r0, [pc, #44]	; 158cc <CFATInfo::UpdateFSInfo()+0x180>
   1589c:	ebfff099 	bl	11b08 <assertion_failed>
   158a0:	e28dd008 	add	sp, sp, #8, 0
   158a4:	e8bd4010 	pop	{r4, lr}
   158a8:	eaffef04 	b	114c0 <LeaveCritical>
   158ac:	e59f201c 	ldr	r2, [pc, #28]	; 158d0 <CFATInfo::UpdateFSInfo()+0x184>
   158b0:	e59f1010 	ldr	r1, [pc, #16]	; 158c8 <CFATInfo::UpdateFSInfo()+0x17c>
   158b4:	e59f0018 	ldr	r0, [pc, #24]	; 158d4 <CFATInfo::UpdateFSInfo()+0x188>
   158b8:	ebfff092 	bl	11b08 <assertion_failed>
   158bc:	41615252 	.word	0x41615252
   158c0:	61417272 	.word	0x61417272
   158c4:	aa550000 	.word	0xaa550000
   158c8:	0001bb98 	.word	0x0001bb98
   158cc:	0001bba4 	.word	0x0001bba4
   158d0:	0000012a 	.word	0x0000012a
   158d4:	0001ba68 	.word	0x0001ba68

000158d8 <CFATInfo::ClusterAllocated(unsigned int)>:
   158d8:	e92d4070 	push	{r4, r5, r6, lr}
   158dc:	e1a04000 	mov	r4, r0
   158e0:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   158e4:	e1a05001 	mov	r5, r1
   158e8:	e3500000 	cmp	r0, #0, 0
   158ec:	1a00000c 	bne	15924 <CFATInfo::ClusterAllocated(unsigned int)+0x4c>
   158f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   158f4:	e2433001 	sub	r3, r3, #1, 0
   158f8:	e3730003 	cmn	r3, #3, 0
   158fc:	95843040 	strls	r3, [r4, #64]	; 0x40
   15900:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   15904:	e1530005 	cmp	r3, r5
   15908:	33a05002 	movcc	r5, #2, 0
   1590c:	22855001 	addcs	r5, r5, #1, 0
   15910:	e3500000 	cmp	r0, #0, 0
   15914:	e5845044 	str	r5, [r4, #68]	; 0x44
   15918:	08bd8070 	popeq	{r4, r5, r6, pc}
   1591c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15920:	eaffeee6 	b	114c0 <LeaveCritical>
   15924:	ebffeebb 	bl	11418 <EnterCritical>
   15928:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   1592c:	eaffffef 	b	158f0 <CFATInfo::ClusterAllocated(unsigned int)+0x18>

00015930 <CFATInfo::ClusterFreed(unsigned int)>:
   15930:	e92d4070 	push	{r4, r5, r6, lr}
   15934:	e1a04000 	mov	r4, r0
   15938:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   1593c:	e1a05001 	mov	r5, r1
   15940:	e3500000 	cmp	r0, #0, 0
   15944:	1a000016 	bne	159a4 <CFATInfo::ClusterFreed(unsigned int)+0x74>
   15948:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1594c:	e3730001 	cmn	r3, #1, 0
   15950:	0a000003 	beq	15964 <CFATInfo::ClusterFreed(unsigned int)+0x34>
   15954:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   15958:	e1530002 	cmp	r3, r2
   1595c:	32833001 	addcc	r3, r3, #1, 0
   15960:	35843040 	strcc	r3, [r4, #64]	; 0x40
   15964:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   15968:	e3730001 	cmn	r3, #1, 0
   1596c:	0a00000e 	beq	159ac <CFATInfo::ClusterFreed(unsigned int)+0x7c>
   15970:	e3530001 	cmp	r3, #1, 0
   15974:	9a000010 	bls	159bc <CFATInfo::ClusterFreed(unsigned int)+0x8c>
   15978:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   1597c:	e2822001 	add	r2, r2, #1, 0
   15980:	e1530002 	cmp	r3, r2
   15984:	8a000010 	bhi	159cc <CFATInfo::ClusterFreed(unsigned int)+0x9c>
   15988:	e1530005 	cmp	r3, r5
   1598c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   15990:	85845044 	strhi	r5, [r4, #68]	; 0x44
   15994:	e3530000 	cmp	r3, #0, 0
   15998:	08bd8070 	popeq	{r4, r5, r6, pc}
   1599c:	e8bd4070 	pop	{r4, r5, r6, lr}
   159a0:	eaffeec6 	b	114c0 <LeaveCritical>
   159a4:	ebffee9b 	bl	11418 <EnterCritical>
   159a8:	eaffffe6 	b	15948 <CFATInfo::ClusterFreed(unsigned int)+0x18>
   159ac:	e3a02f59 	mov	r2, #356	; 0x164
   159b0:	e59f1024 	ldr	r1, [pc, #36]	; 159dc <CFATInfo::ClusterFreed(unsigned int)+0xac>
   159b4:	e59f0024 	ldr	r0, [pc, #36]	; 159e0 <CFATInfo::ClusterFreed(unsigned int)+0xb0>
   159b8:	ebfff052 	bl	11b08 <assertion_failed>
   159bc:	e59f2020 	ldr	r2, [pc, #32]	; 159e4 <CFATInfo::ClusterFreed(unsigned int)+0xb4>
   159c0:	e59f1014 	ldr	r1, [pc, #20]	; 159dc <CFATInfo::ClusterFreed(unsigned int)+0xac>
   159c4:	e59f001c 	ldr	r0, [pc, #28]	; 159e8 <CFATInfo::ClusterFreed(unsigned int)+0xb8>
   159c8:	ebfff04e 	bl	11b08 <assertion_failed>
   159cc:	e59f2018 	ldr	r2, [pc, #24]	; 159ec <CFATInfo::ClusterFreed(unsigned int)+0xbc>
   159d0:	e59f1004 	ldr	r1, [pc, #4]	; 159dc <CFATInfo::ClusterFreed(unsigned int)+0xac>
   159d4:	e59f0014 	ldr	r0, [pc, #20]	; 159f0 <CFATInfo::ClusterFreed(unsigned int)+0xc0>
   159d8:	ebfff04a 	bl	11b08 <assertion_failed>
   159dc:	0001bb98 	.word	0x0001bb98
   159e0:	0001bc40 	.word	0x0001bc40
   159e4:	00000165 	.word	0x00000165
   159e8:	0001bc70 	.word	0x0001bc70
   159ec:	00000166 	.word	0x00000166
   159f0:	0001bc88 	.word	0x0001bc88

000159f4 <CFATInfo::GetNextFreeCluster()>:
   159f4:	e92d4010 	push	{r4, lr}
   159f8:	e1a04000 	mov	r4, r0
   159fc:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   15a00:	e24dd008 	sub	sp, sp, #8, 0
   15a04:	e3500000 	cmp	r0, #0, 0
   15a08:	05940044 	ldreq	r0, [r4, #68]	; 0x44
   15a0c:	1a000001 	bne	15a18 <CFATInfo::GetNextFreeCluster()+0x24>
   15a10:	e28dd008 	add	sp, sp, #8, 0
   15a14:	e8bd8010 	pop	{r4, pc}
   15a18:	ebffee7e 	bl	11418 <EnterCritical>
   15a1c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   15a20:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   15a24:	e3530000 	cmp	r3, #0, 0
   15a28:	0afffff8 	beq	15a10 <CFATInfo::GetNextFreeCluster()+0x1c>
   15a2c:	e58d0004 	str	r0, [sp, #4]
   15a30:	ebffeea2 	bl	114c0 <LeaveCritical>
   15a34:	e59d0004 	ldr	r0, [sp, #4]
   15a38:	e28dd008 	add	sp, sp, #8, 0
   15a3c:	e8bd8010 	pop	{r4, pc}

00015a40 <CFAT::CFAT(CFATCache*, CFATInfo*)>:
   15a40:	e3a0c000 	mov	ip, #0, 0
   15a44:	e8801006 	stm	r0, {r1, r2, ip}
   15a48:	e12fff1e 	bx	lr

00015a4c <CFAT::~CFAT()>:
   15a4c:	e12fff1e 	bx	lr

00015a50 <CFAT::IsEOC(unsigned int) const>:
   15a50:	e92d4070 	push	{r4, r5, r6, lr}
   15a54:	e1a05000 	mov	r5, r0
   15a58:	e5900004 	ldr	r0, [r0, #4]
   15a5c:	e3500000 	cmp	r0, #0, 0
   15a60:	0a000010 	beq	15aa8 <CFAT::IsEOC(unsigned int) const+0x58>
   15a64:	e1a04001 	mov	r4, r1
   15a68:	ebfffebf 	bl	1556c <CFATInfo::GetFATType() const>
   15a6c:	e3500000 	cmp	r0, #0, 0
   15a70:	1a000004 	bne	15a88 <CFAT::IsEOC(unsigned int) const+0x38>
   15a74:	e59f004c 	ldr	r0, [pc, #76]	; 15ac8 <CFAT::IsEOC(unsigned int) const+0x78>
   15a78:	e1540000 	cmp	r4, r0
   15a7c:	93a00000 	movls	r0, #0, 0
   15a80:	83a00001 	movhi	r0, #1, 0
   15a84:	e8bd8070 	pop	{r4, r5, r6, pc}
   15a88:	e5950004 	ldr	r0, [r5, #4]
   15a8c:	ebfffeb6 	bl	1556c <CFATInfo::GetFATType() const>
   15a90:	e3500001 	cmp	r0, #1, 0
   15a94:	1a000007 	bne	15ab8 <CFAT::IsEOC(unsigned int) const+0x68>
   15a98:	e374029f 	cmn	r4, #-268435447	; 0xf0000009
   15a9c:	93a00000 	movls	r0, #0, 0
   15aa0:	83a00001 	movhi	r0, #1, 0
   15aa4:	e8bd8070 	pop	{r4, r5, r6, pc}
   15aa8:	e3a0203a 	mov	r2, #58, 0	; 0x3a
   15aac:	e59f1018 	ldr	r1, [pc, #24]	; 15acc <CFAT::IsEOC(unsigned int) const+0x7c>
   15ab0:	e59f0018 	ldr	r0, [pc, #24]	; 15ad0 <CFAT::IsEOC(unsigned int) const+0x80>
   15ab4:	ebfff013 	bl	11b08 <assertion_failed>
   15ab8:	e3a02044 	mov	r2, #68, 0	; 0x44
   15abc:	e59f1008 	ldr	r1, [pc, #8]	; 15acc <CFAT::IsEOC(unsigned int) const+0x7c>
   15ac0:	e59f000c 	ldr	r0, [pc, #12]	; 15ad4 <CFAT::IsEOC(unsigned int) const+0x84>
   15ac4:	ebfff00f 	bl	11b08 <assertion_failed>
   15ac8:	0000fff7 	.word	0x0000fff7
   15acc:	0001bcb4 	.word	0x0001bcb4
   15ad0:	0001bcbc 	.word	0x0001bcbc
   15ad4:	0001bccc 	.word	0x0001bccc

00015ad8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>:
   15ad8:	e3510001 	cmp	r1, #1, 0
   15adc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15ae0:	9a000026 	bls	15b80 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xa8>
   15ae4:	e1a05000 	mov	r5, r0
   15ae8:	e5900004 	ldr	r0, [r0, #4]
   15aec:	e3500000 	cmp	r0, #0, 0
   15af0:	0a000026 	beq	15b90 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xb8>
   15af4:	e1a04001 	mov	r4, r1
   15af8:	e1a06002 	mov	r6, r2
   15afc:	e1a07003 	mov	r7, r3
   15b00:	ebfffe99 	bl	1556c <CFATInfo::GetFATType() const>
   15b04:	e3500000 	cmp	r0, #0, 0
   15b08:	01a04084 	lsleq	r4, r4, #1
   15b0c:	1a000012 	bne	15b5c <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0x84>
   15b10:	e5950004 	ldr	r0, [r5, #4]
   15b14:	ebfffea0 	bl	1559c <CFATInfo::GetReservedSectors() const>
   15b18:	e1a08000 	mov	r8, r0
   15b1c:	e5950004 	ldr	r0, [r5, #4]
   15b20:	ebfffec0 	bl	15628 <CFATInfo::GetFATSize() const>
   15b24:	e1a034a4 	lsr	r3, r4, #9
   15b28:	e0233097 	mla	r3, r7, r0, r3
   15b2c:	e3560000 	cmp	r6, #0, 0
   15b30:	e0831008 	add	r1, r3, r8
   15b34:	0a000019 	beq	15ba0 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xc8>
   15b38:	e5950000 	ldr	r0, [r5]
   15b3c:	e59f307c 	ldr	r3, [pc, #124]	; 15bc0 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xe8>
   15b40:	e3500000 	cmp	r0, #0, 0
   15b44:	e0033004 	and	r3, r3, r4
   15b48:	e5863000 	str	r3, [r6]
   15b4c:	0a000017 	beq	15bb0 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xd8>
   15b50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   15b54:	e3a02000 	mov	r2, #0, 0
   15b58:	eafffc88 	b	14d80 <CFATCache::GetSector(unsigned int, int)>
   15b5c:	e5950004 	ldr	r0, [r5, #4]
   15b60:	ebfffe81 	bl	1556c <CFATInfo::GetFATType() const>
   15b64:	e3500001 	cmp	r0, #1, 0
   15b68:	01a04104 	lsleq	r4, r4, #2
   15b6c:	0affffe7 	beq	15b10 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0x38>
   15b70:	e3a020b2 	mov	r2, #178, 0	; 0xb2
   15b74:	e59f1048 	ldr	r1, [pc, #72]	; 15bc4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xec>
   15b78:	e59f0048 	ldr	r0, [pc, #72]	; 15bc8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xf0>
   15b7c:	ebffefe1 	bl	11b08 <assertion_failed>
   15b80:	e3a020a7 	mov	r2, #167, 0	; 0xa7
   15b84:	e59f1038 	ldr	r1, [pc, #56]	; 15bc4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xec>
   15b88:	e59f003c 	ldr	r0, [pc, #60]	; 15bcc <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xf4>
   15b8c:	ebffefdd 	bl	11b08 <assertion_failed>
   15b90:	e3a020ab 	mov	r2, #171, 0	; 0xab
   15b94:	e59f1028 	ldr	r1, [pc, #40]	; 15bc4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xec>
   15b98:	e59f0030 	ldr	r0, [pc, #48]	; 15bd0 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xf8>
   15b9c:	ebffefd9 	bl	11b08 <assertion_failed>
   15ba0:	e3a020bb 	mov	r2, #187, 0	; 0xbb
   15ba4:	e59f1018 	ldr	r1, [pc, #24]	; 15bc4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xec>
   15ba8:	e59f0024 	ldr	r0, [pc, #36]	; 15bd4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xfc>
   15bac:	ebffefd5 	bl	11b08 <assertion_failed>
   15bb0:	e3a020be 	mov	r2, #190, 0	; 0xbe
   15bb4:	e59f1008 	ldr	r1, [pc, #8]	; 15bc4 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0xec>
   15bb8:	e59f0018 	ldr	r0, [pc, #24]	; 15bd8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)+0x100>
   15bbc:	ebffefd1 	bl	11b08 <assertion_failed>
   15bc0:	000001fe 	.word	0x000001fe
   15bc4:	0001bcb4 	.word	0x0001bcb4
   15bc8:	0001bccc 	.word	0x0001bccc
   15bcc:	0001bcf0 	.word	0x0001bcf0
   15bd0:	0001bcbc 	.word	0x0001bcbc
   15bd4:	0001bd00 	.word	0x0001bd00
   15bd8:	0001bba4 	.word	0x0001bba4

00015bdc <CFAT::GetEntry(TFATBuffer*, unsigned int)>:
   15bdc:	e92d4070 	push	{r4, r5, r6, lr}
   15be0:	e2514000 	subs	r4, r1, #0, 0
   15be4:	0a000019 	beq	15c50 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0x74>
   15be8:	e5900004 	ldr	r0, [r0, #4]
   15bec:	e1a05002 	mov	r5, r2
   15bf0:	ebfffe5d 	bl	1556c <CFATInfo::GetFATType() const>
   15bf4:	e3500000 	cmp	r0, #0, 0
   15bf8:	1a000007 	bne	15c1c <CFAT::GetEntry(TFATBuffer*, unsigned int)+0x40>
   15bfc:	e59f307c 	ldr	r3, [pc, #124]	; 15c80 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xa4>
   15c00:	e1550003 	cmp	r5, r3
   15c04:	8a000015 	bhi	15c60 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0x84>
   15c08:	e0841005 	add	r1, r4, r5
   15c0c:	e5d13019 	ldrb	r3, [r1, #25]
   15c10:	e5d10018 	ldrb	r0, [r1, #24]
   15c14:	e1800403 	orr	r0, r0, r3, lsl #8
   15c18:	e8bd8070 	pop	{r4, r5, r6, pc}
   15c1c:	e3550f7f 	cmp	r5, #508	; 0x1fc
   15c20:	8a000012 	bhi	15c70 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0x94>
   15c24:	e0841005 	add	r1, r4, r5
   15c28:	e5d1001a 	ldrb	r0, [r1, #26]
   15c2c:	e5d13019 	ldrb	r3, [r1, #25]
   15c30:	e5d12018 	ldrb	r2, [r1, #24]
   15c34:	e1a00800 	lsl	r0, r0, #16
   15c38:	e1800403 	orr	r0, r0, r3, lsl #8
   15c3c:	e5d1301b 	ldrb	r3, [r1, #27]
   15c40:	e1800002 	orr	r0, r0, r2
   15c44:	e1800c03 	orr	r0, r0, r3, lsl #24
   15c48:	e3c0020f 	bic	r0, r0, #-268435456	; 0xf0000000
   15c4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15c50:	e3a020c4 	mov	r2, #196, 0	; 0xc4
   15c54:	e59f1028 	ldr	r1, [pc, #40]	; 15c84 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xa8>
   15c58:	e59f0028 	ldr	r0, [pc, #40]	; 15c88 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xac>
   15c5c:	ebffefa9 	bl	11b08 <assertion_failed>
   15c60:	e3a020c9 	mov	r2, #201, 0	; 0xc9
   15c64:	e59f1018 	ldr	r1, [pc, #24]	; 15c84 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xa8>
   15c68:	e59f001c 	ldr	r0, [pc, #28]	; 15c8c <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xb0>
   15c6c:	ebffefa5 	bl	11b08 <assertion_failed>
   15c70:	e3a020cf 	mov	r2, #207, 0	; 0xcf
   15c74:	e59f1008 	ldr	r1, [pc, #8]	; 15c84 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xa8>
   15c78:	e59f0010 	ldr	r0, [pc, #16]	; 15c90 <CFAT::GetEntry(TFATBuffer*, unsigned int)+0xb4>
   15c7c:	ebffefa1 	bl	11b08 <assertion_failed>
   15c80:	000001fe 	.word	0x000001fe
   15c84:	0001bcb4 	.word	0x0001bcb4
   15c88:	0001ba68 	.word	0x0001ba68
   15c8c:	0001bd14 	.word	0x0001bd14
   15c90:	0001bd38 	.word	0x0001bd38

00015c94 <CFAT::GetClusterEntry(unsigned int)>:
   15c94:	e92d4030 	push	{r4, r5, lr}
   15c98:	e1a04000 	mov	r4, r0
   15c9c:	e5900008 	ldr	r0, [r0, #8]
   15ca0:	e1a05001 	mov	r5, r1
   15ca4:	e3500000 	cmp	r0, #0, 0
   15ca8:	e24dd014 	sub	sp, sp, #20, 0
   15cac:	1a000020 	bne	15d34 <CFAT::GetClusterEntry(unsigned int)+0xa0>
   15cb0:	e5940004 	ldr	r0, [r4, #4]
   15cb4:	e3500000 	cmp	r0, #0, 0
   15cb8:	0a000021 	beq	15d44 <CFAT::GetClusterEntry(unsigned int)+0xb0>
   15cbc:	ebfffe3a 	bl	155ac <CFATInfo::GetReadFAT() const>
   15cc0:	e1a01005 	mov	r1, r5
   15cc4:	e1a03000 	mov	r3, r0
   15cc8:	e28d200c 	add	r2, sp, #12, 0
   15ccc:	e1a00004 	mov	r0, r4
   15cd0:	ebffff80 	bl	15ad8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   15cd4:	e2501000 	subs	r1, r0, #0, 0
   15cd8:	0a00001d 	beq	15d54 <CFAT::GetClusterEntry(unsigned int)+0xc0>
   15cdc:	e1a00004 	mov	r0, r4
   15ce0:	e59d200c 	ldr	r2, [sp, #12]
   15ce4:	e58d1004 	str	r1, [sp, #4]
   15ce8:	ebffffbb 	bl	15bdc <CFAT::GetEntry(TFATBuffer*, unsigned int)>
   15cec:	e5943000 	ldr	r3, [r4]
   15cf0:	e1a05000 	mov	r5, r0
   15cf4:	e3530000 	cmp	r3, #0, 0
   15cf8:	e59d1004 	ldr	r1, [sp, #4]
   15cfc:	0a000018 	beq	15d64 <CFAT::GetClusterEntry(unsigned int)+0xd0>
   15d00:	e1a00003 	mov	r0, r3
   15d04:	e3a02001 	mov	r2, #1, 0
   15d08:	ebfffb37 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   15d0c:	e5943008 	ldr	r3, [r4, #8]
   15d10:	e3530000 	cmp	r3, #0, 0
   15d14:	1a000002 	bne	15d24 <CFAT::GetClusterEntry(unsigned int)+0x90>
   15d18:	e1a00005 	mov	r0, r5
   15d1c:	e28dd014 	add	sp, sp, #20, 0
   15d20:	e8bd8030 	pop	{r4, r5, pc}
   15d24:	ebffede5 	bl	114c0 <LeaveCritical>
   15d28:	e1a00005 	mov	r0, r5
   15d2c:	e28dd014 	add	sp, sp, #20, 0
   15d30:	e8bd8030 	pop	{r4, r5, pc}
   15d34:	ebffedb7 	bl	11418 <EnterCritical>
   15d38:	e5940004 	ldr	r0, [r4, #4]
   15d3c:	e3500000 	cmp	r0, #0, 0
   15d40:	1affffdd 	bne	15cbc <CFAT::GetClusterEntry(unsigned int)+0x28>
   15d44:	e3a0202a 	mov	r2, #42, 0	; 0x2a
   15d48:	e59f1024 	ldr	r1, [pc, #36]	; 15d74 <CFAT::GetClusterEntry(unsigned int)+0xe0>
   15d4c:	e59f0024 	ldr	r0, [pc, #36]	; 15d78 <CFAT::GetClusterEntry(unsigned int)+0xe4>
   15d50:	ebffef6c 	bl	11b08 <assertion_failed>
   15d54:	e3a0202c 	mov	r2, #44, 0	; 0x2c
   15d58:	e59f1014 	ldr	r1, [pc, #20]	; 15d74 <CFAT::GetClusterEntry(unsigned int)+0xe0>
   15d5c:	e59f0018 	ldr	r0, [pc, #24]	; 15d7c <CFAT::GetClusterEntry(unsigned int)+0xe8>
   15d60:	ebffef68 	bl	11b08 <assertion_failed>
   15d64:	e3a02030 	mov	r2, #48, 0	; 0x30
   15d68:	e59f1004 	ldr	r1, [pc, #4]	; 15d74 <CFAT::GetClusterEntry(unsigned int)+0xe0>
   15d6c:	e59f000c 	ldr	r0, [pc, #12]	; 15d80 <CFAT::GetClusterEntry(unsigned int)+0xec>
   15d70:	ebffef64 	bl	11b08 <assertion_failed>
   15d74:	0001bcb4 	.word	0x0001bcb4
   15d78:	0001bcbc 	.word	0x0001bcbc
   15d7c:	0001ba68 	.word	0x0001ba68
   15d80:	0001bba4 	.word	0x0001bba4

00015d84 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)>:
   15d84:	e92d4070 	push	{r4, r5, r6, lr}
   15d88:	e2515000 	subs	r5, r1, #0, 0
   15d8c:	0a000020 	beq	15e14 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0x90>
   15d90:	e5900004 	ldr	r0, [r0, #4]
   15d94:	e1a04002 	mov	r4, r2
   15d98:	e1a06003 	mov	r6, r3
   15d9c:	ebfffdf2 	bl	1556c <CFATInfo::GetFATType() const>
   15da0:	e3500000 	cmp	r0, #0, 0
   15da4:	1a000009 	bne	15dd0 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0x4c>
   15da8:	e59f30b4 	ldr	r3, [pc, #180]	; 15e64 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe0>
   15dac:	e1540003 	cmp	r4, r3
   15db0:	8a00001b 	bhi	15e24 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xa0>
   15db4:	e3560801 	cmp	r6, #65536	; 0x10000
   15db8:	2a000025 	bcs	15e54 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xd0>
   15dbc:	e0854004 	add	r4, r5, r4
   15dc0:	e1a03426 	lsr	r3, r6, #8
   15dc4:	e5c46018 	strb	r6, [r4, #24]
   15dc8:	e5c43019 	strb	r3, [r4, #25]
   15dcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   15dd0:	e3540f7f 	cmp	r4, #508	; 0x1fc
   15dd4:	8a000016 	bhi	15e34 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xb0>
   15dd8:	e376021f 	cmn	r6, #-268435455	; 0xf0000001
   15ddc:	8a000018 	bhi	15e44 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xc0>
   15de0:	e0853004 	add	r3, r5, r4
   15de4:	e1a01426 	lsr	r1, r6, #8
   15de8:	e1a02826 	lsr	r2, r6, #16
   15dec:	e2844003 	add	r4, r4, #3, 0
   15df0:	e5c36018 	strb	r6, [r3, #24]
   15df4:	e0854004 	add	r4, r5, r4
   15df8:	e5c31019 	strb	r1, [r3, #25]
   15dfc:	e5c3201a 	strb	r2, [r3, #26]
   15e00:	e5d43018 	ldrb	r3, [r4, #24]
   15e04:	e3c3300f 	bic	r3, r3, #15, 0
   15e08:	e1836c26 	orr	r6, r3, r6, lsr #24
   15e0c:	e5c46018 	strb	r6, [r4, #24]
   15e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   15e14:	e3a020db 	mov	r2, #219, 0	; 0xdb
   15e18:	e59f1048 	ldr	r1, [pc, #72]	; 15e68 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe4>
   15e1c:	e59f0048 	ldr	r0, [pc, #72]	; 15e6c <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe8>
   15e20:	ebffef38 	bl	11b08 <assertion_failed>
   15e24:	e3a020df 	mov	r2, #223, 0	; 0xdf
   15e28:	e59f1038 	ldr	r1, [pc, #56]	; 15e68 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe4>
   15e2c:	e59f003c 	ldr	r0, [pc, #60]	; 15e70 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xec>
   15e30:	ebffef34 	bl	11b08 <assertion_failed>
   15e34:	e3a020e6 	mov	r2, #230, 0	; 0xe6
   15e38:	e59f1028 	ldr	r1, [pc, #40]	; 15e68 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe4>
   15e3c:	e59f0030 	ldr	r0, [pc, #48]	; 15e74 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xf0>
   15e40:	ebffef30 	bl	11b08 <assertion_failed>
   15e44:	e3a020e7 	mov	r2, #231, 0	; 0xe7
   15e48:	e59f1018 	ldr	r1, [pc, #24]	; 15e68 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe4>
   15e4c:	e59f0024 	ldr	r0, [pc, #36]	; 15e78 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xf4>
   15e50:	ebffef2c 	bl	11b08 <assertion_failed>
   15e54:	e3a020e0 	mov	r2, #224, 0	; 0xe0
   15e58:	e59f1008 	ldr	r1, [pc, #8]	; 15e68 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xe4>
   15e5c:	e59f0018 	ldr	r0, [pc, #24]	; 15e7c <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)+0xf8>
   15e60:	ebffef28 	bl	11b08 <assertion_failed>
   15e64:	000001fe 	.word	0x000001fe
   15e68:	0001bcb4 	.word	0x0001bcb4
   15e6c:	0001ba68 	.word	0x0001ba68
   15e70:	0001bd14 	.word	0x0001bd14
   15e74:	0001bd38 	.word	0x0001bd38
   15e78:	0001bd70 	.word	0x0001bd70
   15e7c:	0001bd5c 	.word	0x0001bd5c

00015e80 <CFAT::SetClusterEntry(unsigned int, unsigned int)>:
   15e80:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15e84:	e1a04000 	mov	r4, r0
   15e88:	e5900008 	ldr	r0, [r0, #8]
   15e8c:	e1a06001 	mov	r6, r1
   15e90:	e3500000 	cmp	r0, #0, 0
   15e94:	e1a07002 	mov	r7, r2
   15e98:	e24dd014 	sub	sp, sp, #20, 0
   15e9c:	1a000030 	bne	15f64 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xe4>
   15ea0:	e5940004 	ldr	r0, [r4, #4]
   15ea4:	e3500000 	cmp	r0, #0, 0
   15ea8:	0a000031 	beq	15f74 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xf4>
   15eac:	ebfffdc8 	bl	155d4 <CFATInfo::GetFirstWriteFAT() const>
   15eb0:	e1a05000 	mov	r5, r0
   15eb4:	e5940004 	ldr	r0, [r4, #4]
   15eb8:	ebfffdc6 	bl	155d8 <CFATInfo::GetLastWriteFAT() const>
   15ebc:	e1500005 	cmp	r0, r5
   15ec0:	3a00001a 	bcc	15f30 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xb0>
   15ec4:	e1a01006 	mov	r1, r6
   15ec8:	e1a03005 	mov	r3, r5
   15ecc:	e1a00004 	mov	r0, r4
   15ed0:	e28d200c 	add	r2, sp, #12, 0
   15ed4:	ebfffeff 	bl	15ad8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   15ed8:	e2501000 	subs	r1, r0, #0, 0
   15edc:	0a000018 	beq	15f44 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xc4>
   15ee0:	e1a00004 	mov	r0, r4
   15ee4:	e1a03007 	mov	r3, r7
   15ee8:	e59d200c 	ldr	r2, [sp, #12]
   15eec:	e58d1004 	str	r1, [sp, #4]
   15ef0:	ebffffa3 	bl	15d84 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)>
   15ef4:	e5940000 	ldr	r0, [r4]
   15ef8:	e59d1004 	ldr	r1, [sp, #4]
   15efc:	e3500000 	cmp	r0, #0, 0
   15f00:	0a000013 	beq	15f54 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xd4>
   15f04:	e58d1004 	str	r1, [sp, #4]
   15f08:	ebfffaf2 	bl	14ad8 <CFATCache::MarkDirty(TFATBuffer*)>
   15f0c:	e3a02001 	mov	r2, #1, 0
   15f10:	e59d1004 	ldr	r1, [sp, #4]
   15f14:	e5940000 	ldr	r0, [r4]
   15f18:	e0855002 	add	r5, r5, r2
   15f1c:	ebfffab2 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   15f20:	e5940004 	ldr	r0, [r4, #4]
   15f24:	ebfffdab 	bl	155d8 <CFATInfo::GetLastWriteFAT() const>
   15f28:	e1500005 	cmp	r0, r5
   15f2c:	2affffe4 	bcs	15ec4 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x44>
   15f30:	e5943008 	ldr	r3, [r4, #8]
   15f34:	e3530000 	cmp	r3, #0, 0
   15f38:	1a000011 	bne	15f84 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x104>
   15f3c:	e28dd014 	add	sp, sp, #20, 0
   15f40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15f44:	e3a02058 	mov	r2, #88, 0	; 0x58
   15f48:	e59f103c 	ldr	r1, [pc, #60]	; 15f8c <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x10c>
   15f4c:	e59f003c 	ldr	r0, [pc, #60]	; 15f90 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x110>
   15f50:	ebffeeec 	bl	11b08 <assertion_failed>
   15f54:	e3a0205c 	mov	r2, #92, 0	; 0x5c
   15f58:	e59f102c 	ldr	r1, [pc, #44]	; 15f8c <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x10c>
   15f5c:	e59f0030 	ldr	r0, [pc, #48]	; 15f94 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x114>
   15f60:	ebffeee8 	bl	11b08 <assertion_failed>
   15f64:	ebffed2b 	bl	11418 <EnterCritical>
   15f68:	e5940004 	ldr	r0, [r4, #4]
   15f6c:	e3500000 	cmp	r0, #0, 0
   15f70:	1affffcd 	bne	15eac <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x2c>
   15f74:	e3a02053 	mov	r2, #83, 0	; 0x53
   15f78:	e59f100c 	ldr	r1, [pc, #12]	; 15f8c <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x10c>
   15f7c:	e59f0014 	ldr	r0, [pc, #20]	; 15f98 <CFAT::SetClusterEntry(unsigned int, unsigned int)+0x118>
   15f80:	ebffeee0 	bl	11b08 <assertion_failed>
   15f84:	ebffed4d 	bl	114c0 <LeaveCritical>
   15f88:	eaffffeb 	b	15f3c <CFAT::SetClusterEntry(unsigned int, unsigned int)+0xbc>
   15f8c:	0001bcb4 	.word	0x0001bcb4
   15f90:	0001ba68 	.word	0x0001ba68
   15f94:	0001bba4 	.word	0x0001bba4
   15f98:	0001bcbc 	.word	0x0001bcbc

00015f9c <CFAT::FreeClusterChain(unsigned int)>:
   15f9c:	e92d4070 	push	{r4, r5, r6, lr}
   15fa0:	e1a05000 	mov	r5, r0
   15fa4:	e1a04001 	mov	r4, r1
   15fa8:	ea000006 	b	15fc8 <CFAT::FreeClusterChain(unsigned int)+0x2c>
   15fac:	e1a01006 	mov	r1, r6
   15fb0:	ebfffe5e 	bl	15930 <CFATInfo::ClusterFreed(unsigned int)>
   15fb4:	e1a01004 	mov	r1, r4
   15fb8:	e1a00005 	mov	r0, r5
   15fbc:	ebfffea3 	bl	15a50 <CFAT::IsEOC(unsigned int) const>
   15fc0:	e3500000 	cmp	r0, #0, 0
   15fc4:	18bd8070 	popne	{r4, r5, r6, pc}
   15fc8:	e1a01004 	mov	r1, r4
   15fcc:	e1a00005 	mov	r0, r5
   15fd0:	ebffff2f 	bl	15c94 <CFAT::GetClusterEntry(unsigned int)>
   15fd4:	e1a06004 	mov	r6, r4
   15fd8:	e3a02000 	mov	r2, #0, 0
   15fdc:	e1a04000 	mov	r4, r0
   15fe0:	e1a01006 	mov	r1, r6
   15fe4:	e1a00005 	mov	r0, r5
   15fe8:	ebffffa4 	bl	15e80 <CFAT::SetClusterEntry(unsigned int, unsigned int)>
   15fec:	e5950004 	ldr	r0, [r5, #4]
   15ff0:	e3500000 	cmp	r0, #0, 0
   15ff4:	1affffec 	bne	15fac <CFAT::FreeClusterChain(unsigned int)+0x10>
   15ff8:	e3a0209d 	mov	r2, #157, 0	; 0x9d
   15ffc:	e59f1004 	ldr	r1, [pc, #4]	; 16008 <CFAT::FreeClusterChain(unsigned int)+0x6c>
   16000:	e59f0004 	ldr	r0, [pc, #4]	; 1600c <CFAT::FreeClusterChain(unsigned int)+0x70>
   16004:	ebffeebf 	bl	11b08 <assertion_failed>
   16008:	0001bcb4 	.word	0x0001bcb4
   1600c:	0001bcbc 	.word	0x0001bcbc

00016010 <CFAT::AllocateCluster()>:
   16010:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16014:	e1a04000 	mov	r4, r0
   16018:	e5900008 	ldr	r0, [r0, #8]
   1601c:	e24dd014 	sub	sp, sp, #20, 0
   16020:	e3500000 	cmp	r0, #0, 0
   16024:	1a000024 	bne	160bc <CFAT::AllocateCluster()+0xac>
   16028:	e5940004 	ldr	r0, [r4, #4]
   1602c:	e3500000 	cmp	r0, #0, 0
   16030:	0a000025 	beq	160cc <CFAT::AllocateCluster()+0xbc>
   16034:	ebfffe6e 	bl	159f4 <CFATInfo::GetNextFreeCluster()>
   16038:	e1a05000 	mov	r5, r0
   1603c:	e5940004 	ldr	r0, [r4, #4]
   16040:	ebfffd57 	bl	155a4 <CFATInfo::GetClusterCount() const>
   16044:	e2800002 	add	r0, r0, #2, 0
   16048:	e1500005 	cmp	r0, r5
   1604c:	9a00002e 	bls	1610c <CFAT::AllocateCluster()+0xfc>
   16050:	e3550001 	cmp	r5, #1, 0
   16054:	9a000020 	bls	160dc <CFAT::AllocateCluster()+0xcc>
   16058:	e5940004 	ldr	r0, [r4, #4]
   1605c:	ebfffd52 	bl	155ac <CFATInfo::GetReadFAT() const>
   16060:	e1a01005 	mov	r1, r5
   16064:	e1a03000 	mov	r3, r0
   16068:	e28d200c 	add	r2, sp, #12, 0
   1606c:	e1a00004 	mov	r0, r4
   16070:	ebfffe98 	bl	15ad8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   16074:	e2501000 	subs	r1, r0, #0, 0
   16078:	0a00001b 	beq	160ec <CFAT::AllocateCluster()+0xdc>
   1607c:	e1a00004 	mov	r0, r4
   16080:	e59d200c 	ldr	r2, [sp, #12]
   16084:	e58d1000 	str	r1, [sp]
   16088:	ebfffed3 	bl	15bdc <CFAT::GetEntry(TFATBuffer*, unsigned int)>
   1608c:	e5943000 	ldr	r3, [r4]
   16090:	e1a06000 	mov	r6, r0
   16094:	e3530000 	cmp	r3, #0, 0
   16098:	e59d1000 	ldr	r1, [sp]
   1609c:	0a000016 	beq	160fc <CFAT::AllocateCluster()+0xec>
   160a0:	e1a00003 	mov	r0, r3
   160a4:	e3a02001 	mov	r2, #1, 0
   160a8:	ebfffa4f 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   160ac:	e3560000 	cmp	r6, #0, 0
   160b0:	0a00001e 	beq	16130 <CFAT::AllocateCluster()+0x120>
   160b4:	e2855001 	add	r5, r5, #1, 0
   160b8:	eaffffdf 	b	1603c <CFAT::AllocateCluster()+0x2c>
   160bc:	ebffecd5 	bl	11418 <EnterCritical>
   160c0:	e5940004 	ldr	r0, [r4, #4]
   160c4:	e3500000 	cmp	r0, #0, 0
   160c8:	1affffd9 	bne	16034 <CFAT::AllocateCluster()+0x24>
   160cc:	e3a02068 	mov	r2, #104, 0	; 0x68
   160d0:	e59f111c 	ldr	r1, [pc, #284]	; 161f4 <CFAT::AllocateCluster()+0x1e4>
   160d4:	e59f011c 	ldr	r0, [pc, #284]	; 161f8 <CFAT::AllocateCluster()+0x1e8>
   160d8:	ebffee8a 	bl	11b08 <assertion_failed>
   160dc:	e3a0206d 	mov	r2, #109, 0	; 0x6d
   160e0:	e59f110c 	ldr	r1, [pc, #268]	; 161f4 <CFAT::AllocateCluster()+0x1e4>
   160e4:	e59f0110 	ldr	r0, [pc, #272]	; 161fc <CFAT::AllocateCluster()+0x1ec>
   160e8:	ebffee86 	bl	11b08 <assertion_failed>
   160ec:	e3a02071 	mov	r2, #113, 0	; 0x71
   160f0:	e59f10fc 	ldr	r1, [pc, #252]	; 161f4 <CFAT::AllocateCluster()+0x1e4>
   160f4:	e59f0104 	ldr	r0, [pc, #260]	; 16200 <CFAT::AllocateCluster()+0x1f0>
   160f8:	ebffee82 	bl	11b08 <assertion_failed>
   160fc:	e3a02075 	mov	r2, #117, 0	; 0x75
   16100:	e59f10ec 	ldr	r1, [pc, #236]	; 161f4 <CFAT::AllocateCluster()+0x1e4>
   16104:	e59f00f8 	ldr	r0, [pc, #248]	; 16204 <CFAT::AllocateCluster()+0x1f4>
   16108:	ebffee7e 	bl	11b08 <assertion_failed>
   1610c:	e5945008 	ldr	r5, [r4, #8]
   16110:	e3550000 	cmp	r5, #0, 0
   16114:	1a000002 	bne	16124 <CFAT::AllocateCluster()+0x114>
   16118:	e1a00005 	mov	r0, r5
   1611c:	e28dd014 	add	sp, sp, #20, 0
   16120:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16124:	ebffece5 	bl	114c0 <LeaveCritical>
   16128:	e3a05000 	mov	r5, #0, 0
   1612c:	eafffff9 	b	16118 <CFAT::AllocateCluster()+0x108>
   16130:	e5940004 	ldr	r0, [r4, #4]
   16134:	ebfffd26 	bl	155d4 <CFATInfo::GetFirstWriteFAT() const>
   16138:	e59f70c8 	ldr	r7, [pc, #200]	; 16208 <CFAT::AllocateCluster()+0x1f8>
   1613c:	e1a06000 	mov	r6, r0
   16140:	ea000014 	b	16198 <CFAT::AllocateCluster()+0x188>
   16144:	e59d200c 	ldr	r2, [sp, #12]
   16148:	e5940004 	ldr	r0, [r4, #4]
   1614c:	e58d1004 	str	r1, [sp, #4]
   16150:	e58d2000 	str	r2, [sp]
   16154:	ebfffd04 	bl	1556c <CFATInfo::GetFATType() const>
   16158:	e59d1004 	ldr	r1, [sp, #4]
   1615c:	e3500000 	cmp	r0, #0, 0
   16160:	e59d2000 	ldr	r2, [sp]
   16164:	01a03007 	moveq	r3, r7
   16168:	13e0320f 	mvnne	r3, #-268435456	; 0xf0000000
   1616c:	e1a00004 	mov	r0, r4
   16170:	e58d1000 	str	r1, [sp]
   16174:	ebffff02 	bl	15d84 <CFAT::SetEntry(TFATBuffer*, unsigned int, unsigned int)>
   16178:	e59d1000 	ldr	r1, [sp]
   1617c:	e5940000 	ldr	r0, [r4]
   16180:	ebfffa54 	bl	14ad8 <CFATCache::MarkDirty(TFATBuffer*)>
   16184:	e3a02001 	mov	r2, #1, 0
   16188:	e59d1000 	ldr	r1, [sp]
   1618c:	e5940000 	ldr	r0, [r4]
   16190:	e0866002 	add	r6, r6, r2
   16194:	ebfffa14 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   16198:	e5940004 	ldr	r0, [r4, #4]
   1619c:	ebfffd0d 	bl	155d8 <CFATInfo::GetLastWriteFAT() const>
   161a0:	e1500006 	cmp	r0, r6
   161a4:	3a00000a 	bcc	161d4 <CFAT::AllocateCluster()+0x1c4>
   161a8:	e1a01005 	mov	r1, r5
   161ac:	e1a03006 	mov	r3, r6
   161b0:	e1a00004 	mov	r0, r4
   161b4:	e28d200c 	add	r2, sp, #12, 0
   161b8:	ebfffe46 	bl	15ad8 <CFAT::GetSector(unsigned int, unsigned int*, unsigned int)>
   161bc:	e2501000 	subs	r1, r0, #0, 0
   161c0:	1affffdf 	bne	16144 <CFAT::AllocateCluster()+0x134>
   161c4:	e3a0207e 	mov	r2, #126, 0	; 0x7e
   161c8:	e59f1024 	ldr	r1, [pc, #36]	; 161f4 <CFAT::AllocateCluster()+0x1e4>
   161cc:	e59f002c 	ldr	r0, [pc, #44]	; 16200 <CFAT::AllocateCluster()+0x1f0>
   161d0:	ebffee4c 	bl	11b08 <assertion_failed>
   161d4:	e1a01005 	mov	r1, r5
   161d8:	e5940004 	ldr	r0, [r4, #4]
   161dc:	ebfffdbd 	bl	158d8 <CFATInfo::ClusterAllocated(unsigned int)>
   161e0:	e5943008 	ldr	r3, [r4, #8]
   161e4:	e3530000 	cmp	r3, #0, 0
   161e8:	0affffca 	beq	16118 <CFAT::AllocateCluster()+0x108>
   161ec:	ebffecb3 	bl	114c0 <LeaveCritical>
   161f0:	eaffffc8 	b	16118 <CFAT::AllocateCluster()+0x108>
   161f4:	0001bcb4 	.word	0x0001bcb4
   161f8:	0001bcbc 	.word	0x0001bcbc
   161fc:	0001bcf0 	.word	0x0001bcf0
   16200:	0001ba68 	.word	0x0001ba68
   16204:	0001bba4 	.word	0x0001bba4
   16208:	0000ffff 	.word	0x0000ffff

0001620c <CFATDirectory::CFATDirectory(CFATCache*, CFATInfo*, CFAT*)>:
   1620c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16210:	e3a0e000 	mov	lr, #0, 0
   16214:	e880400e 	stm	r0, {r1, r2, r3, lr}
   16218:	e580e010 	str	lr, [r0, #16]
   1621c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00016220 <CFATDirectory::~CFATDirectory()>:
   16220:	e12fff1e 	bx	lr

00016224 <CFATDirectory::FreeEntry(bool)>:
   16224:	e590200c 	ldr	r2, [r0, #12]
   16228:	e92d4010 	push	{r4, lr}
   1622c:	e3520000 	cmp	r2, #0, 0
   16230:	0a000014 	beq	16288 <CFATDirectory::FreeEntry(bool)+0x64>
   16234:	e1a04000 	mov	r4, r0
   16238:	e5900000 	ldr	r0, [r0]
   1623c:	e3500000 	cmp	r0, #0, 0
   16240:	0a000014 	beq	16298 <CFATDirectory::FreeEntry(bool)+0x74>
   16244:	e3510000 	cmp	r1, #0, 0
   16248:	1a000009 	bne	16274 <CFATDirectory::FreeEntry(bool)+0x50>
   1624c:	e1a01002 	mov	r1, r2
   16250:	e3a02001 	mov	r2, #1, 0
   16254:	ebfff9e4 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   16258:	e3a02000 	mov	r2, #0, 0
   1625c:	e5943010 	ldr	r3, [r4, #16]
   16260:	e584200c 	str	r2, [r4, #12]
   16264:	e1530002 	cmp	r3, r2
   16268:	08bd8010 	popeq	{r4, pc}
   1626c:	e8bd4010 	pop	{r4, lr}
   16270:	eaffec92 	b	114c0 <LeaveCritical>
   16274:	e1a01002 	mov	r1, r2
   16278:	ebfffa16 	bl	14ad8 <CFATCache::MarkDirty(TFATBuffer*)>
   1627c:	e5940000 	ldr	r0, [r4]
   16280:	e594200c 	ldr	r2, [r4, #12]
   16284:	eafffff0 	b	1624c <CFATDirectory::FreeEntry(bool)+0x28>
   16288:	e59f2018 	ldr	r2, [pc, #24]	; 162a8 <CFATDirectory::FreeEntry(bool)+0x84>
   1628c:	e59f1018 	ldr	r1, [pc, #24]	; 162ac <CFATDirectory::FreeEntry(bool)+0x88>
   16290:	e59f0018 	ldr	r0, [pc, #24]	; 162b0 <CFATDirectory::FreeEntry(bool)+0x8c>
   16294:	ebffee1b 	bl	11b08 <assertion_failed>
   16298:	e59f2014 	ldr	r2, [pc, #20]	; 162b4 <CFATDirectory::FreeEntry(bool)+0x90>
   1629c:	e59f1008 	ldr	r1, [pc, #8]	; 162ac <CFATDirectory::FreeEntry(bool)+0x88>
   162a0:	e59f0010 	ldr	r0, [pc, #16]	; 162b8 <CFATDirectory::FreeEntry(bool)+0x94>
   162a4:	ebffee17 	bl	11b08 <assertion_failed>
   162a8:	0000010a 	.word	0x0000010a
   162ac:	0001bd88 	.word	0x0001bd88
   162b0:	0001bd94 	.word	0x0001bd94
   162b4:	0000010b 	.word	0x0000010b
   162b8:	0001bba4 	.word	0x0001bba4

000162bc <CFATDirectory::Time2FAT(unsigned int)>:
   162bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   162c0:	e2505000 	subs	r5, r0, #0, 0
   162c4:	0a000039 	beq	163b0 <CFATDirectory::Time2FAT(unsigned int)+0xf4>
   162c8:	e59f70e8 	ldr	r7, [pc, #232]	; 163b8 <CFATDirectory::Time2FAT(unsigned int)+0xfc>
   162cc:	e59f40e8 	ldr	r4, [pc, #232]	; 163bc <CFATDirectory::Time2FAT(unsigned int)+0x100>
   162d0:	e0883597 	umull	r3, r8, r7, r5
   162d4:	e1a082a8 	lsr	r8, r8, #5
   162d8:	e0873897 	umull	r3, r7, r7, r8
   162dc:	e1a072a7 	lsr	r7, r7, #5
   162e0:	e0843794 	umull	r3, r4, r4, r7
   162e4:	e59fa0d4 	ldr	sl, [pc, #212]	; 163c0 <CFATDirectory::Time2FAT(unsigned int)+0x104>
   162e8:	e59f90d4 	ldr	r9, [pc, #212]	; 163c4 <CFATDirectory::Time2FAT(unsigned int)+0x108>
   162ec:	e59f60d4 	ldr	r6, [pc, #212]	; 163c8 <CFATDirectory::Time2FAT(unsigned int)+0x10c>
   162f0:	e1a04224 	lsr	r4, r4, #4
   162f4:	ea000001 	b	16300 <CFATDirectory::Time2FAT(unsigned int)+0x44>
   162f8:	e0444000 	sub	r4, r4, r0
   162fc:	e28aa001 	add	sl, sl, #1, 0
   16300:	e1a0000a 	mov	r0, sl
   16304:	ebffe589 	bl	f930 <CTimer::IsLeapYear(unsigned int)>
   16308:	e3500000 	cmp	r0, #0, 0
   1630c:	11a00009 	movne	r0, r9
   16310:	01a00006 	moveq	r0, r6
   16314:	e1540000 	cmp	r4, r0
   16318:	2afffff6 	bcs	162f8 <CFATDirectory::Time2FAT(unsigned int)+0x3c>
   1631c:	e59f30a8 	ldr	r3, [pc, #168]	; 163cc <CFATDirectory::Time2FAT(unsigned int)+0x110>
   16320:	e15a0003 	cmp	sl, r3
   16324:	9a000021 	bls	163b0 <CFATDirectory::Time2FAT(unsigned int)+0xf4>
   16328:	e3a06000 	mov	r6, #0, 0
   1632c:	ea000001 	b	16338 <CFATDirectory::Time2FAT(unsigned int)+0x7c>
   16330:	e0444000 	sub	r4, r4, r0
   16334:	e2866001 	add	r6, r6, #1, 0
   16338:	e1a0100a 	mov	r1, sl
   1633c:	e1a00006 	mov	r0, r6
   16340:	ebffe58b 	bl	f974 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>
   16344:	e1540000 	cmp	r4, r0
   16348:	2afffff8 	bcs	16330 <CFATDirectory::Time2FAT(unsigned int)+0x74>
   1634c:	e59f3064 	ldr	r3, [pc, #100]	; 163b8 <CFATDirectory::Time2FAT(unsigned int)+0xfc>
   16350:	e59f2064 	ldr	r2, [pc, #100]	; 163bc <CFATDirectory::Time2FAT(unsigned int)+0x100>
   16354:	e0810593 	umull	r0, r1, r3, r5
   16358:	e0830893 	umull	r0, r3, r3, r8
   1635c:	e0820792 	umull	r0, r2, r2, r7
   16360:	e1a012a1 	lsr	r1, r1, #5
   16364:	e0611201 	rsb	r1, r1, r1, lsl #4
   16368:	e1a032a3 	lsr	r3, r3, #5
   1636c:	e0455101 	sub	r5, r5, r1, lsl #2
   16370:	e0633203 	rsb	r3, r3, r3, lsl #4
   16374:	e24aae7b 	sub	sl, sl, #1968	; 0x7b0
   16378:	e1a02222 	lsr	r2, r2, #4
   1637c:	e24aa00c 	sub	sl, sl, #12, 0
   16380:	e2840001 	add	r0, r4, #1, 0
   16384:	e1a050a5 	lsr	r5, r5, #1
   16388:	e0488103 	sub	r8, r8, r3, lsl #2
   1638c:	e0822082 	add	r2, r2, r2, lsl #1
   16390:	e180048a 	orr	r0, r0, sl, lsl #9
   16394:	e2866001 	add	r6, r6, #1, 0
   16398:	e1858288 	orr	r8, r5, r8, lsl #5
   1639c:	e0477182 	sub	r7, r7, r2, lsl #3
   163a0:	e1800286 	orr	r0, r0, r6, lsl #5
   163a4:	e1887587 	orr	r7, r8, r7, lsl #11
   163a8:	e1870800 	orr	r0, r7, r0, lsl #16
   163ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163b0:	e3a00000 	mov	r0, #0, 0
   163b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163b8:	88888889 	.word	0x88888889
   163bc:	aaaaaaab 	.word	0xaaaaaaab
   163c0:	000007b2 	.word	0x000007b2
   163c4:	0000016e 	.word	0x0000016e
   163c8:	0000016d 	.word	0x0000016d
   163cc:	000007bb 	.word	0x000007bb

000163d0 <CFATDirectory::Name2FAT(char const*, char*)>:
   163d0:	e92d4070 	push	{r4, r5, r6, lr}
   163d4:	e2505000 	subs	r5, r0, #0, 0
   163d8:	0a00002d 	beq	16494 <CFATDirectory::Name2FAT(char const*, char*)+0xc4>
   163dc:	e3510000 	cmp	r1, #0, 0
   163e0:	e1a04001 	mov	r4, r1
   163e4:	0a00002e 	beq	164a4 <CFATDirectory::Name2FAT(char const*, char*)+0xd4>
   163e8:	e3a0200b 	mov	r2, #11, 0
   163ec:	e3a01020 	mov	r1, #32, 0
   163f0:	e1a00004 	mov	r0, r4
   163f4:	ebffe584 	bl	fa0c <memset>
   163f8:	e1d5c0d0 	ldrsb	ip, [r5]
   163fc:	e35c0000 	cmp	ip, #0, 0
   16400:	0a00001a 	beq	16470 <CFATDirectory::Name2FAT(char const*, char*)+0xa0>
   16404:	e3a00008 	mov	r0, #8, 0
   16408:	e1a01004 	mov	r1, r4
   1640c:	e084e000 	add	lr, r4, r0
   16410:	e35c0020 	cmp	ip, #32, 0
   16414:	da000007 	ble	16438 <CFATDirectory::Name2FAT(char const*, char*)+0x68>
   16418:	e3a03022 	mov	r3, #34, 0	; 0x22
   1641c:	e59f2090 	ldr	r2, [pc, #144]	; 164b4 <CFATDirectory::Name2FAT(char const*, char*)+0xe4>
   16420:	ea000002 	b	16430 <CFATDirectory::Name2FAT(char const*, char*)+0x60>
   16424:	e1f230d1 	ldrsb	r3, [r2, #1]!
   16428:	e3530000 	cmp	r3, #0, 0
   1642c:	0a000003 	beq	16440 <CFATDirectory::Name2FAT(char const*, char*)+0x70>
   16430:	e153000c 	cmp	r3, ip
   16434:	1afffffa 	bne	16424 <CFATDirectory::Name2FAT(char const*, char*)+0x54>
   16438:	e3a00000 	mov	r0, #0, 0
   1643c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16440:	e6ef307c 	uxtb	r3, ip
   16444:	e2432061 	sub	r2, r3, #97, 0	; 0x61
   16448:	e3520019 	cmp	r2, #25, 0
   1644c:	9243c020 	subls	ip, r3, #32, 0
   16450:	96afc07c 	sxtbls	ip, ip
   16454:	8a000009 	bhi	16480 <CFATDirectory::Name2FAT(char const*, char*)+0xb0>
   16458:	e3500000 	cmp	r0, #0, 0
   1645c:	14c1c001 	strbne	ip, [r1], #1
   16460:	12400001 	subne	r0, r0, #1, 0
   16464:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   16468:	e35c0000 	cmp	ip, #0, 0
   1646c:	1affffe7 	bne	16410 <CFATDirectory::Name2FAT(char const*, char*)+0x40>
   16470:	e1d400d0 	ldrsb	r0, [r4]
   16474:	e2500020 	subs	r0, r0, #32, 0
   16478:	13a00001 	movne	r0, #1, 0
   1647c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16480:	e35c002e 	cmp	ip, #46, 0	; 0x2e
   16484:	01a0100e 	moveq	r1, lr
   16488:	03a00003 	moveq	r0, #3, 0
   1648c:	1afffff1 	bne	16458 <CFATDirectory::Name2FAT(char const*, char*)+0x88>
   16490:	eafffff3 	b	16464 <CFATDirectory::Name2FAT(char const*, char*)+0x94>
   16494:	e59f201c 	ldr	r2, [pc, #28]	; 164b8 <CFATDirectory::Name2FAT(char const*, char*)+0xe8>
   16498:	e59f101c 	ldr	r1, [pc, #28]	; 164bc <CFATDirectory::Name2FAT(char const*, char*)+0xec>
   1649c:	e59f001c 	ldr	r0, [pc, #28]	; 164c0 <CFATDirectory::Name2FAT(char const*, char*)+0xf0>
   164a0:	ebffed98 	bl	11b08 <assertion_failed>
   164a4:	e3a02f75 	mov	r2, #468	; 0x1d4
   164a8:	e59f100c 	ldr	r1, [pc, #12]	; 164bc <CFATDirectory::Name2FAT(char const*, char*)+0xec>
   164ac:	e59f0010 	ldr	r0, [pc, #16]	; 164c4 <CFATDirectory::Name2FAT(char const*, char*)+0xf4>
   164b0:	ebffed94 	bl	11b08 <assertion_failed>
   164b4:	0001bda4 	.word	0x0001bda4
   164b8:	000001d3 	.word	0x000001d3
   164bc:	0001bd88 	.word	0x0001bd88
   164c0:	000197ec 	.word	0x000197ec
   164c4:	0001bdb4 	.word	0x0001bdb4

000164c8 <CFATDirectory::GetEntry(char const*)>:
   164c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164cc:	e3510000 	cmp	r1, #0, 0
   164d0:	e24dd014 	sub	sp, sp, #20, 0
   164d4:	0a00007d 	beq	166d0 <CFATDirectory::GetEntry(char const*)+0x208>
   164d8:	e1a04000 	mov	r4, r0
   164dc:	e1a00001 	mov	r0, r1
   164e0:	e28d1004 	add	r1, sp, #4, 0
   164e4:	ebffffb9 	bl	163d0 <CFATDirectory::Name2FAT(char const*, char*)>
   164e8:	e3500000 	cmp	r0, #0, 0
   164ec:	0a000068 	beq	16694 <CFATDirectory::GetEntry(char const*)+0x1cc>
   164f0:	e5940004 	ldr	r0, [r4, #4]
   164f4:	e3500000 	cmp	r0, #0, 0
   164f8:	0a000080 	beq	16700 <CFATDirectory::GetEntry(char const*)+0x238>
   164fc:	ebfffc1a 	bl	1556c <CFATInfo::GetFATType() const>
   16500:	e3500001 	cmp	r0, #1, 0
   16504:	13a07000 	movne	r7, #0, 0
   16508:	e1a05000 	mov	r5, r0
   1650c:	11a08007 	movne	r8, r7
   16510:	0a000063 	beq	166a4 <CFATDirectory::GetEntry(char const*)+0x1dc>
   16514:	e5940010 	ldr	r0, [r4, #16]
   16518:	e3500000 	cmp	r0, #0, 0
   1651c:	1a00003c 	bne	16614 <CFATDirectory::GetEntry(char const*)+0x14c>
   16520:	e3a06000 	mov	r6, #0, 0
   16524:	e1a09006 	mov	r9, r6
   16528:	e3550000 	cmp	r5, #0, 0
   1652c:	0a000042 	beq	1663c <CFATDirectory::GetEntry(char const*)+0x174>
   16530:	e3550001 	cmp	r5, #1, 0
   16534:	1a00006d 	bne	166f0 <CFATDirectory::GetEntry(char const*)+0x228>
   16538:	e1a01007 	mov	r1, r7
   1653c:	e5940008 	ldr	r0, [r4, #8]
   16540:	ebfffd42 	bl	15a50 <CFAT::IsEOC(unsigned int) const>
   16544:	e3500000 	cmp	r0, #0, 0
   16548:	1a00004d 	bne	16684 <CFATDirectory::GetEntry(char const*)+0x1bc>
   1654c:	e1a01007 	mov	r1, r7
   16550:	e5940004 	ldr	r0, [r4, #4]
   16554:	ebfffc6c 	bl	1570c <CFATInfo::GetFirstSector(unsigned int) const>
   16558:	e1a01008 	mov	r1, r8
   1655c:	e1a0a000 	mov	sl, r0
   16560:	e1a00006 	mov	r0, r6
   16564:	eb000963 	bl	18af8 <__aeabi_uidivmod>
   16568:	e594200c 	ldr	r2, [r4, #12]
   1656c:	e08a1221 	add	r1, sl, r1, lsr #4
   16570:	e3520000 	cmp	r2, #0, 0
   16574:	1a00003a 	bne	16664 <CFATDirectory::GetEntry(char const*)+0x19c>
   16578:	e5940000 	ldr	r0, [r4]
   1657c:	e3500000 	cmp	r0, #0, 0
   16580:	0a00004e 	beq	166c0 <CFATDirectory::GetEntry(char const*)+0x1f8>
   16584:	ebfff9fd 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   16588:	e3500000 	cmp	r0, #0, 0
   1658c:	e1a01000 	mov	r1, r0
   16590:	e584000c 	str	r0, [r4, #12]
   16594:	0a000051 	beq	166e0 <CFATDirectory::GetEntry(char const*)+0x218>
   16598:	e1a00286 	lsl	r0, r6, #5
   1659c:	e2000e1e 	and	r0, r0, #480	; 0x1e0
   165a0:	e2800018 	add	r0, r0, #24, 0
   165a4:	e7d1a000 	ldrb	sl, [r1, r0]
   165a8:	e081b000 	add	fp, r1, r0
   165ac:	e35a0000 	cmp	sl, #0, 0
   165b0:	0a00002f 	beq	16674 <CFATDirectory::GetEntry(char const*)+0x1ac>
   165b4:	e35a00e5 	cmp	sl, #229, 0	; 0xe5
   165b8:	0a000002 	beq	165c8 <CFATDirectory::GetEntry(char const*)+0x100>
   165bc:	e5db300b 	ldrb	r3, [fp, #11]
   165c0:	e3130018 	tst	r3, #24, 0
   165c4:	0a000014 	beq	1661c <CFATDirectory::GetEntry(char const*)+0x154>
   165c8:	e3a02001 	mov	r2, #1, 0
   165cc:	e5940000 	ldr	r0, [r4]
   165d0:	ebfff905 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   165d4:	e3550001 	cmp	r5, #1, 0
   165d8:	e2866001 	add	r6, r6, #1, 0
   165dc:	e584900c 	str	r9, [r4, #12]
   165e0:	1affffd0 	bne	16528 <CFATDirectory::GetEntry(char const*)+0x60>
   165e4:	e1a01008 	mov	r1, r8
   165e8:	e1a00006 	mov	r0, r6
   165ec:	eb000941 	bl	18af8 <__aeabi_uidivmod>
   165f0:	e3510000 	cmp	r1, #0, 0
   165f4:	1affffcf 	bne	16538 <CFATDirectory::GetEntry(char const*)+0x70>
   165f8:	e5940008 	ldr	r0, [r4, #8]
   165fc:	e3500000 	cmp	r0, #0, 0
   16600:	0a000042 	beq	16710 <CFATDirectory::GetEntry(char const*)+0x248>
   16604:	e1a01007 	mov	r1, r7
   16608:	ebfffda1 	bl	15c94 <CFAT::GetClusterEntry(unsigned int)>
   1660c:	e1a07000 	mov	r7, r0
   16610:	eaffffc8 	b	16538 <CFATDirectory::GetEntry(char const*)+0x70>
   16614:	ebffeb7f 	bl	11418 <EnterCritical>
   16618:	eaffffc0 	b	16520 <CFATDirectory::GetEntry(char const*)+0x58>
   1661c:	e3a0200b 	mov	r2, #11, 0
   16620:	e1a0000b 	mov	r0, fp
   16624:	e28d1004 	add	r1, sp, #4, 0
   16628:	ebffe531 	bl	faf4 <memcmp>
   1662c:	e3500000 	cmp	r0, #0, 0
   16630:	0a000018 	beq	16698 <CFATDirectory::GetEntry(char const*)+0x1d0>
   16634:	e594100c 	ldr	r1, [r4, #12]
   16638:	eaffffe2 	b	165c8 <CFATDirectory::GetEntry(char const*)+0x100>
   1663c:	e5940004 	ldr	r0, [r4, #4]
   16640:	ebfffc17 	bl	156a4 <CFATInfo::GetRootEntries() const>
   16644:	e1500006 	cmp	r0, r6
   16648:	9a00000d 	bls	16684 <CFATDirectory::GetEntry(char const*)+0x1bc>
   1664c:	e5940004 	ldr	r0, [r4, #4]
   16650:	ebfffbf6 	bl	15630 <CFATInfo::GetFirstRootSector() const>
   16654:	e594200c 	ldr	r2, [r4, #12]
   16658:	e0801226 	add	r1, r0, r6, lsr #4
   1665c:	e3520000 	cmp	r2, #0, 0
   16660:	0affffc4 	beq	16578 <CFATDirectory::GetEntry(char const*)+0xb0>
   16664:	e3a02064 	mov	r2, #100, 0	; 0x64
   16668:	e59f10b0 	ldr	r1, [pc, #176]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   1666c:	e59f00b0 	ldr	r0, [pc, #176]	; 16724 <CFATDirectory::GetEntry(char const*)+0x25c>
   16670:	ebffed24 	bl	11b08 <assertion_failed>
   16674:	e3a02001 	mov	r2, #1, 0
   16678:	e5940000 	ldr	r0, [r4]
   1667c:	ebfff8da 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   16680:	e584a00c 	str	sl, [r4, #12]
   16684:	e5943010 	ldr	r3, [r4, #16]
   16688:	e3530000 	cmp	r3, #0, 0
   1668c:	0a000000 	beq	16694 <CFATDirectory::GetEntry(char const*)+0x1cc>
   16690:	ebffeb8a 	bl	114c0 <LeaveCritical>
   16694:	e3a0b000 	mov	fp, #0, 0
   16698:	e1a0000b 	mov	r0, fp
   1669c:	e28dd014 	add	sp, sp, #20, 0
   166a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a4:	e5940004 	ldr	r0, [r4, #4]
   166a8:	ebfffc0a 	bl	156d8 <CFATInfo::GetRootCluster() const>
   166ac:	e1a07000 	mov	r7, r0
   166b0:	e5940004 	ldr	r0, [r4, #4]
   166b4:	ebfffbb6 	bl	15594 <CFATInfo::GetSectorsPerCluster() const>
   166b8:	e1a08200 	lsl	r8, r0, #4
   166bc:	eaffff94 	b	16514 <CFATDirectory::GetEntry(char const*)+0x4c>
   166c0:	e3a02065 	mov	r2, #101, 0	; 0x65
   166c4:	e59f1054 	ldr	r1, [pc, #84]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   166c8:	e59f0058 	ldr	r0, [pc, #88]	; 16728 <CFATDirectory::GetEntry(char const*)+0x260>
   166cc:	ebffed0d 	bl	11b08 <assertion_failed>
   166d0:	e3a0202b 	mov	r2, #43, 0	; 0x2b
   166d4:	e59f1044 	ldr	r1, [pc, #68]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   166d8:	e59f004c 	ldr	r0, [pc, #76]	; 1672c <CFATDirectory::GetEntry(char const*)+0x264>
   166dc:	ebffed09 	bl	11b08 <assertion_failed>
   166e0:	e3a02067 	mov	r2, #103, 0	; 0x67
   166e4:	e59f1034 	ldr	r1, [pc, #52]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   166e8:	e59f0040 	ldr	r0, [pc, #64]	; 16730 <CFATDirectory::GetEntry(char const*)+0x268>
   166ec:	ebffed05 	bl	11b08 <assertion_failed>
   166f0:	e3a0204f 	mov	r2, #79, 0	; 0x4f
   166f4:	e59f1024 	ldr	r1, [pc, #36]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   166f8:	e59f0034 	ldr	r0, [pc, #52]	; 16734 <CFATDirectory::GetEntry(char const*)+0x26c>
   166fc:	ebffed01 	bl	11b08 <assertion_failed>
   16700:	e3a02033 	mov	r2, #51, 0	; 0x33
   16704:	e59f1014 	ldr	r1, [pc, #20]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   16708:	e59f0028 	ldr	r0, [pc, #40]	; 16738 <CFATDirectory::GetEntry(char const*)+0x270>
   1670c:	ebffecfd 	bl	11b08 <assertion_failed>
   16710:	e3a02084 	mov	r2, #132, 0	; 0x84
   16714:	e59f1004 	ldr	r1, [pc, #4]	; 16720 <CFATDirectory::GetEntry(char const*)+0x258>
   16718:	e59f001c 	ldr	r0, [pc, #28]	; 1673c <CFATDirectory::GetEntry(char const*)+0x274>
   1671c:	ebffecf9 	bl	11b08 <assertion_failed>
   16720:	0001bd88 	.word	0x0001bd88
   16724:	0001bdd8 	.word	0x0001bdd8
   16728:	0001bba4 	.word	0x0001bba4
   1672c:	000197ec 	.word	0x000197ec
   16730:	0001bd94 	.word	0x0001bd94
   16734:	0001bdc4 	.word	0x0001bdc4
   16738:	0001bcbc 	.word	0x0001bcbc
   1673c:	0001bde8 	.word	0x0001bde8

00016740 <CFATDirectory::CreateEntry(char const*)>:
   16740:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16744:	e3510000 	cmp	r1, #0, 0
   16748:	e24dd01c 	sub	sp, sp, #28, 0
   1674c:	0a00008f 	beq	16990 <CFATDirectory::CreateEntry(char const*)+0x250>
   16750:	e1a04000 	mov	r4, r0
   16754:	e1a00001 	mov	r0, r1
   16758:	e28d100c 	add	r1, sp, #12, 0
   1675c:	ebffff1b 	bl	163d0 <CFATDirectory::Name2FAT(char const*, char*)>
   16760:	e3500000 	cmp	r0, #0, 0
   16764:	0a00005b 	beq	168d8 <CFATDirectory::CreateEntry(char const*)+0x198>
   16768:	e5940004 	ldr	r0, [r4, #4]
   1676c:	e3500000 	cmp	r0, #0, 0
   16770:	0a00009e 	beq	169f0 <CFATDirectory::CreateEntry(char const*)+0x2b0>
   16774:	ebfffb7c 	bl	1556c <CFATInfo::GetFATType() const>
   16778:	e3500001 	cmp	r0, #1, 0
   1677c:	13a08000 	movne	r8, #0, 0
   16780:	e1a06000 	mov	r6, r0
   16784:	11a09008 	movne	r9, r8
   16788:	0a000056 	beq	168e8 <CFATDirectory::CreateEntry(char const*)+0x1a8>
   1678c:	e5940010 	ldr	r0, [r4, #16]
   16790:	e3500000 	cmp	r0, #0, 0
   16794:	1a000041 	bne	168a0 <CFATDirectory::CreateEntry(char const*)+0x160>
   16798:	e3a0a000 	mov	sl, #0, 0
   1679c:	e1a0700a 	mov	r7, sl
   167a0:	e3560000 	cmp	r6, #0, 0
   167a4:	0a00003f 	beq	168a8 <CFATDirectory::CreateEntry(char const*)+0x168>
   167a8:	e3560001 	cmp	r6, #1, 0
   167ac:	1a00007f 	bne	169b0 <CFATDirectory::CreateEntry(char const*)+0x270>
   167b0:	e5940008 	ldr	r0, [r4, #8]
   167b4:	e3500000 	cmp	r0, #0, 0
   167b8:	0a000084 	beq	169d0 <CFATDirectory::CreateEntry(char const*)+0x290>
   167bc:	e1a01008 	mov	r1, r8
   167c0:	ebfffca2 	bl	15a50 <CFAT::IsEOC(unsigned int) const>
   167c4:	e3500000 	cmp	r0, #0, 0
   167c8:	1a00004d 	bne	16904 <CFATDirectory::CreateEntry(char const*)+0x1c4>
   167cc:	e1a01008 	mov	r1, r8
   167d0:	e5940004 	ldr	r0, [r4, #4]
   167d4:	ebfffbcc 	bl	1570c <CFATInfo::GetFirstSector(unsigned int) const>
   167d8:	e1a01009 	mov	r1, r9
   167dc:	e1a05000 	mov	r5, r0
   167e0:	e1a00007 	mov	r0, r7
   167e4:	eb0008c3 	bl	18af8 <__aeabi_uidivmod>
   167e8:	e0851221 	add	r1, r5, r1, lsr #4
   167ec:	e594200c 	ldr	r2, [r4, #12]
   167f0:	e3520000 	cmp	r2, #0, 0
   167f4:	1a000069 	bne	169a0 <CFATDirectory::CreateEntry(char const*)+0x260>
   167f8:	e5940000 	ldr	r0, [r4]
   167fc:	e3500000 	cmp	r0, #0, 0
   16800:	0a00006e 	beq	169c0 <CFATDirectory::CreateEntry(char const*)+0x280>
   16804:	e58d2004 	str	r2, [sp, #4]
   16808:	ebfff95c 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   1680c:	e3500000 	cmp	r0, #0, 0
   16810:	e1a01000 	mov	r1, r0
   16814:	e59d2004 	ldr	r2, [sp, #4]
   16818:	e584000c 	str	r0, [r4, #12]
   1681c:	0a00006f 	beq	169e0 <CFATDirectory::CreateEntry(char const*)+0x2a0>
   16820:	e1a05287 	lsl	r5, r7, #5
   16824:	e2055e1e 	and	r5, r5, #480	; 0x1e0
   16828:	e2855018 	add	r5, r5, #24, 0
   1682c:	e7d03005 	ldrb	r3, [r0, r5]
   16830:	e0805005 	add	r5, r0, r5
   16834:	e243b0e5 	sub	fp, r3, #229, 0	; 0xe5
   16838:	e16fbf1b 	clz	fp, fp
   1683c:	e3530000 	cmp	r3, #0, 0
   16840:	e1a0b2ab 	lsr	fp, fp, #5
   16844:	03a0b001 	moveq	fp, #1, 0
   16848:	e35b0000 	cmp	fp, #0, 0
   1684c:	1a00007b 	bne	16a40 <CFATDirectory::CreateEntry(char const*)+0x300>
   16850:	e3a02001 	mov	r2, #1, 0
   16854:	e5940000 	ldr	r0, [r4]
   16858:	ebfff863 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   1685c:	e3560001 	cmp	r6, #1, 0
   16860:	e2877001 	add	r7, r7, #1, 0
   16864:	e584b00c 	str	fp, [r4, #12]
   16868:	1affffcc 	bne	167a0 <CFATDirectory::CreateEntry(char const*)+0x60>
   1686c:	e1a01009 	mov	r1, r9
   16870:	e1a00007 	mov	r0, r7
   16874:	eb00089f 	bl	18af8 <__aeabi_uidivmod>
   16878:	e3510000 	cmp	r1, #0, 0
   1687c:	1affffcb 	bne	167b0 <CFATDirectory::CreateEntry(char const*)+0x70>
   16880:	e5940008 	ldr	r0, [r4, #8]
   16884:	e3500000 	cmp	r0, #0, 0
   16888:	0a000075 	beq	16a64 <CFATDirectory::CreateEntry(char const*)+0x324>
   1688c:	e1a01008 	mov	r1, r8
   16890:	ebfffcff 	bl	15c94 <CFAT::GetClusterEntry(unsigned int)>
   16894:	e1a0a008 	mov	sl, r8
   16898:	e1a08000 	mov	r8, r0
   1689c:	eaffffc3 	b	167b0 <CFATDirectory::CreateEntry(char const*)+0x70>
   168a0:	ebffeadc 	bl	11418 <EnterCritical>
   168a4:	eaffffbb 	b	16798 <CFATDirectory::CreateEntry(char const*)+0x58>
   168a8:	e5940004 	ldr	r0, [r4, #4]
   168ac:	ebfffb7c 	bl	156a4 <CFATInfo::GetRootEntries() const>
   168b0:	e1500007 	cmp	r0, r7
   168b4:	9a000003 	bls	168c8 <CFATDirectory::CreateEntry(char const*)+0x188>
   168b8:	e5940004 	ldr	r0, [r4, #4]
   168bc:	ebfffb5b 	bl	15630 <CFATInfo::GetFirstRootSector() const>
   168c0:	e0801227 	add	r1, r0, r7, lsr #4
   168c4:	eaffffc8 	b	167ec <CFATDirectory::CreateEntry(char const*)+0xac>
   168c8:	e5943010 	ldr	r3, [r4, #16]
   168cc:	e3530000 	cmp	r3, #0, 0
   168d0:	0a000000 	beq	168d8 <CFATDirectory::CreateEntry(char const*)+0x198>
   168d4:	ebffeaf9 	bl	114c0 <LeaveCritical>
   168d8:	e3a05000 	mov	r5, #0, 0
   168dc:	e1a00005 	mov	r0, r5
   168e0:	e28dd01c 	add	sp, sp, #28, 0
   168e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e8:	e5940004 	ldr	r0, [r4, #4]
   168ec:	ebfffb79 	bl	156d8 <CFATInfo::GetRootCluster() const>
   168f0:	e1a08000 	mov	r8, r0
   168f4:	e5940004 	ldr	r0, [r4, #4]
   168f8:	ebfffb25 	bl	15594 <CFATInfo::GetSectorsPerCluster() const>
   168fc:	e1a09200 	lsl	r9, r0, #4
   16900:	eaffffa1 	b	1678c <CFATDirectory::CreateEntry(char const*)+0x4c>
   16904:	e5940008 	ldr	r0, [r4, #8]
   16908:	ebfffdc0 	bl	16010 <CFAT::AllocateCluster()>
   1690c:	e2508000 	subs	r8, r0, #0, 0
   16910:	0affffec 	beq	168c8 <CFATDirectory::CreateEntry(char const*)+0x188>
   16914:	e1a01008 	mov	r1, r8
   16918:	e5940004 	ldr	r0, [r4, #4]
   1691c:	ebfffb7a 	bl	1570c <CFATInfo::GetFirstSector(unsigned int) const>
   16920:	e3a05000 	mov	r5, #0, 0
   16924:	e58d0004 	str	r0, [sp, #4]
   16928:	e5940004 	ldr	r0, [r4, #4]
   1692c:	ebfffb18 	bl	15594 <CFATInfo::GetSectorsPerCluster() const>
   16930:	e59d3004 	ldr	r3, [sp, #4]
   16934:	e1500005 	cmp	r0, r5
   16938:	e0851003 	add	r1, r5, r3
   1693c:	9a000037 	bls	16a20 <CFATDirectory::CreateEntry(char const*)+0x2e0>
   16940:	e5940000 	ldr	r0, [r4]
   16944:	e3500000 	cmp	r0, #0, 0
   16948:	0a00002c 	beq	16a00 <CFATDirectory::CreateEntry(char const*)+0x2c0>
   1694c:	e3a02001 	mov	r2, #1, 0
   16950:	ebfff90a 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   16954:	e250b000 	subs	fp, r0, #0, 0
   16958:	0a00002c 	beq	16a10 <CFATDirectory::CreateEntry(char const*)+0x2d0>
   1695c:	e3a02c02 	mov	r2, #512	; 0x200
   16960:	e3a01000 	mov	r1, #0, 0
   16964:	e28b0018 	add	r0, fp, #24, 0
   16968:	ebffe427 	bl	fa0c <memset>
   1696c:	e1a0100b 	mov	r1, fp
   16970:	e5940000 	ldr	r0, [r4]
   16974:	ebfff857 	bl	14ad8 <CFATCache::MarkDirty(TFATBuffer*)>
   16978:	e3a02001 	mov	r2, #1, 0
   1697c:	e1a0100b 	mov	r1, fp
   16980:	e5940000 	ldr	r0, [r4]
   16984:	e0855002 	add	r5, r5, r2
   16988:	ebfff817 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   1698c:	eaffffe5 	b	16928 <CFATDirectory::CreateEntry(char const*)+0x1e8>
   16990:	e3a02090 	mov	r2, #144, 0	; 0x90
   16994:	e59f10e8 	ldr	r1, [pc, #232]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   16998:	e59f00e8 	ldr	r0, [pc, #232]	; 16a88 <CFATDirectory::CreateEntry(char const*)+0x348>
   1699c:	ebffec59 	bl	11b08 <assertion_failed>
   169a0:	e3a020e2 	mov	r2, #226, 0	; 0xe2
   169a4:	e59f10d8 	ldr	r1, [pc, #216]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   169a8:	e59f00dc 	ldr	r0, [pc, #220]	; 16a8c <CFATDirectory::CreateEntry(char const*)+0x34c>
   169ac:	ebffec55 	bl	11b08 <assertion_failed>
   169b0:	e3a020b6 	mov	r2, #182, 0	; 0xb6
   169b4:	e59f10c8 	ldr	r1, [pc, #200]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   169b8:	e59f00d0 	ldr	r0, [pc, #208]	; 16a90 <CFATDirectory::CreateEntry(char const*)+0x350>
   169bc:	ebffec51 	bl	11b08 <assertion_failed>
   169c0:	e3a020e3 	mov	r2, #227, 0	; 0xe3
   169c4:	e59f10b8 	ldr	r1, [pc, #184]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   169c8:	e59f00c4 	ldr	r0, [pc, #196]	; 16a94 <CFATDirectory::CreateEntry(char const*)+0x354>
   169cc:	ebffec4d 	bl	11b08 <assertion_failed>
   169d0:	e3a020b8 	mov	r2, #184, 0	; 0xb8
   169d4:	e59f10a8 	ldr	r1, [pc, #168]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   169d8:	e59f00b8 	ldr	r0, [pc, #184]	; 16a98 <CFATDirectory::CreateEntry(char const*)+0x358>
   169dc:	ebffec49 	bl	11b08 <assertion_failed>
   169e0:	e3a020e5 	mov	r2, #229, 0	; 0xe5
   169e4:	e59f1098 	ldr	r1, [pc, #152]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   169e8:	e59f00ac 	ldr	r0, [pc, #172]	; 16a9c <CFATDirectory::CreateEntry(char const*)+0x35c>
   169ec:	ebffec45 	bl	11b08 <assertion_failed>
   169f0:	e3a02098 	mov	r2, #152, 0	; 0x98
   169f4:	e59f1088 	ldr	r1, [pc, #136]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   169f8:	e59f00a0 	ldr	r0, [pc, #160]	; 16aa0 <CFATDirectory::CreateEntry(char const*)+0x360>
   169fc:	ebffec41 	bl	11b08 <assertion_failed>
   16a00:	e3a020c4 	mov	r2, #196, 0	; 0xc4
   16a04:	e59f1078 	ldr	r1, [pc, #120]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   16a08:	e59f0084 	ldr	r0, [pc, #132]	; 16a94 <CFATDirectory::CreateEntry(char const*)+0x354>
   16a0c:	ebffec3d 	bl	11b08 <assertion_failed>
   16a10:	e3a020c6 	mov	r2, #198, 0	; 0xc6
   16a14:	e59f1068 	ldr	r1, [pc, #104]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   16a18:	e59f0084 	ldr	r0, [pc, #132]	; 16aa4 <CFATDirectory::CreateEntry(char const*)+0x364>
   16a1c:	ebffec39 	bl	11b08 <assertion_failed>
   16a20:	e35a0001 	cmp	sl, #1, 0
   16a24:	9a000012 	bls	16a74 <CFATDirectory::CreateEntry(char const*)+0x334>
   16a28:	e1a0100a 	mov	r1, sl
   16a2c:	e1a02008 	mov	r2, r8
   16a30:	e5940008 	ldr	r0, [r4, #8]
   16a34:	ebfffd11 	bl	15e80 <CFAT::SetClusterEntry(unsigned int, unsigned int)>
   16a38:	e3a0a000 	mov	sl, #0, 0
   16a3c:	eaffff62 	b	167cc <CFATDirectory::CreateEntry(char const*)+0x8c>
   16a40:	e1a01002 	mov	r1, r2
   16a44:	e1a00005 	mov	r0, r5
   16a48:	e3a02020 	mov	r2, #32, 0
   16a4c:	ebffe3ee 	bl	fa0c <memset>
   16a50:	e3a0200b 	mov	r2, #11, 0
   16a54:	e1a00005 	mov	r0, r5
   16a58:	e28d100c 	add	r1, sp, #12, 0
   16a5c:	ebffe633 	bl	10330 <memcpy>
   16a60:	eaffff9d 	b	168dc <CFATDirectory::CreateEntry(char const*)+0x19c>
   16a64:	e3a020fe 	mov	r2, #254, 0	; 0xfe
   16a68:	e59f1014 	ldr	r1, [pc, #20]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   16a6c:	e59f0024 	ldr	r0, [pc, #36]	; 16a98 <CFATDirectory::CreateEntry(char const*)+0x358>
   16a70:	ebffec24 	bl	11b08 <assertion_failed>
   16a74:	e3a020ce 	mov	r2, #206, 0	; 0xce
   16a78:	e59f1004 	ldr	r1, [pc, #4]	; 16a84 <CFATDirectory::CreateEntry(char const*)+0x344>
   16a7c:	e59f0024 	ldr	r0, [pc, #36]	; 16aa8 <CFATDirectory::CreateEntry(char const*)+0x368>
   16a80:	ebffec20 	bl	11b08 <assertion_failed>
   16a84:	0001bd88 	.word	0x0001bd88
   16a88:	000197ec 	.word	0x000197ec
   16a8c:	0001bdd8 	.word	0x0001bdd8
   16a90:	0001bdc4 	.word	0x0001bdc4
   16a94:	0001bba4 	.word	0x0001bba4
   16a98:	0001bde8 	.word	0x0001bde8
   16a9c:	0001bd94 	.word	0x0001bd94
   16aa0:	0001bcbc 	.word	0x0001bcbc
   16aa4:	0001ba68 	.word	0x0001ba68
   16aa8:	0001bdf4 	.word	0x0001bdf4

00016aac <CFATDirectory::FAT2Name(char const*, char*)>:
   16aac:	e92d4010 	push	{r4, lr}
   16ab0:	e3500000 	cmp	r0, #0, 0
   16ab4:	e24dd010 	sub	sp, sp, #16, 0
   16ab8:	0a00002f 	beq	16b7c <CFATDirectory::FAT2Name(char const*, char*)+0xd0>
   16abc:	e3510000 	cmp	r1, #0, 0
   16ac0:	e1a04001 	mov	r4, r1
   16ac4:	0a000030 	beq	16b8c <CFATDirectory::FAT2Name(char const*, char*)+0xe0>
   16ac8:	e1a01000 	mov	r1, r0
   16acc:	e3a0200b 	mov	r2, #11, 0
   16ad0:	e28d0004 	add	r0, sp, #4, 0
   16ad4:	ebffe4c9 	bl	fe00 <strncpy>
   16ad8:	e1dd30d4 	ldrsb	r3, [sp, #4]
   16adc:	e3a02000 	mov	r2, #0, 0
   16ae0:	e3530005 	cmp	r3, #5, 0
   16ae4:	03a0305f 	moveq	r3, #95, 0	; 0x5f
   16ae8:	e5cd200f 	strb	r2, [sp, #15]
   16aec:	05cd3004 	strbeq	r3, [sp, #4]
   16af0:	0a000001 	beq	16afc <CFATDirectory::FAT2Name(char const*, char*)+0x50>
   16af4:	e3530000 	cmp	r3, #0, 0
   16af8:	0a00000c 	beq	16b30 <CFATDirectory::FAT2Name(char const*, char*)+0x84>
   16afc:	e3a01000 	mov	r1, #0, 0
   16b00:	e28d2004 	add	r2, sp, #4, 0
   16b04:	e3530020 	cmp	r3, #32, 0
   16b08:	05c21000 	strbeq	r1, [r2]
   16b0c:	0a000004 	beq	16b24 <CFATDirectory::FAT2Name(char const*, char*)+0x78>
   16b10:	e6ef3073 	uxtb	r3, r3
   16b14:	e2430041 	sub	r0, r3, #65, 0	; 0x41
   16b18:	e3500019 	cmp	r0, #25, 0
   16b1c:	92833020 	addls	r3, r3, #32, 0
   16b20:	95c23000 	strbls	r3, [r2]
   16b24:	e1f230d1 	ldrsb	r3, [r2, #1]!
   16b28:	e3530000 	cmp	r3, #0, 0
   16b2c:	1afffff4 	bne	16b04 <CFATDirectory::FAT2Name(char const*, char*)+0x58>
   16b30:	e3a02008 	mov	r2, #8, 0
   16b34:	e1a00004 	mov	r0, r4
   16b38:	e28d1004 	add	r1, sp, #4, 0
   16b3c:	ebffe4af 	bl	fe00 <strncpy>
   16b40:	e3a02000 	mov	r2, #0, 0
   16b44:	e1dd30dc 	ldrsb	r3, [sp, #12]
   16b48:	e5c42008 	strb	r2, [r4, #8]
   16b4c:	e1530002 	cmp	r3, r2
   16b50:	1a000001 	bne	16b5c <CFATDirectory::FAT2Name(char const*, char*)+0xb0>
   16b54:	e28dd010 	add	sp, sp, #16, 0
   16b58:	e8bd8010 	pop	{r4, pc}
   16b5c:	e1a00004 	mov	r0, r4
   16b60:	e59f1034 	ldr	r1, [pc, #52]	; 16b9c <CFATDirectory::FAT2Name(char const*, char*)+0xf0>
   16b64:	ebffe4b3 	bl	fe38 <strcat>
   16b68:	e1a00004 	mov	r0, r4
   16b6c:	e28d100c 	add	r1, sp, #12, 0
   16b70:	ebffe4b0 	bl	fe38 <strcat>
   16b74:	e28dd010 	add	sp, sp, #16, 0
   16b78:	e8bd8010 	pop	{r4, pc}
   16b7c:	e59f201c 	ldr	r2, [pc, #28]	; 16ba0 <CFATDirectory::FAT2Name(char const*, char*)+0xf4>
   16b80:	e59f101c 	ldr	r1, [pc, #28]	; 16ba4 <CFATDirectory::FAT2Name(char const*, char*)+0xf8>
   16b84:	e59f001c 	ldr	r0, [pc, #28]	; 16ba8 <CFATDirectory::FAT2Name(char const*, char*)+0xfc>
   16b88:	ebffebde 	bl	11b08 <assertion_failed>
   16b8c:	e59f2018 	ldr	r2, [pc, #24]	; 16bac <CFATDirectory::FAT2Name(char const*, char*)+0x100>
   16b90:	e59f100c 	ldr	r1, [pc, #12]	; 16ba4 <CFATDirectory::FAT2Name(char const*, char*)+0xf8>
   16b94:	e59f0014 	ldr	r0, [pc, #20]	; 16bb0 <CFATDirectory::FAT2Name(char const*, char*)+0x104>
   16b98:	ebffebda 	bl	11b08 <assertion_failed>
   16b9c:	0001be08 	.word	0x0001be08
   16ba0:	0000020a 	.word	0x0000020a
   16ba4:	0001bd88 	.word	0x0001bd88
   16ba8:	0001bdb4 	.word	0x0001bdb4
   16bac:	0000020b 	.word	0x0000020b
   16bb0:	000197ec 	.word	0x000197ec

00016bb4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)>:
   16bb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bb8:	e2518000 	subs	r8, r1, #0, 0
   16bbc:	0a00009a 	beq	16e2c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x278>
   16bc0:	e3520000 	cmp	r2, #0, 0
   16bc4:	e1a05002 	mov	r5, r2
   16bc8:	0a00009f 	beq	16e4c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x298>
   16bcc:	e5923000 	ldr	r3, [r2]
   16bd0:	e3730001 	cmn	r3, #1, 0
   16bd4:	0a00005e 	beq	16d54 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1a0>
   16bd8:	e1a06000 	mov	r6, r0
   16bdc:	e5900004 	ldr	r0, [r0, #4]
   16be0:	e3500000 	cmp	r0, #0, 0
   16be4:	0a0000a0 	beq	16e6c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2b8>
   16be8:	ebfffa5f 	bl	1556c <CFATInfo::GetFATType() const>
   16bec:	e3500001 	cmp	r0, #1, 0
   16bf0:	e1a07000 	mov	r7, r0
   16bf4:	13a09000 	movne	r9, #0, 0
   16bf8:	0a000057 	beq	16d5c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1a8>
   16bfc:	e5960010 	ldr	r0, [r6, #16]
   16c00:	e3500000 	cmp	r0, #0, 0
   16c04:	1a00005d 	bne	16d80 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1cc>
   16c08:	e3570000 	cmp	r7, #0, 0
   16c0c:	0a000036 	beq	16cec <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x138>
   16c10:	e3570001 	cmp	r7, #1, 0
   16c14:	1a000088 	bne	16e3c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x288>
   16c18:	e5951004 	ldr	r1, [r5, #4]
   16c1c:	e5960008 	ldr	r0, [r6, #8]
   16c20:	ebfffb8a 	bl	15a50 <CFAT::IsEOC(unsigned int) const>
   16c24:	e3500000 	cmp	r0, #0, 0
   16c28:	1a000043 	bne	16d3c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x188>
   16c2c:	e5951004 	ldr	r1, [r5, #4]
   16c30:	e5960004 	ldr	r0, [r6, #4]
   16c34:	ebfffab4 	bl	1570c <CFATInfo::GetFirstSector(unsigned int) const>
   16c38:	e1a01009 	mov	r1, r9
   16c3c:	e1a04000 	mov	r4, r0
   16c40:	e5950000 	ldr	r0, [r5]
   16c44:	eb0007ab 	bl	18af8 <__aeabi_uidivmod>
   16c48:	e5960000 	ldr	r0, [r6]
   16c4c:	e0841221 	add	r1, r4, r1, lsr #4
   16c50:	e3500000 	cmp	r0, #0, 0
   16c54:	0a000030 	beq	16d1c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x168>
   16c58:	e3a02000 	mov	r2, #0, 0
   16c5c:	ebfff847 	bl	14d80 <CFATCache::GetSector(unsigned int, int)>
   16c60:	e250a000 	subs	sl, r0, #0, 0
   16c64:	0a00006c 	beq	16e1c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x268>
   16c68:	e5953000 	ldr	r3, [r5]
   16c6c:	e1a03283 	lsl	r3, r3, #5
   16c70:	e2033e1e 	and	r3, r3, #480	; 0x1e0
   16c74:	e2833018 	add	r3, r3, #24, 0
   16c78:	e7da2003 	ldrb	r2, [sl, r3]
   16c7c:	e08a4003 	add	r4, sl, r3
   16c80:	e3520000 	cmp	r2, #0, 0
   16c84:	0a000028 	beq	16d2c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x178>
   16c88:	e35200e5 	cmp	r2, #229, 0	; 0xe5
   16c8c:	0a000002 	beq	16c9c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0xe8>
   16c90:	e5d4300b 	ldrb	r3, [r4, #11]
   16c94:	e3130018 	tst	r3, #24, 0
   16c98:	0a00003a 	beq	16d88 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1d4>
   16c9c:	e5960000 	ldr	r0, [r6]
   16ca0:	e1a0100a 	mov	r1, sl
   16ca4:	e3a02001 	mov	r2, #1, 0
   16ca8:	ebfff74f 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   16cac:	e5950000 	ldr	r0, [r5]
   16cb0:	e3570001 	cmp	r7, #1, 0
   16cb4:	e2800001 	add	r0, r0, #1, 0
   16cb8:	e5850000 	str	r0, [r5]
   16cbc:	1affffd1 	bne	16c08 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x54>
   16cc0:	e1a01009 	mov	r1, r9
   16cc4:	eb00078b 	bl	18af8 <__aeabi_uidivmod>
   16cc8:	e3510000 	cmp	r1, #0, 0
   16ccc:	1affffd1 	bne	16c18 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x64>
   16cd0:	e5960008 	ldr	r0, [r6, #8]
   16cd4:	e3500000 	cmp	r0, #0, 0
   16cd8:	0a00004b 	beq	16e0c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x258>
   16cdc:	e5951004 	ldr	r1, [r5, #4]
   16ce0:	ebfffbeb 	bl	15c94 <CFAT::GetClusterEntry(unsigned int)>
   16ce4:	e5850004 	str	r0, [r5, #4]
   16ce8:	eaffffca 	b	16c18 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x64>
   16cec:	e5960004 	ldr	r0, [r6, #4]
   16cf0:	e5954000 	ldr	r4, [r5]
   16cf4:	ebfffa6a 	bl	156a4 <CFATInfo::GetRootEntries() const>
   16cf8:	e1540000 	cmp	r4, r0
   16cfc:	2a00000e 	bcs	16d3c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x188>
   16d00:	e5960004 	ldr	r0, [r6, #4]
   16d04:	ebfffa49 	bl	15630 <CFATInfo::GetFirstRootSector() const>
   16d08:	e5951000 	ldr	r1, [r5]
   16d0c:	e0801221 	add	r1, r0, r1, lsr #4
   16d10:	e5960000 	ldr	r0, [r6]
   16d14:	e3500000 	cmp	r0, #0, 0
   16d18:	1affffce 	bne	16c58 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0xa4>
   16d1c:	e59f2184 	ldr	r2, [pc, #388]	; 16ea8 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f4>
   16d20:	e59f1184 	ldr	r1, [pc, #388]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16d24:	e59f0184 	ldr	r0, [pc, #388]	; 16eb0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2fc>
   16d28:	ebffeb76 	bl	11b08 <assertion_failed>
   16d2c:	e1a0100a 	mov	r1, sl
   16d30:	e3a02001 	mov	r2, #1, 0
   16d34:	e5960000 	ldr	r0, [r6]
   16d38:	ebfff72b 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   16d3c:	e3e03000 	mvn	r3, #0, 0
   16d40:	e5853000 	str	r3, [r5]
   16d44:	e5963010 	ldr	r3, [r6, #16]
   16d48:	e3530000 	cmp	r3, #0, 0
   16d4c:	0a000000 	beq	16d54 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1a0>
   16d50:	ebffe9da 	bl	114c0 <LeaveCritical>
   16d54:	e3a00000 	mov	r0, #0, 0
   16d58:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d5c:	e5953000 	ldr	r3, [r5]
   16d60:	e3530000 	cmp	r3, #0, 0
   16d64:	0a00003c 	beq	16e5c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2a8>
   16d68:	e5960004 	ldr	r0, [r6, #4]
   16d6c:	ebfffa08 	bl	15594 <CFATInfo::GetSectorsPerCluster() const>
   16d70:	e1a09200 	lsl	r9, r0, #4
   16d74:	e5960010 	ldr	r0, [r6, #16]
   16d78:	e3500000 	cmp	r0, #0, 0
   16d7c:	0affffa1 	beq	16c08 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x54>
   16d80:	ebffe9a4 	bl	11418 <EnterCritical>
   16d84:	eaffff9f 	b	16c08 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x54>
   16d88:	e1a01008 	mov	r1, r8
   16d8c:	e1a00004 	mov	r0, r4
   16d90:	ebffff45 	bl	16aac <CFATDirectory::FAT2Name(char const*, char*)>
   16d94:	e3a01002 	mov	r1, #2, 0
   16d98:	e5d4301c 	ldrb	r3, [r4, #28]
   16d9c:	e5d4001d 	ldrb	r0, [r4, #29]
   16da0:	e5d4201e 	ldrb	r2, [r4, #30]
   16da4:	e1833400 	orr	r3, r3, r0, lsl #8
   16da8:	e1833802 	orr	r3, r3, r2, lsl #16
   16dac:	e5d4201f 	ldrb	r2, [r4, #31]
   16db0:	e5881014 	str	r1, [r8, #20]
   16db4:	e1833c02 	orr	r3, r3, r2, lsl #24
   16db8:	e5883010 	str	r3, [r8, #16]
   16dbc:	e5d4300b 	ldrb	r3, [r4, #11]
   16dc0:	e3130002 	tst	r3, #2, 0
   16dc4:	13a03003 	movne	r3, #3, 0
   16dc8:	15883014 	strne	r3, [r8, #20]
   16dcc:	e5960000 	ldr	r0, [r6]
   16dd0:	e1a0100a 	mov	r1, sl
   16dd4:	e3a02001 	mov	r2, #1, 0
   16dd8:	ebfff703 	bl	149ec <CFATCache::FreeSector(TFATBuffer*, int)>
   16ddc:	e5950000 	ldr	r0, [r5]
   16de0:	e3570001 	cmp	r7, #1, 0
   16de4:	e2800001 	add	r0, r0, #1, 0
   16de8:	e5850000 	str	r0, [r5]
   16dec:	1a000025 	bne	16e88 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2d4>
   16df0:	e1a01009 	mov	r1, r9
   16df4:	eb00073f 	bl	18af8 <__aeabi_uidivmod>
   16df8:	e3510000 	cmp	r1, #0, 0
   16dfc:	1a000021 	bne	16e88 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2d4>
   16e00:	e5960008 	ldr	r0, [r6, #8]
   16e04:	e3500000 	cmp	r0, #0, 0
   16e08:	1a00001b 	bne	16e7c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2c8>
   16e0c:	e59f20a0 	ldr	r2, [pc, #160]	; 16eb4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x300>
   16e10:	e59f1094 	ldr	r1, [pc, #148]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16e14:	e59f009c 	ldr	r0, [pc, #156]	; 16eb8 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x304>
   16e18:	ebffeb3a 	bl	11b08 <assertion_failed>
   16e1c:	e59f2098 	ldr	r2, [pc, #152]	; 16ebc <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x308>
   16e20:	e59f1084 	ldr	r1, [pc, #132]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16e24:	e59f0094 	ldr	r0, [pc, #148]	; 16ec0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x30c>
   16e28:	ebffeb36 	bl	11b08 <assertion_failed>
   16e2c:	e59f2090 	ldr	r2, [pc, #144]	; 16ec4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x310>
   16e30:	e59f1074 	ldr	r1, [pc, #116]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16e34:	e59f008c 	ldr	r0, [pc, #140]	; 16ec8 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x314>
   16e38:	ebffeb32 	bl	11b08 <assertion_failed>
   16e3c:	e59f2088 	ldr	r2, [pc, #136]	; 16ecc <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x318>
   16e40:	e59f1064 	ldr	r1, [pc, #100]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16e44:	e59f0084 	ldr	r0, [pc, #132]	; 16ed0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x31c>
   16e48:	ebffeb2e 	bl	11b08 <assertion_failed>
   16e4c:	e59f2080 	ldr	r2, [pc, #128]	; 16ed4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x320>
   16e50:	e59f1054 	ldr	r1, [pc, #84]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16e54:	e59f007c 	ldr	r0, [pc, #124]	; 16ed8 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x324>
   16e58:	ebffeb2a 	bl	11b08 <assertion_failed>
   16e5c:	e5960004 	ldr	r0, [r6, #4]
   16e60:	ebfffa1c 	bl	156d8 <CFATInfo::GetRootCluster() const>
   16e64:	e5850004 	str	r0, [r5, #4]
   16e68:	eaffffbe 	b	16d68 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x1b4>
   16e6c:	e59f2068 	ldr	r2, [pc, #104]	; 16edc <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x328>
   16e70:	e59f1034 	ldr	r1, [pc, #52]	; 16eac <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2f8>
   16e74:	e59f0064 	ldr	r0, [pc, #100]	; 16ee0 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x32c>
   16e78:	ebffeb22 	bl	11b08 <assertion_failed>
   16e7c:	e5951004 	ldr	r1, [r5, #4]
   16e80:	ebfffb83 	bl	15c94 <CFAT::GetClusterEntry(unsigned int)>
   16e84:	e5850004 	str	r0, [r5, #4]
   16e88:	e5963010 	ldr	r3, [r6, #16]
   16e8c:	e3530000 	cmp	r3, #0, 0
   16e90:	1a000001 	bne	16e9c <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)+0x2e8>
   16e94:	e3a00001 	mov	r0, #1, 0
   16e98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e9c:	ebffe987 	bl	114c0 <LeaveCritical>
   16ea0:	e3a00001 	mov	r0, #1, 0
   16ea4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ea8:	0000015b 	.word	0x0000015b
   16eac:	0001bd88 	.word	0x0001bd88
   16eb0:	0001bba4 	.word	0x0001bba4
   16eb4:	00000183 	.word	0x00000183
   16eb8:	0001bde8 	.word	0x0001bde8
   16ebc:	0000015d 	.word	0x0000015d
   16ec0:	0001ba68 	.word	0x0001ba68
   16ec4:	00000122 	.word	0x00000122
   16ec8:	0001be0c 	.word	0x0001be0c
   16ecc:	00000146 	.word	0x00000146
   16ed0:	0001bdc4 	.word	0x0001bdc4
   16ed4:	00000123 	.word	0x00000123
   16ed8:	0001be18 	.word	0x0001be18
   16edc:	0000012a 	.word	0x0000012a
   16ee0:	0001bcbc 	.word	0x0001bcbc

00016ee4 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)>:
   16ee4:	e2523000 	subs	r3, r2, #0, 0
   16ee8:	0a000002 	beq	16ef8 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)+0x14>
   16eec:	e3a0c000 	mov	ip, #0, 0
   16ef0:	e583c000 	str	ip, [r3]
   16ef4:	eaffff2e 	b	16bb4 <CFATDirectory::FindNext(TDirentry*, TFindCurrentEntry*)>
   16ef8:	e92d4010 	push	{r4, lr}
   16efc:	e59f2008 	ldr	r2, [pc, #8]	; 16f0c <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)+0x28>
   16f00:	e59f1008 	ldr	r1, [pc, #8]	; 16f10 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)+0x2c>
   16f04:	e59f0008 	ldr	r0, [pc, #8]	; 16f14 <CFATDirectory::FindFirst(TDirentry*, TFindCurrentEntry*)+0x30>
   16f08:	ebffeafe 	bl	11b08 <assertion_failed>
   16f0c:	0000011a 	.word	0x0000011a
   16f10:	0001bd88 	.word	0x0001bd88
   16f14:	0001be18 	.word	0x0001be18

00016f18 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)>:
   16f18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f1c:	e1a04000 	mov	r4, r0
   16f20:	e1a05001 	mov	r5, r1
   16f24:	e1a06002 	mov	r6, r2
   16f28:	e1a07003 	mov	r7, r3
   16f2c:	ebffed82 	bl	1253c <CDevice::CDevice()>
   16f30:	e3a02000 	mov	r2, #0, 0
   16f34:	e3a08000 	mov	r8, #0, 0
   16f38:	e3a09000 	mov	r9, #0, 0
   16f3c:	e59f0064 	ldr	r0, [pc, #100]	; 16fa8 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x90>
   16f40:	e1550002 	cmp	r5, r2
   16f44:	e1c481f0 	strd	r8, [r4, #16]
   16f48:	e584700c 	str	r7, [r4, #12]
   16f4c:	e5845004 	str	r5, [r4, #4]
   16f50:	e5846008 	str	r6, [r4, #8]
   16f54:	e5840000 	str	r0, [r4]
   16f58:	e5842018 	str	r2, [r4, #24]
   16f5c:	e584201c 	str	r2, [r4, #28]
   16f60:	e5842048 	str	r2, [r4, #72]	; 0x48
   16f64:	0a000007 	beq	16f88 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x70>
   16f68:	e3560000 	cmp	r6, #0, 0
   16f6c:	0a000009 	beq	16f98 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x80>
   16f70:	e3a00010 	mov	r0, #16, 0
   16f74:	ebffe5f9 	bl	10760 <operator new(unsigned int)>
   16f78:	e1a03000 	mov	r3, r0
   16f7c:	e1a00004 	mov	r0, r4
   16f80:	e5843048 	str	r3, [r4, #72]	; 0x48
   16f84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f88:	e2801018 	add	r1, r0, #24, 0
   16f8c:	e59f2018 	ldr	r2, [pc, #24]	; 16fac <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x94>
   16f90:	e2800024 	add	r0, r0, #36, 0	; 0x24
   16f94:	ebffeadb 	bl	11b08 <assertion_failed>
   16f98:	e2801018 	add	r1, r0, #24, 0
   16f9c:	e3a02e1e 	mov	r2, #480	; 0x1e0
   16fa0:	e280003c 	add	r0, r0, #60, 0	; 0x3c
   16fa4:	ebffead7 	bl	11b08 <assertion_failed>
   16fa8:	0001c068 	.word	0x0001c068
   16fac:	000001df 	.word	0x000001df

00016fb0 <CEMMCDevice::~CEMMCDevice()>:
   16fb0:	e92d4070 	push	{r4, r5, r6, lr}
   16fb4:	e1a04000 	mov	r4, r0
   16fb8:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   16fbc:	e59f3058 	ldr	r3, [pc, #88]	; 1701c <CEMMCDevice::~CEMMCDevice()+0x6c>
   16fc0:	e3500000 	cmp	r0, #0, 0
   16fc4:	e5843000 	str	r3, [r4]
   16fc8:	0a000001 	beq	16fd4 <CEMMCDevice::~CEMMCDevice()+0x24>
   16fcc:	e3a01010 	mov	r1, #16, 0
   16fd0:	ebffe5f0 	bl	10798 <operator delete(void*, unsigned int)>
   16fd4:	e3a03000 	mov	r3, #0, 0
   16fd8:	e5945018 	ldr	r5, [r4, #24]
   16fdc:	e5843048 	str	r3, [r4, #72]	; 0x48
   16fe0:	e1550003 	cmp	r5, r3
   16fe4:	0a000004 	beq	16ffc <CEMMCDevice::~CEMMCDevice()+0x4c>
   16fe8:	e1a00005 	mov	r0, r5
   16fec:	eb00082d 	bl	190a8 <CPartitionManager::~CPartitionManager()>
   16ff0:	e1a00005 	mov	r0, r5
   16ff4:	e3a01024 	mov	r1, #36, 0	; 0x24
   16ff8:	ebffe5e6 	bl	10798 <operator delete(void*, unsigned int)>
   16ffc:	e3a03000 	mov	r3, #0, 0
   17000:	e1a00004 	mov	r0, r4
   17004:	e5843018 	str	r3, [r4, #24]
   17008:	e5843008 	str	r3, [r4, #8]
   1700c:	e5843004 	str	r3, [r4, #4]
   17010:	ebffed3b 	bl	12504 <CDevice::~CDevice()>
   17014:	e1a00004 	mov	r0, r4
   17018:	e8bd8070 	pop	{r4, r5, r6, pc}
   1701c:	0001c068 	.word	0x0001c068

00017020 <CEMMCDevice::~CEMMCDevice()>:
   17020:	e92d4010 	push	{r4, lr}
   17024:	e1a04000 	mov	r4, r0
   17028:	ebffffe0 	bl	16fb0 <CEMMCDevice::~CEMMCDevice()>
   1702c:	e1a00004 	mov	r0, r4
   17030:	e3a01080 	mov	r1, #128, 0	; 0x80
   17034:	ebffe5d7 	bl	10798 <operator delete(void*, unsigned int)>
   17038:	e1a00004 	mov	r0, r4
   1703c:	e8bd8010 	pop	{r4, pc}

00017040 <CEMMCDevice::Initialize()>:
   17040:	e92d4030 	push	{r4, r5, lr}
   17044:	e3a04000 	mov	r4, #0, 0
   17048:	e1a05000 	mov	r5, r0
   1704c:	e24dd00c 	sub	sp, sp, #12, 0
   17050:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   17054:	eb0004c2 	bl	18364 <CEMMCDevice::CardInit()>
   17058:	e3500000 	cmp	r0, #0, 0
   1705c:	1a00001d 	bne	170d8 <CEMMCDevice::Initialize()+0x98>
   17060:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   17064:	e5952018 	ldr	r2, [r5, #24]
   17068:	e59f3088 	ldr	r3, [pc, #136]	; 170f8 <CEMMCDevice::Initialize()+0xb8>
   1706c:	e3520000 	cmp	r2, #0, 0
   17070:	e8930003 	ldm	r3, {r0, r1}
   17074:	e58d0000 	str	r0, [sp]
   17078:	e1cd10b4 	strh	r1, [sp, #4]
   1707c:	1a000019 	bne	170e8 <CEMMCDevice::Initialize()+0xa8>
   17080:	e3a00024 	mov	r0, #36, 0	; 0x24
   17084:	ebffe5b5 	bl	10760 <operator new(unsigned int)>
   17088:	e1a04000 	mov	r4, r0
   1708c:	e1a0200d 	mov	r2, sp
   17090:	e1a01005 	mov	r1, r5
   17094:	eb0007f7 	bl	19078 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   17098:	e1a00004 	mov	r0, r4
   1709c:	e5854018 	str	r4, [r5, #24]
   170a0:	eb000831 	bl	1916c <CPartitionManager::Initialize()>
   170a4:	e2504000 	subs	r4, r0, #0, 0
   170a8:	1a000002 	bne	170b8 <CEMMCDevice::Initialize()+0x78>
   170ac:	e1a00004 	mov	r0, r4
   170b0:	e28dd00c 	add	sp, sp, #12, 0
   170b4:	e8bd8030 	pop	{r4, r5, pc}
   170b8:	ebffc792 	bl	8f08 <CDeviceNameService::Get()>
   170bc:	e1a02005 	mov	r2, r5
   170c0:	e1a0100d 	mov	r1, sp
   170c4:	e3a03001 	mov	r3, #1, 0
   170c8:	ebffc6de 	bl	8c48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   170cc:	e1a00004 	mov	r0, r4
   170d0:	e28dd00c 	add	sp, sp, #12, 0
   170d4:	e8bd8030 	pop	{r4, r5, pc}
   170d8:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   170dc:	e1a00004 	mov	r0, r4
   170e0:	e28dd00c 	add	sp, sp, #12, 0
   170e4:	e8bd8030 	pop	{r4, r5, pc}
   170e8:	e59f200c 	ldr	r2, [pc, #12]	; 170fc <CEMMCDevice::Initialize()+0xbc>
   170ec:	e2431034 	sub	r1, r3, #52, 0	; 0x34
   170f0:	e2830008 	add	r0, r3, #8, 0
   170f4:	ebffea83 	bl	11b08 <assertion_failed>
   170f8:	0001c0b4 	.word	0x0001c0b4
   170fc:	0000022f 	.word	0x0000022f

00017100 <CEMMCDevice::Read(void*, unsigned int)>:
   17100:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17104:	e3a07000 	mov	r7, #0, 0
   17108:	e590c010 	ldr	ip, [r0, #16]
   1710c:	e24dd00c 	sub	sp, sp, #12, 0
   17110:	e1a06b8c 	lsl	r6, ip, #23
   17114:	e1a06ba6 	lsr	r6, r6, #23
   17118:	e1963007 	orrs	r3, r6, r7
   1711c:	e5903014 	ldr	r3, [r0, #20]
   17120:	1a00001f 	bne	171a4 <CEMMCDevice::Read(void*, unsigned int)+0xa4>
   17124:	e1a04000 	mov	r4, r0
   17128:	e590000c 	ldr	r0, [r0, #12]
   1712c:	e1a0c4ac 	lsr	ip, ip, #9
   17130:	e3500000 	cmp	r0, #0, 0
   17134:	e1a06001 	mov	r6, r1
   17138:	e1a05002 	mov	r5, r2
   1713c:	e18c3b83 	orr	r3, ip, r3, lsl #23
   17140:	0a000002 	beq	17150 <CEMMCDevice::Read(void*, unsigned int)+0x50>
   17144:	e58d3004 	str	r3, [sp, #4]
   17148:	ebffc666 	bl	8ae8 <CActLED::On()>
   1714c:	e59d3004 	ldr	r3, [sp, #4]
   17150:	e3a07000 	mov	r7, #0, 0
   17154:	ee077f9a 	mcr	15, 0, r7, cr7, cr10, {4}
   17158:	e1a01006 	mov	r1, r6
   1715c:	e1a02005 	mov	r2, r5
   17160:	e1a00004 	mov	r0, r4
   17164:	eb000560 	bl	186ec <CEMMCDevice::DoRead(unsigned char*, unsigned int, unsigned int)>
   17168:	e1500005 	cmp	r0, r5
   1716c:	1a000007 	bne	17190 <CEMMCDevice::Read(void*, unsigned int)+0x90>
   17170:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   17174:	e594000c 	ldr	r0, [r4, #12]
   17178:	e3500000 	cmp	r0, #0, 0
   1717c:	0a000000 	beq	17184 <CEMMCDevice::Read(void*, unsigned int)+0x84>
   17180:	ebffc664 	bl	8b18 <CActLED::Off()>
   17184:	e1a00005 	mov	r0, r5
   17188:	e28dd00c 	add	sp, sp, #12, 0
   1718c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17190:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   17194:	e594000c 	ldr	r0, [r4, #12]
   17198:	e1500007 	cmp	r0, r7
   1719c:	0a000000 	beq	171a4 <CEMMCDevice::Read(void*, unsigned int)+0xa4>
   171a0:	ebffc65c 	bl	8b18 <CActLED::Off()>
   171a4:	e3e05000 	mvn	r5, #0, 0
   171a8:	eafffff5 	b	17184 <CEMMCDevice::Read(void*, unsigned int)+0x84>

000171ac <CEMMCDevice::Write(void const*, unsigned int)>:
   171ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   171b0:	e3a07000 	mov	r7, #0, 0
   171b4:	e590c010 	ldr	ip, [r0, #16]
   171b8:	e24dd00c 	sub	sp, sp, #12, 0
   171bc:	e1a06b8c 	lsl	r6, ip, #23
   171c0:	e1a06ba6 	lsr	r6, r6, #23
   171c4:	e1963007 	orrs	r3, r6, r7
   171c8:	e5903014 	ldr	r3, [r0, #20]
   171cc:	1a00001f 	bne	17250 <CEMMCDevice::Write(void const*, unsigned int)+0xa4>
   171d0:	e1a04000 	mov	r4, r0
   171d4:	e590000c 	ldr	r0, [r0, #12]
   171d8:	e1a0c4ac 	lsr	ip, ip, #9
   171dc:	e3500000 	cmp	r0, #0, 0
   171e0:	e1a06001 	mov	r6, r1
   171e4:	e1a05002 	mov	r5, r2
   171e8:	e18c3b83 	orr	r3, ip, r3, lsl #23
   171ec:	0a000002 	beq	171fc <CEMMCDevice::Write(void const*, unsigned int)+0x50>
   171f0:	e58d3004 	str	r3, [sp, #4]
   171f4:	ebffc63b 	bl	8ae8 <CActLED::On()>
   171f8:	e59d3004 	ldr	r3, [sp, #4]
   171fc:	e3a07000 	mov	r7, #0, 0
   17200:	ee077f9a 	mcr	15, 0, r7, cr7, cr10, {4}
   17204:	e1a01006 	mov	r1, r6
   17208:	e1a02005 	mov	r2, r5
   1720c:	e1a00004 	mov	r0, r4
   17210:	eb00054a 	bl	18740 <CEMMCDevice::DoWrite(unsigned char*, unsigned int, unsigned int)>
   17214:	e1500005 	cmp	r0, r5
   17218:	1a000007 	bne	1723c <CEMMCDevice::Write(void const*, unsigned int)+0x90>
   1721c:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   17220:	e594000c 	ldr	r0, [r4, #12]
   17224:	e3500000 	cmp	r0, #0, 0
   17228:	0a000000 	beq	17230 <CEMMCDevice::Write(void const*, unsigned int)+0x84>
   1722c:	ebffc639 	bl	8b18 <CActLED::Off()>
   17230:	e1a00005 	mov	r0, r5
   17234:	e28dd00c 	add	sp, sp, #12, 0
   17238:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1723c:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   17240:	e594000c 	ldr	r0, [r4, #12]
   17244:	e1500007 	cmp	r0, r7
   17248:	0a000000 	beq	17250 <CEMMCDevice::Write(void const*, unsigned int)+0xa4>
   1724c:	ebffc631 	bl	8b18 <CActLED::Off()>
   17250:	e3e05000 	mvn	r5, #0, 0
   17254:	eafffff5 	b	17230 <CEMMCDevice::Write(void const*, unsigned int)+0x84>

00017258 <CEMMCDevice::Seek(unsigned long long)>:
   17258:	e1c021f0 	strd	r2, [r0, #16]
   1725c:	e1a01003 	mov	r1, r3
   17260:	e1a00002 	mov	r0, r2
   17264:	e12fff1e 	bx	lr

00017268 <CEMMCDevice::PowerOn()>:
   17268:	e92d4010 	push	{r4, lr}
   1726c:	e24dd028 	sub	sp, sp, #40, 0	; 0x28
   17270:	e3a01000 	mov	r1, #0, 0
   17274:	e28d000c 	add	r0, sp, #12, 0
   17278:	ebffeb7f 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1727c:	e3a01000 	mov	r1, #0, 0
   17280:	e3a03014 	mov	r3, #20, 0
   17284:	e3a0c003 	mov	ip, #3, 0
   17288:	e58d1000 	str	r1, [sp]
   1728c:	e58d1020 	str	r1, [sp, #32]
   17290:	e281190a 	add	r1, r1, #163840	; 0x28000
   17294:	e28d000c 	add	r0, sp, #12, 0
   17298:	e08d2003 	add	r2, sp, r3
   1729c:	e2811001 	add	r1, r1, #1, 0
   172a0:	e58dc024 	str	ip, [sp, #36]	; 0x24
   172a4:	ebffeb80 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   172a8:	e3500000 	cmp	r0, #0, 0
   172ac:	0a000009 	beq	172d8 <CEMMCDevice::PowerOn()+0x70>
   172b0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   172b4:	e2134002 	ands	r4, r3, #2, 0
   172b8:	1a000006 	bne	172d8 <CEMMCDevice::PowerOn()+0x70>
   172bc:	e3130001 	tst	r3, #1, 0
   172c0:	0a000004 	beq	172d8 <CEMMCDevice::PowerOn()+0x70>
   172c4:	e28d000c 	add	r0, sp, #12, 0
   172c8:	ebffeb72 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   172cc:	e1a00004 	mov	r0, r4
   172d0:	e28dd028 	add	sp, sp, #40, 0	; 0x28
   172d4:	e8bd8010 	pop	{r4, pc}
   172d8:	e3a00001 	mov	r0, #1, 0
   172dc:	e59f1008 	ldr	r1, [pc, #8]	; 172ec <CEMMCDevice::PowerOn()+0x84>
   172e0:	eb000553 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   172e4:	e3e04000 	mvn	r4, #0, 0
   172e8:	eafffff5 	b	172c4 <CEMMCDevice::PowerOn()+0x5c>
   172ec:	0001c0d8 	.word	0x0001c0d8

000172f0 <CEMMCDevice::PowerOff()>:
   172f0:	e59f200c 	ldr	r2, [pc, #12]	; 17304 <CEMMCDevice::PowerOff()+0x14>
   172f4:	e5923028 	ldr	r3, [r2, #40]	; 0x28
   172f8:	e3c33c01 	bic	r3, r3, #256	; 0x100
   172fc:	e5823028 	str	r3, [r2, #40]	; 0x28
   17300:	e12fff1e 	bx	lr
   17304:	20300000 	.word	0x20300000

00017308 <CEMMCDevice::GetBaseClock()>:
   17308:	e92d4070 	push	{r4, r5, r6, lr}
   1730c:	e24dd028 	sub	sp, sp, #40, 0	; 0x28
   17310:	e3a01000 	mov	r1, #0, 0
   17314:	e28d000c 	add	r0, sp, #12, 0
   17318:	ebffeb57 	bl	1207c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1731c:	e3a03000 	mov	r3, #0, 0
   17320:	e58d3000 	str	r3, [sp]
   17324:	e3a03014 	mov	r3, #20, 0
   17328:	e3a05001 	mov	r5, #1, 0
   1732c:	e59f1044 	ldr	r1, [pc, #68]	; 17378 <CEMMCDevice::GetBaseClock()+0x70>
   17330:	e28d000c 	add	r0, sp, #12, 0
   17334:	e08d2003 	add	r2, sp, r3
   17338:	e58d5020 	str	r5, [sp, #32]
   1733c:	ebffeb5a 	bl	120ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17340:	e2504000 	subs	r4, r0, #0, 0
   17344:	0a000005 	beq	17360 <CEMMCDevice::GetBaseClock()+0x58>
   17348:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   1734c:	e28d000c 	add	r0, sp, #12, 0
   17350:	ebffeb50 	bl	12098 <CBcmPropertyTags::~CBcmPropertyTags()>
   17354:	e1a00006 	mov	r0, r6
   17358:	e28dd028 	add	sp, sp, #40, 0	; 0x28
   1735c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17360:	e1a00005 	mov	r0, r5
   17364:	e59f1010 	ldr	r1, [pc, #16]	; 1737c <CEMMCDevice::GetBaseClock()+0x74>
   17368:	eb000531 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   1736c:	e1a06004 	mov	r6, r4
   17370:	e58d4024 	str	r4, [sp, #36]	; 0x24
   17374:	eafffff4 	b	1734c <CEMMCDevice::GetBaseClock()+0x44>
   17378:	00030002 	.word	0x00030002
   1737c:	0001c100 	.word	0x0001c100

00017380 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>:
   17380:	e1520001 	cmp	r2, r1
   17384:	83a00001 	movhi	r0, #1, 0
   17388:	e92d4010 	push	{r4, lr}
   1738c:	8a000004 	bhi	173a4 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x24>
   17390:	e1a00001 	mov	r0, r1
   17394:	e1a01002 	mov	r1, r2
   17398:	eb0005d6 	bl	18af8 <__aeabi_uidivmod>
   1739c:	e3510000 	cmp	r1, #0, 0
   173a0:	12400001 	subne	r0, r0, #1, 0
   173a4:	e3a0301f 	mov	r3, #31, 0
   173a8:	e3a01001 	mov	r1, #1, 0
   173ac:	ea000001 	b	173b8 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x38>
   173b0:	e2533001 	subs	r3, r3, #1, 0
   173b4:	3a000007 	bcc	173d8 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x58>
   173b8:	e1a02311 	lsl	r2, r1, r3
   173bc:	e1100002 	tst	r0, r2
   173c0:	0afffffa 	beq	173b0 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x30>
   173c4:	e1d00002 	bics	r0, r0, r2
   173c8:	0a000004 	beq	173e0 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x60>
   173cc:	e2833001 	add	r3, r3, #1, 0
   173d0:	e3530020 	cmp	r3, #32, 0
   173d4:	1a000003 	bne	173e8 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x68>
   173d8:	e59f0034 	ldr	r0, [pc, #52]	; 17414 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x94>
   173dc:	e8bd8010 	pop	{r4, pc}
   173e0:	e3530000 	cmp	r3, #0, 0
   173e4:	08bd8010 	popeq	{r4, pc}
   173e8:	e3a02001 	mov	r2, #1, 0
   173ec:	e59f1024 	ldr	r1, [pc, #36]	; 17418 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x98>
   173f0:	e2433001 	sub	r3, r3, #1, 0
   173f4:	e1a03312 	lsl	r3, r2, r3
   173f8:	e1530001 	cmp	r3, r1
   173fc:	a1a03001 	movge	r3, r1
   17400:	e1a00403 	lsl	r0, r3, #8
   17404:	e6ff0070 	uxth	r0, r0
   17408:	e1a03443 	asr	r3, r3, #8
   1740c:	e1800303 	orr	r0, r0, r3, lsl #6
   17410:	e8bd8010 	pop	{r4, pc}
   17414:	0000ffc0 	.word	0x0000ffc0
   17418:	000003ff 	.word	0x000003ff

0001741c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>:
   1741c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17420:	e1a04000 	mov	r4, r0
   17424:	e1a05002 	mov	r5, r2
   17428:	ebffffd4 	bl	17380 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>
   1742c:	e3700001 	cmn	r0, #1, 0
   17430:	e1a06000 	mov	r6, r0
   17434:	0a000028 	beq	174dc <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xc0>
   17438:	e59f50b4 	ldr	r5, [pc, #180]	; 174f4 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xd8>
   1743c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   17440:	e3130003 	tst	r3, #3, 0
   17444:	1a000005 	bne	17460 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x44>
   17448:	ea000008 	b	17470 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x54>
   1744c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   17450:	ebffe133 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17454:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   17458:	e3130003 	tst	r3, #3, 0
   1745c:	0a000003 	beq	17470 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x54>
   17460:	e5943008 	ldr	r3, [r4, #8]
   17464:	e3530000 	cmp	r3, #0, 0
   17468:	1afffff7 	bne	1744c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x30>
   1746c:	eb00050e 	bl	188ac <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>
   17470:	e59f707c 	ldr	r7, [pc, #124]	; 174f4 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xd8>
   17474:	e5943008 	ldr	r3, [r4, #8]
   17478:	e597502c 	ldr	r5, [r7, #44]	; 0x2c
   1747c:	e3530000 	cmp	r3, #0, 0
   17480:	e3c53004 	bic	r3, r5, #4, 0
   17484:	e587302c 	str	r3, [r7, #44]	; 0x2c
   17488:	0afffff7 	beq	1746c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x50>
   1748c:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   17490:	ebffe123 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17494:	e5942008 	ldr	r2, [r4, #8]
   17498:	e3c53cff 	bic	r3, r5, #65280	; 0xff00
   1749c:	e3c330e4 	bic	r3, r3, #228, 0	; 0xe4
   174a0:	e1866003 	orr	r6, r6, r3
   174a4:	e3520000 	cmp	r2, #0, 0
   174a8:	e587602c 	str	r6, [r7, #44]	; 0x2c
   174ac:	0affffee 	beq	1746c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x50>
   174b0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   174b4:	ebffe11a 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   174b8:	e5943008 	ldr	r3, [r4, #8]
   174bc:	e3866004 	orr	r6, r6, #4, 0
   174c0:	e3530000 	cmp	r3, #0, 0
   174c4:	e587602c 	str	r6, [r7, #44]	; 0x2c
   174c8:	0affffe7 	beq	1746c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x50>
   174cc:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   174d0:	ebffe113 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   174d4:	e3a00000 	mov	r0, #0, 0
   174d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   174dc:	e1a02005 	mov	r2, r5
   174e0:	e3a00004 	mov	r0, #4, 0
   174e4:	e59f100c 	ldr	r1, [pc, #12]	; 174f8 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xdc>
   174e8:	eb0004d1 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   174ec:	e1a00006 	mov	r0, r6
   174f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   174f4:	20300000 	.word	0x20300000
   174f8:	0001c118 	.word	0x0001c118

000174fc <CEMMCDevice::ResetCmd()>:
   174fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17500:	e59f104c 	ldr	r1, [pc, #76]	; 17554 <CEMMCDevice::ResetCmd()+0x58>
   17504:	e59fc04c 	ldr	ip, [pc, #76]	; 17558 <CEMMCDevice::ResetCmd()+0x5c>
   17508:	e591202c 	ldr	r2, [r1, #44]	; 0x2c
   1750c:	e24dd00c 	sub	sp, sp, #12, 0
   17510:	e3822402 	orr	r2, r2, #33554432	; 0x2000000
   17514:	e581202c 	str	r2, [r1, #44]	; 0x2c
   17518:	e3a03000 	mov	r3, #0, 0
   1751c:	e3a02402 	mov	r2, #33554432	; 0x2000000
   17520:	e58dc000 	str	ip, [sp]
   17524:	e281102c 	add	r1, r1, #44, 0	; 0x2c
   17528:	eb00049a 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   1752c:	e3500000 	cmp	r0, #0, 0
   17530:	a3a00000 	movge	r0, #0, 0
   17534:	ba000001 	blt	17540 <CEMMCDevice::ResetCmd()+0x44>
   17538:	e28dd00c 	add	sp, sp, #12, 0
   1753c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17540:	e3a00001 	mov	r0, #1, 0
   17544:	e59f1010 	ldr	r1, [pc, #16]	; 1755c <CEMMCDevice::ResetCmd()+0x60>
   17548:	eb0004b9 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   1754c:	e3e00000 	mvn	r0, #0, 0
   17550:	eafffff8 	b	17538 <CEMMCDevice::ResetCmd()+0x3c>
   17554:	20300000 	.word	0x20300000
   17558:	000f4240 	.word	0x000f4240
   1755c:	0001c14c 	.word	0x0001c14c

00017560 <CEMMCDevice::ResetDat()>:
   17560:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17564:	e59f104c 	ldr	r1, [pc, #76]	; 175b8 <CEMMCDevice::ResetDat()+0x58>
   17568:	e59fc04c 	ldr	ip, [pc, #76]	; 175bc <CEMMCDevice::ResetDat()+0x5c>
   1756c:	e591202c 	ldr	r2, [r1, #44]	; 0x2c
   17570:	e24dd00c 	sub	sp, sp, #12, 0
   17574:	e3822301 	orr	r2, r2, #67108864	; 0x4000000
   17578:	e581202c 	str	r2, [r1, #44]	; 0x2c
   1757c:	e3a03000 	mov	r3, #0, 0
   17580:	e3a02301 	mov	r2, #67108864	; 0x4000000
   17584:	e58dc000 	str	ip, [sp]
   17588:	e281102c 	add	r1, r1, #44, 0	; 0x2c
   1758c:	eb000481 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   17590:	e3500000 	cmp	r0, #0, 0
   17594:	a3a00000 	movge	r0, #0, 0
   17598:	ba000001 	blt	175a4 <CEMMCDevice::ResetDat()+0x44>
   1759c:	e28dd00c 	add	sp, sp, #12, 0
   175a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   175a4:	e3a00001 	mov	r0, #1, 0
   175a8:	e59f1010 	ldr	r1, [pc, #16]	; 175c0 <CEMMCDevice::ResetDat()+0x60>
   175ac:	eb0004a0 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   175b0:	e3e00000 	mvn	r0, #0, 0
   175b4:	eafffff8 	b	1759c <CEMMCDevice::ResetDat()+0x3c>
   175b8:	20300000 	.word	0x20300000
   175bc:	000f4240 	.word	0x000f4240
   175c0:	0001c16c 	.word	0x0001c16c

000175c4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>:
   175c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175c8:	e1a05001 	mov	r5, r1
   175cc:	e3a06000 	mov	r6, #0, 0
   175d0:	e5901070 	ldr	r1, [r0, #112]	; 0x70
   175d4:	e1a04000 	mov	r4, r0
   175d8:	e3510801 	cmp	r1, #65536	; 0x10000
   175dc:	e24dd014 	sub	sp, sp, #20, 0
   175e0:	e5805050 	str	r5, [r0, #80]	; 0x50
   175e4:	e5806058 	str	r6, [r0, #88]	; 0x58
   175e8:	aa000033 	bge	176bc <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xf8>
   175ec:	e1a07003 	mov	r7, r3
   175f0:	e5903074 	ldr	r3, [r0, #116]	; 0x74
   175f4:	e59f6254 	ldr	r6, [pc, #596]	; 17850 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x28c>
   175f8:	e1831801 	orr	r1, r3, r1, lsl #16
   175fc:	e5861004 	str	r1, [r6, #4]
   17600:	e3a03001 	mov	r3, #1, 0
   17604:	e5862008 	str	r2, [r6, #8]
   17608:	e59f1244 	ldr	r1, [pc, #580]	; 17854 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x290>
   1760c:	e59f2244 	ldr	r2, [pc, #580]	; 17858 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x294>
   17610:	e586500c 	str	r5, [r6, #12]
   17614:	e58d7000 	str	r7, [sp]
   17618:	eb00045e 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   1761c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   17620:	e59f2234 	ldr	r2, [pc, #564]	; 1785c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x298>
   17624:	e0031002 	and	r1, r3, r2
   17628:	e3510001 	cmp	r1, #1, 0
   1762c:	e5862030 	str	r2, [r6, #48]	; 0x30
   17630:	0a000005 	beq	1764c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x88>
   17634:	e1a02823 	lsr	r2, r3, #16
   17638:	e1a02802 	lsl	r2, r2, #16
   1763c:	e5843040 	str	r3, [r4, #64]	; 0x40
   17640:	e5842044 	str	r2, [r4, #68]	; 0x44
   17644:	e28dd014 	add	sp, sp, #20, 0
   17648:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1764c:	e3150802 	tst	r5, #131072	; 0x20000
   17650:	e2053803 	and	r3, r5, #196608	; 0x30000
   17654:	1a000064 	bne	177ec <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x228>
   17658:	e3530801 	cmp	r3, #65536	; 0x10000
   1765c:	0a00001d 	beq	176d8 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x114>
   17660:	e3150602 	tst	r5, #2097152	; 0x200000
   17664:	1a000025 	bne	17700 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x13c>
   17668:	e3530803 	cmp	r3, #196608	; 0x30000
   1766c:	1a00000e 	bne	176ac <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xe8>
   17670:	e3a03001 	mov	r3, #1, 0
   17674:	e59f21e4 	ldr	r2, [pc, #484]	; 17860 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x29c>
   17678:	e59f11d4 	ldr	r1, [pc, #468]	; 17854 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x290>
   1767c:	e1a00004 	mov	r0, r4
   17680:	e58d7000 	str	r7, [sp]
   17684:	eb000443 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   17688:	e59f21c0 	ldr	r2, [pc, #448]	; 17850 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x28c>
   1768c:	e59f31d0 	ldr	r3, [pc, #464]	; 17864 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2a0>
   17690:	e5925030 	ldr	r5, [r2, #48]	; 0x30
   17694:	e59f11cc 	ldr	r1, [pc, #460]	; 17868 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2a4>
   17698:	e0033005 	and	r3, r3, r5
   1769c:	e3530002 	cmp	r3, #2, 0
   176a0:	e5821030 	str	r1, [r2, #48]	; 0x30
   176a4:	05821030 	streq	r1, [r2, #48]	; 0x30
   176a8:	1a00005c 	bne	17820 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x25c>
   176ac:	e3a03001 	mov	r3, #1, 0
   176b0:	e5843058 	str	r3, [r4, #88]	; 0x58
   176b4:	e28dd014 	add	sp, sp, #20, 0
   176b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176bc:	e1a02001 	mov	r2, r1
   176c0:	e3a00004 	mov	r0, #4, 0
   176c4:	e59f11a0 	ldr	r1, [pc, #416]	; 1786c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2a8>
   176c8:	eb000459 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   176cc:	e5846058 	str	r6, [r4, #88]	; 0x58
   176d0:	e28dd014 	add	sp, sp, #20, 0
   176d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d8:	e5963010 	ldr	r3, [r6, #16]
   176dc:	e3150602 	tst	r5, #2097152	; 0x200000
   176e0:	e584305c 	str	r3, [r4, #92]	; 0x5c
   176e4:	e5963014 	ldr	r3, [r6, #20]
   176e8:	e5843060 	str	r3, [r4, #96]	; 0x60
   176ec:	e5963018 	ldr	r3, [r6, #24]
   176f0:	e5843064 	str	r3, [r4, #100]	; 0x64
   176f4:	e596301c 	ldr	r3, [r6, #28]
   176f8:	e5843068 	str	r3, [r4, #104]	; 0x68
   176fc:	0affffea 	beq	176ac <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xe8>
   17700:	e594606c 	ldr	r6, [r4, #108]	; 0x6c
   17704:	e2055010 	and	r5, r5, #16, 0
   17708:	e3550000 	cmp	r5, #0, 0
   1770c:	03a0b001 	moveq	fp, #1, 0
   17710:	13a0b000 	movne	fp, #0, 0
   17714:	13a0a020 	movne	sl, #32, 0
   17718:	03a0a010 	moveq	sl, #16, 0
   1771c:	e2168003 	ands	r8, r6, #3, 0
   17720:	1a000046 	bne	17840 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x27c>
   17724:	e5943070 	ldr	r3, [r4, #112]	; 0x70
   17728:	e3530000 	cmp	r3, #0, 0
   1772c:	daffffcf 	ble	17670 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xac>
   17730:	e1e0980a 	mvn	r9, sl, lsl #16
   17734:	e1e09829 	mvn	r9, r9, lsr #16
   17738:	e59f1114 	ldr	r1, [pc, #276]	; 17854 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x290>
   1773c:	e59f510c 	ldr	r5, [pc, #268]	; 17850 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x28c>
   17740:	e38a2902 	orr	r2, sl, #32768	; 0x8000
   17744:	e3a03001 	mov	r3, #1, 0
   17748:	e1a00004 	mov	r0, r4
   1774c:	e58d7000 	str	r7, [sp]
   17750:	e58d200c 	str	r2, [sp, #12]
   17754:	eb00040f 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   17758:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   1775c:	e59f10f0 	ldr	r1, [pc, #240]	; 17854 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x290>
   17760:	e0090003 	and	r0, r9, r3
   17764:	e150000a 	cmp	r0, sl
   17768:	e59d200c 	ldr	r2, [sp, #12]
   1776c:	e5859030 	str	r9, [r5, #48]	; 0x30
   17770:	1affffaf 	bne	17634 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x70>
   17774:	e5940074 	ldr	r0, [r4, #116]	; 0x74
   17778:	e3500b01 	cmp	r0, #1024	; 0x400
   1777c:	8a00001f 	bhi	17800 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x23c>
   17780:	e3100003 	tst	r0, #3, 0
   17784:	1a000021 	bne	17810 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x24c>
   17788:	e35b0000 	cmp	fp, #0, 0
   1778c:	0a00000d 	beq	177c8 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x204>
   17790:	e3500000 	cmp	r0, #0, 0
   17794:	0a000006 	beq	177b4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1f0>
   17798:	e1a03006 	mov	r3, r6
   1779c:	e493c004 	ldr	ip, [r3], #4
   177a0:	e040e003 	sub	lr, r0, r3
   177a4:	e176000e 	cmn	r6, lr
   177a8:	e585c020 	str	ip, [r5, #32]
   177ac:	1afffffa 	bne	1779c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1d8>
   177b0:	e1a06003 	mov	r6, r3
   177b4:	e5943070 	ldr	r3, [r4, #112]	; 0x70
   177b8:	e2888001 	add	r8, r8, #1, 0
   177bc:	e1530008 	cmp	r3, r8
   177c0:	caffffdf 	bgt	17744 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x180>
   177c4:	eaffffa9 	b	17670 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xac>
   177c8:	e3500000 	cmp	r0, #0, 0
   177cc:	0afffff8 	beq	177b4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1f0>
   177d0:	e1a03006 	mov	r3, r6
   177d4:	e595c020 	ldr	ip, [r5, #32]
   177d8:	e483c004 	str	ip, [r3], #4
   177dc:	e040c003 	sub	ip, r0, r3
   177e0:	e176000c 	cmn	r6, ip
   177e4:	1afffffa 	bne	177d4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x210>
   177e8:	eafffff0 	b	177b0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1ec>
   177ec:	e5962010 	ldr	r2, [r6, #16]
   177f0:	e3150602 	tst	r5, #2097152	; 0x200000
   177f4:	e584205c 	str	r2, [r4, #92]	; 0x5c
   177f8:	1affffc0 	bne	17700 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x13c>
   177fc:	eaffff99 	b	17668 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xa4>
   17800:	e59f1068 	ldr	r1, [pc, #104]	; 17870 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2ac>
   17804:	e59f2068 	ldr	r2, [pc, #104]	; 17874 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2b0>
   17808:	e2810f53 	add	r0, r1, #332	; 0x14c
   1780c:	ebffe8bd 	bl	11b08 <assertion_failed>
   17810:	e59f1058 	ldr	r1, [pc, #88]	; 17870 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2ac>
   17814:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   17818:	e2810f59 	add	r0, r1, #356	; 0x164
   1781c:	ebffe8b9 	bl	11b08 <assertion_failed>
   17820:	e3a00002 	mov	r0, #2, 0
   17824:	e59f104c 	ldr	r1, [pc, #76]	; 17878 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2b4>
   17828:	eb000401 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   1782c:	e1a03825 	lsr	r3, r5, #16
   17830:	e1a03803 	lsl	r3, r3, #16
   17834:	e5845040 	str	r5, [r4, #64]	; 0x40
   17838:	e5843044 	str	r3, [r4, #68]	; 0x44
   1783c:	eaffff80 	b	17644 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x80>
   17840:	e59f1028 	ldr	r1, [pc, #40]	; 17870 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2ac>
   17844:	e59f2030 	ldr	r2, [pc, #48]	; 1787c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2b8>
   17848:	e2810e13 	add	r0, r1, #304	; 0x130
   1784c:	ebffe8ad 	bl	11b08 <assertion_failed>
   17850:	20300000 	.word	0x20300000
   17854:	20300030 	.word	0x20300030
   17858:	00008001 	.word	0x00008001
   1785c:	ffff0001 	.word	0xffff0001
   17860:	00008002 	.word	0x00008002
   17864:	ffef0002 	.word	0xffef0002
   17868:	ffff0002 	.word	0xffff0002
   1786c:	0001c18c 	.word	0x0001c18c
   17870:	0001c080 	.word	0x0001c080
   17874:	000003e6 	.word	0x000003e6
   17878:	0001c1f8 	.word	0x0001c1f8
   1787c:	000003d1 	.word	0x000003d1

00017880 <CEMMCDevice::HandleCardInterrupt()>:
   17880:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   17884:	e3520000 	cmp	r2, #0, 0
   17888:	012fff1e 	bxeq	lr
   1788c:	e92d4010 	push	{r4, lr}
   17890:	e1a04000 	mov	r4, r0
   17894:	e59f3024 	ldr	r3, [pc, #36]	; 178c0 <CEMMCDevice::HandleCardInterrupt()+0x40>
   17898:	e59f1024 	ldr	r1, [pc, #36]	; 178c4 <CEMMCDevice::HandleCardInterrupt()+0x44>
   1789c:	e1a02802 	lsl	r2, r2, #16
   178a0:	ebffff47 	bl	175c4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   178a4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   178a8:	e3530000 	cmp	r3, #0, 0
   178ac:	18bd8010 	popne	{r4, pc}
   178b0:	e3a00002 	mov	r0, #2, 0
   178b4:	e8bd4010 	pop	{r4, lr}
   178b8:	e59f1008 	ldr	r1, [pc, #8]	; 178c8 <CEMMCDevice::HandleCardInterrupt()+0x48>
   178bc:	ea0003dc 	b	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   178c0:	0007a120 	.word	0x0007a120
   178c4:	0d0a0000 	.word	0x0d0a0000
   178c8:	0001c238 	.word	0x0001c238

000178cc <CEMMCDevice::HandleInterrupts()>:
   178cc:	e59f309c 	ldr	r3, [pc, #156]	; 17970 <CEMMCDevice::HandleInterrupts()+0xa4>
   178d0:	e92d4070 	push	{r4, r5, r6, lr}
   178d4:	e5934030 	ldr	r4, [r3, #48]	; 0x30
   178d8:	e1a06000 	mov	r6, r0
   178dc:	e2045001 	and	r5, r4, #1, 0
   178e0:	e3140002 	tst	r4, #2, 0
   178e4:	13855002 	orrne	r5, r5, #2, 0
   178e8:	e3140004 	tst	r4, #4, 0
   178ec:	13855004 	orrne	r5, r5, #4, 0
   178f0:	e3140008 	tst	r4, #8, 0
   178f4:	13855008 	orrne	r5, r5, #8, 0
   178f8:	e3140010 	tst	r4, #16, 0
   178fc:	1a00000f 	bne	17940 <CEMMCDevice::HandleInterrupts()+0x74>
   17900:	e3140020 	tst	r4, #32, 0
   17904:	1a000011 	bne	17950 <CEMMCDevice::HandleInterrupts()+0x84>
   17908:	e3140040 	tst	r4, #64, 0	; 0x40
   1790c:	13855040 	orrne	r5, r5, #64, 0	; 0x40
   17910:	e3140080 	tst	r4, #128, 0	; 0x80
   17914:	13a03001 	movne	r3, #1, 0
   17918:	13855080 	orrne	r5, r5, #128, 0	; 0x80
   1791c:	15863078 	strne	r3, [r6, #120]	; 0x78
   17920:	e3140c01 	tst	r4, #256	; 0x100
   17924:	1a00000d 	bne	17960 <CEMMCDevice::HandleInterrupts()+0x94>
   17928:	e3140902 	tst	r4, #32768	; 0x8000
   1792c:	11e05805 	mvnne	r5, r5, lsl #16
   17930:	11e05825 	mvnne	r5, r5, lsr #16
   17934:	e59f3034 	ldr	r3, [pc, #52]	; 17970 <CEMMCDevice::HandleInterrupts()+0xa4>
   17938:	e5835030 	str	r5, [r3, #48]	; 0x30
   1793c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17940:	ebffff06 	bl	17560 <CEMMCDevice::ResetDat()>
   17944:	e3140020 	tst	r4, #32, 0
   17948:	e3855010 	orr	r5, r5, #16, 0
   1794c:	0affffed 	beq	17908 <CEMMCDevice::HandleInterrupts()+0x3c>
   17950:	e1a00006 	mov	r0, r6
   17954:	e3855020 	orr	r5, r5, #32, 0
   17958:	ebffff00 	bl	17560 <CEMMCDevice::ResetDat()>
   1795c:	eaffffe9 	b	17908 <CEMMCDevice::HandleInterrupts()+0x3c>
   17960:	e1a00006 	mov	r0, r6
   17964:	ebffffc5 	bl	17880 <CEMMCDevice::HandleCardInterrupt()>
   17968:	e3855c01 	orr	r5, r5, #256	; 0x100
   1796c:	eaffffed 	b	17928 <CEMMCDevice::HandleInterrupts()+0x5c>
   17970:	20300000 	.word	0x20300000

00017974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>:
   17974:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17978:	e1a05000 	mov	r5, r0
   1797c:	e1a06001 	mov	r6, r1
   17980:	e1a07002 	mov	r7, r2
   17984:	e1a08003 	mov	r8, r3
   17988:	ebffffcf 	bl	178cc <CEMMCDevice::HandleInterrupts()>
   1798c:	e5954078 	ldr	r4, [r5, #120]	; 0x78
   17990:	e3540000 	cmp	r4, #0, 0
   17994:	1a000029 	bne	17a40 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xcc>
   17998:	e3560000 	cmp	r6, #0, 0
   1799c:	ba00000d 	blt	179d8 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x64>
   179a0:	e59f30e4 	ldr	r3, [pc, #228]	; 17a8c <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x118>
   179a4:	e0832106 	add	r2, r3, r6, lsl #2
   179a8:	e5921034 	ldr	r1, [r2, #52]	; 0x34
   179ac:	e3710001 	cmn	r1, #1, 0
   179b0:	0a000026 	beq	17a50 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xdc>
   179b4:	e1a03008 	mov	r3, r8
   179b8:	e1a02007 	mov	r2, r7
   179bc:	e1a00005 	mov	r0, r5
   179c0:	e5856054 	str	r6, [r5, #84]	; 0x54
   179c4:	ebfffefe 	bl	175c4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   179c8:	e5954058 	ldr	r4, [r5, #88]	; 0x58
   179cc:	e2540000 	subs	r0, r4, #0, 0
   179d0:	13a00001 	movne	r0, #1, 0
   179d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179d8:	e59f10ac 	ldr	r1, [pc, #172]	; 17a8c <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x118>
   179dc:	e6ef6076 	uxtb	r6, r6
   179e0:	e0813106 	add	r3, r1, r6, lsl #2
   179e4:	e5939134 	ldr	r9, [r3, #308]	; 0x134
   179e8:	e3790001 	cmn	r9, #1, 0
   179ec:	0a00001e 	beq	17a6c <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xf8>
   179f0:	e3a03037 	mov	r3, #55, 0	; 0x37
   179f4:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
   179f8:	e5853054 	str	r3, [r5, #84]	; 0x54
   179fc:	e1a00005 	mov	r0, r5
   17a00:	e1a03008 	mov	r3, r8
   17a04:	e59f1084 	ldr	r1, [pc, #132]	; 17a90 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x11c>
   17a08:	e1a02802 	lsl	r2, r2, #16
   17a0c:	ebfffeec 	bl	175c4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   17a10:	e5954058 	ldr	r4, [r5, #88]	; 0x58
   17a14:	e3540000 	cmp	r4, #0, 0
   17a18:	0affffeb 	beq	179cc <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x58>
   17a1c:	e3866102 	orr	r6, r6, #-2147483648	; 0x80000000
   17a20:	e1a03008 	mov	r3, r8
   17a24:	e1a02007 	mov	r2, r7
   17a28:	e1a01009 	mov	r1, r9
   17a2c:	e1a00005 	mov	r0, r5
   17a30:	e5856054 	str	r6, [r5, #84]	; 0x54
   17a34:	ebfffee2 	bl	175c4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   17a38:	e5954058 	ldr	r4, [r5, #88]	; 0x58
   17a3c:	eaffffe2 	b	179cc <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x58>
   17a40:	e3a04000 	mov	r4, #0, 0
   17a44:	e1a00004 	mov	r0, r4
   17a48:	e5854058 	str	r4, [r5, #88]	; 0x58
   17a4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a50:	e1a02006 	mov	r2, r6
   17a54:	e3a00001 	mov	r0, #1, 0
   17a58:	e2831d11 	add	r1, r3, #1088	; 0x440
   17a5c:	eb000374 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17a60:	e1a00004 	mov	r0, r4
   17a64:	e5854058 	str	r4, [r5, #88]	; 0x58
   17a68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a6c:	e2811e42 	add	r1, r1, #1056	; 0x420
   17a70:	e1a02006 	mov	r2, r6
   17a74:	e3a00001 	mov	r0, #1, 0
   17a78:	e2811008 	add	r1, r1, #8, 0
   17a7c:	eb00036c 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17a80:	e1a00004 	mov	r0, r4
   17a84:	e5854058 	str	r4, [r5, #88]	; 0x58
   17a88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a8c:	0001be2c 	.word	0x0001be2c
   17a90:	370a0000 	.word	0x370a0000

00017a94 <CEMMCDevice::CardReset()>:
   17a94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a98:	e1a04000 	mov	r4, r0
   17a9c:	e59f8824 	ldr	r8, [pc, #2084]	; 182c8 <CEMMCDevice::CardReset()+0x834>
   17aa0:	e59f9824 	ldr	r9, [pc, #2084]	; 182cc <CEMMCDevice::CardReset()+0x838>
   17aa4:	e59fa824 	ldr	sl, [pc, #2084]	; 182d0 <CEMMCDevice::CardReset()+0x83c>
   17aa8:	e24dd00c 	sub	sp, sp, #12, 0
   17aac:	e248802c 	sub	r8, r8, #44, 0	; 0x2c
   17ab0:	e59f581c 	ldr	r5, [pc, #2076]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   17ab4:	e59f181c 	ldr	r1, [pc, #2076]	; 182d8 <CEMMCDevice::CardReset()+0x844>
   17ab8:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   17abc:	e3a03000 	mov	r3, #0, 0
   17ac0:	e3c22005 	bic	r2, r2, #5, 0
   17ac4:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
   17ac8:	e585202c 	str	r2, [r5, #44]	; 0x2c
   17acc:	e1a00004 	mov	r0, r4
   17ad0:	e58d1000 	str	r1, [sp]
   17ad4:	e3a02407 	mov	r2, #117440512	; 0x7000000
   17ad8:	e1a01009 	mov	r1, r9
   17adc:	eb00032d 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   17ae0:	e3500000 	cmp	r0, #0, 0
   17ae4:	ba000112 	blt	17f34 <CEMMCDevice::CardReset()+0x4a0>
   17ae8:	e59f27ec 	ldr	r2, [pc, #2028]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17aec:	e3a03001 	mov	r3, #1, 0
   17af0:	e58d2000 	str	r2, [sp]
   17af4:	e1a0100a 	mov	r1, sl
   17af8:	e3a02801 	mov	r2, #65536	; 0x10000
   17afc:	e1a00004 	mov	r0, r4
   17b00:	eb000324 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   17b04:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   17b08:	e3130801 	tst	r3, #65536	; 0x10000
   17b0c:	0a00010d 	beq	17f48 <CEMMCDevice::CardReset()+0x4b4>
   17b10:	e3a03000 	mov	r3, #0, 0
   17b14:	e1a00004 	mov	r0, r4
   17b18:	e585303c 	str	r3, [r5, #60]	; 0x3c
   17b1c:	ebfffdf9 	bl	17308 <CEMMCDevice::GetBaseClock()>
   17b20:	e2507000 	subs	r7, r0, #0, 0
   17b24:	0a00009e 	beq	17da4 <CEMMCDevice::CardReset()+0x310>
   17b28:	e1a01007 	mov	r1, r7
   17b2c:	e1a00004 	mov	r0, r4
   17b30:	e59f27a8 	ldr	r2, [pc, #1960]	; 182e0 <CEMMCDevice::CardReset()+0x84c>
   17b34:	ebfffe11 	bl	17380 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>
   17b38:	e59f6794 	ldr	r6, [pc, #1940]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   17b3c:	e3700001 	cmn	r0, #1, 0
   17b40:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
   17b44:	e1a05000 	mov	r5, r0
   17b48:	e1803003 	orr	r3, r0, r3
   17b4c:	0a000102 	beq	17f5c <CEMMCDevice::CardReset()+0x4c8>
   17b50:	e3c3380f 	bic	r3, r3, #983040	; 0xf0000
   17b54:	e59f277c 	ldr	r2, [pc, #1916]	; 182d8 <CEMMCDevice::CardReset()+0x844>
   17b58:	e383380b 	orr	r3, r3, #720896	; 0xb0000
   17b5c:	e3833001 	orr	r3, r3, #1, 0
   17b60:	e586302c 	str	r3, [r6, #44]	; 0x2c
   17b64:	e1a01009 	mov	r1, r9
   17b68:	e58d2000 	str	r2, [sp]
   17b6c:	e3a03001 	mov	r3, #1, 0
   17b70:	e3a02002 	mov	r2, #2, 0
   17b74:	e1a00004 	mov	r0, r4
   17b78:	eb000306 	bl	18798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   17b7c:	e3500000 	cmp	r0, #0, 0
   17b80:	ba0000fa 	blt	17f70 <CEMMCDevice::CardReset()+0x4dc>
   17b84:	e5943008 	ldr	r3, [r4, #8]
   17b88:	e3530000 	cmp	r3, #0, 0
   17b8c:	0a000078 	beq	17d74 <CEMMCDevice::CardReset()+0x2e0>
   17b90:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   17b94:	ebffdf62 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17b98:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
   17b9c:	e5942008 	ldr	r2, [r4, #8]
   17ba0:	e3833004 	orr	r3, r3, #4, 0
   17ba4:	e3520000 	cmp	r2, #0, 0
   17ba8:	e586302c 	str	r3, [r6, #44]	; 0x2c
   17bac:	0a000070 	beq	17d74 <CEMMCDevice::CardReset()+0x2e0>
   17bb0:	e3a0b000 	mov	fp, #0, 0
   17bb4:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   17bb8:	ebffdf59 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17bbc:	e3e05000 	mvn	r5, #0, 0
   17bc0:	e3e03c01 	mvn	r3, #256	; 0x100
   17bc4:	e5941008 	ldr	r1, [r4, #8]
   17bc8:	e586b038 	str	fp, [r6, #56]	; 0x38
   17bcc:	e151000b 	cmp	r1, fp
   17bd0:	e5865030 	str	r5, [r6, #48]	; 0x30
   17bd4:	e5863034 	str	r3, [r6, #52]	; 0x34
   17bd8:	0a000065 	beq	17d74 <CEMMCDevice::CardReset()+0x2e0>
   17bdc:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   17be0:	ebffdf4f 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17be4:	e1a0200b 	mov	r2, fp
   17be8:	e1a0100b 	mov	r1, fp
   17bec:	e1a00004 	mov	r0, r4
   17bf0:	e59f36e4 	ldr	r3, [pc, #1764]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17bf4:	e584b020 	str	fp, [r4, #32]
   17bf8:	e584b024 	str	fp, [r4, #36]	; 0x24
   17bfc:	e584b028 	str	fp, [r4, #40]	; 0x28
   17c00:	e584b02c 	str	fp, [r4, #44]	; 0x2c
   17c04:	e584b030 	str	fp, [r4, #48]	; 0x30
   17c08:	e584b034 	str	fp, [r4, #52]	; 0x34
   17c0c:	e584b038 	str	fp, [r4, #56]	; 0x38
   17c10:	e584b03c 	str	fp, [r4, #60]	; 0x3c
   17c14:	e584b040 	str	fp, [r4, #64]	; 0x40
   17c18:	e584b044 	str	fp, [r4, #68]	; 0x44
   17c1c:	e584b04c 	str	fp, [r4, #76]	; 0x4c
   17c20:	e584b050 	str	fp, [r4, #80]	; 0x50
   17c24:	e584b054 	str	fp, [r4, #84]	; 0x54
   17c28:	e584b058 	str	fp, [r4, #88]	; 0x58
   17c2c:	e584b05c 	str	fp, [r4, #92]	; 0x5c
   17c30:	e584b060 	str	fp, [r4, #96]	; 0x60
   17c34:	e584b064 	str	fp, [r4, #100]	; 0x64
   17c38:	e584b068 	str	fp, [r4, #104]	; 0x68
   17c3c:	e584b06c 	str	fp, [r4, #108]	; 0x6c
   17c40:	e584b070 	str	fp, [r4, #112]	; 0x70
   17c44:	e584b074 	str	fp, [r4, #116]	; 0x74
   17c48:	e584b078 	str	fp, [r4, #120]	; 0x78
   17c4c:	e584707c 	str	r7, [r4, #124]	; 0x7c
   17c50:	ebffff47 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17c54:	e150000b 	cmp	r0, fp
   17c58:	0a0000c9 	beq	17f84 <CEMMCDevice::CardReset()+0x4f0>
   17c5c:	e59f6680 	ldr	r6, [pc, #1664]	; 182e4 <CEMMCDevice::CardReset()+0x850>
   17c60:	e59f3674 	ldr	r3, [pc, #1652]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17c64:	e1a02006 	mov	r2, r6
   17c68:	e3a01008 	mov	r1, #8, 0
   17c6c:	e1a00004 	mov	r0, r4
   17c70:	ebffff3f 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17c74:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   17c78:	e3530000 	cmp	r3, #0, 0
   17c7c:	0a00003d 	beq	17d78 <CEMMCDevice::CardReset()+0x2e4>
   17c80:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   17c84:	e1a03a03 	lsl	r3, r3, #20
   17c88:	e1a03a23 	lsr	r3, r3, #20
   17c8c:	e1530006 	cmp	r3, r6
   17c90:	1a0000ca 	bne	17fc0 <CEMMCDevice::CardReset()+0x52c>
   17c94:	e3a05001 	mov	r5, #1, 0
   17c98:	e59f3648 	ldr	r3, [pc, #1608]	; 182e8 <CEMMCDevice::CardReset()+0x854>
   17c9c:	e3a02000 	mov	r2, #0, 0
   17ca0:	e3a01005 	mov	r1, #5, 0
   17ca4:	e1a00004 	mov	r0, r4
   17ca8:	ebffff31 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17cac:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   17cb0:	e3530000 	cmp	r3, #0, 0
   17cb4:	0a000005 	beq	17cd0 <CEMMCDevice::CardReset()+0x23c>
   17cb8:	e3a00001 	mov	r0, #1, 0
   17cbc:	e59f1628 	ldr	r1, [pc, #1576]	; 182ec <CEMMCDevice::CardReset()+0x858>
   17cc0:	eb0002db 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17cc4:	e3e00000 	mvn	r0, #0, 0
   17cc8:	e28dd00c 	add	sp, sp, #12, 0
   17ccc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cd0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17cd4:	e3530000 	cmp	r3, #0, 0
   17cd8:	0a000008 	beq	17d00 <CEMMCDevice::CardReset()+0x26c>
   17cdc:	e3130801 	tst	r3, #65536	; 0x10000
   17ce0:	0afffff4 	beq	17cb8 <CEMMCDevice::CardReset()+0x224>
   17ce4:	e1a00004 	mov	r0, r4
   17ce8:	ebfffe03 	bl	174fc <CEMMCDevice::ResetCmd()>
   17cec:	e3700001 	cmn	r0, #1, 0
   17cf0:	0a0000b0 	beq	17fb8 <CEMMCDevice::CardReset()+0x524>
   17cf4:	e3a02801 	mov	r2, #65536	; 0x10000
   17cf8:	e59f35d4 	ldr	r3, [pc, #1492]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   17cfc:	e5832030 	str	r2, [r3, #48]	; 0x30
   17d00:	e3a02000 	mov	r2, #0, 0
   17d04:	e3a011a6 	mov	r1, #-2147483607	; 0x80000029
   17d08:	e1a00004 	mov	r0, r4
   17d0c:	e59f35c8 	ldr	r3, [pc, #1480]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17d10:	ebffff17 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17d14:	e3500000 	cmp	r0, #0, 0
   17d18:	0a00009e 	beq	17f98 <CEMMCDevice::CardReset()+0x504>
   17d1c:	e3550000 	cmp	r5, #0, 0
   17d20:	13a06205 	movne	r6, #1342177280	; 0x50000000
   17d24:	03a06000 	moveq	r6, #0, 0
   17d28:	e38668ff 	orr	r6, r6, #16711680	; 0xff0000
   17d2c:	e59f55a8 	ldr	r5, [pc, #1448]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17d30:	e3866902 	orr	r6, r6, #32768	; 0x8000
   17d34:	ea000001 	b	17d40 <CEMMCDevice::CardReset()+0x2ac>
   17d38:	e1a00005 	mov	r0, r5
   17d3c:	ebffdef8 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17d40:	e1a03005 	mov	r3, r5
   17d44:	e1a02006 	mov	r2, r6
   17d48:	e3a011a6 	mov	r1, #-2147483607	; 0x80000029
   17d4c:	e1a00004 	mov	r0, r4
   17d50:	ebffff07 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17d54:	e3500000 	cmp	r0, #0, 0
   17d58:	0a00001f 	beq	17ddc <CEMMCDevice::CardReset()+0x348>
   17d5c:	e594105c 	ldr	r1, [r4, #92]	; 0x5c
   17d60:	e3510000 	cmp	r1, #0, 0
   17d64:	ba000022 	blt	17df4 <CEMMCDevice::CardReset()+0x360>
   17d68:	e5943008 	ldr	r3, [r4, #8]
   17d6c:	e3530000 	cmp	r3, #0, 0
   17d70:	1afffff0 	bne	17d38 <CEMMCDevice::CardReset()+0x2a4>
   17d74:	eb0002cc 	bl	188ac <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>
   17d78:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   17d7c:	e3530000 	cmp	r3, #0, 0
   17d80:	01a05003 	moveq	r5, r3
   17d84:	0affffc3 	beq	17c98 <CEMMCDevice::CardReset()+0x204>
   17d88:	e3130801 	tst	r3, #65536	; 0x10000
   17d8c:	1a000009 	bne	17db8 <CEMMCDevice::CardReset()+0x324>
   17d90:	e3a00001 	mov	r0, #1, 0
   17d94:	e59f1554 	ldr	r1, [pc, #1364]	; 182f0 <CEMMCDevice::CardReset()+0x85c>
   17d98:	eb0002a5 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17d9c:	e1a00005 	mov	r0, r5
   17da0:	eaffffc8 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17da4:	e3a00002 	mov	r0, #2, 0
   17da8:	e59f1544 	ldr	r1, [pc, #1348]	; 182f4 <CEMMCDevice::CardReset()+0x860>
   17dac:	eb0002a0 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17db0:	e59f7540 	ldr	r7, [pc, #1344]	; 182f8 <CEMMCDevice::CardReset()+0x864>
   17db4:	eaffff5b 	b	17b28 <CEMMCDevice::CardReset()+0x94>
   17db8:	e1a00004 	mov	r0, r4
   17dbc:	ebfffdce 	bl	174fc <CEMMCDevice::ResetCmd()>
   17dc0:	e3700001 	cmn	r0, #1, 0
   17dc4:	0a00007b 	beq	17fb8 <CEMMCDevice::CardReset()+0x524>
   17dc8:	e3a02801 	mov	r2, #65536	; 0x10000
   17dcc:	e59f3500 	ldr	r3, [pc, #1280]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   17dd0:	e3a05000 	mov	r5, #0, 0
   17dd4:	e5832030 	str	r2, [r3, #48]	; 0x30
   17dd8:	eaffffae 	b	17c98 <CEMMCDevice::CardReset()+0x204>
   17ddc:	e3a00001 	mov	r0, #1, 0
   17de0:	e59f1514 	ldr	r1, [pc, #1300]	; 182fc <CEMMCDevice::CardReset()+0x868>
   17de4:	eb000292 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17de8:	e3e00000 	mvn	r0, #0, 0
   17dec:	e28dd00c 	add	sp, sp, #12, 0
   17df0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17df4:	e1a02421 	lsr	r2, r1, #8
   17df8:	e1a01f21 	lsr	r1, r1, #30
   17dfc:	e2013001 	and	r3, r1, #1, 0
   17e00:	e6ff2072 	uxth	r2, r2
   17e04:	e5842038 	str	r2, [r4, #56]	; 0x38
   17e08:	e5843030 	str	r3, [r4, #48]	; 0x30
   17e0c:	e1a01007 	mov	r1, r7
   17e10:	e1a00004 	mov	r0, r4
   17e14:	e59f24e4 	ldr	r2, [pc, #1252]	; 18300 <CEMMCDevice::CardReset()+0x86c>
   17e18:	ebfffd7f 	bl	1741c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>
   17e1c:	e5943008 	ldr	r3, [r4, #8]
   17e20:	e3530000 	cmp	r3, #0, 0
   17e24:	0affffd2 	beq	17d74 <CEMMCDevice::CardReset()+0x2e0>
   17e28:	e59f04d4 	ldr	r0, [pc, #1236]	; 18304 <CEMMCDevice::CardReset()+0x870>
   17e2c:	ebffdebc 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17e30:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   17e34:	e3530000 	cmp	r3, #0, 0
   17e38:	0a000069 	beq	17fe4 <CEMMCDevice::CardReset()+0x550>
   17e3c:	e3a02000 	mov	r2, #0, 0
   17e40:	e3a0100b 	mov	r1, #11, 0
   17e44:	e1a00004 	mov	r0, r4
   17e48:	e59f348c 	ldr	r3, [pc, #1164]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17e4c:	ebfffec8 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17e50:	e3500000 	cmp	r0, #0, 0
   17e54:	0a000032 	beq	17f24 <CEMMCDevice::CardReset()+0x490>
   17e58:	e59f5474 	ldr	r5, [pc, #1140]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   17e5c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   17e60:	e3c33004 	bic	r3, r3, #4, 0
   17e64:	e585302c 	str	r3, [r5, #44]	; 0x2c
   17e68:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   17e6c:	e313060f 	tst	r3, #15728640	; 0xf00000
   17e70:	159f1490 	ldrne	r1, [pc, #1168]	; 18308 <CEMMCDevice::CardReset()+0x874>
   17e74:	1a000022 	bne	17f04 <CEMMCDevice::CardReset()+0x470>
   17e78:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   17e7c:	e5942008 	ldr	r2, [r4, #8]
   17e80:	e3833c01 	orr	r3, r3, #256	; 0x100
   17e84:	e3520000 	cmp	r2, #0, 0
   17e88:	e5853028 	str	r3, [r5, #40]	; 0x28
   17e8c:	0affffb8 	beq	17d74 <CEMMCDevice::CardReset()+0x2e0>
   17e90:	e59f046c 	ldr	r0, [pc, #1132]	; 18304 <CEMMCDevice::CardReset()+0x870>
   17e94:	ebffdea2 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17e98:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   17e9c:	e3130c01 	tst	r3, #256	; 0x100
   17ea0:	0a000016 	beq	17f00 <CEMMCDevice::CardReset()+0x46c>
   17ea4:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   17ea8:	e5942008 	ldr	r2, [r4, #8]
   17eac:	e3833004 	orr	r3, r3, #4, 0
   17eb0:	e3520000 	cmp	r2, #0, 0
   17eb4:	e585302c 	str	r3, [r5, #44]	; 0x2c
   17eb8:	0affffad 	beq	17d74 <CEMMCDevice::CardReset()+0x2e0>
   17ebc:	e59f0424 	ldr	r0, [pc, #1060]	; 182e8 <CEMMCDevice::CardReset()+0x854>
   17ec0:	ebffde97 	bl	f924 <CTimer::SimpleusDelay(unsigned int)>
   17ec4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   17ec8:	e1a02a22 	lsr	r2, r2, #20
   17ecc:	e202200f 	and	r2, r2, #15, 0
   17ed0:	e352000f 	cmp	r2, #15, 0
   17ed4:	0a000042 	beq	17fe4 <CEMMCDevice::CardReset()+0x550>
   17ed8:	e3a00004 	mov	r0, #4, 0
   17edc:	e59f1428 	ldr	r1, [pc, #1064]	; 1830c <CEMMCDevice::CardReset()+0x878>
   17ee0:	eb000253 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17ee4:	e3a03001 	mov	r3, #1, 0
   17ee8:	e59f23e4 	ldr	r2, [pc, #996]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   17eec:	e584304c 	str	r3, [r4, #76]	; 0x4c
   17ef0:	e5923028 	ldr	r3, [r2, #40]	; 0x28
   17ef4:	e3c33c01 	bic	r3, r3, #256	; 0x100
   17ef8:	e5823028 	str	r3, [r2, #40]	; 0x28
   17efc:	eafffeeb 	b	17ab0 <CEMMCDevice::CardReset()+0x1c>
   17f00:	e1a01008 	mov	r1, r8
   17f04:	e3a00004 	mov	r0, #4, 0
   17f08:	eb000249 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f0c:	e3a03001 	mov	r3, #1, 0
   17f10:	e584304c 	str	r3, [r4, #76]	; 0x4c
   17f14:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   17f18:	e3c33c01 	bic	r3, r3, #256	; 0x100
   17f1c:	e5853028 	str	r3, [r5, #40]	; 0x28
   17f20:	eafffee2 	b	17ab0 <CEMMCDevice::CardReset()+0x1c>
   17f24:	e3a00004 	mov	r0, #4, 0
   17f28:	e59f13e0 	ldr	r1, [pc, #992]	; 18310 <CEMMCDevice::CardReset()+0x87c>
   17f2c:	eb000240 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f30:	eaffffeb 	b	17ee4 <CEMMCDevice::CardReset()+0x450>
   17f34:	e3a00001 	mov	r0, #1, 0
   17f38:	e59f13d4 	ldr	r1, [pc, #980]	; 18314 <CEMMCDevice::CardReset()+0x880>
   17f3c:	eb00023c 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f40:	e3e00000 	mvn	r0, #0, 0
   17f44:	eaffff5f 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17f48:	e3a00002 	mov	r0, #2, 0
   17f4c:	e59f13c4 	ldr	r1, [pc, #964]	; 18318 <CEMMCDevice::CardReset()+0x884>
   17f50:	eb000237 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f54:	e3e00000 	mvn	r0, #0, 0
   17f58:	eaffff5a 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17f5c:	e3a00004 	mov	r0, #4, 0
   17f60:	e59f13b4 	ldr	r1, [pc, #948]	; 1831c <CEMMCDevice::CardReset()+0x888>
   17f64:	eb000232 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f68:	e1a00005 	mov	r0, r5
   17f6c:	eaffff55 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17f70:	e3a00001 	mov	r0, #1, 0
   17f74:	e59f13a4 	ldr	r1, [pc, #932]	; 18320 <CEMMCDevice::CardReset()+0x88c>
   17f78:	eb00022d 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f7c:	e3e00000 	mvn	r0, #0, 0
   17f80:	eaffff50 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17f84:	e3a00001 	mov	r0, #1, 0
   17f88:	e59f1394 	ldr	r1, [pc, #916]	; 18324 <CEMMCDevice::CardReset()+0x890>
   17f8c:	eb000228 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17f90:	e1a00005 	mov	r0, r5
   17f94:	eaffff4b 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17f98:	e3a00001 	mov	r0, #1, 0
   17f9c:	e59f1384 	ldr	r1, [pc, #900]	; 18328 <CEMMCDevice::CardReset()+0x894>
   17fa0:	eb000223 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17fa4:	e3e00000 	mvn	r0, #0, 0
   17fa8:	eaffff46 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17fac:	e3a00001 	mov	r0, #1, 0
   17fb0:	e59f1374 	ldr	r1, [pc, #884]	; 1832c <CEMMCDevice::CardReset()+0x898>
   17fb4:	eb00021e 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17fb8:	e3e00000 	mvn	r0, #0, 0
   17fbc:	eaffff41 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17fc0:	e3a00001 	mov	r0, #1, 0
   17fc4:	e59f1364 	ldr	r1, [pc, #868]	; 18330 <CEMMCDevice::CardReset()+0x89c>
   17fc8:	eb000219 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17fcc:	e3a00004 	mov	r0, #4, 0
   17fd0:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   17fd4:	e59f1358 	ldr	r1, [pc, #856]	; 18334 <CEMMCDevice::CardReset()+0x8a0>
   17fd8:	eb000215 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   17fdc:	e1a00005 	mov	r0, r5
   17fe0:	eaffff38 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   17fe4:	e3a02000 	mov	r2, #0, 0
   17fe8:	e3a01002 	mov	r1, #2, 0
   17fec:	e1a00004 	mov	r0, r4
   17ff0:	e59f32e4 	ldr	r3, [pc, #740]	; 182dc <CEMMCDevice::CardReset()+0x848>
   17ff4:	ebfffe5e 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   17ff8:	e3500000 	cmp	r0, #0, 0
   17ffc:	0a0000ac 	beq	182b4 <CEMMCDevice::CardReset()+0x820>
   18000:	e1c405dc 	ldrd	r0, [r4, #92]	; 0x5c
   18004:	e1c426d4 	ldrd	r2, [r4, #100]	; 0x64
   18008:	e1c402f0 	strd	r0, [r4, #32]
   1800c:	e1c422f8 	strd	r2, [r4, #40]	; 0x28
   18010:	e3a01003 	mov	r1, #3, 0
   18014:	e3a02000 	mov	r2, #0, 0
   18018:	e1a00004 	mov	r0, r4
   1801c:	e59f32b8 	ldr	r3, [pc, #696]	; 182dc <CEMMCDevice::CardReset()+0x848>
   18020:	ebfffe53 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18024:	e3500000 	cmp	r0, #0, 0
   18028:	0a00009c 	beq	182a0 <CEMMCDevice::CardReset()+0x80c>
   1802c:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   18030:	e1a0c822 	lsr	ip, r2, #16
   18034:	e1a00722 	lsr	r0, r2, #14
   18038:	e1a016a2 	lsr	r1, r2, #13
   1803c:	e1a03422 	lsr	r3, r2, #8
   18040:	e3120902 	tst	r2, #32768	; 0x8000
   18044:	e584c03c 	str	ip, [r4, #60]	; 0x3c
   18048:	e2000001 	and	r0, r0, #1, 0
   1804c:	e2011001 	and	r1, r1, #1, 0
   18050:	e2033001 	and	r3, r3, #1, 0
   18054:	1a00008c 	bne	1828c <CEMMCDevice::CardReset()+0x7f8>
   18058:	e3500000 	cmp	r0, #0, 0
   1805c:	1a000085 	bne	18278 <CEMMCDevice::CardReset()+0x7e4>
   18060:	e3510000 	cmp	r1, #0, 0
   18064:	1a00007e 	bne	18264 <CEMMCDevice::CardReset()+0x7d0>
   18068:	e3530000 	cmp	r3, #0, 0
   1806c:	0a000077 	beq	18250 <CEMMCDevice::CardReset()+0x7bc>
   18070:	e1a02822 	lsr	r2, r2, #16
   18074:	e3a01007 	mov	r1, #7, 0
   18078:	e1a00004 	mov	r0, r4
   1807c:	e59f3258 	ldr	r3, [pc, #600]	; 182dc <CEMMCDevice::CardReset()+0x848>
   18080:	e1a02802 	lsl	r2, r2, #16
   18084:	ebfffe3a 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18088:	e3500000 	cmp	r0, #0, 0
   1808c:	0a00006a 	beq	1823c <CEMMCDevice::CardReset()+0x7a8>
   18090:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   18094:	e1a024a2 	lsr	r2, r2, #9
   18098:	e202200f 	and	r2, r2, #15, 0
   1809c:	e2423003 	sub	r3, r2, #3, 0
   180a0:	e3530001 	cmp	r3, #1, 0
   180a4:	8a00005f 	bhi	18228 <CEMMCDevice::CardReset()+0x794>
   180a8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   180ac:	e3530000 	cmp	r3, #0, 0
   180b0:	1a000006 	bne	180d0 <CEMMCDevice::CardReset()+0x63c>
   180b4:	e3a02c02 	mov	r2, #512	; 0x200
   180b8:	e3a01010 	mov	r1, #16, 0
   180bc:	e1a00004 	mov	r0, r4
   180c0:	e59f3214 	ldr	r3, [pc, #532]	; 182dc <CEMMCDevice::CardReset()+0x848>
   180c4:	ebfffe2a 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   180c8:	e3500000 	cmp	r0, #0, 0
   180cc:	0affffb6 	beq	17fac <CEMMCDevice::CardReset()+0x518>
   180d0:	e3a0c008 	mov	ip, #8, 0
   180d4:	e3a05001 	mov	r5, #1, 0
   180d8:	e59f11f4 	ldr	r1, [pc, #500]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   180dc:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   180e0:	e5912004 	ldr	r2, [r1, #4]
   180e4:	e59f31ec 	ldr	r3, [pc, #492]	; 182d8 <CEMMCDevice::CardReset()+0x844>
   180e8:	e3c22eff 	bic	r2, r2, #4080	; 0xff0
   180ec:	e3c2200f 	bic	r2, r2, #15, 0
   180f0:	e3822c02 	orr	r2, r2, #512	; 0x200
   180f4:	e5812004 	str	r2, [r1, #4]
   180f8:	e3a02000 	mov	r2, #0, 0
   180fc:	e584006c 	str	r0, [r4, #108]	; 0x6c
   18100:	e3a011ce 	mov	r1, #-2147483597	; 0x80000033
   18104:	e1a00004 	mov	r0, r4
   18108:	e584c074 	str	ip, [r4, #116]	; 0x74
   1810c:	e5845070 	str	r5, [r4, #112]	; 0x70
   18110:	ebfffe17 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18114:	e3a02c02 	mov	r2, #512	; 0x200
   18118:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   1811c:	e5842074 	str	r2, [r4, #116]	; 0x74
   18120:	e3530000 	cmp	r3, #0, 0
   18124:	0a00003d 	beq	18220 <CEMMCDevice::CardReset()+0x78c>
   18128:	e3a01000 	mov	r1, #0, 0
   1812c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   18130:	e5932000 	ldr	r2, [r3]
   18134:	e583100c 	str	r1, [r3, #12]
   18138:	e6bf2f32 	rev	r2, r2
   1813c:	e1a00822 	lsr	r0, r2, #16
   18140:	e1a01c22 	lsr	r1, r2, #24
   18144:	e200c00f 	and	ip, r0, #15, 0
   18148:	e211100f 	ands	r1, r1, #15, 0
   1814c:	e583c008 	str	ip, [r3, #8]
   18150:	0583500c 	streq	r5, [r3, #12]
   18154:	0a000005 	beq	18170 <CEMMCDevice::CardReset()+0x6dc>
   18158:	e3510001 	cmp	r1, #1, 0
   1815c:	03a02002 	moveq	r2, #2, 0
   18160:	0583200c 	streq	r2, [r3, #12]
   18164:	0a000001 	beq	18170 <CEMMCDevice::CardReset()+0x6dc>
   18168:	e3510002 	cmp	r1, #2, 0
   1816c:	0a00001d 	beq	181e8 <CEMMCDevice::CardReset()+0x754>
   18170:	e3100004 	tst	r0, #4, 0
   18174:	1a00000a 	bne	181a4 <CEMMCDevice::CardReset()+0x710>
   18178:	e593200c 	ldr	r2, [r3, #12]
   1817c:	e59f31b4 	ldr	r3, [pc, #436]	; 18338 <CEMMCDevice::CardReset()+0x8a4>
   18180:	e3a00003 	mov	r0, #3, 0
   18184:	e7932102 	ldr	r2, [r3, r2, lsl #2]
   18188:	e59f11ac 	ldr	r1, [pc, #428]	; 1833c <CEMMCDevice::CardReset()+0x8a8>
   1818c:	eb0001a8 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18190:	e3e02000 	mvn	r2, #0, 0
   18194:	e59f3138 	ldr	r3, [pc, #312]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   18198:	e3a00000 	mov	r0, #0, 0
   1819c:	e5832030 	str	r2, [r3, #48]	; 0x30
   181a0:	eafffec8 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   181a4:	e59f5128 	ldr	r5, [pc, #296]	; 182d4 <CEMMCDevice::CardReset()+0x840>
   181a8:	e3a02002 	mov	r2, #2, 0
   181ac:	e5956034 	ldr	r6, [r5, #52]	; 0x34
   181b0:	e1a00004 	mov	r0, r4
   181b4:	e3c61c01 	bic	r1, r6, #256	; 0x100
   181b8:	e5851034 	str	r1, [r5, #52]	; 0x34
   181bc:	e59f3118 	ldr	r3, [pc, #280]	; 182dc <CEMMCDevice::CardReset()+0x848>
   181c0:	e3a0111a 	mov	r1, #-2147483642	; 0x80000006
   181c4:	ebfffdea 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   181c8:	e3500000 	cmp	r0, #0, 0
   181cc:	0a00000e 	beq	1820c <CEMMCDevice::CardReset()+0x778>
   181d0:	e5952028 	ldr	r2, [r5, #40]	; 0x28
   181d4:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   181d8:	e3822002 	orr	r2, r2, #2, 0
   181dc:	e5852028 	str	r2, [r5, #40]	; 0x28
   181e0:	e5856034 	str	r6, [r5, #52]	; 0x34
   181e4:	eaffffe3 	b	18178 <CEMMCDevice::CardReset()+0x6e4>
   181e8:	e3120902 	tst	r2, #32768	; 0x8000
   181ec:	03a02003 	moveq	r2, #3, 0
   181f0:	0583200c 	streq	r2, [r3, #12]
   181f4:	0affffdd 	beq	18170 <CEMMCDevice::CardReset()+0x6dc>
   181f8:	e3120b01 	tst	r2, #1024	; 0x400
   181fc:	03a02004 	moveq	r2, #4, 0
   18200:	13a02005 	movne	r2, #5, 0
   18204:	e583200c 	str	r2, [r3, #12]
   18208:	eaffffd8 	b	18170 <CEMMCDevice::CardReset()+0x6dc>
   1820c:	e3a00001 	mov	r0, #1, 0
   18210:	e59f1128 	ldr	r1, [pc, #296]	; 18340 <CEMMCDevice::CardReset()+0x8ac>
   18214:	eb000186 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18218:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   1821c:	eaffffd5 	b	18178 <CEMMCDevice::CardReset()+0x6e4>
   18220:	e3e00001 	mvn	r0, #1, 0
   18224:	eafffea7 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   18228:	e3a00001 	mov	r0, #1, 0
   1822c:	e59f1110 	ldr	r1, [pc, #272]	; 18344 <CEMMCDevice::CardReset()+0x8b0>
   18230:	eb00017f 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18234:	e3e00000 	mvn	r0, #0, 0
   18238:	eafffea2 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   1823c:	e3a00004 	mov	r0, #4, 0
   18240:	e59f1100 	ldr	r1, [pc, #256]	; 18348 <CEMMCDevice::CardReset()+0x8b4>
   18244:	eb00017a 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18248:	e3e00000 	mvn	r0, #0, 0
   1824c:	eafffe9d 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   18250:	e3a00001 	mov	r0, #1, 0
   18254:	e59f10f0 	ldr	r1, [pc, #240]	; 1834c <CEMMCDevice::CardReset()+0x8b8>
   18258:	eb000175 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   1825c:	e3e00000 	mvn	r0, #0, 0
   18260:	eafffe98 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   18264:	e3a00001 	mov	r0, #1, 0
   18268:	e59f10e0 	ldr	r1, [pc, #224]	; 18350 <CEMMCDevice::CardReset()+0x8bc>
   1826c:	eb000170 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18270:	e3e00000 	mvn	r0, #0, 0
   18274:	eafffe93 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   18278:	e3a00001 	mov	r0, #1, 0
   1827c:	e59f10d0 	ldr	r1, [pc, #208]	; 18354 <CEMMCDevice::CardReset()+0x8c0>
   18280:	eb00016b 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18284:	e3e00000 	mvn	r0, #0, 0
   18288:	eafffe8e 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   1828c:	e3a00001 	mov	r0, #1, 0
   18290:	e59f10c0 	ldr	r1, [pc, #192]	; 18358 <CEMMCDevice::CardReset()+0x8c4>
   18294:	eb000166 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18298:	e3e00000 	mvn	r0, #0, 0
   1829c:	eafffe89 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   182a0:	e3a00001 	mov	r0, #1, 0
   182a4:	e59f10b0 	ldr	r1, [pc, #176]	; 1835c <CEMMCDevice::CardReset()+0x8c8>
   182a8:	eb000161 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   182ac:	e3e00000 	mvn	r0, #0, 0
   182b0:	eafffe84 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   182b4:	e3a00001 	mov	r0, #1, 0
   182b8:	e59f10a0 	ldr	r1, [pc, #160]	; 18360 <CEMMCDevice::CardReset()+0x8cc>
   182bc:	eb00015c 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   182c0:	e3e00000 	mvn	r0, #0, 0
   182c4:	eafffe7f 	b	17cc8 <CEMMCDevice::CardReset()+0x234>
   182c8:	0001c45c 	.word	0x0001c45c
   182cc:	2030002c 	.word	0x2030002c
   182d0:	20300024 	.word	0x20300024
   182d4:	20300000 	.word	0x20300000
   182d8:	000f4240 	.word	0x000f4240
   182dc:	0007a120 	.word	0x0007a120
   182e0:	00061a80 	.word	0x00061a80
   182e4:	000001aa 	.word	0x000001aa
   182e8:	00002710 	.word	0x00002710
   182ec:	0001c390 	.word	0x0001c390
   182f0:	0001c354 	.word	0x0001c354
   182f4:	0001c2bc 	.word	0x0001c2bc
   182f8:	05f5e100 	.word	0x05f5e100
   182fc:	0001c3d8 	.word	0x0001c3d8
   18300:	017d7840 	.word	0x017d7840
   18304:	00001388 	.word	0x00001388
   18308:	0001c410 	.word	0x0001c410
   1830c:	0001c460 	.word	0x0001c460
   18310:	0001c3f0 	.word	0x0001c3f0
   18314:	0001c284 	.word	0x0001c284
   18318:	0001c2a8 	.word	0x0001c2a8
   1831c:	0001c2e0 	.word	0x0001c2e0
   18320:	0001c318 	.word	0x0001c318
   18324:	0001c340 	.word	0x0001c340
   18328:	0001c3c0 	.word	0x0001c3c0
   1832c:	0001c530 	.word	0x0001c530
   18330:	0001c36c 	.word	0x0001c36c
   18334:	0001c37c 	.word	0x0001c37c
   18338:	0001cc1c 	.word	0x0001cc1c
   1833c:	0001c570 	.word	0x0001c570
   18340:	0001c54c 	.word	0x0001c54c
   18344:	0001c51c 	.word	0x0001c51c
   18348:	0001c508 	.word	0x0001c508
   1834c:	0001c4f4 	.word	0x0001c4f4
   18350:	0001c4e4 	.word	0x0001c4e4
   18354:	0001c4d4 	.word	0x0001c4d4
   18358:	0001c4c8 	.word	0x0001c4c8
   1835c:	0001c4a4 	.word	0x0001c4a4
   18360:	0001c488 	.word	0x0001c488

00018364 <CEMMCDevice::CardInit()>:
   18364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18368:	e1a06000 	mov	r6, r0
   1836c:	ebfffbbd 	bl	17268 <CEMMCDevice::PowerOn()>
   18370:	e3500000 	cmp	r0, #0, 0
   18374:	1a000018 	bne	183dc <CEMMCDevice::CardInit()+0x78>
   18378:	e59f3070 	ldr	r3, [pc, #112]	; 183f0 <CEMMCDevice::CardInit()+0x8c>
   1837c:	e59330fc 	ldr	r3, [r3, #252]	; 0xfc
   18380:	e1a03823 	lsr	r3, r3, #16
   18384:	e31300fe 	tst	r3, #254, 0	; 0xfe
   18388:	e6ef3073 	uxtb	r3, r3
   1838c:	e586301c 	str	r3, [r6, #28]
   18390:	0a00000d 	beq	183cc <CEMMCDevice::CardInit()+0x68>
   18394:	e3a05003 	mov	r5, #3, 0
   18398:	e59f7054 	ldr	r7, [pc, #84]	; 183f4 <CEMMCDevice::CardInit()+0x90>
   1839c:	e1a00006 	mov	r0, r6
   183a0:	ebfffdbb 	bl	17a94 <CEMMCDevice::CardReset()>
   183a4:	e3700002 	cmn	r0, #2, 0
   183a8:	e1a04000 	mov	r4, r0
   183ac:	1a000004 	bne	183c4 <CEMMCDevice::CardInit()+0x60>
   183b0:	e1a01007 	mov	r1, r7
   183b4:	e3a00002 	mov	r0, #2, 0
   183b8:	eb00011d 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   183bc:	e2555001 	subs	r5, r5, #1, 0
   183c0:	1afffff5 	bne	1839c <CEMMCDevice::CardInit()+0x38>
   183c4:	e1a00004 	mov	r0, r4
   183c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   183cc:	e3a00002 	mov	r0, #2, 0
   183d0:	e59f1020 	ldr	r1, [pc, #32]	; 183f8 <CEMMCDevice::CardInit()+0x94>
   183d4:	eb000116 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   183d8:	eaffffed 	b	18394 <CEMMCDevice::CardInit()+0x30>
   183dc:	e3a00001 	mov	r0, #1, 0
   183e0:	e59f1014 	ldr	r1, [pc, #20]	; 183fc <CEMMCDevice::CardInit()+0x98>
   183e4:	eb000112 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   183e8:	e3e04000 	mvn	r4, #0, 0
   183ec:	eafffff4 	b	183c4 <CEMMCDevice::CardInit()+0x60>
   183f0:	20300000 	.word	0x20300000
   183f4:	0001c5e4 	.word	0x0001c5e4
   183f8:	0001c5c8 	.word	0x0001c5c8
   183fc:	0001c594 	.word	0x0001c594

00018400 <CEMMCDevice::EnsureDataMode()>:
   18400:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   18404:	e92d4070 	push	{r4, r5, r6, lr}
   18408:	e3520000 	cmp	r2, #0, 0
   1840c:	e1a04000 	mov	r4, r0
   18410:	1a000003 	bne	18424 <CEMMCDevice::EnsureDataMode()+0x24>
   18414:	ebfffd9e 	bl	17a94 <CEMMCDevice::CardReset()>
   18418:	e3500000 	cmp	r0, #0, 0
   1841c:	18bd8070 	popne	{r4, r5, r6, pc}
   18420:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   18424:	e3a0100d 	mov	r1, #13, 0
   18428:	e1a00004 	mov	r0, r4
   1842c:	e59f3140 	ldr	r3, [pc, #320]	; 18574 <CEMMCDevice::EnsureDataMode()+0x174>
   18430:	e1a02802 	lsl	r2, r2, #16
   18434:	ebfffd4e 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18438:	e2505000 	subs	r5, r0, #0, 0
   1843c:	0a00003a 	beq	1852c <CEMMCDevice::EnsureDataMode()+0x12c>
   18440:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   18444:	e1a034a3 	lsr	r3, r3, #9
   18448:	e203300f 	and	r3, r3, #15, 0
   1844c:	e3530003 	cmp	r3, #3, 0
   18450:	0a00001d 	beq	184cc <CEMMCDevice::EnsureDataMode()+0xcc>
   18454:	e3530005 	cmp	r3, #5, 0
   18458:	0a000029 	beq	18504 <CEMMCDevice::EnsureDataMode()+0x104>
   1845c:	e3530004 	cmp	r3, #4, 0
   18460:	1a000001 	bne	1846c <CEMMCDevice::EnsureDataMode()+0x6c>
   18464:	e3a00000 	mov	r0, #0, 0
   18468:	e8bd8070 	pop	{r4, r5, r6, pc}
   1846c:	e1a00004 	mov	r0, r4
   18470:	ebfffd87 	bl	17a94 <CEMMCDevice::CardReset()>
   18474:	e3500000 	cmp	r0, #0, 0
   18478:	18bd8070 	popne	{r4, r5, r6, pc}
   1847c:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   18480:	e3a0100d 	mov	r1, #13, 0
   18484:	e1a00004 	mov	r0, r4
   18488:	e59f30e4 	ldr	r3, [pc, #228]	; 18574 <CEMMCDevice::EnsureDataMode()+0x174>
   1848c:	e1a02802 	lsl	r2, r2, #16
   18490:	ebfffd37 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18494:	e2505000 	subs	r5, r0, #0, 0
   18498:	0a000029 	beq	18544 <CEMMCDevice::EnsureDataMode()+0x144>
   1849c:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   184a0:	e1a024a2 	lsr	r2, r2, #9
   184a4:	e202200f 	and	r2, r2, #15, 0
   184a8:	e3520004 	cmp	r2, #4, 0
   184ac:	0affffec 	beq	18464 <CEMMCDevice::EnsureDataMode()+0x64>
   184b0:	e3a00002 	mov	r0, #2, 0
   184b4:	e59f10bc 	ldr	r1, [pc, #188]	; 18578 <CEMMCDevice::EnsureDataMode()+0x178>
   184b8:	eb0000dd 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   184bc:	e3a03000 	mov	r3, #0, 0
   184c0:	e3e00000 	mvn	r0, #0, 0
   184c4:	e584303c 	str	r3, [r4, #60]	; 0x3c
   184c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   184cc:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
   184d0:	e3a01007 	mov	r1, #7, 0
   184d4:	e1a00004 	mov	r0, r4
   184d8:	e59f3094 	ldr	r3, [pc, #148]	; 18574 <CEMMCDevice::EnsureDataMode()+0x174>
   184dc:	e1a02802 	lsl	r2, r2, #16
   184e0:	ebfffd23 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   184e4:	e2505000 	subs	r5, r0, #0, 0
   184e8:	1affffe3 	bne	1847c <CEMMCDevice::EnsureDataMode()+0x7c>
   184ec:	e3a00002 	mov	r0, #2, 0
   184f0:	e59f1084 	ldr	r1, [pc, #132]	; 1857c <CEMMCDevice::EnsureDataMode()+0x17c>
   184f4:	eb0000ce 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   184f8:	e3e00000 	mvn	r0, #0, 0
   184fc:	e584503c 	str	r5, [r4, #60]	; 0x3c
   18500:	e8bd8070 	pop	{r4, r5, r6, pc}
   18504:	e3a02000 	mov	r2, #0, 0
   18508:	e3a0100c 	mov	r1, #12, 0
   1850c:	e1a00004 	mov	r0, r4
   18510:	e59f305c 	ldr	r3, [pc, #92]	; 18574 <CEMMCDevice::EnsureDataMode()+0x174>
   18514:	ebfffd16 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18518:	e2505000 	subs	r5, r0, #0, 0
   1851c:	0a00000e 	beq	1855c <CEMMCDevice::EnsureDataMode()+0x15c>
   18520:	e1a00004 	mov	r0, r4
   18524:	ebfffc0d 	bl	17560 <CEMMCDevice::ResetDat()>
   18528:	eaffffd3 	b	1847c <CEMMCDevice::EnsureDataMode()+0x7c>
   1852c:	e3a00002 	mov	r0, #2, 0
   18530:	e59f1048 	ldr	r1, [pc, #72]	; 18580 <CEMMCDevice::EnsureDataMode()+0x180>
   18534:	eb0000be 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18538:	e3e00000 	mvn	r0, #0, 0
   1853c:	e584503c 	str	r5, [r4, #60]	; 0x3c
   18540:	e8bd8070 	pop	{r4, r5, r6, pc}
   18544:	e3a00002 	mov	r0, #2, 0
   18548:	e59f1034 	ldr	r1, [pc, #52]	; 18584 <CEMMCDevice::EnsureDataMode()+0x184>
   1854c:	eb0000b8 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18550:	e3e00000 	mvn	r0, #0, 0
   18554:	e584503c 	str	r5, [r4, #60]	; 0x3c
   18558:	e8bd8070 	pop	{r4, r5, r6, pc}
   1855c:	e3a00002 	mov	r0, #2, 0
   18560:	e59f1020 	ldr	r1, [pc, #32]	; 18588 <CEMMCDevice::EnsureDataMode()+0x188>
   18564:	eb0000b2 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18568:	e3e00000 	mvn	r0, #0, 0
   1856c:	e584503c 	str	r5, [r4, #60]	; 0x3c
   18570:	e8bd8070 	pop	{r4, r5, r6, pc}
   18574:	0007a120 	.word	0x0007a120
   18578:	0001c6a4 	.word	0x0001c6a4
   1857c:	0001c62c 	.word	0x0001c62c
   18580:	0001c604 	.word	0x0001c604
   18584:	0001c67c 	.word	0x0001c67c
   18588:	0001c654 	.word	0x0001c654

0001858c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)>:
   1858c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18590:	e1a05000 	mov	r5, r0
   18594:	ed2d8b02 	vpush	{d8}
   18598:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   1859c:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
   185a0:	e5959074 	ldr	r9, [r5, #116]	; 0x74
   185a4:	e3500000 	cmp	r0, #0, 0
   185a8:	01a08488 	lsleq	r8, r8, #9
   185ac:	e1590003 	cmp	r9, r3
   185b0:	e1a07001 	mov	r7, r1
   185b4:	e1a06002 	mov	r6, r2
   185b8:	e1a04003 	mov	r4, r3
   185bc:	8a00003f 	bhi	186c0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x134>
   185c0:	e1a01009 	mov	r1, r9
   185c4:	e1a00003 	mov	r0, r3
   185c8:	eb00014a 	bl	18af8 <__aeabi_uidivmod>
   185cc:	e3510000 	cmp	r1, #0, 0
   185d0:	e5850070 	str	r0, [r5, #112]	; 0x70
   185d4:	1a000032 	bne	186a4 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x118>
   185d8:	e3570000 	cmp	r7, #0, 0
   185dc:	e585606c 	str	r6, [r5, #108]	; 0x6c
   185e0:	1a00001f 	bne	18664 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0xd8>
   185e4:	e3500001 	cmp	r0, #1, 0
   185e8:	d3a09011 	movle	r9, #17, 0
   185ec:	d1a0b009 	movle	fp, r9
   185f0:	c3a09012 	movgt	r9, #18, 0
   185f4:	c1a0b009 	movgt	fp, r9
   185f8:	e59f70dc 	ldr	r7, [pc, #220]	; 186dc <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x150>
   185fc:	e3a04003 	mov	r4, #3, 0
   18600:	e2873024 	add	r3, r7, #36, 0	; 0x24
   18604:	ee083a10 	vmov	s16, r3
   18608:	e59fa0d0 	ldr	sl, [pc, #208]	; 186e0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x154>
   1860c:	e2876014 	add	r6, r7, #20, 0
   18610:	e1a0300a 	mov	r3, sl
   18614:	e1a02008 	mov	r2, r8
   18618:	e1a01009 	mov	r1, r9
   1861c:	e1a00005 	mov	r0, r5
   18620:	ebfffcd3 	bl	17974 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   18624:	e3500000 	cmp	r0, #0, 0
   18628:	1a00001a 	bne	18698 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x10c>
   1862c:	e1a0200b 	mov	r2, fp
   18630:	e1a01007 	mov	r1, r7
   18634:	e3a00002 	mov	r0, #2, 0
   18638:	eb00007d 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   1863c:	e1a01006 	mov	r1, r6
   18640:	e3a00004 	mov	r0, #4, 0
   18644:	e5952044 	ldr	r2, [r5, #68]	; 0x44
   18648:	eb000079 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   1864c:	e2544001 	subs	r4, r4, #1, 0
   18650:	0a000009 	beq	1867c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0xf0>
   18654:	ee181a10 	vmov	r1, s16
   18658:	e3a00004 	mov	r0, #4, 0
   1865c:	eb000074 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18660:	eaffffea 	b	18610 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x84>
   18664:	e3500001 	cmp	r0, #1, 0
   18668:	d3a09018 	movle	r9, #24, 0
   1866c:	d1a0b009 	movle	fp, r9
   18670:	c3a09019 	movgt	r9, #25, 0
   18674:	c1a0b009 	movgt	fp, r9
   18678:	eaffffde 	b	185f8 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x6c>
   1867c:	e3a00004 	mov	r0, #4, 0
   18680:	e286101c 	add	r1, r6, #28, 0
   18684:	eb00006a 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   18688:	e3e00000 	mvn	r0, #0, 0
   1868c:	e585403c 	str	r4, [r5, #60]	; 0x3c
   18690:	ecbd8b02 	vpop	{d8}
   18694:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18698:	e3a00000 	mov	r0, #0, 0
   1869c:	ecbd8b02 	vpop	{d8}
   186a0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a4:	e3a00002 	mov	r0, #2, 0
   186a8:	e1a03009 	mov	r3, r9
   186ac:	e1a02004 	mov	r2, r4
   186b0:	e59f102c 	ldr	r1, [pc, #44]	; 186e4 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x158>
   186b4:	eb00005e 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   186b8:	e3e00000 	mvn	r0, #0, 0
   186bc:	eafffff3 	b	18690 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x104>
   186c0:	e3a00002 	mov	r0, #2, 0
   186c4:	e1a03009 	mov	r3, r9
   186c8:	e1a02004 	mov	r2, r4
   186cc:	e59f1014 	ldr	r1, [pc, #20]	; 186e8 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x15c>
   186d0:	eb000057 	bl	18834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   186d4:	e3e00000 	mvn	r0, #0, 0
   186d8:	eaffffec 	b	18690 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)+0x104>
   186dc:	0001c77c 	.word	0x0001c77c
   186e0:	004c4b40 	.word	0x004c4b40
   186e4:	0001c724 	.word	0x0001c724
   186e8:	0001c6dc 	.word	0x0001c6dc

000186ec <CEMMCDevice::DoRead(unsigned char*, unsigned int, unsigned int)>:
   186ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   186f0:	e24dd00c 	sub	sp, sp, #12, 0
   186f4:	e1a06001 	mov	r6, r1
   186f8:	e1a04002 	mov	r4, r2
   186fc:	e1a07003 	mov	r7, r3
   18700:	e1a05000 	mov	r5, r0
   18704:	ebffff3d 	bl	18400 <CEMMCDevice::EnsureDataMode()>
   18708:	e2501000 	subs	r1, r0, #0, 0
   1870c:	1a000009 	bne	18738 <CEMMCDevice::DoRead(unsigned char*, unsigned int, unsigned int)+0x4c>
   18710:	e1a02006 	mov	r2, r6
   18714:	e1a00005 	mov	r0, r5
   18718:	e1a03004 	mov	r3, r4
   1871c:	e58d7000 	str	r7, [sp]
   18720:	ebffff99 	bl	1858c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)>
   18724:	e3500000 	cmp	r0, #0, 0
   18728:	ba000002 	blt	18738 <CEMMCDevice::DoRead(unsigned char*, unsigned int, unsigned int)+0x4c>
   1872c:	e1a00004 	mov	r0, r4
   18730:	e28dd00c 	add	sp, sp, #12, 0
   18734:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18738:	e3e00000 	mvn	r0, #0, 0
   1873c:	eafffffb 	b	18730 <CEMMCDevice::DoRead(unsigned char*, unsigned int, unsigned int)+0x44>

00018740 <CEMMCDevice::DoWrite(unsigned char*, unsigned int, unsigned int)>:
   18740:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18744:	e24dd00c 	sub	sp, sp, #12, 0
   18748:	e1a06001 	mov	r6, r1
   1874c:	e1a04002 	mov	r4, r2
   18750:	e1a07003 	mov	r7, r3
   18754:	e1a05000 	mov	r5, r0
   18758:	ebffff28 	bl	18400 <CEMMCDevice::EnsureDataMode()>
   1875c:	e3500000 	cmp	r0, #0, 0
   18760:	1a00000a 	bne	18790 <CEMMCDevice::DoWrite(unsigned char*, unsigned int, unsigned int)+0x50>
   18764:	e1a02006 	mov	r2, r6
   18768:	e1a00005 	mov	r0, r5
   1876c:	e1a03004 	mov	r3, r4
   18770:	e3a01001 	mov	r1, #1, 0
   18774:	e58d7000 	str	r7, [sp]
   18778:	ebffff83 	bl	1858c <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned int, unsigned int)>
   1877c:	e3500000 	cmp	r0, #0, 0
   18780:	ba000002 	blt	18790 <CEMMCDevice::DoWrite(unsigned char*, unsigned int, unsigned int)+0x50>
   18784:	e1a00004 	mov	r0, r4
   18788:	e28dd00c 	add	sp, sp, #12, 0
   1878c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18790:	e3e00000 	mvn	r0, #0, 0
   18794:	eafffffb 	b	18788 <CEMMCDevice::DoWrite(unsigned char*, unsigned int, unsigned int)+0x48>

00018798 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>:
   18798:	e5900008 	ldr	r0, [r0, #8]
   1879c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   187a0:	e3500000 	cmp	r0, #0, 0
   187a4:	e59d8018 	ldr	r8, [sp, #24]
   187a8:	0a000014 	beq	18800 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x68>
   187ac:	e1a04001 	mov	r4, r1
   187b0:	e1a05002 	mov	r5, r2
   187b4:	e1a06003 	mov	r6, r3
   187b8:	ebffd9ce 	bl	eef8 <CTimer::GetClockTicks()>
   187bc:	e1a07000 	mov	r7, r0
   187c0:	ea000003 	b	187d4 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x3c>
   187c4:	ebffd9cb 	bl	eef8 <CTimer::GetClockTicks()>
   187c8:	e0400007 	sub	r0, r0, r7
   187cc:	e1500008 	cmp	r0, r8
   187d0:	2a000008 	bcs	187f8 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x60>
   187d4:	e5943000 	ldr	r3, [r4]
   187d8:	e1150003 	tst	r5, r3
   187dc:	016fcf16 	clzeq	ip, r6
   187e0:	11a0c006 	movne	ip, r6
   187e4:	01a0c2ac 	lsreq	ip, ip, #5
   187e8:	e35c0000 	cmp	ip, #0, 0
   187ec:	0afffff4 	beq	187c4 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x2c>
   187f0:	e3a00000 	mov	r0, #0, 0
   187f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   187f8:	e3e00000 	mvn	r0, #0, 0
   187fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18800:	e59f1008 	ldr	r1, [pc, #8]	; 18810 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x78>
   18804:	e59f2008 	ldr	r2, [pc, #8]	; 18814 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x7c>
   18808:	e2810024 	add	r0, r1, #36, 0	; 0x24
   1880c:	ebffe4bd 	bl	11b08 <assertion_failed>
   18810:	0001c080 	.word	0x0001c080
   18814:	00000901 	.word	0x00000901

00018818 <CEMMCDevice::usDelay(unsigned int)>:
   18818:	e5903008 	ldr	r3, [r0, #8]
   1881c:	e3530000 	cmp	r3, #0, 0
   18820:	0a000001 	beq	1882c <CEMMCDevice::usDelay(unsigned int)+0x14>
   18824:	e1a00001 	mov	r0, r1
   18828:	eaffdc3d 	b	f924 <CTimer::SimpleusDelay(unsigned int)>
   1882c:	e92d4010 	push	{r4, lr}
   18830:	eb00001d 	bl	188ac <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>

00018834 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>:
   18834:	e92d000e 	push	{r1, r2, r3}
   18838:	e92d4030 	push	{r4, r5, lr}
   1883c:	e24dd010 	sub	sp, sp, #16, 0
   18840:	e59d501c 	ldr	r5, [sp, #28]
   18844:	e3550000 	cmp	r5, #0, 0
   18848:	0a00000d 	beq	18884 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)+0x50>
   1884c:	e1a04000 	mov	r4, r0
   18850:	e28d3020 	add	r3, sp, #32, 0
   18854:	e58d300c 	str	r3, [sp, #12]
   18858:	ebffc7d0 	bl	a7a0 <CLogger::Get()>
   1885c:	e59d100c 	ldr	r1, [sp, #12]
   18860:	e1a03005 	mov	r3, r5
   18864:	e58d1000 	str	r1, [sp]
   18868:	e1a02004 	mov	r2, r4
   1886c:	e59f1024 	ldr	r1, [pc, #36]	; 18898 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)+0x64>
   18870:	ebffc718 	bl	a4d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   18874:	e28dd010 	add	sp, sp, #16, 0
   18878:	e8bd4030 	pop	{r4, r5, lr}
   1887c:	e28dd00c 	add	sp, sp, #12, 0
   18880:	e12fff1e 	bx	lr
   18884:	e59f1010 	ldr	r1, [pc, #16]	; 1889c <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)+0x68>
   18888:	e59f2010 	ldr	r2, [pc, #16]	; 188a0 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)+0x6c>
   1888c:	e2810e73 	add	r0, r1, #1840	; 0x730
   18890:	e2800008 	add	r0, r0, #8, 0
   18894:	ebffe49b 	bl	11b08 <assertion_failed>
   18898:	0001c7c8 	.word	0x0001c7c8
   1889c:	0001c080 	.word	0x0001c080
   188a0:	0000091b 	.word	0x0000091b

000188a4 <CEMMCDevice::GetID()>:
   188a4:	e2800020 	add	r0, r0, #32, 0
   188a8:	e12fff1e 	bx	lr

000188ac <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>:
   188ac:	e59f0010 	ldr	r0, [pc, #16]	; 188c4 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]+0x18>
   188b0:	e92d4010 	push	{r4, lr}
   188b4:	e2801f95 	add	r1, r0, #596	; 0x254
   188b8:	e59f2008 	ldr	r2, [pc, #8]	; 188c8 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]+0x1c>
   188bc:	e2800f9e 	add	r0, r0, #632	; 0x278
   188c0:	ebffe490 	bl	11b08 <assertion_failed>
   188c4:	0001be2c 	.word	0x0001be2c
   188c8:	00000915 	.word	0x00000915

000188cc <toupper(unsigned char)>:
   188cc:	e3100060 	tst	r0, #96, 0	; 0x60
   188d0:	12400020 	subne	r0, r0, #32, 0
   188d4:	16ef0070 	uxtbne	r0, r0
   188d8:	e12fff1e 	bx	lr

000188dc <strlen(char const*)>:
   188dc:	e1d030d0 	ldrsb	r3, [r0]
   188e0:	e3530000 	cmp	r3, #0, 0
   188e4:	0a000006 	beq	18904 <strlen(char const*)+0x28>
   188e8:	e1a03000 	mov	r3, r0
   188ec:	e2601001 	rsb	r1, r0, #1, 0
   188f0:	e0810003 	add	r0, r1, r3
   188f4:	e1f320d1 	ldrsb	r2, [r3, #1]!
   188f8:	e3520000 	cmp	r2, #0, 0
   188fc:	1afffffb 	bne	188f0 <strlen(char const*)+0x14>
   18900:	e12fff1e 	bx	lr
   18904:	e1a00003 	mov	r0, r3
   18908:	e12fff1e 	bx	lr

0001890c <__udivsi3>:
   1890c:	e2512001 	subs	r2, r1, #1, 0
   18910:	012fff1e 	bxeq	lr
   18914:	3a000074 	bcc	18aec <__udivsi3+0x1e0>
   18918:	e1500001 	cmp	r0, r1
   1891c:	9a00006b 	bls	18ad0 <__udivsi3+0x1c4>
   18920:	e1110002 	tst	r1, r2
   18924:	0a00006c 	beq	18adc <__udivsi3+0x1d0>
   18928:	e16f3f10 	clz	r3, r0
   1892c:	e16f2f11 	clz	r2, r1
   18930:	e0423003 	sub	r3, r2, r3
   18934:	e273301f 	rsbs	r3, r3, #31, 0
   18938:	10833083 	addne	r3, r3, r3, lsl #1
   1893c:	e3a02000 	mov	r2, #0, 0
   18940:	108ff103 	addne	pc, pc, r3, lsl #2
   18944:	e1a00000 	nop			; (mov r0, r0)
   18948:	e1500f81 	cmp	r0, r1, lsl #31
   1894c:	e0a22002 	adc	r2, r2, r2
   18950:	20400f81 	subcs	r0, r0, r1, lsl #31
   18954:	e1500f01 	cmp	r0, r1, lsl #30
   18958:	e0a22002 	adc	r2, r2, r2
   1895c:	20400f01 	subcs	r0, r0, r1, lsl #30
   18960:	e1500e81 	cmp	r0, r1, lsl #29
   18964:	e0a22002 	adc	r2, r2, r2
   18968:	20400e81 	subcs	r0, r0, r1, lsl #29
   1896c:	e1500e01 	cmp	r0, r1, lsl #28
   18970:	e0a22002 	adc	r2, r2, r2
   18974:	20400e01 	subcs	r0, r0, r1, lsl #28
   18978:	e1500d81 	cmp	r0, r1, lsl #27
   1897c:	e0a22002 	adc	r2, r2, r2
   18980:	20400d81 	subcs	r0, r0, r1, lsl #27
   18984:	e1500d01 	cmp	r0, r1, lsl #26
   18988:	e0a22002 	adc	r2, r2, r2
   1898c:	20400d01 	subcs	r0, r0, r1, lsl #26
   18990:	e1500c81 	cmp	r0, r1, lsl #25
   18994:	e0a22002 	adc	r2, r2, r2
   18998:	20400c81 	subcs	r0, r0, r1, lsl #25
   1899c:	e1500c01 	cmp	r0, r1, lsl #24
   189a0:	e0a22002 	adc	r2, r2, r2
   189a4:	20400c01 	subcs	r0, r0, r1, lsl #24
   189a8:	e1500b81 	cmp	r0, r1, lsl #23
   189ac:	e0a22002 	adc	r2, r2, r2
   189b0:	20400b81 	subcs	r0, r0, r1, lsl #23
   189b4:	e1500b01 	cmp	r0, r1, lsl #22
   189b8:	e0a22002 	adc	r2, r2, r2
   189bc:	20400b01 	subcs	r0, r0, r1, lsl #22
   189c0:	e1500a81 	cmp	r0, r1, lsl #21
   189c4:	e0a22002 	adc	r2, r2, r2
   189c8:	20400a81 	subcs	r0, r0, r1, lsl #21
   189cc:	e1500a01 	cmp	r0, r1, lsl #20
   189d0:	e0a22002 	adc	r2, r2, r2
   189d4:	20400a01 	subcs	r0, r0, r1, lsl #20
   189d8:	e1500981 	cmp	r0, r1, lsl #19
   189dc:	e0a22002 	adc	r2, r2, r2
   189e0:	20400981 	subcs	r0, r0, r1, lsl #19
   189e4:	e1500901 	cmp	r0, r1, lsl #18
   189e8:	e0a22002 	adc	r2, r2, r2
   189ec:	20400901 	subcs	r0, r0, r1, lsl #18
   189f0:	e1500881 	cmp	r0, r1, lsl #17
   189f4:	e0a22002 	adc	r2, r2, r2
   189f8:	20400881 	subcs	r0, r0, r1, lsl #17
   189fc:	e1500801 	cmp	r0, r1, lsl #16
   18a00:	e0a22002 	adc	r2, r2, r2
   18a04:	20400801 	subcs	r0, r0, r1, lsl #16
   18a08:	e1500781 	cmp	r0, r1, lsl #15
   18a0c:	e0a22002 	adc	r2, r2, r2
   18a10:	20400781 	subcs	r0, r0, r1, lsl #15
   18a14:	e1500701 	cmp	r0, r1, lsl #14
   18a18:	e0a22002 	adc	r2, r2, r2
   18a1c:	20400701 	subcs	r0, r0, r1, lsl #14
   18a20:	e1500681 	cmp	r0, r1, lsl #13
   18a24:	e0a22002 	adc	r2, r2, r2
   18a28:	20400681 	subcs	r0, r0, r1, lsl #13
   18a2c:	e1500601 	cmp	r0, r1, lsl #12
   18a30:	e0a22002 	adc	r2, r2, r2
   18a34:	20400601 	subcs	r0, r0, r1, lsl #12
   18a38:	e1500581 	cmp	r0, r1, lsl #11
   18a3c:	e0a22002 	adc	r2, r2, r2
   18a40:	20400581 	subcs	r0, r0, r1, lsl #11
   18a44:	e1500501 	cmp	r0, r1, lsl #10
   18a48:	e0a22002 	adc	r2, r2, r2
   18a4c:	20400501 	subcs	r0, r0, r1, lsl #10
   18a50:	e1500481 	cmp	r0, r1, lsl #9
   18a54:	e0a22002 	adc	r2, r2, r2
   18a58:	20400481 	subcs	r0, r0, r1, lsl #9
   18a5c:	e1500401 	cmp	r0, r1, lsl #8
   18a60:	e0a22002 	adc	r2, r2, r2
   18a64:	20400401 	subcs	r0, r0, r1, lsl #8
   18a68:	e1500381 	cmp	r0, r1, lsl #7
   18a6c:	e0a22002 	adc	r2, r2, r2
   18a70:	20400381 	subcs	r0, r0, r1, lsl #7
   18a74:	e1500301 	cmp	r0, r1, lsl #6
   18a78:	e0a22002 	adc	r2, r2, r2
   18a7c:	20400301 	subcs	r0, r0, r1, lsl #6
   18a80:	e1500281 	cmp	r0, r1, lsl #5
   18a84:	e0a22002 	adc	r2, r2, r2
   18a88:	20400281 	subcs	r0, r0, r1, lsl #5
   18a8c:	e1500201 	cmp	r0, r1, lsl #4
   18a90:	e0a22002 	adc	r2, r2, r2
   18a94:	20400201 	subcs	r0, r0, r1, lsl #4
   18a98:	e1500181 	cmp	r0, r1, lsl #3
   18a9c:	e0a22002 	adc	r2, r2, r2
   18aa0:	20400181 	subcs	r0, r0, r1, lsl #3
   18aa4:	e1500101 	cmp	r0, r1, lsl #2
   18aa8:	e0a22002 	adc	r2, r2, r2
   18aac:	20400101 	subcs	r0, r0, r1, lsl #2
   18ab0:	e1500081 	cmp	r0, r1, lsl #1
   18ab4:	e0a22002 	adc	r2, r2, r2
   18ab8:	20400081 	subcs	r0, r0, r1, lsl #1
   18abc:	e1500001 	cmp	r0, r1
   18ac0:	e0a22002 	adc	r2, r2, r2
   18ac4:	20400001 	subcs	r0, r0, r1
   18ac8:	e1a00002 	mov	r0, r2
   18acc:	e12fff1e 	bx	lr
   18ad0:	03a00001 	moveq	r0, #1, 0
   18ad4:	13a00000 	movne	r0, #0, 0
   18ad8:	e12fff1e 	bx	lr
   18adc:	e16f2f11 	clz	r2, r1
   18ae0:	e262201f 	rsb	r2, r2, #31, 0
   18ae4:	e1a00230 	lsr	r0, r0, r2
   18ae8:	e12fff1e 	bx	lr
   18aec:	e3500000 	cmp	r0, #0, 0
   18af0:	13e00000 	mvnne	r0, #0, 0
   18af4:	ea000097 	b	18d58 <__aeabi_idiv0>

00018af8 <__aeabi_uidivmod>:
   18af8:	e3510000 	cmp	r1, #0, 0
   18afc:	0afffffa 	beq	18aec <__udivsi3+0x1e0>
   18b00:	e92d4003 	push	{r0, r1, lr}
   18b04:	ebffff80 	bl	1890c <__udivsi3>
   18b08:	e8bd4006 	pop	{r1, r2, lr}
   18b0c:	e0030092 	mul	r3, r2, r0
   18b10:	e0411003 	sub	r1, r1, r3
   18b14:	e12fff1e 	bx	lr

00018b18 <__divsi3>:
   18b18:	e3510000 	cmp	r1, #0, 0
   18b1c:	0a000081 	beq	18d28 <.divsi3_skip_div0_test+0x208>

00018b20 <.divsi3_skip_div0_test>:
   18b20:	e020c001 	eor	ip, r0, r1
   18b24:	42611000 	rsbmi	r1, r1, #0, 0
   18b28:	e2512001 	subs	r2, r1, #1, 0
   18b2c:	0a000070 	beq	18cf4 <.divsi3_skip_div0_test+0x1d4>
   18b30:	e1b03000 	movs	r3, r0
   18b34:	42603000 	rsbmi	r3, r0, #0, 0
   18b38:	e1530001 	cmp	r3, r1
   18b3c:	9a00006f 	bls	18d00 <.divsi3_skip_div0_test+0x1e0>
   18b40:	e1110002 	tst	r1, r2
   18b44:	0a000071 	beq	18d10 <.divsi3_skip_div0_test+0x1f0>
   18b48:	e16f2f13 	clz	r2, r3
   18b4c:	e16f0f11 	clz	r0, r1
   18b50:	e0402002 	sub	r2, r0, r2
   18b54:	e272201f 	rsbs	r2, r2, #31, 0
   18b58:	10822082 	addne	r2, r2, r2, lsl #1
   18b5c:	e3a00000 	mov	r0, #0, 0
   18b60:	108ff102 	addne	pc, pc, r2, lsl #2
   18b64:	e1a00000 	nop			; (mov r0, r0)
   18b68:	e1530f81 	cmp	r3, r1, lsl #31
   18b6c:	e0a00000 	adc	r0, r0, r0
   18b70:	20433f81 	subcs	r3, r3, r1, lsl #31
   18b74:	e1530f01 	cmp	r3, r1, lsl #30
   18b78:	e0a00000 	adc	r0, r0, r0
   18b7c:	20433f01 	subcs	r3, r3, r1, lsl #30
   18b80:	e1530e81 	cmp	r3, r1, lsl #29
   18b84:	e0a00000 	adc	r0, r0, r0
   18b88:	20433e81 	subcs	r3, r3, r1, lsl #29
   18b8c:	e1530e01 	cmp	r3, r1, lsl #28
   18b90:	e0a00000 	adc	r0, r0, r0
   18b94:	20433e01 	subcs	r3, r3, r1, lsl #28
   18b98:	e1530d81 	cmp	r3, r1, lsl #27
   18b9c:	e0a00000 	adc	r0, r0, r0
   18ba0:	20433d81 	subcs	r3, r3, r1, lsl #27
   18ba4:	e1530d01 	cmp	r3, r1, lsl #26
   18ba8:	e0a00000 	adc	r0, r0, r0
   18bac:	20433d01 	subcs	r3, r3, r1, lsl #26
   18bb0:	e1530c81 	cmp	r3, r1, lsl #25
   18bb4:	e0a00000 	adc	r0, r0, r0
   18bb8:	20433c81 	subcs	r3, r3, r1, lsl #25
   18bbc:	e1530c01 	cmp	r3, r1, lsl #24
   18bc0:	e0a00000 	adc	r0, r0, r0
   18bc4:	20433c01 	subcs	r3, r3, r1, lsl #24
   18bc8:	e1530b81 	cmp	r3, r1, lsl #23
   18bcc:	e0a00000 	adc	r0, r0, r0
   18bd0:	20433b81 	subcs	r3, r3, r1, lsl #23
   18bd4:	e1530b01 	cmp	r3, r1, lsl #22
   18bd8:	e0a00000 	adc	r0, r0, r0
   18bdc:	20433b01 	subcs	r3, r3, r1, lsl #22
   18be0:	e1530a81 	cmp	r3, r1, lsl #21
   18be4:	e0a00000 	adc	r0, r0, r0
   18be8:	20433a81 	subcs	r3, r3, r1, lsl #21
   18bec:	e1530a01 	cmp	r3, r1, lsl #20
   18bf0:	e0a00000 	adc	r0, r0, r0
   18bf4:	20433a01 	subcs	r3, r3, r1, lsl #20
   18bf8:	e1530981 	cmp	r3, r1, lsl #19
   18bfc:	e0a00000 	adc	r0, r0, r0
   18c00:	20433981 	subcs	r3, r3, r1, lsl #19
   18c04:	e1530901 	cmp	r3, r1, lsl #18
   18c08:	e0a00000 	adc	r0, r0, r0
   18c0c:	20433901 	subcs	r3, r3, r1, lsl #18
   18c10:	e1530881 	cmp	r3, r1, lsl #17
   18c14:	e0a00000 	adc	r0, r0, r0
   18c18:	20433881 	subcs	r3, r3, r1, lsl #17
   18c1c:	e1530801 	cmp	r3, r1, lsl #16
   18c20:	e0a00000 	adc	r0, r0, r0
   18c24:	20433801 	subcs	r3, r3, r1, lsl #16
   18c28:	e1530781 	cmp	r3, r1, lsl #15
   18c2c:	e0a00000 	adc	r0, r0, r0
   18c30:	20433781 	subcs	r3, r3, r1, lsl #15
   18c34:	e1530701 	cmp	r3, r1, lsl #14
   18c38:	e0a00000 	adc	r0, r0, r0
   18c3c:	20433701 	subcs	r3, r3, r1, lsl #14
   18c40:	e1530681 	cmp	r3, r1, lsl #13
   18c44:	e0a00000 	adc	r0, r0, r0
   18c48:	20433681 	subcs	r3, r3, r1, lsl #13
   18c4c:	e1530601 	cmp	r3, r1, lsl #12
   18c50:	e0a00000 	adc	r0, r0, r0
   18c54:	20433601 	subcs	r3, r3, r1, lsl #12
   18c58:	e1530581 	cmp	r3, r1, lsl #11
   18c5c:	e0a00000 	adc	r0, r0, r0
   18c60:	20433581 	subcs	r3, r3, r1, lsl #11
   18c64:	e1530501 	cmp	r3, r1, lsl #10
   18c68:	e0a00000 	adc	r0, r0, r0
   18c6c:	20433501 	subcs	r3, r3, r1, lsl #10
   18c70:	e1530481 	cmp	r3, r1, lsl #9
   18c74:	e0a00000 	adc	r0, r0, r0
   18c78:	20433481 	subcs	r3, r3, r1, lsl #9
   18c7c:	e1530401 	cmp	r3, r1, lsl #8
   18c80:	e0a00000 	adc	r0, r0, r0
   18c84:	20433401 	subcs	r3, r3, r1, lsl #8
   18c88:	e1530381 	cmp	r3, r1, lsl #7
   18c8c:	e0a00000 	adc	r0, r0, r0
   18c90:	20433381 	subcs	r3, r3, r1, lsl #7
   18c94:	e1530301 	cmp	r3, r1, lsl #6
   18c98:	e0a00000 	adc	r0, r0, r0
   18c9c:	20433301 	subcs	r3, r3, r1, lsl #6
   18ca0:	e1530281 	cmp	r3, r1, lsl #5
   18ca4:	e0a00000 	adc	r0, r0, r0
   18ca8:	20433281 	subcs	r3, r3, r1, lsl #5
   18cac:	e1530201 	cmp	r3, r1, lsl #4
   18cb0:	e0a00000 	adc	r0, r0, r0
   18cb4:	20433201 	subcs	r3, r3, r1, lsl #4
   18cb8:	e1530181 	cmp	r3, r1, lsl #3
   18cbc:	e0a00000 	adc	r0, r0, r0
   18cc0:	20433181 	subcs	r3, r3, r1, lsl #3
   18cc4:	e1530101 	cmp	r3, r1, lsl #2
   18cc8:	e0a00000 	adc	r0, r0, r0
   18ccc:	20433101 	subcs	r3, r3, r1, lsl #2
   18cd0:	e1530081 	cmp	r3, r1, lsl #1
   18cd4:	e0a00000 	adc	r0, r0, r0
   18cd8:	20433081 	subcs	r3, r3, r1, lsl #1
   18cdc:	e1530001 	cmp	r3, r1
   18ce0:	e0a00000 	adc	r0, r0, r0
   18ce4:	20433001 	subcs	r3, r3, r1
   18ce8:	e35c0000 	cmp	ip, #0, 0
   18cec:	42600000 	rsbmi	r0, r0, #0, 0
   18cf0:	e12fff1e 	bx	lr
   18cf4:	e13c0000 	teq	ip, r0
   18cf8:	42600000 	rsbmi	r0, r0, #0, 0
   18cfc:	e12fff1e 	bx	lr
   18d00:	33a00000 	movcc	r0, #0, 0
   18d04:	01a00fcc 	asreq	r0, ip, #31
   18d08:	03800001 	orreq	r0, r0, #1, 0
   18d0c:	e12fff1e 	bx	lr
   18d10:	e16f2f11 	clz	r2, r1
   18d14:	e262201f 	rsb	r2, r2, #31, 0
   18d18:	e35c0000 	cmp	ip, #0, 0
   18d1c:	e1a00233 	lsr	r0, r3, r2
   18d20:	42600000 	rsbmi	r0, r0, #0, 0
   18d24:	e12fff1e 	bx	lr
   18d28:	e3500000 	cmp	r0, #0, 0
   18d2c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   18d30:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   18d34:	ea000007 	b	18d58 <__aeabi_idiv0>

00018d38 <__aeabi_idivmod>:
   18d38:	e3510000 	cmp	r1, #0, 0
   18d3c:	0afffff9 	beq	18d28 <.divsi3_skip_div0_test+0x208>
   18d40:	e92d4003 	push	{r0, r1, lr}
   18d44:	ebffff75 	bl	18b20 <.divsi3_skip_div0_test>
   18d48:	e8bd4006 	pop	{r1, r2, lr}
   18d4c:	e0030092 	mul	r3, r2, r0
   18d50:	e0411003 	sub	r1, r1, r3
   18d54:	e12fff1e 	bx	lr

00018d58 <__aeabi_idiv0>:
   18d58:	e12fff1e 	bx	lr

00018d5c <__aeabi_ldivmod>:
   18d5c:	e3530000 	cmp	r3, #0, 0
   18d60:	03520000 	cmpeq	r2, #0, 0
   18d64:	1a000007 	bne	18d88 <__aeabi_ldivmod+0x2c>
   18d68:	e3510000 	cmp	r1, #0, 0
   18d6c:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
   18d70:	b3a00000 	movlt	r0, #0, 0
   18d74:	ba000002 	blt	18d84 <__aeabi_ldivmod+0x28>
   18d78:	03500000 	cmpeq	r0, #0, 0
   18d7c:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
   18d80:	13e00000 	mvnne	r0, #0, 0
   18d84:	eafffff3 	b	18d58 <__aeabi_idiv0>
   18d88:	e24dd008 	sub	sp, sp, #8, 0
   18d8c:	e92d6000 	push	{sp, lr}
   18d90:	e3510000 	cmp	r1, #0, 0
   18d94:	ba000006 	blt	18db4 <__aeabi_ldivmod+0x58>
   18d98:	e3530000 	cmp	r3, #0, 0
   18d9c:	ba000011 	blt	18de8 <__aeabi_ldivmod+0x8c>
   18da0:	eb000031 	bl	18e6c <__udivmoddi4>
   18da4:	e59de004 	ldr	lr, [sp, #4]
   18da8:	e28dd008 	add	sp, sp, #8, 0
   18dac:	e8bd000c 	pop	{r2, r3}
   18db0:	e12fff1e 	bx	lr
   18db4:	e2700000 	rsbs	r0, r0, #0, 0
   18db8:	e0c11081 	sbc	r1, r1, r1, lsl #1
   18dbc:	e3530000 	cmp	r3, #0, 0
   18dc0:	ba000011 	blt	18e0c <__aeabi_ldivmod+0xb0>
   18dc4:	eb000028 	bl	18e6c <__udivmoddi4>
   18dc8:	e59de004 	ldr	lr, [sp, #4]
   18dcc:	e28dd008 	add	sp, sp, #8, 0
   18dd0:	e8bd000c 	pop	{r2, r3}
   18dd4:	e2700000 	rsbs	r0, r0, #0, 0
   18dd8:	e0c11081 	sbc	r1, r1, r1, lsl #1
   18ddc:	e2722000 	rsbs	r2, r2, #0, 0
   18de0:	e0c33083 	sbc	r3, r3, r3, lsl #1
   18de4:	e12fff1e 	bx	lr
   18de8:	e2722000 	rsbs	r2, r2, #0, 0
   18dec:	e0c33083 	sbc	r3, r3, r3, lsl #1
   18df0:	eb00001d 	bl	18e6c <__udivmoddi4>
   18df4:	e59de004 	ldr	lr, [sp, #4]
   18df8:	e28dd008 	add	sp, sp, #8, 0
   18dfc:	e8bd000c 	pop	{r2, r3}
   18e00:	e2700000 	rsbs	r0, r0, #0, 0
   18e04:	e0c11081 	sbc	r1, r1, r1, lsl #1
   18e08:	e12fff1e 	bx	lr
   18e0c:	e2722000 	rsbs	r2, r2, #0, 0
   18e10:	e0c33083 	sbc	r3, r3, r3, lsl #1
   18e14:	eb000014 	bl	18e6c <__udivmoddi4>
   18e18:	e59de004 	ldr	lr, [sp, #4]
   18e1c:	e28dd008 	add	sp, sp, #8, 0
   18e20:	e8bd000c 	pop	{r2, r3}
   18e24:	e2722000 	rsbs	r2, r2, #0, 0
   18e28:	e0c33083 	sbc	r3, r3, r3, lsl #1
   18e2c:	e12fff1e 	bx	lr

00018e30 <__aeabi_uldivmod>:
   18e30:	e3530000 	cmp	r3, #0, 0
   18e34:	03520000 	cmpeq	r2, #0, 0
   18e38:	1a000004 	bne	18e50 <__aeabi_uldivmod+0x20>
   18e3c:	e3510000 	cmp	r1, #0, 0
   18e40:	03500000 	cmpeq	r0, #0, 0
   18e44:	13e01000 	mvnne	r1, #0, 0
   18e48:	13e00000 	mvnne	r0, #0, 0
   18e4c:	eaffffc1 	b	18d58 <__aeabi_idiv0>
   18e50:	e24dd008 	sub	sp, sp, #8, 0
   18e54:	e92d6000 	push	{sp, lr}
   18e58:	eb000003 	bl	18e6c <__udivmoddi4>
   18e5c:	e59de004 	ldr	lr, [sp, #4]
   18e60:	e28dd008 	add	sp, sp, #8, 0
   18e64:	e8bd000c 	pop	{r2, r3}
   18e68:	e12fff1e 	bx	lr

00018e6c <__udivmoddi4>:
   18e6c:	e1510003 	cmp	r1, r3
   18e70:	01500002 	cmpeq	r0, r2
   18e74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e78:	e1a04000 	mov	r4, r0
   18e7c:	33a00000 	movcc	r0, #0, 0
   18e80:	e1a05001 	mov	r5, r1
   18e84:	e59dc020 	ldr	ip, [sp, #32]
   18e88:	31a01000 	movcc	r1, r0
   18e8c:	3a00003f 	bcc	18f90 <__udivmoddi4+0x124>
   18e90:	e1a06002 	mov	r6, r2
   18e94:	e3530000 	cmp	r3, #0, 0
   18e98:	116f2f13 	clzne	r2, r3
   18e9c:	016f2f16 	clzeq	r2, r6
   18ea0:	02822020 	addeq	r2, r2, #32, 0
   18ea4:	e3550000 	cmp	r5, #0, 0
   18ea8:	e1a07003 	mov	r7, r3
   18eac:	016f3f14 	clzeq	r3, r4
   18eb0:	02833020 	addeq	r3, r3, #32, 0
   18eb4:	116f3f15 	clzne	r3, r5
   18eb8:	e0422003 	sub	r2, r2, r3
   18ebc:	e1a09217 	lsl	r9, r7, r2
   18ec0:	e242a020 	sub	sl, r2, #32, 0
   18ec4:	e1899a16 	orr	r9, r9, r6, lsl sl
   18ec8:	e262e020 	rsb	lr, r2, #32, 0
   18ecc:	e1899e36 	orr	r9, r9, r6, lsr lr
   18ed0:	e1a08216 	lsl	r8, r6, r2
   18ed4:	e1550009 	cmp	r5, r9
   18ed8:	01540008 	cmpeq	r4, r8
   18edc:	33a00000 	movcc	r0, #0, 0
   18ee0:	31a01000 	movcc	r1, r0
   18ee4:	3a000005 	bcc	18f00 <__udivmoddi4+0x94>
   18ee8:	e3a00001 	mov	r0, #1, 0
   18eec:	e1a01a10 	lsl	r1, r0, sl
   18ef0:	e0544008 	subs	r4, r4, r8
   18ef4:	e1811e30 	orr	r1, r1, r0, lsr lr
   18ef8:	e1a00210 	lsl	r0, r0, r2
   18efc:	e0c55009 	sbc	r5, r5, r9
   18f00:	e3520000 	cmp	r2, #0, 0
   18f04:	0a000021 	beq	18f90 <__udivmoddi4+0x124>
   18f08:	e1a060a8 	lsr	r6, r8, #1
   18f0c:	e1866f89 	orr	r6, r6, r9, lsl #31
   18f10:	e1a070a9 	lsr	r7, r9, #1
   18f14:	e1a08002 	mov	r8, r2
   18f18:	ea000007 	b	18f3c <__udivmoddi4+0xd0>
   18f1c:	e0543006 	subs	r3, r4, r6
   18f20:	e0c59007 	sbc	r9, r5, r7
   18f24:	e0933003 	adds	r3, r3, r3
   18f28:	e0a99009 	adc	r9, r9, r9
   18f2c:	e2934001 	adds	r4, r3, #1, 0
   18f30:	e2a95000 	adc	r5, r9, #0, 0
   18f34:	e2588001 	subs	r8, r8, #1, 0
   18f38:	0a000006 	beq	18f58 <__udivmoddi4+0xec>
   18f3c:	e1550007 	cmp	r5, r7
   18f40:	01540006 	cmpeq	r4, r6
   18f44:	2afffff4 	bcs	18f1c <__udivmoddi4+0xb0>
   18f48:	e0944004 	adds	r4, r4, r4
   18f4c:	e0a55005 	adc	r5, r5, r5
   18f50:	e2588001 	subs	r8, r8, #1, 0
   18f54:	1afffff8 	bne	18f3c <__udivmoddi4+0xd0>
   18f58:	e1a03234 	lsr	r3, r4, r2
   18f5c:	e1833e15 	orr	r3, r3, r5, lsl lr
   18f60:	e1a06235 	lsr	r6, r5, r2
   18f64:	e1833a35 	orr	r3, r3, r5, lsr sl
   18f68:	e0900004 	adds	r0, r0, r4
   18f6c:	e1a04003 	mov	r4, r3
   18f70:	e1a03216 	lsl	r3, r6, r2
   18f74:	e1833a14 	orr	r3, r3, r4, lsl sl
   18f78:	e1a02214 	lsl	r2, r4, r2
   18f7c:	e1833e34 	orr	r3, r3, r4, lsr lr
   18f80:	e0a11005 	adc	r1, r1, r5
   18f84:	e0500002 	subs	r0, r0, r2
   18f88:	e1a05006 	mov	r5, r6
   18f8c:	e0c11003 	sbc	r1, r1, r3
   18f90:	e35c0000 	cmp	ip, #0, 0
   18f94:	11cc40f0 	strdne	r4, [ip]
   18f98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00018f9c <malloc>:
   18f9c:	e59f300c 	ldr	r3, [pc, #12]	; 18fb0 <malloc+0x14>
   18fa0:	e1a01000 	mov	r1, r0
   18fa4:	e5930000 	ldr	r0, [r3]
   18fa8:	e280000c 	add	r0, r0, #12, 0
   18fac:	eaffde1f 	b	10830 <CHeapAllocator::Allocate(unsigned int)>
   18fb0:	0001cc88 	.word	0x0001cc88

00018fb4 <free>:
   18fb4:	e59f300c 	ldr	r3, [pc, #12]	; 18fc8 <free+0x14>
   18fb8:	e1a01000 	mov	r1, r0
   18fbc:	e5930000 	ldr	r0, [r3]
   18fc0:	e280000c 	add	r0, r0, #12, 0
   18fc4:	eaffde96 	b	10a24 <CHeapAllocator::Free(void*)>
   18fc8:	0001cc88 	.word	0x0001cc88

00018fcc <calloc>:
   18fcc:	e0010190 	mul	r1, r0, r1
   18fd0:	e3510001 	cmp	r1, #1, 0
   18fd4:	e92d4070 	push	{r4, r5, r6, lr}
   18fd8:	21a04001 	movcs	r4, r1
   18fdc:	33a04001 	movcc	r4, #1, 0
   18fe0:	e1500004 	cmp	r0, r4
   18fe4:	8a00000b 	bhi	19018 <calloc+0x4c>
   18fe8:	e59f3038 	ldr	r3, [pc, #56]	; 19028 <calloc+0x5c>
   18fec:	e1a01004 	mov	r1, r4
   18ff0:	e5930000 	ldr	r0, [r3]
   18ff4:	e280000c 	add	r0, r0, #12, 0
   18ff8:	ebffde0c 	bl	10830 <CHeapAllocator::Allocate(unsigned int)>
   18ffc:	e2505000 	subs	r5, r0, #0, 0
   19000:	0a000002 	beq	19010 <calloc+0x44>
   19004:	e1a02004 	mov	r2, r4
   19008:	e3a01000 	mov	r1, #0, 0
   1900c:	ebffda7e 	bl	fa0c <memset>
   19010:	e1a00005 	mov	r0, r5
   19014:	e8bd8070 	pop	{r4, r5, r6, pc}
   19018:	e59f100c 	ldr	r1, [pc, #12]	; 1902c <calloc+0x60>
   1901c:	e3a0202b 	mov	r2, #43, 0	; 0x2b
   19020:	e281000c 	add	r0, r1, #12, 0
   19024:	ebffe2b7 	bl	11b08 <assertion_failed>
   19028:	0001cc88 	.word	0x0001cc88
   1902c:	0001c7d0 	.word	0x0001c7d0

00019030 <realloc>:
   19030:	e59f3010 	ldr	r3, [pc, #16]	; 19048 <realloc+0x18>
   19034:	e1a02001 	mov	r2, r1
   19038:	e5933000 	ldr	r3, [r3]
   1903c:	e1a01000 	mov	r1, r0
   19040:	e283000c 	add	r0, r3, #12, 0
   19044:	eaffdeb9 	b	10b30 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   19048:	0001cc88 	.word	0x0001cc88

0001904c <palloc>:
   1904c:	e59f3008 	ldr	r3, [pc, #8]	; 1905c <palloc+0x10>
   19050:	e5930000 	ldr	r0, [r3]
   19054:	e28000c8 	add	r0, r0, #200, 0	; 0xc8
   19058:	eaffea73 	b	13a2c <CPageAllocator::Allocate()>
   1905c:	0001cc88 	.word	0x0001cc88

00019060 <pfree>:
   19060:	e59f300c 	ldr	r3, [pc, #12]	; 19074 <pfree+0x14>
   19064:	e1a01000 	mov	r1, r0
   19068:	e5930000 	ldr	r0, [r3]
   1906c:	e28000c8 	add	r0, r0, #200, 0	; 0xc8
   19070:	eaffea9f 	b	13af4 <CPageAllocator::Free(void*)>
   19074:	0001cc88 	.word	0x0001cc88

00019078 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   19078:	e92d4010 	push	{r4, lr}
   1907c:	e1a04000 	mov	r4, r0
   19080:	e4801004 	str	r1, [r0], #4
   19084:	e1a01002 	mov	r1, r2
   19088:	ebffd169 	bl	d634 <CString::CString(char const*)>
   1908c:	e3a03000 	mov	r3, #0, 0
   19090:	e1a00004 	mov	r0, r4
   19094:	e5843014 	str	r3, [r4, #20]
   19098:	e5843018 	str	r3, [r4, #24]
   1909c:	e584301c 	str	r3, [r4, #28]
   190a0:	e5843020 	str	r3, [r4, #32]
   190a4:	e8bd8010 	pop	{r4, pc}

000190a8 <CPartitionManager::~CPartitionManager()>:
   190a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190ac:	e1a06000 	mov	r6, r0
   190b0:	e3a07000 	mov	r7, #0, 0
   190b4:	e59fa0ac 	ldr	sl, [pc, #172]	; 19168 <CPartitionManager::~CPartitionManager()+0xc0>
   190b8:	e24dd010 	sub	sp, sp, #16, 0
   190bc:	e2809004 	add	r9, r0, #4, 0
   190c0:	e2804014 	add	r4, r0, #20, 0
   190c4:	e2808024 	add	r8, r0, #36, 0	; 0x24
   190c8:	e4943004 	ldr	r3, [r4], #4
   190cc:	e3530000 	cmp	r3, #0, 0
   190d0:	0a00001b 	beq	19144 <CPartitionManager::~CPartitionManager()+0x9c>
   190d4:	e1a0000d 	mov	r0, sp
   190d8:	ebffd14f 	bl	d61c <CString::CString()>
   190dc:	e1a00009 	mov	r0, r9
   190e0:	ebffd165 	bl	d67c <CString::operator char const*() const>
   190e4:	e2877001 	add	r7, r7, #1, 0
   190e8:	e1a02000 	mov	r2, r0
   190ec:	e1a03007 	mov	r3, r7
   190f0:	e1a0100a 	mov	r1, sl
   190f4:	e1a0000d 	mov	r0, sp
   190f8:	ebffd68d 	bl	eb34 <CString::Format(char const*, ...)>
   190fc:	ebffbf81 	bl	8f08 <CDeviceNameService::Get()>
   19100:	e1a05000 	mov	r5, r0
   19104:	e1a0000d 	mov	r0, sp
   19108:	ebffd15b 	bl	d67c <CString::operator char const*() const>
   1910c:	e3a02001 	mov	r2, #1, 0
   19110:	e1a01000 	mov	r1, r0
   19114:	e1a00005 	mov	r0, r5
   19118:	ebffbef7 	bl	8cfc <CDeviceNameService::RemoveDevice(char const*, bool)>
   1911c:	e5140004 	ldr	r0, [r4, #-4]
   19120:	e3500000 	cmp	r0, #0, 0
   19124:	0a000002 	beq	19134 <CPartitionManager::~CPartitionManager()+0x8c>
   19128:	e5903000 	ldr	r3, [r0]
   1912c:	e5933004 	ldr	r3, [r3, #4]
   19130:	e12fff33 	blx	r3
   19134:	e3a03000 	mov	r3, #0, 0
   19138:	e1a0000d 	mov	r0, sp
   1913c:	e5043004 	str	r3, [r4, #-4]
   19140:	ebffd102 	bl	d550 <CString::~CString()>
   19144:	e1540008 	cmp	r4, r8
   19148:	1affffde 	bne	190c8 <CPartitionManager::~CPartitionManager()+0x20>
   1914c:	e3a03000 	mov	r3, #0, 0
   19150:	e1a00009 	mov	r0, r9
   19154:	e5863000 	str	r3, [r6]
   19158:	ebffd0fc 	bl	d550 <CString::~CString()>
   1915c:	e1a00006 	mov	r0, r6
   19160:	e28dd010 	add	sp, sp, #16, 0
   19164:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19168:	0001c7f0 	.word	0x0001c7f0

0001916c <CPartitionManager::Initialize()>:
   1916c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19170:	e1a05000 	mov	r5, r0
   19174:	e5900000 	ldr	r0, [r0]
   19178:	e3a03000 	mov	r3, #0, 0
   1917c:	e5901000 	ldr	r1, [r0]
   19180:	e3a02000 	mov	r2, #0, 0
   19184:	e5911010 	ldr	r1, [r1, #16]
   19188:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   1918c:	e12fff31 	blx	r1
   19190:	e1903001 	orrs	r3, r0, r1
   19194:	1a00002c 	bne	1924c <CPartitionManager::Initialize()+0xe0>
   19198:	e5950000 	ldr	r0, [r5]
   1919c:	e3a02c02 	mov	r2, #512	; 0x200
   191a0:	e5903000 	ldr	r3, [r0]
   191a4:	e28d1018 	add	r1, sp, #24, 0
   191a8:	e5933008 	ldr	r3, [r3, #8]
   191ac:	e12fff33 	blx	r3
   191b0:	e3500c02 	cmp	r0, #512	; 0x200
   191b4:	1a000024 	bne	1924c <CPartitionManager::Initialize()+0xe0>
   191b8:	e28d3f85 	add	r3, sp, #532	; 0x214
   191bc:	e2833002 	add	r3, r3, #2, 0
   191c0:	e1d320b0 	ldrh	r2, [r3]
   191c4:	e59f31a4 	ldr	r3, [pc, #420]	; 19370 <CPartitionManager::Initialize()+0x204>
   191c8:	e1520003 	cmp	r2, r3
   191cc:	1a00005b 	bne	19340 <CPartitionManager::Initialize()+0x1d4>
   191d0:	e3a04000 	mov	r4, #0, 0
   191d4:	e1a06004 	mov	r6, r4
   191d8:	e59f8194 	ldr	r8, [pc, #404]	; 19374 <CPartitionManager::Initialize()+0x208>
   191dc:	e2857014 	add	r7, r5, #20, 0
   191e0:	e28d3018 	add	r3, sp, #24, 0
   191e4:	e0833204 	add	r3, r3, r4, lsl #4
   191e8:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   191ec:	e2423005 	sub	r3, r2, #5, 0
   191f0:	e16f3f13 	clz	r3, r3
   191f4:	e3520000 	cmp	r2, #0, 0
   191f8:	e1a032a3 	lsr	r3, r3, #5
   191fc:	03a03001 	moveq	r3, #1, 0
   19200:	e352000f 	cmp	r2, #15, 0
   19204:	03833001 	orreq	r3, r3, #1, 0
   19208:	e35200ef 	cmp	r2, #239, 0	; 0xef
   1920c:	03833001 	orreq	r3, r3, #1, 0
   19210:	e3530000 	cmp	r3, #0, 0
   19214:	0a000014 	beq	1926c <CPartitionManager::Initialize()+0x100>
   19218:	e2844001 	add	r4, r4, #1, 0
   1921c:	e3540004 	cmp	r4, #4, 0
   19220:	1affffee 	bne	191e0 <CPartitionManager::Initialize()+0x74>
   19224:	e3560000 	cmp	r6, #0, 0
   19228:	13a00001 	movne	r0, #1, 0
   1922c:	1a00000c 	bne	19264 <CPartitionManager::Initialize()+0xf8>
   19230:	ebffc55a 	bl	a7a0 <CLogger::Get()>
   19234:	e3a02002 	mov	r2, #2, 0
   19238:	e59f3138 	ldr	r3, [pc, #312]	; 19378 <CPartitionManager::Initialize()+0x20c>
   1923c:	e59f1138 	ldr	r1, [pc, #312]	; 1937c <CPartitionManager::Initialize()+0x210>
   19240:	ebffc498 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19244:	e3a00001 	mov	r0, #1, 0
   19248:	ea000005 	b	19264 <CPartitionManager::Initialize()+0xf8>
   1924c:	ebffc553 	bl	a7a0 <CLogger::Get()>
   19250:	e3a02001 	mov	r2, #1, 0
   19254:	e59f3124 	ldr	r3, [pc, #292]	; 19380 <CPartitionManager::Initialize()+0x214>
   19258:	e59f111c 	ldr	r1, [pc, #284]	; 1937c <CPartitionManager::Initialize()+0x210>
   1925c:	ebffc491 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19260:	e3a00000 	mov	r0, #0, 0
   19264:	e28ddf87 	add	sp, sp, #540	; 0x21c
   19268:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1926c:	e28d3f86 	add	r3, sp, #536	; 0x218
   19270:	e284901c 	add	r9, r4, #28, 0
   19274:	e0839209 	add	r9, r3, r9, lsl #4
   19278:	e2491f7e 	sub	r1, r9, #504	; 0x1f8
   1927c:	e15130b2 	ldrh	r3, [r1, #-2]
   19280:	e1d120b0 	ldrh	r2, [r1]
   19284:	e1933802 	orrs	r3, r3, r2, lsl #16
   19288:	0affffe2 	beq	19218 <CPartitionManager::Initialize()+0xac>
   1928c:	e2499f7d 	sub	r9, r9, #500	; 0x1f4
   19290:	e15930b2 	ldrh	r3, [r9, #-2]
   19294:	e1d920b0 	ldrh	r2, [r9]
   19298:	e1933802 	orrs	r3, r3, r2, lsl #16
   1929c:	0affffdd 	beq	19218 <CPartitionManager::Initialize()+0xac>
   192a0:	e7973104 	ldr	r3, [r7, r4, lsl #2]
   192a4:	e3530000 	cmp	r3, #0, 0
   192a8:	1a00002c 	bne	19360 <CPartitionManager::Initialize()+0x1f4>
   192ac:	e3a00020 	mov	r0, #32, 0
   192b0:	e58d1004 	str	r1, [sp, #4]
   192b4:	ebffdd29 	bl	10760 <operator new(unsigned int)>
   192b8:	e1a0a005 	mov	sl, r5
   192bc:	e1a0b000 	mov	fp, r0
   192c0:	e59d1004 	ldr	r1, [sp, #4]
   192c4:	e1d9e0b0 	ldrh	lr, [r9]
   192c8:	e1d1c0b0 	ldrh	ip, [r1]
   192cc:	e15930b2 	ldrh	r3, [r9, #-2]
   192d0:	e15120b2 	ldrh	r2, [r1, #-2]
   192d4:	e183380e 	orr	r3, r3, lr, lsl #16
   192d8:	e182280c 	orr	r2, r2, ip, lsl #16
   192dc:	e49a1004 	ldr	r1, [sl], #4
   192e0:	eb0000bf 	bl	195e4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   192e4:	e787b104 	str	fp, [r7, r4, lsl #2]
   192e8:	e28d0008 	add	r0, sp, #8, 0
   192ec:	ebffd0ca 	bl	d61c <CString::CString()>
   192f0:	e1a0000a 	mov	r0, sl
   192f4:	ebffd0e0 	bl	d67c <CString::operator char const*() const>
   192f8:	e2866001 	add	r6, r6, #1, 0
   192fc:	e1a02000 	mov	r2, r0
   19300:	e1a03006 	mov	r3, r6
   19304:	e1a01008 	mov	r1, r8
   19308:	e28d0008 	add	r0, sp, #8, 0
   1930c:	ebffd608 	bl	eb34 <CString::Format(char const*, ...)>
   19310:	ebffbefc 	bl	8f08 <CDeviceNameService::Get()>
   19314:	e1a09000 	mov	r9, r0
   19318:	e28d0008 	add	r0, sp, #8, 0
   1931c:	ebffd0d6 	bl	d67c <CString::operator char const*() const>
   19320:	e3a03001 	mov	r3, #1, 0
   19324:	e1a01000 	mov	r1, r0
   19328:	e7972104 	ldr	r2, [r7, r4, lsl #2]
   1932c:	e1a00009 	mov	r0, r9
   19330:	ebffbe44 	bl	8c48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19334:	e28d0008 	add	r0, sp, #8, 0
   19338:	ebffd084 	bl	d550 <CString::~CString()>
   1933c:	eaffffb5 	b	19218 <CPartitionManager::Initialize()+0xac>
   19340:	ebffc516 	bl	a7a0 <CLogger::Get()>
   19344:	e3a02002 	mov	r2, #2, 0
   19348:	e59f3034 	ldr	r3, [pc, #52]	; 19384 <CPartitionManager::Initialize()+0x218>
   1934c:	e59f1028 	ldr	r1, [pc, #40]	; 1937c <CPartitionManager::Initialize()+0x210>
   19350:	ebffc454 	bl	a4a8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19354:	e3a00001 	mov	r0, #1, 0
   19358:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1935c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19360:	e3a02078 	mov	r2, #120, 0	; 0x78
   19364:	e59f101c 	ldr	r1, [pc, #28]	; 19388 <CPartitionManager::Initialize()+0x21c>
   19368:	e59f001c 	ldr	r0, [pc, #28]	; 1938c <CPartitionManager::Initialize()+0x220>
   1936c:	ebffe1e5 	bl	11b08 <assertion_failed>
   19370:	0000aa55 	.word	0x0000aa55
   19374:	0001c7f0 	.word	0x0001c7f0
   19378:	0001c84c 	.word	0x0001c84c
   1937c:	0001c870 	.word	0x0001c870
   19380:	0001c7f8 	.word	0x0001c7f8
   19384:	0001c808 	.word	0x0001c808
   19388:	0001c81c 	.word	0x0001c81c
   1938c:	0001c834 	.word	0x0001c834

00019390 <CPartition::~CPartition()>:
   19390:	e3a02000 	mov	r2, #0, 0
   19394:	e92d4010 	push	{r4, lr}
   19398:	e1a04000 	mov	r4, r0
   1939c:	e59f3010 	ldr	r3, [pc, #16]	; 193b4 <CPartition::~CPartition()+0x24>
   193a0:	e5802004 	str	r2, [r0, #4]
   193a4:	e5803000 	str	r3, [r0]
   193a8:	ebffe455 	bl	12504 <CDevice::~CDevice()>
   193ac:	e1a00004 	mov	r0, r4
   193b0:	e8bd8010 	pop	{r4, pc}
   193b4:	0001c8a0 	.word	0x0001c8a0

000193b8 <CPartition::~CPartition()>:
   193b8:	e3a02000 	mov	r2, #0, 0
   193bc:	e92d4010 	push	{r4, lr}
   193c0:	e1a04000 	mov	r4, r0
   193c4:	e59f301c 	ldr	r3, [pc, #28]	; 193e8 <CPartition::~CPartition()+0x30>
   193c8:	e5802004 	str	r2, [r0, #4]
   193cc:	e5803000 	str	r3, [r0]
   193d0:	ebffe44b 	bl	12504 <CDevice::~CDevice()>
   193d4:	e1a00004 	mov	r0, r4
   193d8:	e3a01020 	mov	r1, #32, 0
   193dc:	ebffdced 	bl	10798 <operator delete(void*, unsigned int)>
   193e0:	e1a00004 	mov	r0, r4
   193e4:	e8bd8010 	pop	{r4, pc}
   193e8:	0001c8a0 	.word	0x0001c8a0

000193ec <CPartition::Read(void*, unsigned int)>:
   193ec:	e5d0c018 	ldrb	ip, [r0, #24]
   193f0:	e35c0000 	cmp	ip, #0, 0
   193f4:	1a00001d 	bne	19470 <CPartition::Read(void*, unsigned int)+0x84>
   193f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193fc:	e3a05000 	mov	r5, #0, 0
   19400:	e3a09000 	mov	r9, #0, 0
   19404:	e59f406c 	ldr	r4, [pc, #108]	; 19478 <CPartition::Read(void*, unsigned int)+0x8c>
   19408:	e590c010 	ldr	ip, [r0, #16]
   1940c:	e0944002 	adds	r4, r4, r2
   19410:	e5903014 	ldr	r3, [r0, #20]
   19414:	e2a55000 	adc	r5, r5, #0, 0
   19418:	e094c00c 	adds	ip, r4, ip
   1941c:	e0a53003 	adc	r3, r5, r3
   19420:	e590800c 	ldr	r8, [r0, #12]
   19424:	e1a064ac 	lsr	r6, ip, #9
   19428:	e1a074a3 	lsr	r7, r3, #9
   1942c:	e1866b83 	orr	r6, r6, r3, lsl #23
   19430:	e1590007 	cmp	r9, r7
   19434:	01580006 	cmpeq	r8, r6
   19438:	3a00000a 	bcc	19468 <CPartition::Read(void*, unsigned int)+0x7c>
   1943c:	e5900004 	ldr	r0, [r0, #4]
   19440:	e3500000 	cmp	r0, #0, 0
   19444:	0a000003 	beq	19458 <CPartition::Read(void*, unsigned int)+0x6c>
   19448:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1944c:	e5903000 	ldr	r3, [r0]
   19450:	e5933008 	ldr	r3, [r3, #8]
   19454:	e12fff13 	bx	r3
   19458:	e3a02035 	mov	r2, #53, 0	; 0x35
   1945c:	e59f1018 	ldr	r1, [pc, #24]	; 1947c <CPartition::Read(void*, unsigned int)+0x90>
   19460:	e59f0018 	ldr	r0, [pc, #24]	; 19480 <CPartition::Read(void*, unsigned int)+0x94>
   19464:	ebffe1a7 	bl	11b08 <assertion_failed>
   19468:	e3e00000 	mvn	r0, #0, 0
   1946c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19470:	e3e00000 	mvn	r0, #0, 0
   19474:	e12fff1e 	bx	lr
   19478:	000001ff 	.word	0x000001ff
   1947c:	0001c878 	.word	0x0001c878
   19480:	0001c888 	.word	0x0001c888

00019484 <CPartition::Write(void const*, unsigned int)>:
   19484:	e5d0c018 	ldrb	ip, [r0, #24]
   19488:	e35c0000 	cmp	ip, #0, 0
   1948c:	1a00001d 	bne	19508 <CPartition::Write(void const*, unsigned int)+0x84>
   19490:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19494:	e3a05000 	mov	r5, #0, 0
   19498:	e3a09000 	mov	r9, #0, 0
   1949c:	e59f406c 	ldr	r4, [pc, #108]	; 19510 <CPartition::Write(void const*, unsigned int)+0x8c>
   194a0:	e590c010 	ldr	ip, [r0, #16]
   194a4:	e0944002 	adds	r4, r4, r2
   194a8:	e5903014 	ldr	r3, [r0, #20]
   194ac:	e2a55000 	adc	r5, r5, #0, 0
   194b0:	e094c00c 	adds	ip, r4, ip
   194b4:	e0a53003 	adc	r3, r5, r3
   194b8:	e590800c 	ldr	r8, [r0, #12]
   194bc:	e1a064ac 	lsr	r6, ip, #9
   194c0:	e1a074a3 	lsr	r7, r3, #9
   194c4:	e1866b83 	orr	r6, r6, r3, lsl #23
   194c8:	e1590007 	cmp	r9, r7
   194cc:	01580006 	cmpeq	r8, r6
   194d0:	3a00000a 	bcc	19500 <CPartition::Write(void const*, unsigned int)+0x7c>
   194d4:	e5900004 	ldr	r0, [r0, #4]
   194d8:	e3500000 	cmp	r0, #0, 0
   194dc:	0a000003 	beq	194f0 <CPartition::Write(void const*, unsigned int)+0x6c>
   194e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   194e4:	e5903000 	ldr	r3, [r0]
   194e8:	e593300c 	ldr	r3, [r3, #12]
   194ec:	e12fff13 	bx	r3
   194f0:	e3a02047 	mov	r2, #71, 0	; 0x47
   194f4:	e59f1018 	ldr	r1, [pc, #24]	; 19514 <CPartition::Write(void const*, unsigned int)+0x90>
   194f8:	e59f0018 	ldr	r0, [pc, #24]	; 19518 <CPartition::Write(void const*, unsigned int)+0x94>
   194fc:	ebffe181 	bl	11b08 <assertion_failed>
   19500:	e3e00000 	mvn	r0, #0, 0
   19504:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19508:	e3e00000 	mvn	r0, #0, 0
   1950c:	e12fff1e 	bx	lr
   19510:	000001ff 	.word	0x000001ff
   19514:	0001c878 	.word	0x0001c878
   19518:	0001c888 	.word	0x0001c888

0001951c <CPartition::Seek(unsigned long long)>:
   1951c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19520:	e3a0b000 	mov	fp, #0, 0
   19524:	e1a0500b 	mov	r5, fp
   19528:	e1a04b82 	lsl	r4, r2, #23
   1952c:	e1a06002 	mov	r6, r2
   19530:	e3a02001 	mov	r2, #1, 0
   19534:	e1a04ba4 	lsr	r4, r4, #23
   19538:	e1941005 	orrs	r1, r4, r5
   1953c:	e5c02018 	strb	r2, [r0, #24]
   19540:	1a00001e 	bne	195c0 <CPartition::Seek(unsigned long long)+0xa4>
   19544:	e1a0a003 	mov	sl, r3
   19548:	e3a03000 	mov	r3, #0, 0
   1954c:	e590200c 	ldr	r2, [r0, #12]
   19550:	e1a044a6 	lsr	r4, r6, #9
   19554:	e1a054aa 	lsr	r5, sl, #9
   19558:	e1844b8a 	orr	r4, r4, sl, lsl #23
   1955c:	e1550003 	cmp	r5, r3
   19560:	01540002 	cmpeq	r4, r2
   19564:	e1a07000 	mov	r7, r0
   19568:	2a000014 	bcs	195c0 <CPartition::Seek(unsigned long long)+0xa4>
   1956c:	e9900009 	ldmib	r0, {r0, r3}
   19570:	e1a02483 	lsl	r2, r3, #9
   19574:	e0968002 	adds	r8, r6, r2
   19578:	e1a03ba3 	lsr	r3, r3, #23
   1957c:	e0aa9003 	adc	r9, sl, r3
   19580:	e3500000 	cmp	r0, #0, 0
   19584:	0a000010 	beq	195cc <CPartition::Seek(unsigned long long)+0xb0>
   19588:	e5903000 	ldr	r3, [r0]
   1958c:	e1a02008 	mov	r2, r8
   19590:	e5931010 	ldr	r1, [r3, #16]
   19594:	e1a03009 	mov	r3, r9
   19598:	e12fff31 	blx	r1
   1959c:	e1510009 	cmp	r1, r9
   195a0:	01500008 	cmpeq	r0, r8
   195a4:	1a000005 	bne	195c0 <CPartition::Seek(unsigned long long)+0xa4>
   195a8:	e1a00006 	mov	r0, r6
   195ac:	e1a0100a 	mov	r1, sl
   195b0:	e5876010 	str	r6, [r7, #16]
   195b4:	e587a014 	str	sl, [r7, #20]
   195b8:	e5c7b018 	strb	fp, [r7, #24]
   195bc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c0:	e3e00000 	mvn	r0, #0, 0
   195c4:	e1a01000 	mov	r1, r0
   195c8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195cc:	e3a02059 	mov	r2, #89, 0	; 0x59
   195d0:	e59f1004 	ldr	r1, [pc, #4]	; 195dc <CPartition::Seek(unsigned long long)+0xc0>
   195d4:	e59f0004 	ldr	r0, [pc, #4]	; 195e0 <CPartition::Seek(unsigned long long)+0xc4>
   195d8:	ebffe14a 	bl	11b08 <assertion_failed>
   195dc:	0001c878 	.word	0x0001c878
   195e0:	0001c888 	.word	0x0001c888

000195e4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   195e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   195e8:	e1a05001 	mov	r5, r1
   195ec:	e1a04000 	mov	r4, r0
   195f0:	e1a07002 	mov	r7, r2
   195f4:	e1a06003 	mov	r6, r3
   195f8:	ebffe3cf 	bl	1253c <CDevice::CDevice()>
   195fc:	e3a03001 	mov	r3, #1, 0
   19600:	e3a00000 	mov	r0, #0, 0
   19604:	e3a01000 	mov	r1, #0, 0
   19608:	e59f2030 	ldr	r2, [pc, #48]	; 19640 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   1960c:	e3550000 	cmp	r5, #0, 0
   19610:	e98400a0 	stmib	r4, {r5, r7}
   19614:	e1c401f0 	strd	r0, [r4, #16]
   19618:	e584600c 	str	r6, [r4, #12]
   1961c:	e5842000 	str	r2, [r4]
   19620:	e5c43018 	strb	r3, [r4, #24]
   19624:	0a000001 	beq	19630 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   19628:	e1a00004 	mov	r0, r4
   1962c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19630:	e3a0201f 	mov	r2, #31, 0
   19634:	e59f1008 	ldr	r1, [pc, #8]	; 19644 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   19638:	e59f0008 	ldr	r0, [pc, #8]	; 19648 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   1963c:	ebffe131 	bl	11b08 <assertion_failed>
   19640:	0001c8a0 	.word	0x0001c8a0
   19644:	0001c878 	.word	0x0001c878
   19648:	0001c888 	.word	0x0001c888
